
loraTransmitterFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f60  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006230  08006230  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006238  08006238  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800623c  0800623c  0001623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000010  08006250  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08006250  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba20  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022af  00000000  00000000  0002baa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  0002dd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081e  00000000  00000000  0002e7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000164f9  00000000  00000000  0002f00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f129  00000000  00000000  00045507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087a06  00000000  00000000  00054630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002bd0  00000000  00000000  000dc038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000dec08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080060e0 	.word	0x080060e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080060e0 	.word	0x080060e0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_ldivmod>:
 8000a14:	b97b      	cbnz	r3, 8000a36 <__aeabi_ldivmod+0x22>
 8000a16:	b972      	cbnz	r2, 8000a36 <__aeabi_ldivmod+0x22>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bfbe      	ittt	lt
 8000a1c:	2000      	movlt	r0, #0
 8000a1e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a22:	e006      	blt.n	8000a32 <__aeabi_ldivmod+0x1e>
 8000a24:	bf08      	it	eq
 8000a26:	2800      	cmpeq	r0, #0
 8000a28:	bf1c      	itt	ne
 8000a2a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a2e:	f04f 30ff 	movne.w	r0, #4294967295
 8000a32:	f000 b9bb 	b.w	8000dac <__aeabi_idiv0>
 8000a36:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a3a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3e:	2900      	cmp	r1, #0
 8000a40:	db09      	blt.n	8000a56 <__aeabi_ldivmod+0x42>
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db1a      	blt.n	8000a7c <__aeabi_ldivmod+0x68>
 8000a46:	f000 f84d 	bl	8000ae4 <__udivmoddi4>
 8000a4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a52:	b004      	add	sp, #16
 8000a54:	4770      	bx	lr
 8000a56:	4240      	negs	r0, r0
 8000a58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db1b      	blt.n	8000a98 <__aeabi_ldivmod+0x84>
 8000a60:	f000 f840 	bl	8000ae4 <__udivmoddi4>
 8000a64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4240      	negs	r0, r0
 8000a70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a74:	4252      	negs	r2, r2
 8000a76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a7a:	4770      	bx	lr
 8000a7c:	4252      	negs	r2, r2
 8000a7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a82:	f000 f82f 	bl	8000ae4 <__udivmoddi4>
 8000a86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a8e:	b004      	add	sp, #16
 8000a90:	4240      	negs	r0, r0
 8000a92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a96:	4770      	bx	lr
 8000a98:	4252      	negs	r2, r2
 8000a9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a9e:	f000 f821 	bl	8000ae4 <__udivmoddi4>
 8000aa2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aaa:	b004      	add	sp, #16
 8000aac:	4252      	negs	r2, r2
 8000aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b970 	b.w	8000dac <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	9e08      	ldr	r6, [sp, #32]
 8000aea:	460d      	mov	r5, r1
 8000aec:	4604      	mov	r4, r0
 8000aee:	460f      	mov	r7, r1
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d14a      	bne.n	8000b8a <__udivmoddi4+0xa6>
 8000af4:	428a      	cmp	r2, r1
 8000af6:	4694      	mov	ip, r2
 8000af8:	d965      	bls.n	8000bc6 <__udivmoddi4+0xe2>
 8000afa:	fab2 f382 	clz	r3, r2
 8000afe:	b143      	cbz	r3, 8000b12 <__udivmoddi4+0x2e>
 8000b00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b04:	f1c3 0220 	rsb	r2, r3, #32
 8000b08:	409f      	lsls	r7, r3
 8000b0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b0e:	4317      	orrs	r7, r2
 8000b10:	409c      	lsls	r4, r3
 8000b12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b16:	fa1f f58c 	uxth.w	r5, ip
 8000b1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b1e:	0c22      	lsrs	r2, r4, #16
 8000b20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b28:	fb01 f005 	mul.w	r0, r1, r5
 8000b2c:	4290      	cmp	r0, r2
 8000b2e:	d90a      	bls.n	8000b46 <__udivmoddi4+0x62>
 8000b30:	eb1c 0202 	adds.w	r2, ip, r2
 8000b34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b38:	f080 811c 	bcs.w	8000d74 <__udivmoddi4+0x290>
 8000b3c:	4290      	cmp	r0, r2
 8000b3e:	f240 8119 	bls.w	8000d74 <__udivmoddi4+0x290>
 8000b42:	3902      	subs	r1, #2
 8000b44:	4462      	add	r2, ip
 8000b46:	1a12      	subs	r2, r2, r0
 8000b48:	b2a4      	uxth	r4, r4
 8000b4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b56:	fb00 f505 	mul.w	r5, r0, r5
 8000b5a:	42a5      	cmp	r5, r4
 8000b5c:	d90a      	bls.n	8000b74 <__udivmoddi4+0x90>
 8000b5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b66:	f080 8107 	bcs.w	8000d78 <__udivmoddi4+0x294>
 8000b6a:	42a5      	cmp	r5, r4
 8000b6c:	f240 8104 	bls.w	8000d78 <__udivmoddi4+0x294>
 8000b70:	4464      	add	r4, ip
 8000b72:	3802      	subs	r0, #2
 8000b74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b78:	1b64      	subs	r4, r4, r5
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	b11e      	cbz	r6, 8000b86 <__udivmoddi4+0xa2>
 8000b7e:	40dc      	lsrs	r4, r3
 8000b80:	2300      	movs	r3, #0
 8000b82:	e9c6 4300 	strd	r4, r3, [r6]
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0xbc>
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	f000 80ed 	beq.w	8000d6e <__udivmoddi4+0x28a>
 8000b94:	2100      	movs	r1, #0
 8000b96:	e9c6 0500 	strd	r0, r5, [r6]
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba0:	fab3 f183 	clz	r1, r3
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	d149      	bne.n	8000c3c <__udivmoddi4+0x158>
 8000ba8:	42ab      	cmp	r3, r5
 8000baa:	d302      	bcc.n	8000bb2 <__udivmoddi4+0xce>
 8000bac:	4282      	cmp	r2, r0
 8000bae:	f200 80f8 	bhi.w	8000da2 <__udivmoddi4+0x2be>
 8000bb2:	1a84      	subs	r4, r0, r2
 8000bb4:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb8:	2001      	movs	r0, #1
 8000bba:	4617      	mov	r7, r2
 8000bbc:	2e00      	cmp	r6, #0
 8000bbe:	d0e2      	beq.n	8000b86 <__udivmoddi4+0xa2>
 8000bc0:	e9c6 4700 	strd	r4, r7, [r6]
 8000bc4:	e7df      	b.n	8000b86 <__udivmoddi4+0xa2>
 8000bc6:	b902      	cbnz	r2, 8000bca <__udivmoddi4+0xe6>
 8000bc8:	deff      	udf	#255	; 0xff
 8000bca:	fab2 f382 	clz	r3, r2
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f040 8090 	bne.w	8000cf4 <__udivmoddi4+0x210>
 8000bd4:	1a8a      	subs	r2, r1, r2
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2101      	movs	r1, #1
 8000be0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000be4:	fb07 2015 	mls	r0, r7, r5, r2
 8000be8:	0c22      	lsrs	r2, r4, #16
 8000bea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bee:	fb0e f005 	mul.w	r0, lr, r5
 8000bf2:	4290      	cmp	r0, r2
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x124>
 8000bf6:	eb1c 0202 	adds.w	r2, ip, r2
 8000bfa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x122>
 8000c00:	4290      	cmp	r0, r2
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2b8>
 8000c06:	4645      	mov	r5, r8
 8000c08:	1a12      	subs	r2, r2, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c10:	fb07 2210 	mls	r2, r7, r0, r2
 8000c14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x14e>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x14c>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2c2>
 8000c30:	4610      	mov	r0, r2
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c3a:	e79f      	b.n	8000b7c <__udivmoddi4+0x98>
 8000c3c:	f1c1 0720 	rsb	r7, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c52:	40fd      	lsrs	r5, r7
 8000c54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c58:	4323      	orrs	r3, r4
 8000c5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c5e:	fa1f fe8c 	uxth.w	lr, ip
 8000c62:	fb09 5518 	mls	r5, r9, r8, r5
 8000c66:	0c1c      	lsrs	r4, r3, #16
 8000c68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c70:	42a5      	cmp	r5, r4
 8000c72:	fa02 f201 	lsl.w	r2, r2, r1
 8000c76:	fa00 f001 	lsl.w	r0, r0, r1
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b0>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2b4>
 8000c88:	42a5      	cmp	r5, r4
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2b4>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4464      	add	r4, ip
 8000c94:	1b64      	subs	r4, r4, r5
 8000c96:	b29d      	uxth	r5, r3
 8000c98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000ca0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ca4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca8:	45a6      	cmp	lr, r4
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1da>
 8000cac:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2ac>
 8000cb6:	45a6      	cmp	lr, r4
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2ac>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	4464      	add	r4, ip
 8000cbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cc2:	fba3 9502 	umull	r9, r5, r3, r2
 8000cc6:	eba4 040e 	sub.w	r4, r4, lr
 8000cca:	42ac      	cmp	r4, r5
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46ae      	mov	lr, r5
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x29c>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x298>
 8000cd4:	b156      	cbz	r6, 8000cec <__udivmoddi4+0x208>
 8000cd6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cda:	eb64 040e 	sbc.w	r4, r4, lr
 8000cde:	fa04 f707 	lsl.w	r7, r4, r7
 8000ce2:	40ca      	lsrs	r2, r1
 8000ce4:	40cc      	lsrs	r4, r1
 8000ce6:	4317      	orrs	r7, r2
 8000ce8:	e9c6 7400 	strd	r7, r4, [r6]
 8000cec:	4618      	mov	r0, r3
 8000cee:	2100      	movs	r1, #0
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	f1c3 0120 	rsb	r1, r3, #32
 8000cf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cfc:	fa20 f201 	lsr.w	r2, r0, r1
 8000d00:	fa25 f101 	lsr.w	r1, r5, r1
 8000d04:	409d      	lsls	r5, r3
 8000d06:	432a      	orrs	r2, r5
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d14:	fb07 1510 	mls	r5, r7, r0, r1
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d22:	428d      	cmp	r5, r1
 8000d24:	fa04 f403 	lsl.w	r4, r4, r3
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x258>
 8000d2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b0>
 8000d34:	428d      	cmp	r5, r1
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b0>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4461      	add	r1, ip
 8000d3c:	1b49      	subs	r1, r1, r5
 8000d3e:	b292      	uxth	r2, r2
 8000d40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d44:	fb07 1115 	mls	r1, r7, r5, r1
 8000d48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d50:	4291      	cmp	r1, r2
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x282>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2a8>
 8000d5e:	4291      	cmp	r1, r2
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2a8>
 8000d62:	3d02      	subs	r5, #2
 8000d64:	4462      	add	r2, ip
 8000d66:	1a52      	subs	r2, r2, r1
 8000d68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0xfc>
 8000d6e:	4631      	mov	r1, r6
 8000d70:	4630      	mov	r0, r6
 8000d72:	e708      	b.n	8000b86 <__udivmoddi4+0xa2>
 8000d74:	4639      	mov	r1, r7
 8000d76:	e6e6      	b.n	8000b46 <__udivmoddi4+0x62>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	e6fb      	b.n	8000b74 <__udivmoddi4+0x90>
 8000d7c:	4548      	cmp	r0, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f0>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f0>
 8000d8c:	4645      	mov	r5, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x282>
 8000d90:	462b      	mov	r3, r5
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1da>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x258>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b0>
 8000d9c:	3d02      	subs	r5, #2
 8000d9e:	4462      	add	r2, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x124>
 8000da2:	4608      	mov	r0, r1
 8000da4:	e70a      	b.n	8000bbc <__udivmoddi4+0xd8>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x14e>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	; 0x30
 8000db4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	2319      	movs	r3, #25
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	2288      	movs	r2, #136	; 0x88
 8000dc8:	21ec      	movs	r1, #236	; 0xec
 8000dca:	4857      	ldr	r0, [pc, #348]	; (8000f28 <TrimRead+0x178>)
 8000dcc:	f002 fdfa 	bl	80039c4 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	3319      	adds	r3, #25
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	9202      	str	r2, [sp, #8]
 8000dda:	2207      	movs	r2, #7
 8000ddc:	9201      	str	r2, [sp, #4]
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	22e1      	movs	r2, #225	; 0xe1
 8000de4:	21ec      	movs	r1, #236	; 0xec
 8000de6:	4850      	ldr	r0, [pc, #320]	; (8000f28 <TrimRead+0x178>)
 8000de8:	f002 fdec 	bl	80039c4 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000dec:	787b      	ldrb	r3, [r7, #1]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	783b      	ldrb	r3, [r7, #0]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	4b4b      	ldr	r3, [pc, #300]	; (8000f2c <TrimRead+0x17c>)
 8000dfe:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	78bb      	ldrb	r3, [r7, #2]
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	4b48      	ldr	r3, [pc, #288]	; (8000f30 <TrimRead+0x180>)
 8000e10:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000e12:	797b      	ldrb	r3, [r7, #5]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	793b      	ldrb	r3, [r7, #4]
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	4b44      	ldr	r3, [pc, #272]	; (8000f34 <TrimRead+0x184>)
 8000e22:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	797b      	ldrb	r3, [r7, #5]
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	4b40      	ldr	r3, [pc, #256]	; (8000f38 <TrimRead+0x188>)
 8000e36:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000e38:	7a7b      	ldrb	r3, [r7, #9]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	4b3d      	ldr	r3, [pc, #244]	; (8000f3c <TrimRead+0x18c>)
 8000e48:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000e4a:	7afb      	ldrb	r3, [r7, #11]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	7abb      	ldrb	r3, [r7, #10]
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <TrimRead+0x190>)
 8000e5a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000e5c:	7b7b      	ldrb	r3, [r7, #13]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	7b3b      	ldrb	r3, [r7, #12]
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <TrimRead+0x194>)
 8000e6c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	b21a      	sxth	r2, r3
 8000e74:	7bbb      	ldrb	r3, [r7, #14]
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <TrimRead+0x198>)
 8000e7e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000e80:	7c7b      	ldrb	r3, [r7, #17]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	7c3b      	ldrb	r3, [r7, #16]
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b21a      	sxth	r2, r3
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <TrimRead+0x19c>)
 8000e90:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000e92:	7cfb      	ldrb	r3, [r7, #19]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	7cbb      	ldrb	r3, [r7, #18]
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <TrimRead+0x1a0>)
 8000ea2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000ea4:	7d7b      	ldrb	r3, [r7, #21]
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	7d3b      	ldrb	r3, [r7, #20]
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <TrimRead+0x1a4>)
 8000eb4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000eb6:	7dfb      	ldrb	r3, [r7, #23]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	7dbb      	ldrb	r3, [r7, #22]
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <TrimRead+0x1a8>)
 8000ec6:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8000ec8:	7e3b      	ldrb	r3, [r7, #24]
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <TrimRead+0x1ac>)
 8000ece:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000ed0:	7ebb      	ldrb	r3, [r7, #26]
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	7e7b      	ldrb	r3, [r7, #25]
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <TrimRead+0x1b0>)
 8000ee0:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000ee2:	7efb      	ldrb	r3, [r7, #27]
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <TrimRead+0x1b4>)
 8000ee8:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000eea:	7f3b      	ldrb	r3, [r7, #28]
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	b21a      	sxth	r2, r3
 8000ef0:	7f7b      	ldrb	r3, [r7, #29]
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	f003 030f 	and.w	r3, r3, #15
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <TrimRead+0x1b8>)
 8000f00:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8000f02:	7fbb      	ldrb	r3, [r7, #30]
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	7f7b      	ldrb	r3, [r7, #29]
 8000f0a:	091b      	lsrs	r3, r3, #4
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <TrimRead+0x1bc>)
 8000f16:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000f18:	7ffb      	ldrb	r3, [r7, #31]
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <TrimRead+0x1c0>)
 8000f1e:	801a      	strh	r2, [r3, #0]
}
 8000f20:	bf00      	nop
 8000f22:	3720      	adds	r7, #32
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000010c 	.word	0x2000010c
 8000f2c:	2000003c 	.word	0x2000003c
 8000f30:	20000044 	.word	0x20000044
 8000f34:	20000046 	.word	0x20000046
 8000f38:	2000003e 	.word	0x2000003e
 8000f3c:	20000048 	.word	0x20000048
 8000f40:	2000004a 	.word	0x2000004a
 8000f44:	2000004c 	.word	0x2000004c
 8000f48:	2000004e 	.word	0x2000004e
 8000f4c:	20000050 	.word	0x20000050
 8000f50:	20000052 	.word	0x20000052
 8000f54:	20000054 	.word	0x20000054
 8000f58:	20000056 	.word	0x20000056
 8000f5c:	20000040 	.word	0x20000040
 8000f60:	20000058 	.word	0x20000058
 8000f64:	20000042 	.word	0x20000042
 8000f68:	2000005a 	.word	0x2000005a
 8000f6c:	2000005c 	.word	0x2000005c
 8000f70:	2000005e 	.word	0x2000005e

08000f74 <BMP280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BMP280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4623      	mov	r3, r4
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	4603      	mov	r3, r0
 8000f88:	71bb      	strb	r3, [r7, #6]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	717b      	strb	r3, [r7, #5]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8000f92:	f7ff ff0d 	bl	8000db0 <TrimRead>


	uint8_t datatowrite = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8000f9e:	23b6      	movs	r3, #182	; 0xb6
 8000fa0:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	f107 030f 	add.w	r3, r7, #15
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	22e0      	movs	r2, #224	; 0xe0
 8000fb6:	21ec      	movs	r1, #236	; 0xec
 8000fb8:	4858      	ldr	r0, [pc, #352]	; (800111c <BMP280_Config+0x1a8>)
 8000fba:	f002 fbfd 	bl	80037b8 <HAL_I2C_Mem_Write>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <BMP280_Config+0x56>
	{
		return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	e0a3      	b.n	8001112 <BMP280_Config+0x19e>
	}

	HAL_Delay (100);
 8000fca:	2064      	movs	r0, #100	; 0x64
 8000fcc:	f001 fd8a 	bl	8002ae4 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8000fd0:	797b      	ldrb	r3, [r7, #5]
 8000fd2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	f107 030f 	add.w	r3, r7, #15
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	22f2      	movs	r2, #242	; 0xf2
 8000fe8:	21ec      	movs	r1, #236	; 0xec
 8000fea:	484c      	ldr	r0, [pc, #304]	; (800111c <BMP280_Config+0x1a8>)
 8000fec:	f002 fbe4 	bl	80037b8 <HAL_I2C_Mem_Write>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <BMP280_Config+0x88>
	{
		return -2;
 8000ff6:	f06f 0301 	mvn.w	r3, #1
 8000ffa:	e08a      	b.n	8001112 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 8000ffc:	2064      	movs	r0, #100	; 0x64
 8000ffe:	f001 fd71 	bl	8002ae4 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2301      	movs	r3, #1
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	f107 030e 	add.w	r3, r7, #14
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	22f2      	movs	r2, #242	; 0xf2
 8001016:	21ec      	movs	r1, #236	; 0xec
 8001018:	4840      	ldr	r0, [pc, #256]	; (800111c <BMP280_Config+0x1a8>)
 800101a:	f002 fcd3 	bl	80039c4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800101e:	7bba      	ldrb	r2, [r7, #14]
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	429a      	cmp	r2, r3
 8001024:	d002      	beq.n	800102c <BMP280_Config+0xb8>
	{
		return -3;
 8001026:	f06f 0302 	mvn.w	r3, #2
 800102a:	e072      	b.n	8001112 <BMP280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800102c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001030:	015b      	lsls	r3, r3, #5
 8001032:	b25a      	sxtb	r2, r3
 8001034:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	b25b      	sxtb	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	b25b      	sxtb	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	2301      	movs	r3, #1
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	f107 030f 	add.w	r3, r7, #15
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	22f5      	movs	r2, #245	; 0xf5
 8001058:	21ec      	movs	r1, #236	; 0xec
 800105a:	4830      	ldr	r0, [pc, #192]	; (800111c <BMP280_Config+0x1a8>)
 800105c:	f002 fbac 	bl	80037b8 <HAL_I2C_Mem_Write>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <BMP280_Config+0xf8>
	{
		return -4;
 8001066:	f06f 0303 	mvn.w	r3, #3
 800106a:	e052      	b.n	8001112 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 800106c:	2064      	movs	r0, #100	; 0x64
 800106e:	f001 fd39 	bl	8002ae4 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	2301      	movs	r3, #1
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	f107 030e 	add.w	r3, r7, #14
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	22f5      	movs	r2, #245	; 0xf5
 8001086:	21ec      	movs	r1, #236	; 0xec
 8001088:	4824      	ldr	r0, [pc, #144]	; (800111c <BMP280_Config+0x1a8>)
 800108a:	f002 fc9b 	bl	80039c4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800108e:	7bba      	ldrb	r2, [r7, #14]
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	429a      	cmp	r2, r3
 8001094:	d002      	beq.n	800109c <BMP280_Config+0x128>
	{
		return -5;
 8001096:	f06f 0304 	mvn.w	r3, #4
 800109a:	e03a      	b.n	8001112 <BMP280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	015b      	lsls	r3, r3, #5
 80010a0:	b25a      	sxtb	r2, r3
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25a      	sxtb	r2, r3
 80010ac:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80010b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	2301      	movs	r3, #1
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	f107 030f 	add.w	r3, r7, #15
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	22f4      	movs	r2, #244	; 0xf4
 80010cc:	21ec      	movs	r1, #236	; 0xec
 80010ce:	4813      	ldr	r0, [pc, #76]	; (800111c <BMP280_Config+0x1a8>)
 80010d0:	f002 fb72 	bl	80037b8 <HAL_I2C_Mem_Write>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <BMP280_Config+0x16c>
	{
		return -6;
 80010da:	f06f 0305 	mvn.w	r3, #5
 80010de:	e018      	b.n	8001112 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 80010e0:	2064      	movs	r0, #100	; 0x64
 80010e2:	f001 fcff 	bl	8002ae4 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2301      	movs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	f107 030e 	add.w	r3, r7, #14
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	22f4      	movs	r2, #244	; 0xf4
 80010fa:	21ec      	movs	r1, #236	; 0xec
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <BMP280_Config+0x1a8>)
 80010fe:	f002 fc61 	bl	80039c4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001102:	7bba      	ldrb	r2, [r7, #14]
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	429a      	cmp	r2, r3
 8001108:	d002      	beq.n	8001110 <BMP280_Config+0x19c>
	{
		return -7;
 800110a:	f06f 0306 	mvn.w	r3, #6
 800110e:	e000      	b.n	8001112 <BMP280_Config+0x19e>
	}

	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bd90      	pop	{r4, r7, pc}
 800111a:	bf00      	nop
 800111c:	2000010c 	.word	0x2000010c

08001120 <BMPReadRaw>:


int BMPReadRaw(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af04      	add	r7, sp, #16
	uint8_t RawData[6];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c3, BMP280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <BMPReadRaw+0x84>)
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	22d0      	movs	r2, #208	; 0xd0
 8001138:	21ec      	movs	r1, #236	; 0xec
 800113a:	481b      	ldr	r0, [pc, #108]	; (80011a8 <BMPReadRaw+0x88>)
 800113c:	f002 fc42 	bl	80039c4 <HAL_I2C_Mem_Read>

	if (chipID == 0x58)
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <BMPReadRaw+0x84>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b58      	cmp	r3, #88	; 0x58
 8001146:	d127      	bne.n	8001198 <BMPReadRaw+0x78>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, PRESS_MSB_REG, 1, RawData, 6, HAL_MAX_DELAY);
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	2306      	movs	r3, #6
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	463b      	mov	r3, r7
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	22f7      	movs	r2, #247	; 0xf7
 800115a:	21ec      	movs	r1, #236	; 0xec
 800115c:	4812      	ldr	r0, [pc, #72]	; (80011a8 <BMPReadRaw+0x88>)
 800115e:	f002 fc31 	bl	80039c4 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001162:	783b      	ldrb	r3, [r7, #0]
 8001164:	031a      	lsls	r2, r3, #12
 8001166:	787b      	ldrb	r3, [r7, #1]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4313      	orrs	r3, r2
 800116c:	78ba      	ldrb	r2, [r7, #2]
 800116e:	0912      	lsrs	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	4313      	orrs	r3, r2
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <BMPReadRaw+0x8c>)
 8001176:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	031a      	lsls	r2, r3, #12
 800117c:	793b      	ldrb	r3, [r7, #4]
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	4313      	orrs	r3, r2
 8001182:	797a      	ldrb	r2, [r7, #5]
 8001184:	0912      	lsrs	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	4313      	orrs	r3, r2
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <BMPReadRaw+0x90>)
 800118c:	6013      	str	r3, [r2, #0]
		hRaw = 0;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <BMPReadRaw+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

		return 0;
 8001194:	2300      	movs	r3, #0
 8001196:	e001      	b.n	800119c <BMPReadRaw+0x7c>
	}

	else return -1;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000002c 	.word	0x2000002c
 80011a8:	2000010c 	.word	0x2000010c
 80011ac:	20000034 	.word	0x20000034
 80011b0:	20000030 	.word	0x20000030
 80011b4:	20000038 	.word	0x20000038

080011b8 <BMP280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BMP280_compensate_T_int32(int32_t adc_T)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	10da      	asrs	r2, r3, #3
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <BMP280_compensate_T_int32+0x74>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	4a18      	ldr	r2, [pc, #96]	; (8001230 <BMP280_compensate_T_int32+0x78>)
 80011ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011d2:	fb02 f303 	mul.w	r3, r2, r3
 80011d6:	12db      	asrs	r3, r3, #11
 80011d8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	111b      	asrs	r3, r3, #4
 80011de:	4a13      	ldr	r2, [pc, #76]	; (800122c <BMP280_compensate_T_int32+0x74>)
 80011e0:	8812      	ldrh	r2, [r2, #0]
 80011e2:	1a9b      	subs	r3, r3, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	1112      	asrs	r2, r2, #4
 80011e8:	4910      	ldr	r1, [pc, #64]	; (800122c <BMP280_compensate_T_int32+0x74>)
 80011ea:	8809      	ldrh	r1, [r1, #0]
 80011ec:	1a52      	subs	r2, r2, r1
 80011ee:	fb02 f303 	mul.w	r3, r2, r3
 80011f2:	131b      	asrs	r3, r3, #12
 80011f4:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <BMP280_compensate_T_int32+0x7c>)
 80011f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	139b      	asrs	r3, r3, #14
 8001200:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4413      	add	r3, r2
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <BMP280_compensate_T_int32+0x80>)
 800120a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <BMP280_compensate_T_int32+0x80>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3380      	adds	r3, #128	; 0x80
 8001218:	121b      	asrs	r3, r3, #8
 800121a:	60fb      	str	r3, [r7, #12]
	return T;
 800121c:	68fb      	ldr	r3, [r7, #12]
}
 800121e:	4618      	mov	r0, r3
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	2000003c 	.word	0x2000003c
 8001230:	20000044 	.word	0x20000044
 8001234:	20000046 	.word	0x20000046
 8001238:	20000060 	.word	0x20000060

0800123c <BMP280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BMP280_compensate_P_int64(int32_t adc_P)
{
 800123c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001240:	b0ca      	sub	sp, #296	; 0x128
 8001242:	af00      	add	r7, sp, #0
 8001244:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001248:	4baf      	ldr	r3, [pc, #700]	; (8001508 <BMP280_compensate_P_int64+0x2cc>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	17da      	asrs	r2, r3, #31
 800124e:	461c      	mov	r4, r3
 8001250:	4615      	mov	r5, r2
 8001252:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001256:	f145 3bff 	adc.w	fp, r5, #4294967295
 800125a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800125e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001262:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001266:	fb03 f102 	mul.w	r1, r3, r2
 800126a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800126e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	18ca      	adds	r2, r1, r3
 8001278:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800127c:	fba3 8903 	umull	r8, r9, r3, r3
 8001280:	eb02 0309 	add.w	r3, r2, r9
 8001284:	4699      	mov	r9, r3
 8001286:	4ba1      	ldr	r3, [pc, #644]	; (800150c <BMP280_compensate_P_int64+0x2d0>)
 8001288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128c:	b21b      	sxth	r3, r3
 800128e:	17da      	asrs	r2, r3, #31
 8001290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001294:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001298:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800129c:	4603      	mov	r3, r0
 800129e:	fb03 f209 	mul.w	r2, r3, r9
 80012a2:	460b      	mov	r3, r1
 80012a4:	fb08 f303 	mul.w	r3, r8, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	4602      	mov	r2, r0
 80012ac:	fba8 1202 	umull	r1, r2, r8, r2
 80012b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80012b4:	460a      	mov	r2, r1
 80012b6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80012ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80012be:	4413      	add	r3, r2
 80012c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80012c4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80012c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80012cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80012d0:	4b8f      	ldr	r3, [pc, #572]	; (8001510 <BMP280_compensate_P_int64+0x2d4>)
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	17da      	asrs	r2, r3, #31
 80012da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012de:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80012e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012e6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80012ea:	462a      	mov	r2, r5
 80012ec:	fb02 f203 	mul.w	r2, r2, r3
 80012f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012f4:	4621      	mov	r1, r4
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	441a      	add	r2, r3
 80012fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001300:	4621      	mov	r1, r4
 8001302:	fba3 1301 	umull	r1, r3, r3, r1
 8001306:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800130a:	460b      	mov	r3, r1
 800130c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001314:	18d3      	adds	r3, r2, r3
 8001316:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800131a:	f04f 0000 	mov.w	r0, #0
 800131e:	f04f 0100 	mov.w	r1, #0
 8001322:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001326:	462b      	mov	r3, r5
 8001328:	0459      	lsls	r1, r3, #17
 800132a:	4623      	mov	r3, r4
 800132c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001330:	4623      	mov	r3, r4
 8001332:	0458      	lsls	r0, r3, #17
 8001334:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001338:	1814      	adds	r4, r2, r0
 800133a:	643c      	str	r4, [r7, #64]	; 0x40
 800133c:	414b      	adcs	r3, r1
 800133e:	647b      	str	r3, [r7, #68]	; 0x44
 8001340:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001344:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001348:	4b72      	ldr	r3, [pc, #456]	; (8001514 <BMP280_compensate_P_int64+0x2d8>)
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	b21b      	sxth	r3, r3
 8001350:	17da      	asrs	r2, r3, #31
 8001352:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001356:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800135a:	f04f 0000 	mov.w	r0, #0
 800135e:	f04f 0100 	mov.w	r1, #0
 8001362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001366:	00d9      	lsls	r1, r3, #3
 8001368:	2000      	movs	r0, #0
 800136a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800136e:	1814      	adds	r4, r2, r0
 8001370:	63bc      	str	r4, [r7, #56]	; 0x38
 8001372:	414b      	adcs	r3, r1
 8001374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001376:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800137a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800137e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001382:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001386:	fb03 f102 	mul.w	r1, r3, r2
 800138a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800138e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	18ca      	adds	r2, r1, r3
 8001398:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800139c:	fba3 1303 	umull	r1, r3, r3, r3
 80013a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013a4:	460b      	mov	r3, r1
 80013a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80013aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013ae:	18d3      	adds	r3, r2, r3
 80013b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013b4:	4b58      	ldr	r3, [pc, #352]	; (8001518 <BMP280_compensate_P_int64+0x2dc>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	17da      	asrs	r2, r3, #31
 80013be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80013c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80013c6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80013ca:	462b      	mov	r3, r5
 80013cc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80013d0:	4642      	mov	r2, r8
 80013d2:	fb02 f203 	mul.w	r2, r2, r3
 80013d6:	464b      	mov	r3, r9
 80013d8:	4621      	mov	r1, r4
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	4413      	add	r3, r2
 80013e0:	4622      	mov	r2, r4
 80013e2:	4641      	mov	r1, r8
 80013e4:	fba2 1201 	umull	r1, r2, r2, r1
 80013e8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80013ec:	460a      	mov	r2, r1
 80013ee:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80013f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80013f6:	4413      	add	r3, r2
 80013f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80013fc:	f04f 0000 	mov.w	r0, #0
 8001400:	f04f 0100 	mov.w	r1, #0
 8001404:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001408:	4623      	mov	r3, r4
 800140a:	0a18      	lsrs	r0, r3, #8
 800140c:	462b      	mov	r3, r5
 800140e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001412:	462b      	mov	r3, r5
 8001414:	1219      	asrs	r1, r3, #8
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <BMP280_compensate_P_int64+0x2e0>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	b21b      	sxth	r3, r3
 800141e:	17da      	asrs	r2, r3, #31
 8001420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001424:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001428:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800142c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001430:	464a      	mov	r2, r9
 8001432:	fb02 f203 	mul.w	r2, r2, r3
 8001436:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800143a:	4644      	mov	r4, r8
 800143c:	fb04 f303 	mul.w	r3, r4, r3
 8001440:	441a      	add	r2, r3
 8001442:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001446:	4644      	mov	r4, r8
 8001448:	fba3 4304 	umull	r4, r3, r3, r4
 800144c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001450:	4623      	mov	r3, r4
 8001452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001456:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800145a:	18d3      	adds	r3, r2, r3
 800145c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800146c:	464c      	mov	r4, r9
 800146e:	0323      	lsls	r3, r4, #12
 8001470:	4644      	mov	r4, r8
 8001472:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001476:	4644      	mov	r4, r8
 8001478:	0322      	lsls	r2, r4, #12
 800147a:	1884      	adds	r4, r0, r2
 800147c:	633c      	str	r4, [r7, #48]	; 0x30
 800147e:	eb41 0303 	adc.w	r3, r1, r3
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
 8001484:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001488:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800148c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001490:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001494:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001498:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800149c:	4b20      	ldr	r3, [pc, #128]	; (8001520 <BMP280_compensate_P_int64+0x2e4>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2200      	movs	r2, #0
 80014a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014ac:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014b0:	462b      	mov	r3, r5
 80014b2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80014b6:	4642      	mov	r2, r8
 80014b8:	fb02 f203 	mul.w	r2, r2, r3
 80014bc:	464b      	mov	r3, r9
 80014be:	4621      	mov	r1, r4
 80014c0:	fb01 f303 	mul.w	r3, r1, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	4622      	mov	r2, r4
 80014c8:	4641      	mov	r1, r8
 80014ca:	fba2 1201 	umull	r1, r2, r2, r1
 80014ce:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80014d2:	460a      	mov	r2, r1
 80014d4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80014d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80014dc:	4413      	add	r3, r2
 80014de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80014ee:	4629      	mov	r1, r5
 80014f0:	104a      	asrs	r2, r1, #1
 80014f2:	4629      	mov	r1, r5
 80014f4:	17cb      	asrs	r3, r1, #31
 80014f6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80014fa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80014fe:	4313      	orrs	r3, r2
 8001500:	d110      	bne.n	8001524 <BMP280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001502:	2300      	movs	r3, #0
 8001504:	e154      	b.n	80017b0 <BMP280_compensate_P_int64+0x574>
 8001506:	bf00      	nop
 8001508:	20000060 	.word	0x20000060
 800150c:	20000050 	.word	0x20000050
 8001510:	2000004e 	.word	0x2000004e
 8001514:	2000004c 	.word	0x2000004c
 8001518:	2000004a 	.word	0x2000004a
 800151c:	20000048 	.word	0x20000048
 8001520:	2000003e 	.word	0x2000003e
	}
	p = 1048576-adc_P;
 8001524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001528:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800152c:	17da      	asrs	r2, r3, #31
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001530:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001532:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001536:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800153a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800153e:	105b      	asrs	r3, r3, #1
 8001540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001544:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001548:	07db      	lsls	r3, r3, #31
 800154a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800154e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001552:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001556:	4621      	mov	r1, r4
 8001558:	1a89      	subs	r1, r1, r2
 800155a:	67b9      	str	r1, [r7, #120]	; 0x78
 800155c:	4629      	mov	r1, r5
 800155e:	eb61 0303 	sbc.w	r3, r1, r3
 8001562:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001564:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001568:	4622      	mov	r2, r4
 800156a:	462b      	mov	r3, r5
 800156c:	1891      	adds	r1, r2, r2
 800156e:	6239      	str	r1, [r7, #32]
 8001570:	415b      	adcs	r3, r3
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
 8001574:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001578:	4621      	mov	r1, r4
 800157a:	1851      	adds	r1, r2, r1
 800157c:	61b9      	str	r1, [r7, #24]
 800157e:	4629      	mov	r1, r5
 8001580:	414b      	adcs	r3, r1
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001590:	4649      	mov	r1, r9
 8001592:	018b      	lsls	r3, r1, #6
 8001594:	4641      	mov	r1, r8
 8001596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800159a:	4641      	mov	r1, r8
 800159c:	018a      	lsls	r2, r1, #6
 800159e:	4641      	mov	r1, r8
 80015a0:	1889      	adds	r1, r1, r2
 80015a2:	6139      	str	r1, [r7, #16]
 80015a4:	4649      	mov	r1, r9
 80015a6:	eb43 0101 	adc.w	r1, r3, r1
 80015aa:	6179      	str	r1, [r7, #20]
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015b8:	4649      	mov	r1, r9
 80015ba:	008b      	lsls	r3, r1, #2
 80015bc:	4641      	mov	r1, r8
 80015be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015c2:	4641      	mov	r1, r8
 80015c4:	008a      	lsls	r2, r1, #2
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	4622      	mov	r2, r4
 80015ce:	189b      	adds	r3, r3, r2
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	460b      	mov	r3, r1
 80015d4:	462a      	mov	r2, r5
 80015d6:	eb42 0303 	adc.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015e8:	4649      	mov	r1, r9
 80015ea:	008b      	lsls	r3, r1, #2
 80015ec:	4641      	mov	r1, r8
 80015ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015f2:	4641      	mov	r1, r8
 80015f4:	008a      	lsls	r2, r1, #2
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	4622      	mov	r2, r4
 80015fe:	189b      	adds	r3, r3, r2
 8001600:	673b      	str	r3, [r7, #112]	; 0x70
 8001602:	462b      	mov	r3, r5
 8001604:	460a      	mov	r2, r1
 8001606:	eb42 0303 	adc.w	r3, r2, r3
 800160a:	677b      	str	r3, [r7, #116]	; 0x74
 800160c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001610:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001614:	f7ff f9fe 	bl	8000a14 <__aeabi_ldivmod>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001620:	4b66      	ldr	r3, [pc, #408]	; (80017bc <BMP280_compensate_P_int64+0x580>)
 8001622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001626:	b21b      	sxth	r3, r3
 8001628:	17da      	asrs	r2, r3, #31
 800162a:	66bb      	str	r3, [r7, #104]	; 0x68
 800162c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800162e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	f04f 0100 	mov.w	r1, #0
 800163a:	0b50      	lsrs	r0, r2, #13
 800163c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001640:	1359      	asrs	r1, r3, #13
 8001642:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001646:	462b      	mov	r3, r5
 8001648:	fb00 f203 	mul.w	r2, r0, r3
 800164c:	4623      	mov	r3, r4
 800164e:	fb03 f301 	mul.w	r3, r3, r1
 8001652:	4413      	add	r3, r2
 8001654:	4622      	mov	r2, r4
 8001656:	fba2 1200 	umull	r1, r2, r2, r0
 800165a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800165e:	460a      	mov	r2, r1
 8001660:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001664:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001668:	4413      	add	r3, r2
 800166a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800166e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001672:	f04f 0000 	mov.w	r0, #0
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	0b50      	lsrs	r0, r2, #13
 800167c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001680:	1359      	asrs	r1, r3, #13
 8001682:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001686:	462b      	mov	r3, r5
 8001688:	fb00 f203 	mul.w	r2, r0, r3
 800168c:	4623      	mov	r3, r4
 800168e:	fb03 f301 	mul.w	r3, r3, r1
 8001692:	4413      	add	r3, r2
 8001694:	4622      	mov	r2, r4
 8001696:	fba2 1200 	umull	r1, r2, r2, r0
 800169a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800169e:	460a      	mov	r2, r1
 80016a0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80016a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80016a8:	4413      	add	r3, r2
 80016aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80016ba:	4621      	mov	r1, r4
 80016bc:	0e4a      	lsrs	r2, r1, #25
 80016be:	4629      	mov	r1, r5
 80016c0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016c4:	4629      	mov	r1, r5
 80016c6:	164b      	asrs	r3, r1, #25
 80016c8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80016cc:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <BMP280_compensate_P_int64+0x584>)
 80016ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	17da      	asrs	r2, r3, #31
 80016d6:	663b      	str	r3, [r7, #96]	; 0x60
 80016d8:	667a      	str	r2, [r7, #100]	; 0x64
 80016da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016e2:	462a      	mov	r2, r5
 80016e4:	fb02 f203 	mul.w	r2, r2, r3
 80016e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ec:	4621      	mov	r1, r4
 80016ee:	fb01 f303 	mul.w	r3, r1, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80016f8:	4621      	mov	r1, r4
 80016fa:	fba2 1201 	umull	r1, r2, r2, r1
 80016fe:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001702:	460a      	mov	r2, r1
 8001704:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001708:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800170c:	4413      	add	r3, r2
 800170e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800171e:	4621      	mov	r1, r4
 8001720:	0cca      	lsrs	r2, r1, #19
 8001722:	4629      	mov	r1, r5
 8001724:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001728:	4629      	mov	r1, r5
 800172a:	14cb      	asrs	r3, r1, #19
 800172c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001730:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001734:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001738:	1884      	adds	r4, r0, r2
 800173a:	65bc      	str	r4, [r7, #88]	; 0x58
 800173c:	eb41 0303 	adc.w	r3, r1, r3
 8001740:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001742:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001746:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800174a:	4621      	mov	r1, r4
 800174c:	1889      	adds	r1, r1, r2
 800174e:	6539      	str	r1, [r7, #80]	; 0x50
 8001750:	4629      	mov	r1, r5
 8001752:	eb43 0101 	adc.w	r1, r3, r1
 8001756:	6579      	str	r1, [r7, #84]	; 0x54
 8001758:	f04f 0000 	mov.w	r0, #0
 800175c:	f04f 0100 	mov.w	r1, #0
 8001760:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001764:	4623      	mov	r3, r4
 8001766:	0a18      	lsrs	r0, r3, #8
 8001768:	462b      	mov	r3, r5
 800176a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800176e:	462b      	mov	r3, r5
 8001770:	1219      	asrs	r1, r3, #8
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <BMP280_compensate_P_int64+0x588>)
 8001774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001778:	b21b      	sxth	r3, r3
 800177a:	17da      	asrs	r2, r3, #31
 800177c:	64bb      	str	r3, [r7, #72]	; 0x48
 800177e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800178c:	464c      	mov	r4, r9
 800178e:	0123      	lsls	r3, r4, #4
 8001790:	4644      	mov	r4, r8
 8001792:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001796:	4644      	mov	r4, r8
 8001798:	0122      	lsls	r2, r4, #4
 800179a:	1884      	adds	r4, r0, r2
 800179c:	603c      	str	r4, [r7, #0]
 800179e:	eb41 0303 	adc.w	r3, r1, r3
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017a8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 80017ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80017b6:	46bd      	mov	sp, r7
 80017b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017bc:	20000056 	.word	0x20000056
 80017c0:	20000054 	.word	0x20000054
 80017c4:	20000052 	.word	0x20000052

080017c8 <BMP280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t BMP280_compensate_H_int32(int32_t adc_H)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <BMP280_compensate_H_int32+0xbc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80017d8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	039a      	lsls	r2, r3, #14
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <BMP280_compensate_H_int32+0xc0>)
 80017e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e4:	051b      	lsls	r3, r3, #20
 80017e6:	1ad2      	subs	r2, r2, r3
 80017e8:	4b28      	ldr	r3, [pc, #160]	; (800188c <BMP280_compensate_H_int32+0xc4>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	4619      	mov	r1, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80017f8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80017fc:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80017fe:	4a24      	ldr	r2, [pc, #144]	; (8001890 <BMP280_compensate_H_int32+0xc8>)
 8001800:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001804:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800180c:	1292      	asrs	r2, r2, #10
 800180e:	4921      	ldr	r1, [pc, #132]	; (8001894 <BMP280_compensate_H_int32+0xcc>)
 8001810:	8809      	ldrh	r1, [r1, #0]
 8001812:	4608      	mov	r0, r1
 8001814:	68f9      	ldr	r1, [r7, #12]
 8001816:	fb00 f101 	mul.w	r1, r0, r1
 800181a:	12c9      	asrs	r1, r1, #11
 800181c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001820:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001824:	1292      	asrs	r2, r2, #10
 8001826:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800182a:	491b      	ldr	r1, [pc, #108]	; (8001898 <BMP280_compensate_H_int32+0xd0>)
 800182c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001830:	fb01 f202 	mul.w	r2, r1, r2
 8001834:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001838:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	13db      	asrs	r3, r3, #15
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	13d2      	asrs	r2, r2, #15
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 800184e:	4a13      	ldr	r2, [pc, #76]	; (800189c <BMP280_compensate_H_int32+0xd4>)
 8001850:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001852:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001856:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001864:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800186c:	bfa8      	it	ge
 800186e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001872:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	131b      	asrs	r3, r3, #12
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	20000060 	.word	0x20000060
 8001888:	2000005a 	.word	0x2000005a
 800188c:	2000005c 	.word	0x2000005c
 8001890:	2000005e 	.word	0x2000005e
 8001894:	20000042 	.word	0x20000042
 8001898:	20000058 	.word	0x20000058
 800189c:	20000040 	.word	0x20000040

080018a0 <BMP280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BMP280_Measure (void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	if (BMPReadRaw() == 0)
 80018a4:	f7ff fc3c 	bl	8001120 <BMPReadRaw>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d163      	bne.n	8001976 <BMP280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80018ae:	4b39      	ldr	r3, [pc, #228]	; (8001994 <BMP280_Measure+0xf4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018b6:	d104      	bne.n	80018c2 <BMP280_Measure+0x22>
 80018b8:	4b37      	ldr	r3, [pc, #220]	; (8001998 <BMP280_Measure+0xf8>)
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e016      	b.n	80018f0 <BMP280_Measure+0x50>
		  else
		  {
			  Temperature = (BMP280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <BMP280_Measure+0xf4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fc76 	bl	80011b8 <BMP280_compensate_T_int32>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fdd4 	bl	800047c <__aeabi_i2d>
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4b30      	ldr	r3, [pc, #192]	; (800199c <BMP280_Measure+0xfc>)
 80018da:	f7fe ff63 	bl	80007a4 <__aeabi_ddiv>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f845 	bl	8000974 <__aeabi_d2f>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <BMP280_Measure+0xf8>)
 80018ee:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 80018f0:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <BMP280_Measure+0x100>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018f8:	d104      	bne.n	8001904 <BMP280_Measure+0x64>
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <BMP280_Measure+0x104>)
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e016      	b.n	8001932 <BMP280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BMP280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001904:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <BMP280_Measure+0x100>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fc97 	bl	800123c <BMP280_compensate_P_int64>
 800190e:	4603      	mov	r3, r0
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fda3 	bl	800045c <__aeabi_ui2d>
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <BMP280_Measure+0x108>)
 800191c:	f7fe ff42 	bl	80007a4 <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f824 	bl	8000974 <__aeabi_d2f>
 800192c:	4603      	mov	r3, r0
 800192e:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <BMP280_Measure+0x104>)
 8001930:	6013      	str	r3, [r2, #0]
			  Pressure = (BMP280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <BMP280_Measure+0x10c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800193a:	d104      	bne.n	8001946 <BMP280_Measure+0xa6>
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <BMP280_Measure+0x110>)
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001944:	e023      	b.n	800198e <BMP280_Measure+0xee>
			  Humidity = (BMP280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <BMP280_Measure+0x10c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff3c 	bl	80017c8 <BMP280_compensate_H_int32>
 8001950:	4603      	mov	r3, r0
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fd82 	bl	800045c <__aeabi_ui2d>
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <BMP280_Measure+0x114>)
 800195e:	f7fe ff21 	bl	80007a4 <__aeabi_ddiv>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f803 	bl	8000974 <__aeabi_d2f>
 800196e:	4603      	mov	r3, r0
 8001970:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <BMP280_Measure+0x110>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	e00b      	b.n	800198e <BMP280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <BMP280_Measure+0x110>)
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <BMP280_Measure+0x110>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <BMP280_Measure+0x104>)
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <BMP280_Measure+0x104>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a03      	ldr	r2, [pc, #12]	; (8001998 <BMP280_Measure+0xf8>)
 800198c:	6013      	str	r3, [r2, #0]
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000030 	.word	0x20000030
 8001998:	20000194 	.word	0x20000194
 800199c:	40590000 	.word	0x40590000
 80019a0:	20000034 	.word	0x20000034
 80019a4:	20000198 	.word	0x20000198
 80019a8:	40700000 	.word	0x40700000
 80019ac:	20000038 	.word	0x20000038
 80019b0:	2000019c 	.word	0x2000019c
 80019b4:	40900000 	.word	0x40900000

080019b8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80019b8:	b4b0      	push	{r4, r5, r7}
 80019ba:	b08f      	sub	sp, #60	; 0x3c
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80019c0:	f240 13b1 	movw	r3, #433	; 0x1b1
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80019c6:	2307      	movs	r3, #7
 80019c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80019cc:	2307      	movs	r3, #7
 80019ce:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80019d8:	23ff      	movs	r3, #255	; 0xff
 80019da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80019de:	2364      	movs	r3, #100	; 0x64
 80019e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80019e4:	2308      	movs	r3, #8
 80019e6:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	461d      	mov	r5, r3
 80019ec:	f107 040c 	add.w	r4, r7, #12
 80019f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80019fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	373c      	adds	r7, #60	; 0x3c
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bcb0      	pop	{r4, r5, r7}
 8001a08:	4770      	bx	lr

08001a0a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001a14:	2101      	movs	r1, #1
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f99f 	bl	8001d5a <LoRa_read>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001a20:	7bbb      	ldrb	r3, [r7, #14]
 8001a22:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001a2a:	7bbb      	ldrb	r3, [r7, #14]
 8001a2c:	f023 0307 	bic.w	r3, r3, #7
 8001a30:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
 8001a38:	e03e      	b.n	8001ab8 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d10c      	bne.n	8001a5a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001a40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a44:	f023 0307 	bic.w	r3, r3, #7
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	b25b      	sxtb	r3, r3
 8001a50:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	61da      	str	r2, [r3, #28]
 8001a58:	e02e      	b.n	8001ab8 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d10c      	bne.n	8001a7a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a64:	f023 0307 	bic.w	r3, r3, #7
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	f043 0303 	orr.w	r3, r3, #3
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	61da      	str	r2, [r3, #28]
 8001a78:	e01e      	b.n	8001ab8 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d10c      	bne.n	8001a9a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a84:	f023 0307 	bic.w	r3, r3, #7
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	f043 0305 	orr.w	r3, r3, #5
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2205      	movs	r2, #5
 8001a96:	61da      	str	r2, [r3, #28]
 8001a98:	e00e      	b.n	8001ab8 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d10b      	bne.n	8001ab8 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001aa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001aa4:	f023 0307 	bic.w	r3, r3, #7
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	f043 0306 	orr.w	r3, r3, #6
 8001aae:	b25b      	sxtb	r3, r3
 8001ab0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2206      	movs	r2, #6
 8001ab6:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	461a      	mov	r2, r3
 8001abc:	2101      	movs	r1, #1
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f965 	bl	8001d8e <LoRa_write>
	//HAL_Delay(10);
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	889b      	ldrh	r3, [r3, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f001 fc1c 	bl	8003324 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6998      	ldr	r0, [r3, #24]
 8001af0:	88fa      	ldrh	r2, [r7, #6]
 8001af2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001af6:	68b9      	ldr	r1, [r7, #8]
 8001af8:	f003 fc6a 	bl	80053d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001afc:	bf00      	nop
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f004 f96e 	bl	8005de4 <HAL_SPI_GetState>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d1f7      	bne.n	8001afe <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6998      	ldr	r0, [r3, #24]
 8001b12:	8b3a      	ldrh	r2, [r7, #24]
 8001b14:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b18:	6839      	ldr	r1, [r7, #0]
 8001b1a:	f003 fda5 	bl	8005668 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001b1e:	bf00      	nop
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f004 f95d 	bl	8005de4 <HAL_SPI_GetState>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d1f7      	bne.n	8001b20 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	889b      	ldrh	r3, [r3, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f001 fbf2 	bl	8003324 <HAL_GPIO_WritePin>
}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	4613      	mov	r3, r2
 8001b56:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	889b      	ldrh	r3, [r3, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	4619      	mov	r1, r3
 8001b64:	f001 fbde 	bl	8003324 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6998      	ldr	r0, [r3, #24]
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b72:	68b9      	ldr	r1, [r7, #8]
 8001b74:	f003 fc2c 	bl	80053d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001b78:	bf00      	nop
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f004 f930 	bl	8005de4 <HAL_SPI_GetState>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d1f7      	bne.n	8001b7a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6998      	ldr	r0, [r3, #24]
 8001b8e:	8b3a      	ldrh	r2, [r7, #24]
 8001b90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b94:	6839      	ldr	r1, [r7, #0]
 8001b96:	f003 fc1b 	bl	80053d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001b9a:	bf00      	nop
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 f91f 	bl	8005de4 <HAL_SPI_GetState>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d1f7      	bne.n	8001b9c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	889b      	ldrh	r3, [r3, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f001 fbb4 	bl	8003324 <HAL_GPIO_WritePin>
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	04db      	lsls	r3, r3, #19
 8001bd2:	115b      	asrs	r3, r3, #5
 8001bd4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	0c1b      	lsrs	r3, r3, #16
 8001bda:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001bdc:	7afb      	ldrb	r3, [r7, #11]
 8001bde:	461a      	mov	r2, r3
 8001be0:	2106      	movs	r1, #6
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8d3 	bl	8001d8e <LoRa_write>
	HAL_Delay(5);
 8001be8:	2005      	movs	r0, #5
 8001bea:	f000 ff7b 	bl	8002ae4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001bf4:	7afb      	ldrb	r3, [r7, #11]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2107      	movs	r1, #7
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8c7 	bl	8001d8e <LoRa_write>
	HAL_Delay(5);
 8001c00:	2005      	movs	r0, #5
 8001c02:	f000 ff6f 	bl	8002ae4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2108      	movs	r1, #8
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f8bc 	bl	8001d8e <LoRa_write>
	HAL_Delay(5);
 8001c16:	2005      	movs	r0, #5
 8001c18:	f000 ff64 	bl	8002ae4 <HAL_Delay>
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	dd01      	ble.n	8001c38 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001c34:	230c      	movs	r3, #12
 8001c36:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	dc01      	bgt.n	8001c42 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001c3e:	2307      	movs	r3, #7
 8001c40:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001c42:	211e      	movs	r1, #30
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f888 	bl	8001d5a <LoRa_read>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001c4e:	200a      	movs	r0, #10
 8001c50:	f000 ff48 	bl	8002ae4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001c68:	7bbb      	ldrb	r3, [r7, #14]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	211e      	movs	r1, #30
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f88d 	bl	8001d8e <LoRa_write>
	HAL_Delay(10);
 8001c74:	200a      	movs	r0, #10
 8001c76:	f000 ff35 	bl	8002ae4 <HAL_Delay>
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	461a      	mov	r2, r3
 8001c92:	2109      	movs	r1, #9
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f87a 	bl	8001d8e <LoRa_write>
	HAL_Delay(10);
 8001c9a:	200a      	movs	r0, #10
 8001c9c:	f000 ff22 	bl	8002ae4 <HAL_Delay>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	2b2c      	cmp	r3, #44	; 0x2c
 8001cbc:	d801      	bhi.n	8001cc2 <LoRa_setOCP+0x1a>
		current = 45;
 8001cbe:	232d      	movs	r3, #45	; 0x2d
 8001cc0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	2bf0      	cmp	r3, #240	; 0xf0
 8001cc6:	d901      	bls.n	8001ccc <LoRa_setOCP+0x24>
		current = 240;
 8001cc8:	23f0      	movs	r3, #240	; 0xf0
 8001cca:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	2b78      	cmp	r3, #120	; 0x78
 8001cd0:	d809      	bhi.n	8001ce6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	3b2d      	subs	r3, #45	; 0x2d
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <LoRa_setOCP+0x78>)
 8001cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cdc:	1052      	asrs	r2, r2, #1
 8001cde:	17db      	asrs	r3, r3, #31
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	e00b      	b.n	8001cfe <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	2bf0      	cmp	r3, #240	; 0xf0
 8001cea:	d808      	bhi.n	8001cfe <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	331e      	adds	r3, #30
 8001cf0:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <LoRa_setOCP+0x78>)
 8001cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf6:	1092      	asrs	r2, r2, #2
 8001cf8:	17db      	asrs	r3, r3, #31
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	3320      	adds	r3, #32
 8001d02:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	461a      	mov	r2, r3
 8001d08:	210b      	movs	r1, #11
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f83f 	bl	8001d8e <LoRa_write>
	HAL_Delay(10);
 8001d10:	200a      	movs	r0, #10
 8001d12:	f000 fee7 	bl	8002ae4 <HAL_Delay>
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	66666667 	.word	0x66666667

08001d24 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001d2c:	211e      	movs	r1, #30
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f813 	bl	8001d5a <LoRa_read>
 8001d34:	4603      	mov	r3, r0
 8001d36:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	f043 0307 	orr.w	r3, r3, #7
 8001d3e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001d40:	7bbb      	ldrb	r3, [r7, #14]
 8001d42:	461a      	mov	r2, r3
 8001d44:	211e      	movs	r1, #30
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f821 	bl	8001d8e <LoRa_write>
	HAL_Delay(10);
 8001d4c:	200a      	movs	r0, #10
 8001d4e:	f000 fec9 	bl	8002ae4 <HAL_Delay>
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af02      	add	r7, sp, #8
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001d70:	f107 030f 	add.w	r3, r7, #15
 8001d74:	f107 010e 	add.w	r1, r7, #14
 8001d78:	2201      	movs	r2, #1
 8001d7a:	9200      	str	r2, [sp, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff fea4 	bl	8001acc <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af02      	add	r7, sp, #8
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001da8:	78bb      	ldrb	r3, [r7, #2]
 8001daa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001dac:	f107 030f 	add.w	r3, r7, #15
 8001db0:	f107 010e 	add.w	r1, r7, #14
 8001db4:	2201      	movs	r2, #1
 8001db6:	9200      	str	r2, [sp, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fec4 	bl	8001b48 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	72fb      	strb	r3, [r7, #11]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001ddc:	7afb      	ldrb	r3, [r7, #11]
 8001dde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	889b      	ldrh	r3, [r3, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	4619      	mov	r1, r3
 8001df2:	f001 fa97 	bl	8003324 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6998      	ldr	r0, [r3, #24]
 8001dfa:	f107 0117 	add.w	r1, r7, #23
 8001dfe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e02:	2201      	movs	r2, #1
 8001e04:	f003 fae4 	bl	80053d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001e08:	bf00      	nop
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 ffe8 	bl	8005de4 <HAL_SPI_GetState>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d1f7      	bne.n	8001e0a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6998      	ldr	r0, [r3, #24]
 8001e1e:	7abb      	ldrb	r3, [r7, #10]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	f003 fad2 	bl	80053d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001e2c:	bf00      	nop
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 ffd6 	bl	8005de4 <HAL_SPI_GetState>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d1f7      	bne.n	8001e2e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	889b      	ldrh	r3, [r3, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f001 fa6b 	bl	8003324 <HAL_GPIO_WritePin>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]

	return 1;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	4611      	mov	r1, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	71fb      	strb	r3, [r7, #7]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f7ff fdbd 	bl	8001a0a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001e90:	210e      	movs	r1, #14
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7ff ff61 	bl	8001d5a <LoRa_read>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001e9c:	7cfb      	ldrb	r3, [r7, #19]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	210d      	movs	r1, #13
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f7ff ff73 	bl	8001d8e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2122      	movs	r1, #34	; 0x22
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f7ff ff6d 	bl	8001d8e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	2100      	movs	r1, #0
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f7ff ff84 	bl	8001dc8 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001ec0:	2103      	movs	r1, #3
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f7ff fda1 	bl	8001a0a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001ec8:	2112      	movs	r1, #18
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f7ff ff45 	bl	8001d5a <LoRa_read>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00a      	beq.n	8001ef4 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001ede:	22ff      	movs	r2, #255	; 0xff
 8001ee0:	2112      	movs	r1, #18
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7ff ff53 	bl	8001d8e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001ee8:	6979      	ldr	r1, [r7, #20]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7ff fd8d 	bl	8001a0a <LoRa_gotoMode>
			return 1;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e014      	b.n	8001f1e <LoRa_transmit+0xb2>
		}
		else{
			if(--timeout==0){
 8001ef4:	88bb      	ldrh	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	80bb      	strh	r3, [r7, #4]
 8001efa:	88bb      	ldrh	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10a      	bne.n	8001f16 <LoRa_transmit+0xaa>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f04:	4808      	ldr	r0, [pc, #32]	; (8001f28 <LoRa_transmit+0xbc>)
 8001f06:	f001 fa3f 	bl	8003388 <HAL_GPIO_TogglePin>
				LoRa_gotoMode(_LoRa, mode);
 8001f0a:	6979      	ldr	r1, [r7, #20]
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f7ff fd7c 	bl	8001a0a <LoRa_gotoMode>
				return 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e003      	b.n	8001f1e <LoRa_transmit+0xb2>
			}
		}
		HAL_Delay(1);
 8001f16:	2001      	movs	r0, #1
 8001f18:	f000 fde4 	bl	8002ae4 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001f1c:	e7d4      	b.n	8001ec8 <LoRa_transmit+0x5c>
	}
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40020c00 	.word	0x40020c00

08001f2c <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001f34:	2105      	movs	r1, #5
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fd67 	bl	8001a0a <LoRa_gotoMode>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	e007      	b.n	8001f6c <LoRa_receive+0x28>
		data[i]=0;
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	4413      	add	r3, r2
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	dbf3      	blt.n	8001f5c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001f74:	2101      	movs	r1, #1
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f7ff fd47 	bl	8001a0a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001f7c:	2112      	movs	r1, #18
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7ff feeb 	bl	8001d5a <LoRa_read>
 8001f84:	4603      	mov	r3, r0
 8001f86:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d034      	beq.n	8001ffc <LoRa_receive+0xb8>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f96:	481e      	ldr	r0, [pc, #120]	; (8002010 <LoRa_receive+0xcc>)
 8001f98:	f001 f9f6 	bl	8003388 <HAL_GPIO_TogglePin>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001f9c:	22ff      	movs	r2, #255	; 0xff
 8001f9e:	2112      	movs	r1, #18
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f7ff fef4 	bl	8001d8e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001fa6:	2113      	movs	r1, #19
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff fed6 	bl	8001d5a <LoRa_read>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001fb2:	2110      	movs	r1, #16
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7ff fed0 	bl	8001d5a <LoRa_read>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	210d      	movs	r1, #13
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7ff fee2 	bl	8001d8e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001fca:	7cba      	ldrb	r2, [r7, #18]
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	bf28      	it	cs
 8001fd2:	4613      	movcs	r3, r2
 8001fd4:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	e00b      	b.n	8001ff4 <LoRa_receive+0xb0>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	18d4      	adds	r4, r2, r3
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7ff feb8 	bl	8001d5a <LoRa_read>
 8001fea:	4603      	mov	r3, r0
 8001fec:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	7ffb      	ldrb	r3, [r7, #31]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	dbef      	blt.n	8001fdc <LoRa_receive+0x98>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001ffc:	2105      	movs	r1, #5
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f7ff fd03 	bl	8001a0a <LoRa_gotoMode>
    return min;
 8002004:	7ffb      	ldrb	r3, [r7, #31]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd90      	pop	{r4, r7, pc}
 800200e:	bf00      	nop
 8002010:	40020c00 	.word	0x40020c00

08002014 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff1a 	bl	8001e56 <LoRa_isvalid>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 8093 	beq.w	8002150 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800202a:	2100      	movs	r1, #0
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fcec 	bl	8001a0a <LoRa_gotoMode>
			HAL_Delay(10);
 8002032:	200a      	movs	r0, #10
 8002034:	f000 fd56 	bl	8002ae4 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8002038:	2101      	movs	r1, #1
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fe8d 	bl	8001d5a <LoRa_read>
 8002040:	4603      	mov	r3, r0
 8002042:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8002044:	200a      	movs	r0, #10
 8002046:	f000 fd4d 	bl	8002ae4 <HAL_Delay>
			data = read | 0x80;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002050:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	461a      	mov	r2, r3
 8002056:	2101      	movs	r1, #1
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff fe98 	bl	8001d8e <LoRa_write>
			HAL_Delay(100);
 800205e:	2064      	movs	r0, #100	; 0x64
 8002060:	f000 fd40 	bl	8002ae4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4619      	mov	r1, r3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fdaa 	bl	8001bc4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002076:	4619      	mov	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fe02 	bl	8001c82 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fe0e 	bl	8001ca8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800208c:	2223      	movs	r2, #35	; 0x23
 800208e:	210c      	movs	r1, #12
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fe7c 	bl	8001d8e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fe44 	bl	8001d24 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020a2:	4619      	mov	r1, r3
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff fdbd 	bl	8001c24 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80020aa:	22ff      	movs	r2, #255	; 0xff
 80020ac:	211f      	movs	r1, #31
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff fe6d 	bl	8001d8e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80020d0:	7bbb      	ldrb	r3, [r7, #14]
 80020d2:	461a      	mov	r2, r3
 80020d4:	211d      	movs	r1, #29
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff fe59 	bl	8001d8e <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	2120      	movs	r1, #32
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fe4f 	bl	8001d8e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	2121      	movs	r1, #33	; 0x21
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fe47 	bl	8001d8e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8002100:	2140      	movs	r1, #64	; 0x40
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fe29 	bl	8001d5a <LoRa_read>
 8002108:	4603      	mov	r3, r0
 800210a:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002112:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8002114:	7bbb      	ldrb	r3, [r7, #14]
 8002116:	461a      	mov	r2, r3
 8002118:	2140      	movs	r1, #64	; 0x40
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fe37 	bl	8001d8e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002120:	2101      	movs	r1, #1
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff fc71 	bl	8001a0a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800212e:	200a      	movs	r0, #10
 8002130:	f000 fcd8 	bl	8002ae4 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8002134:	2142      	movs	r1, #66	; 0x42
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fe0f 	bl	8001d5a <LoRa_read>
 800213c:	4603      	mov	r3, r0
 800213e:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	2b12      	cmp	r3, #18
 8002144:	d101      	bne.n	800214a <LoRa_init+0x136>
				return LORA_OK;
 8002146:	23c8      	movs	r3, #200	; 0xc8
 8002148:	e004      	b.n	8002154 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 800214a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800214e:	e001      	b.n	8002154 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8002150:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	4b42      	ldr	r3, [pc, #264]	; (8002280 <MX_GPIO_Init+0x124>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a41      	ldr	r2, [pc, #260]	; (8002280 <MX_GPIO_Init+0x124>)
 800217c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <MX_GPIO_Init+0x124>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <MX_GPIO_Init+0x124>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a3a      	ldr	r2, [pc, #232]	; (8002280 <MX_GPIO_Init+0x124>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b38      	ldr	r3, [pc, #224]	; (8002280 <MX_GPIO_Init+0x124>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	4b34      	ldr	r3, [pc, #208]	; (8002280 <MX_GPIO_Init+0x124>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a33      	ldr	r2, [pc, #204]	; (8002280 <MX_GPIO_Init+0x124>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b31      	ldr	r3, [pc, #196]	; (8002280 <MX_GPIO_Init+0x124>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <MX_GPIO_Init+0x124>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a2c      	ldr	r2, [pc, #176]	; (8002280 <MX_GPIO_Init+0x124>)
 80021d0:	f043 0308 	orr.w	r3, r3, #8
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <MX_GPIO_Init+0x124>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <MX_GPIO_Init+0x124>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a25      	ldr	r2, [pc, #148]	; (8002280 <MX_GPIO_Init+0x124>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b23      	ldr	r3, [pc, #140]	; (8002280 <MX_GPIO_Init+0x124>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RESET_Pin, GPIO_PIN_RESET);
 80021fe:	2200      	movs	r2, #0
 8002200:	2103      	movs	r1, #3
 8002202:	4820      	ldr	r0, [pc, #128]	; (8002284 <MX_GPIO_Init+0x128>)
 8002204:	f001 f88e 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002208:	2200      	movs	r2, #0
 800220a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800220e:	481e      	ldr	r0, [pc, #120]	; (8002288 <MX_GPIO_Init+0x12c>)
 8002210:	f001 f888 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NSS_Pin|RESET_Pin;
 8002214:	2303      	movs	r3, #3
 8002216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002218:	2301      	movs	r3, #1
 800221a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	4816      	ldr	r0, [pc, #88]	; (8002284 <MX_GPIO_Init+0x128>)
 800222c:	f000 fde0 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8002230:	2304      	movs	r3, #4
 8002232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002234:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	4619      	mov	r1, r3
 8002244:	480f      	ldr	r0, [pc, #60]	; (8002284 <MX_GPIO_Init+0x128>)
 8002246:	f000 fdd3 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800224a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800224e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002250:	2301      	movs	r3, #1
 8002252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4619      	mov	r1, r3
 8002262:	4809      	ldr	r0, [pc, #36]	; (8002288 <MX_GPIO_Init+0x12c>)
 8002264:	f000 fdc4 	bl	8002df0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002268:	2200      	movs	r2, #0
 800226a:	2100      	movs	r1, #0
 800226c:	2008      	movs	r0, #8
 800226e:	f000 fd4d 	bl	8002d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002272:	2008      	movs	r0, #8
 8002274:	f000 fd76 	bl	8002d64 <HAL_NVIC_EnableIRQ>

}
 8002278:	bf00      	nop
 800227a:	3728      	adds	r7, #40	; 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40023800 	.word	0x40023800
 8002284:	40020400 	.word	0x40020400
 8002288:	40020c00 	.word	0x40020c00

0800228c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <MX_I2C1_Init+0x50>)
 8002292:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <MX_I2C1_Init+0x54>)
 8002294:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_I2C1_Init+0x50>)
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <MX_I2C1_Init+0x58>)
 800229a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_I2C1_Init+0x50>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_I2C1_Init+0x50>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_I2C1_Init+0x50>)
 80022aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <MX_I2C1_Init+0x50>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_I2C1_Init+0x50>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <MX_I2C1_Init+0x50>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_I2C1_Init+0x50>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <MX_I2C1_Init+0x50>)
 80022ca:	f001 f8a9 	bl	8003420 <HAL_I2C_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022d4:	f000 fa5e 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000064 	.word	0x20000064
 80022e0:	40005400 	.word	0x40005400
 80022e4:	000186a0 	.word	0x000186a0

080022e8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <MX_I2C2_Init+0x50>)
 80022ee:	4a13      	ldr	r2, [pc, #76]	; (800233c <MX_I2C2_Init+0x54>)
 80022f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_I2C2_Init+0x50>)
 80022f4:	4a12      	ldr	r2, [pc, #72]	; (8002340 <MX_I2C2_Init+0x58>)
 80022f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <MX_I2C2_Init+0x50>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <MX_I2C2_Init+0x50>)
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <MX_I2C2_Init+0x50>)
 8002306:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800230a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <MX_I2C2_Init+0x50>)
 800230e:	2200      	movs	r2, #0
 8002310:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <MX_I2C2_Init+0x50>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <MX_I2C2_Init+0x50>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <MX_I2C2_Init+0x50>)
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002324:	4804      	ldr	r0, [pc, #16]	; (8002338 <MX_I2C2_Init+0x50>)
 8002326:	f001 f87b 	bl	8003420 <HAL_I2C_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002330:	f000 fa30 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200000b8 	.word	0x200000b8
 800233c:	40005800 	.word	0x40005800
 8002340:	000186a0 	.word	0x000186a0

08002344 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <MX_I2C3_Init+0x50>)
 800234a:	4a13      	ldr	r2, [pc, #76]	; (8002398 <MX_I2C3_Init+0x54>)
 800234c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_I2C3_Init+0x50>)
 8002350:	4a12      	ldr	r2, [pc, #72]	; (800239c <MX_I2C3_Init+0x58>)
 8002352:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <MX_I2C3_Init+0x50>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <MX_I2C3_Init+0x50>)
 800235c:	2200      	movs	r2, #0
 800235e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <MX_I2C3_Init+0x50>)
 8002362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002366:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <MX_I2C3_Init+0x50>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_I2C3_Init+0x50>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <MX_I2C3_Init+0x50>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <MX_I2C3_Init+0x50>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002380:	4804      	ldr	r0, [pc, #16]	; (8002394 <MX_I2C3_Init+0x50>)
 8002382:	f001 f84d 	bl	8003420 <HAL_I2C_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800238c:	f000 fa02 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}
 8002394:	2000010c 	.word	0x2000010c
 8002398:	40005c00 	.word	0x40005c00
 800239c:	000186a0 	.word	0x000186a0

080023a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08e      	sub	sp, #56	; 0x38
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a63      	ldr	r2, [pc, #396]	; (800254c <HAL_I2C_MspInit+0x1ac>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d12c      	bne.n	800241c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
 80023c6:	4b62      	ldr	r3, [pc, #392]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a61      	ldr	r2, [pc, #388]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023de:	23c0      	movs	r3, #192	; 0xc0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e2:	2312      	movs	r3, #18
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023ee:	2304      	movs	r3, #4
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f6:	4619      	mov	r1, r3
 80023f8:	4856      	ldr	r0, [pc, #344]	; (8002554 <HAL_I2C_MspInit+0x1b4>)
 80023fa:	f000 fcf9 	bl	8002df0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a52      	ldr	r2, [pc, #328]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 8002408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b50      	ldr	r3, [pc, #320]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800241a:	e093      	b.n	8002544 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a4d      	ldr	r2, [pc, #308]	; (8002558 <HAL_I2C_MspInit+0x1b8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d13d      	bne.n	80024a2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a48      	ldr	r2, [pc, #288]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b46      	ldr	r3, [pc, #280]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002448:	2312      	movs	r3, #18
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002450:	2303      	movs	r3, #3
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002454:	2304      	movs	r3, #4
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245c:	4619      	mov	r1, r3
 800245e:	483d      	ldr	r0, [pc, #244]	; (8002554 <HAL_I2C_MspInit+0x1b4>)
 8002460:	f000 fcc6 	bl	8002df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002464:	2308      	movs	r3, #8
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002468:	2312      	movs	r3, #18
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002474:	2309      	movs	r3, #9
 8002476:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247c:	4619      	mov	r1, r3
 800247e:	4835      	ldr	r0, [pc, #212]	; (8002554 <HAL_I2C_MspInit+0x1b4>)
 8002480:	f000 fcb6 	bl	8002df0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	4a30      	ldr	r2, [pc, #192]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 800248e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002492:	6413      	str	r3, [r2, #64]	; 0x40
 8002494:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697b      	ldr	r3, [r7, #20]
}
 80024a0:	e050      	b.n	8002544 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C3)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a2d      	ldr	r2, [pc, #180]	; (800255c <HAL_I2C_MspInit+0x1bc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d14b      	bne.n	8002544 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	4a26      	ldr	r2, [pc, #152]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	6313      	str	r3, [r2, #48]	; 0x30
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	4a1f      	ldr	r2, [pc, #124]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6313      	str	r3, [r2, #48]	; 0x30
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ea:	2312      	movs	r3, #18
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024f6:	2304      	movs	r3, #4
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fe:	4619      	mov	r1, r3
 8002500:	4817      	ldr	r0, [pc, #92]	; (8002560 <HAL_I2C_MspInit+0x1c0>)
 8002502:	f000 fc75 	bl	8002df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250c:	2312      	movs	r3, #18
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002514:	2303      	movs	r3, #3
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002518:	2304      	movs	r3, #4
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002520:	4619      	mov	r1, r3
 8002522:	4810      	ldr	r0, [pc, #64]	; (8002564 <HAL_I2C_MspInit+0x1c4>)
 8002524:	f000 fc64 	bl	8002df0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	4a07      	ldr	r2, [pc, #28]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 8002532:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002536:	6413      	str	r3, [r2, #64]	; 0x40
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_I2C_MspInit+0x1b0>)
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
}
 8002544:	bf00      	nop
 8002546:	3738      	adds	r7, #56	; 0x38
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40005400 	.word	0x40005400
 8002550:	40023800 	.word	0x40023800
 8002554:	40020400 	.word	0x40020400
 8002558:	40005800 	.word	0x40005800
 800255c:	40005c00 	.word	0x40005c00
 8002560:	40020800 	.word	0x40020800
 8002564:	40020000 	.word	0x40020000

08002568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b092      	sub	sp, #72	; 0x48
 800256c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800256e:	f000 fa47 	bl	8002a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002572:	f000 f8a7 	bl	80026c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002576:	f7ff fdf1 	bl	800215c <MX_GPIO_Init>
  MX_SPI1_Init();
 800257a:	f000 f91b 	bl	80027b4 <MX_SPI1_Init>
  MX_I2C3_Init();
 800257e:	f7ff fee1 	bl	8002344 <MX_I2C3_Init>
  MX_I2C1_Init();
 8002582:	f7ff fe83 	bl	800228c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002586:	f7ff feaf 	bl	80022e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  myLora = newLoRa();
 800258a:	4c42      	ldr	r4, [pc, #264]	; (8002694 <main+0x12c>)
 800258c:	f107 0308 	add.w	r3, r7, #8
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fa11 	bl	80019b8 <newLoRa>
 8002596:	4625      	mov	r5, r4
 8002598:	f107 0408 	add.w	r4, r7, #8
 800259c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800259e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80025a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myLora.CS_port         = NSS_GPIO_Port;
 80025ac:	4b39      	ldr	r3, [pc, #228]	; (8002694 <main+0x12c>)
 80025ae:	4a3a      	ldr	r2, [pc, #232]	; (8002698 <main+0x130>)
 80025b0:	601a      	str	r2, [r3, #0]
  myLora.CS_pin          = NSS_Pin;
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <main+0x12c>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	809a      	strh	r2, [r3, #4]
  myLora.reset_port      = RESET_GPIO_Port;
 80025b8:	4b36      	ldr	r3, [pc, #216]	; (8002694 <main+0x12c>)
 80025ba:	4a37      	ldr	r2, [pc, #220]	; (8002698 <main+0x130>)
 80025bc:	609a      	str	r2, [r3, #8]
  myLora.reset_pin       = RESET_Pin;
 80025be:	4b35      	ldr	r3, [pc, #212]	; (8002694 <main+0x12c>)
 80025c0:	2202      	movs	r2, #2
 80025c2:	819a      	strh	r2, [r3, #12]
  myLora.DIO0_port       = DIO0_GPIO_Port;
 80025c4:	4b33      	ldr	r3, [pc, #204]	; (8002694 <main+0x12c>)
 80025c6:	4a34      	ldr	r2, [pc, #208]	; (8002698 <main+0x130>)
 80025c8:	611a      	str	r2, [r3, #16]
  myLora.DIO0_pin        = DIO0_Pin;
 80025ca:	4b32      	ldr	r3, [pc, #200]	; (8002694 <main+0x12c>)
 80025cc:	2204      	movs	r2, #4
 80025ce:	829a      	strh	r2, [r3, #20]
  myLora.hSPIx           = &hspi1;
 80025d0:	4b30      	ldr	r3, [pc, #192]	; (8002694 <main+0x12c>)
 80025d2:	4a32      	ldr	r2, [pc, #200]	; (800269c <main+0x134>)
 80025d4:	619a      	str	r2, [r3, #24]

    if (LoRa_init(&myLora) == LORA_OK) {
 80025d6:	482f      	ldr	r0, [pc, #188]	; (8002694 <main+0x12c>)
 80025d8:	f7ff fd1c 	bl	8002014 <LoRa_init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2bc8      	cmp	r3, #200	; 0xc8
 80025e0:	d103      	bne.n	80025ea <main+0x82>
    	LoRa_status = 1;
 80025e2:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <main+0x138>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	e004      	b.n	80025f4 <main+0x8c>
    } else {
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80025ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025ee:	482d      	ldr	r0, [pc, #180]	; (80026a4 <main+0x13c>)
 80025f0:	f000 feca 	bl	8003388 <HAL_GPIO_TogglePin>
    }
    //  MCP9808_HandleTypeDef mcp9808 = mcp9808_init();
//  lcd_init();
  int ret = BMP280_Config(OSRS_16, OSRS_16, OSRS_OFF, MODE_NORMAL, T_SB_1000, IIR_16);
 80025f4:	2304      	movs	r3, #4
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	2305      	movs	r3, #5
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2303      	movs	r3, #3
 80025fe:	2200      	movs	r2, #0
 8002600:	2105      	movs	r1, #5
 8002602:	2005      	movs	r0, #5
 8002604:	f7fe fcb6 	bl	8000f74 <BMP280_Config>
 8002608:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (LoRa_status) {
 800260a:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <main+0x138>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0fb      	beq.n	800260a <main+0xa2>
	  	HAL_Delay(1000);
 8002612:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002616:	f000 fa65 	bl	8002ae4 <HAL_Delay>

		BMP280_Measure();
 800261a:	f7ff f941 	bl	80018a0 <BMP280_Measure>
		temp = (uint8_t) Temperature;
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <main+0x140>)
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002628:	edc7 7a01 	vstr	s15, [r7, #4]
 800262c:	793b      	ldrb	r3, [r7, #4]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <main+0x144>)
 8002632:	701a      	strb	r2, [r3, #0]
		pres = (uint8_t) (Pressure/1000);
 8002634:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <main+0x148>)
 8002636:	ed93 7a00 	vldr	s14, [r3]
 800263a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80026b4 <main+0x14c>
 800263e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002646:	edc7 7a01 	vstr	s15, [r7, #4]
 800264a:	793b      	ldrb	r3, [r7, #4]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <main+0x150>)
 8002650:	701a      	strb	r2, [r3, #0]
//		  	counter--;
//		} else {
//		  	LoRa_transmit(&myLora, &pres, 1, 100);
//		  	counter++;
//		}
		LoRa_transmit(&myLora, &tmp, 1, 100);
 8002652:	2364      	movs	r3, #100	; 0x64
 8002654:	2201      	movs	r2, #1
 8002656:	4919      	ldr	r1, [pc, #100]	; (80026bc <main+0x154>)
 8002658:	480e      	ldr	r0, [pc, #56]	; (8002694 <main+0x12c>)
 800265a:	f7ff fc07 	bl	8001e6c <LoRa_transmit>
		LoRa_startReceiving(&myLora);
 800265e:	480d      	ldr	r0, [pc, #52]	; (8002694 <main+0x12c>)
 8002660:	f7ff fc64 	bl	8001f2c <LoRa_startReceiving>
		LoRa_receive(&myLora, &data, 1);
 8002664:	2201      	movs	r2, #1
 8002666:	4916      	ldr	r1, [pc, #88]	; (80026c0 <main+0x158>)
 8002668:	480a      	ldr	r0, [pc, #40]	; (8002694 <main+0x12c>)
 800266a:	f7ff fc6b 	bl	8001f44 <LoRa_receive>
		tmp++;
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <main+0x154>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	3301      	adds	r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <main+0x154>)
 8002678:	701a      	strb	r2, [r3, #0]
		if (tmp > 60) {
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <main+0x154>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b3c      	cmp	r3, #60	; 0x3c
 8002680:	d902      	bls.n	8002688 <main+0x120>
			tmp = 1;
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <main+0x154>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
		}
	  	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800268c:	4805      	ldr	r0, [pc, #20]	; (80026a4 <main+0x13c>)
 800268e:	f000 fe7b 	bl	8003388 <HAL_GPIO_TogglePin>
	  if (LoRa_status) {
 8002692:	e7ba      	b.n	800260a <main+0xa2>
 8002694:	20000164 	.word	0x20000164
 8002698:	40020400 	.word	0x40020400
 800269c:	200001a0 	.word	0x200001a0
 80026a0:	20000160 	.word	0x20000160
 80026a4:	40020c00 	.word	0x40020c00
 80026a8:	20000194 	.word	0x20000194
 80026ac:	20000001 	.word	0x20000001
 80026b0:	20000198 	.word	0x20000198
 80026b4:	447a0000 	.word	0x447a0000
 80026b8:	20000002 	.word	0x20000002
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000190 	.word	0x20000190

080026c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b094      	sub	sp, #80	; 0x50
 80026c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ca:	f107 0320 	add.w	r3, r7, #32
 80026ce:	2230      	movs	r2, #48	; 0x30
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 fcd8 	bl	8006088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <SystemClock_Config+0xc8>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	4a26      	ldr	r2, [pc, #152]	; (800278c <SystemClock_Config+0xc8>)
 80026f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f6:	6413      	str	r3, [r2, #64]	; 0x40
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <SystemClock_Config+0xc8>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002704:	2300      	movs	r3, #0
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	4b21      	ldr	r3, [pc, #132]	; (8002790 <SystemClock_Config+0xcc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a20      	ldr	r2, [pc, #128]	; (8002790 <SystemClock_Config+0xcc>)
 800270e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <SystemClock_Config+0xcc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002720:	2301      	movs	r3, #1
 8002722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800272a:	2302      	movs	r3, #2
 800272c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800272e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002734:	2304      	movs	r3, #4
 8002736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002738:	2348      	movs	r3, #72	; 0x48
 800273a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800273c:	2302      	movs	r3, #2
 800273e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002740:	2308      	movs	r3, #8
 8002742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002744:	f107 0320 	add.w	r3, r7, #32
 8002748:	4618      	mov	r0, r3
 800274a:	f001 fec9 	bl	80044e0 <HAL_RCC_OscConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002754:	f000 f81e 	bl	8002794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002758:	230f      	movs	r3, #15
 800275a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800275c:	2302      	movs	r3, #2
 800275e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800276e:	f107 030c 	add.w	r3, r7, #12
 8002772:	2102      	movs	r1, #2
 8002774:	4618      	mov	r0, r3
 8002776:	f002 f9db 	bl	8004b30 <HAL_RCC_ClockConfig>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002780:	f000 f808 	bl	8002794 <Error_Handler>
  }
}
 8002784:	bf00      	nop
 8002786:	3750      	adds	r7, #80	; 0x50
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	40007000 	.word	0x40007000

08002794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002798:	b672      	cpsid	i
}
 800279a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800279c:	e7fe      	b.n	800279c <Error_Handler+0x8>

0800279e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80027b8:	4b17      	ldr	r3, [pc, #92]	; (8002818 <MX_SPI1_Init+0x64>)
 80027ba:	4a18      	ldr	r2, [pc, #96]	; (800281c <MX_SPI1_Init+0x68>)
 80027bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <MX_SPI1_Init+0x64>)
 80027c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <MX_SPI1_Init+0x64>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <MX_SPI1_Init+0x64>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_SPI1_Init+0x64>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <MX_SPI1_Init+0x64>)
 80027da:	2200      	movs	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <MX_SPI1_Init+0x64>)
 80027e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <MX_SPI1_Init+0x64>)
 80027e8:	2210      	movs	r2, #16
 80027ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027ec:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <MX_SPI1_Init+0x64>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <MX_SPI1_Init+0x64>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <MX_SPI1_Init+0x64>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <MX_SPI1_Init+0x64>)
 8002800:	220a      	movs	r2, #10
 8002802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002804:	4804      	ldr	r0, [pc, #16]	; (8002818 <MX_SPI1_Init+0x64>)
 8002806:	f002 fc47 	bl	8005098 <HAL_SPI_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002810:	f7ff ffc0 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200001a0 	.word	0x200001a0
 800281c:	40013000 	.word	0x40013000

08002820 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <HAL_SPI_MspInit+0x94>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d133      	bne.n	80028aa <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_SPI_MspInit+0x98>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <HAL_SPI_MspInit+0x98>)
 800284c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002850:	6453      	str	r3, [r2, #68]	; 0x44
 8002852:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_SPI_MspInit+0x98>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_SPI_MspInit+0x98>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_SPI_MspInit+0x98>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_SPI_MspInit+0x98>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800287a:	23e0      	movs	r3, #224	; 0xe0
 800287c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800288a:	2305      	movs	r3, #5
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	4809      	ldr	r0, [pc, #36]	; (80028bc <HAL_SPI_MspInit+0x9c>)
 8002896:	f000 faab 	bl	8002df0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	2023      	movs	r0, #35	; 0x23
 80028a0:	f000 fa34 	bl	8002d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80028a4:	2023      	movs	r0, #35	; 0x23
 80028a6:	f000 fa5d 	bl	8002d64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80028aa:	bf00      	nop
 80028ac:	3728      	adds	r7, #40	; 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40013000 	.word	0x40013000
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020000 	.word	0x40020000

080028c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_MspInit+0x4c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_MspInit+0x4c>)
 80028d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_MspInit+0x4c>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_MspInit+0x4c>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_MspInit+0x4c>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_MspInit+0x4c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028fe:	2007      	movs	r0, #7
 8002900:	f000 f9e4 	bl	8002ccc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40023800 	.word	0x40023800

08002910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002914:	e7fe      	b.n	8002914 <NMI_Handler+0x4>

08002916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291a:	e7fe      	b.n	800291a <HardFault_Handler+0x4>

0800291c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <MemManage_Handler+0x4>

08002922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <BusFault_Handler+0x4>

08002928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <UsageFault_Handler+0x4>

0800292e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800295c:	f000 f8a2 	bl	8002aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}

08002964 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8002968:	2004      	movs	r0, #4
 800296a:	f000 fd35 	bl	80033d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002978:	4802      	ldr	r0, [pc, #8]	; (8002984 <SPI1_IRQHandler+0x10>)
 800297a:	f003 f935 	bl	8005be8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200001a0 	.word	0x200001a0

08002988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <SystemInit+0x20>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <SystemInit+0x20>)
 8002994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029b0:	480d      	ldr	r0, [pc, #52]	; (80029e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029b2:	490e      	ldr	r1, [pc, #56]	; (80029ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029b4:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029b8:	e002      	b.n	80029c0 <LoopCopyDataInit>

080029ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029be:	3304      	adds	r3, #4

080029c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c4:	d3f9      	bcc.n	80029ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029c6:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029c8:	4c0b      	ldr	r4, [pc, #44]	; (80029f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029cc:	e001      	b.n	80029d2 <LoopFillZerobss>

080029ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d0:	3204      	adds	r2, #4

080029d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d4:	d3fb      	bcc.n	80029ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029d6:	f7ff ffd7 	bl	8002988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029da:	f003 fb5d 	bl	8006098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029de:	f7ff fdc3 	bl	8002568 <main>
  bx  lr    
 80029e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80029f0:	08006240 	.word	0x08006240
  ldr r2, =_sbss
 80029f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80029f8:	200001fc 	.word	0x200001fc

080029fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029fc:	e7fe      	b.n	80029fc <ADC_IRQHandler>
	...

08002a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <HAL_Init+0x40>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <HAL_Init+0x40>)
 8002a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_Init+0x40>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <HAL_Init+0x40>)
 8002a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_Init+0x40>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <HAL_Init+0x40>)
 8002a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a28:	2003      	movs	r0, #3
 8002a2a:	f000 f94f 	bl	8002ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f000 f808 	bl	8002a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a34:	f7ff ff44 	bl	80028c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023c00 	.word	0x40023c00

08002a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_InitTick+0x54>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_InitTick+0x58>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	4619      	mov	r1, r3
 8002a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f996 	bl	8002d94 <HAL_SYSTICK_Config>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e00e      	b.n	8002a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b0f      	cmp	r3, #15
 8002a76:	d80a      	bhi.n	8002a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	f000 f944 	bl	8002d0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a84:	4a06      	ldr	r2, [pc, #24]	; (8002aa0 <HAL_InitTick+0x5c>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e000      	b.n	8002a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000004 	.word	0x20000004
 8002a9c:	2000000c 	.word	0x2000000c
 8002aa0:	20000008 	.word	0x20000008

08002aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_IncTick+0x20>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_IncTick+0x24>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <HAL_IncTick+0x24>)
 8002ab6:	6013      	str	r3, [r2, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	2000000c 	.word	0x2000000c
 8002ac8:	200001f8 	.word	0x200001f8

08002acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <HAL_GetTick+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	200001f8 	.word	0x200001f8

08002ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aec:	f7ff ffee 	bl	8002acc <HAL_GetTick>
 8002af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d005      	beq.n	8002b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <HAL_Delay+0x44>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b0a:	bf00      	nop
 8002b0c:	f7ff ffde 	bl	8002acc <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d8f7      	bhi.n	8002b0c <HAL_Delay+0x28>
  {
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	2000000c 	.word	0x2000000c

08002b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	60d3      	str	r3, [r2, #12]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <__NVIC_GetPriorityGrouping+0x18>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 0307 	and.w	r3, r3, #7
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	db0b      	blt.n	8002bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	f003 021f 	and.w	r2, r3, #31
 8002ba8:	4907      	ldr	r1, [pc, #28]	; (8002bc8 <__NVIC_EnableIRQ+0x38>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000e100 	.word	0xe000e100

08002bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	6039      	str	r1, [r7, #0]
 8002bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	db0a      	blt.n	8002bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	490c      	ldr	r1, [pc, #48]	; (8002c18 <__NVIC_SetPriority+0x4c>)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf4:	e00a      	b.n	8002c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4908      	ldr	r1, [pc, #32]	; (8002c1c <__NVIC_SetPriority+0x50>)
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	3b04      	subs	r3, #4
 8002c04:	0112      	lsls	r2, r2, #4
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	440b      	add	r3, r1
 8002c0a:	761a      	strb	r2, [r3, #24]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000e100 	.word	0xe000e100
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f1c3 0307 	rsb	r3, r3, #7
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	bf28      	it	cs
 8002c3e:	2304      	movcs	r3, #4
 8002c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d902      	bls.n	8002c50 <NVIC_EncodePriority+0x30>
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3b03      	subs	r3, #3
 8002c4e:	e000      	b.n	8002c52 <NVIC_EncodePriority+0x32>
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	f04f 32ff 	mov.w	r2, #4294967295
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	401a      	ands	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c68:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43d9      	mvns	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	4313      	orrs	r3, r2
         );
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3724      	adds	r7, #36	; 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c98:	d301      	bcc.n	8002c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00f      	b.n	8002cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <SysTick_Config+0x40>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ca6:	210f      	movs	r1, #15
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	f7ff ff8e 	bl	8002bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb8:	2207      	movs	r2, #7
 8002cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	e000e010 	.word	0xe000e010

08002ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b07      	cmp	r3, #7
 8002cd8:	d00f      	beq.n	8002cfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	d00c      	beq.n	8002cfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d009      	beq.n	8002cfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d006      	beq.n	8002cfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d003      	beq.n	8002cfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002cf2:	2190      	movs	r1, #144	; 0x90
 8002cf4:	4804      	ldr	r0, [pc, #16]	; (8002d08 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002cf6:	f7ff fd52 	bl	800279e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ff16 	bl	8002b2c <__NVIC_SetPriorityGrouping>
}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	080060f8 	.word	0x080060f8

08002d0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b0f      	cmp	r3, #15
 8002d22:	d903      	bls.n	8002d2c <HAL_NVIC_SetPriority+0x20>
 8002d24:	21a8      	movs	r1, #168	; 0xa8
 8002d26:	480e      	ldr	r0, [pc, #56]	; (8002d60 <HAL_NVIC_SetPriority+0x54>)
 8002d28:	f7ff fd39 	bl	800279e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b0f      	cmp	r3, #15
 8002d30:	d903      	bls.n	8002d3a <HAL_NVIC_SetPriority+0x2e>
 8002d32:	21a9      	movs	r1, #169	; 0xa9
 8002d34:	480a      	ldr	r0, [pc, #40]	; (8002d60 <HAL_NVIC_SetPriority+0x54>)
 8002d36:	f7ff fd32 	bl	800279e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3a:	f7ff ff1b 	bl	8002b74 <__NVIC_GetPriorityGrouping>
 8002d3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	6978      	ldr	r0, [r7, #20]
 8002d46:	f7ff ff6b 	bl	8002c20 <NVIC_EncodePriority>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff ff3a 	bl	8002bcc <__NVIC_SetPriority>
}
 8002d58:	bf00      	nop
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	080060f8 	.word	0x080060f8

08002d64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da03      	bge.n	8002d7e <HAL_NVIC_EnableIRQ+0x1a>
 8002d76:	21bc      	movs	r1, #188	; 0xbc
 8002d78:	4805      	ldr	r0, [pc, #20]	; (8002d90 <HAL_NVIC_EnableIRQ+0x2c>)
 8002d7a:	f7ff fd10 	bl	800279e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ff04 	bl	8002b90 <__NVIC_EnableIRQ>
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	080060f8 	.word	0x080060f8

08002d94 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff ff73 	bl	8002c88 <SysTick_Config>
 8002da2:	4603      	mov	r3, r0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d004      	beq.n	8002dca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2280      	movs	r2, #128	; 0x80
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00c      	b.n	8002de4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2205      	movs	r2, #5
 8002dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a33      	ldr	r2, [pc, #204]	; (8002ed8 <HAL_GPIO_Init+0xe8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d017      	beq.n	8002e3e <HAL_GPIO_Init+0x4e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a32      	ldr	r2, [pc, #200]	; (8002edc <HAL_GPIO_Init+0xec>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_GPIO_Init+0x4e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a31      	ldr	r2, [pc, #196]	; (8002ee0 <HAL_GPIO_Init+0xf0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00f      	beq.n	8002e3e <HAL_GPIO_Init+0x4e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a30      	ldr	r2, [pc, #192]	; (8002ee4 <HAL_GPIO_Init+0xf4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00b      	beq.n	8002e3e <HAL_GPIO_Init+0x4e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2f      	ldr	r2, [pc, #188]	; (8002ee8 <HAL_GPIO_Init+0xf8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <HAL_GPIO_Init+0x4e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a2e      	ldr	r2, [pc, #184]	; (8002eec <HAL_GPIO_Init+0xfc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x4e>
 8002e36:	21ac      	movs	r1, #172	; 0xac
 8002e38:	482d      	ldr	r0, [pc, #180]	; (8002ef0 <HAL_GPIO_Init+0x100>)
 8002e3a:	f7ff fcb0 	bl	800279e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_GPIO_Init+0x64>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x6c>
 8002e54:	21ad      	movs	r1, #173	; 0xad
 8002e56:	4826      	ldr	r0, [pc, #152]	; (8002ef0 <HAL_GPIO_Init+0x100>)
 8002e58:	f7ff fca1 	bl	800279e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d035      	beq.n	8002ed0 <HAL_GPIO_Init+0xe0>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d031      	beq.n	8002ed0 <HAL_GPIO_Init+0xe0>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b11      	cmp	r3, #17
 8002e72:	d02d      	beq.n	8002ed0 <HAL_GPIO_Init+0xe0>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d029      	beq.n	8002ed0 <HAL_GPIO_Init+0xe0>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b12      	cmp	r3, #18
 8002e82:	d025      	beq.n	8002ed0 <HAL_GPIO_Init+0xe0>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002e8c:	d020      	beq.n	8002ed0 <HAL_GPIO_Init+0xe0>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002e96:	d01b      	beq.n	8002ed0 <HAL_GPIO_Init+0xe0>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002ea0:	d016      	beq.n	8002ed0 <HAL_GPIO_Init+0xe0>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002eaa:	d011      	beq.n	8002ed0 <HAL_GPIO_Init+0xe0>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_GPIO_Init+0xe0>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002ebe:	d007      	beq.n	8002ed0 <HAL_GPIO_Init+0xe0>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0xe0>
 8002ec8:	21ae      	movs	r1, #174	; 0xae
 8002eca:	4809      	ldr	r0, [pc, #36]	; (8002ef0 <HAL_GPIO_Init+0x100>)
 8002ecc:	f7ff fc67 	bl	800279e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	e20c      	b.n	80032f0 <HAL_GPIO_Init+0x500>
 8002ed6:	bf00      	nop
 8002ed8:	40020000 	.word	0x40020000
 8002edc:	40020400 	.word	0x40020400
 8002ee0:	40020800 	.word	0x40020800
 8002ee4:	40020c00 	.word	0x40020c00
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40021c00 	.word	0x40021c00
 8002ef0:	08006134 	.word	0x08006134
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	f040 81ec 	bne.w	80032ea <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d005      	beq.n	8002f2a <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d144      	bne.n	8002fb4 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00f      	beq.n	8002f52 <HAL_GPIO_Init+0x162>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d00b      	beq.n	8002f52 <HAL_GPIO_Init+0x162>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d007      	beq.n	8002f52 <HAL_GPIO_Init+0x162>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_Init+0x162>
 8002f4a:	21c0      	movs	r1, #192	; 0xc0
 8002f4c:	4884      	ldr	r0, [pc, #528]	; (8003160 <HAL_GPIO_Init+0x370>)
 8002f4e:	f7ff fc26 	bl	800279e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 0201 	and.w	r2, r3, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d027      	beq.n	8003010 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_GPIO_Init+0x1f0>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d007      	beq.n	8002fe0 <HAL_GPIO_Init+0x1f0>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d003      	beq.n	8002fe0 <HAL_GPIO_Init+0x1f0>
 8002fd8:	21d1      	movs	r1, #209	; 0xd1
 8002fda:	4861      	ldr	r0, [pc, #388]	; (8003160 <HAL_GPIO_Init+0x370>)
 8002fdc:	f7ff fbdf 	bl	800279e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b02      	cmp	r3, #2
 800301a:	f040 80a3 	bne.w	8003164 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d077      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b09      	cmp	r3, #9
 800302c:	d073      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d06f      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d06b      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d067      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d063      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d05f      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d05b      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d057      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d053      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d04f      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d04b      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d047      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b04      	cmp	r3, #4
 800308c:	d043      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b05      	cmp	r3, #5
 8003094:	d03f      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b05      	cmp	r3, #5
 800309c:	d03b      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b05      	cmp	r3, #5
 80030a4:	d037      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d033      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b06      	cmp	r3, #6
 80030b4:	d02f      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b05      	cmp	r3, #5
 80030bc:	d02b      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d027      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b07      	cmp	r3, #7
 80030cc:	d023      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b07      	cmp	r3, #7
 80030d4:	d01f      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b07      	cmp	r3, #7
 80030dc:	d01b      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d017      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b0a      	cmp	r3, #10
 80030ec:	d013      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b09      	cmp	r3, #9
 80030f4:	d00f      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b09      	cmp	r3, #9
 80030fc:	d00b      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d007      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b0f      	cmp	r3, #15
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x326>
 800310e:	21de      	movs	r1, #222	; 0xde
 8003110:	4813      	ldr	r0, [pc, #76]	; (8003160 <HAL_GPIO_Init+0x370>)
 8003112:	f7ff fb44 	bl	800279e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	08da      	lsrs	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3208      	adds	r2, #8
 800311e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	08da      	lsrs	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3208      	adds	r2, #8
 8003158:	69b9      	ldr	r1, [r7, #24]
 800315a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800315e:	e001      	b.n	8003164 <HAL_GPIO_Init+0x374>
 8003160:	08006134 	.word	0x08006134
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0203 	and.w	r2, r3, #3
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80a2 	beq.w	80032ea <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	4b56      	ldr	r3, [pc, #344]	; (8003304 <HAL_GPIO_Init+0x514>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	4a55      	ldr	r2, [pc, #340]	; (8003304 <HAL_GPIO_Init+0x514>)
 80031b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b4:	6453      	str	r3, [r2, #68]	; 0x44
 80031b6:	4b53      	ldr	r3, [pc, #332]	; (8003304 <HAL_GPIO_Init+0x514>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031c2:	4a51      	ldr	r2, [pc, #324]	; (8003308 <HAL_GPIO_Init+0x518>)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	3302      	adds	r3, #2
 80031ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	220f      	movs	r2, #15
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a48      	ldr	r2, [pc, #288]	; (800330c <HAL_GPIO_Init+0x51c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d019      	beq.n	8003222 <HAL_GPIO_Init+0x432>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a47      	ldr	r2, [pc, #284]	; (8003310 <HAL_GPIO_Init+0x520>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_GPIO_Init+0x42e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a46      	ldr	r2, [pc, #280]	; (8003314 <HAL_GPIO_Init+0x524>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00d      	beq.n	800321a <HAL_GPIO_Init+0x42a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a45      	ldr	r2, [pc, #276]	; (8003318 <HAL_GPIO_Init+0x528>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d007      	beq.n	8003216 <HAL_GPIO_Init+0x426>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a44      	ldr	r2, [pc, #272]	; (800331c <HAL_GPIO_Init+0x52c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d101      	bne.n	8003212 <HAL_GPIO_Init+0x422>
 800320e:	2304      	movs	r3, #4
 8003210:	e008      	b.n	8003224 <HAL_GPIO_Init+0x434>
 8003212:	2307      	movs	r3, #7
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x434>
 8003216:	2303      	movs	r3, #3
 8003218:	e004      	b.n	8003224 <HAL_GPIO_Init+0x434>
 800321a:	2302      	movs	r3, #2
 800321c:	e002      	b.n	8003224 <HAL_GPIO_Init+0x434>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_GPIO_Init+0x434>
 8003222:	2300      	movs	r3, #0
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	f002 0203 	and.w	r2, r2, #3
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	4093      	lsls	r3, r2
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003234:	4934      	ldr	r1, [pc, #208]	; (8003308 <HAL_GPIO_Init+0x518>)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	3302      	adds	r3, #2
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003242:	4b37      	ldr	r3, [pc, #220]	; (8003320 <HAL_GPIO_Init+0x530>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003266:	4a2e      	ldr	r2, [pc, #184]	; (8003320 <HAL_GPIO_Init+0x530>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800326c:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <HAL_GPIO_Init+0x530>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003290:	4a23      	ldr	r2, [pc, #140]	; (8003320 <HAL_GPIO_Init+0x530>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003296:	4b22      	ldr	r3, [pc, #136]	; (8003320 <HAL_GPIO_Init+0x530>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <HAL_GPIO_Init+0x530>)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c0:	4b17      	ldr	r3, [pc, #92]	; (8003320 <HAL_GPIO_Init+0x530>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e4:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <HAL_GPIO_Init+0x530>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3301      	adds	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	f67f adfe 	bls.w	8002ef4 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	3720      	adds	r7, #32
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	40013800 	.word	0x40013800
 800330c:	40020000 	.word	0x40020000
 8003310:	40020400 	.word	0x40020400
 8003314:	40020800 	.word	0x40020800
 8003318:	40020c00 	.word	0x40020c00
 800331c:	40021000 	.word	0x40021000
 8003320:	40013c00 	.word	0x40013c00

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d004      	beq.n	8003344 <HAL_GPIO_WritePin+0x20>
 800333a:	887b      	ldrh	r3, [r7, #2]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	041b      	lsls	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d004      	beq.n	800334e <HAL_GPIO_WritePin+0x2a>
 8003344:	f240 119d 	movw	r1, #413	; 0x19d
 8003348:	480e      	ldr	r0, [pc, #56]	; (8003384 <HAL_GPIO_WritePin+0x60>)
 800334a:	f7ff fa28 	bl	800279e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800334e:	787b      	ldrb	r3, [r7, #1]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <HAL_GPIO_WritePin+0x40>
 8003354:	787b      	ldrb	r3, [r7, #1]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d004      	beq.n	8003364 <HAL_GPIO_WritePin+0x40>
 800335a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800335e:	4809      	ldr	r0, [pc, #36]	; (8003384 <HAL_GPIO_WritePin+0x60>)
 8003360:	f7ff fa1d 	bl	800279e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003364:	787b      	ldrb	r3, [r7, #1]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800336a:	887a      	ldrh	r2, [r7, #2]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003370:	e003      	b.n	800337a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003372:	887b      	ldrh	r3, [r7, #2]
 8003374:	041a      	lsls	r2, r3, #16
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	619a      	str	r2, [r3, #24]
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	08006134 	.word	0x08006134

08003388 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003394:	887b      	ldrh	r3, [r7, #2]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d004      	beq.n	80033a4 <HAL_GPIO_TogglePin+0x1c>
 800339a:	887b      	ldrh	r3, [r7, #2]
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	041b      	lsls	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d004      	beq.n	80033ae <HAL_GPIO_TogglePin+0x26>
 80033a4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80033a8:	480a      	ldr	r0, [pc, #40]	; (80033d4 <HAL_GPIO_TogglePin+0x4c>)
 80033aa:	f7ff f9f8 	bl	800279e <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033b4:	887a      	ldrh	r2, [r7, #2]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4013      	ands	r3, r2
 80033ba:	041a      	lsls	r2, r3, #16
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	43d9      	mvns	r1, r3
 80033c0:	887b      	ldrh	r3, [r7, #2]
 80033c2:	400b      	ands	r3, r1
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	619a      	str	r2, [r3, #24]
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	08006134 	.word	0x08006134

080033d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033e2:	4b08      	ldr	r3, [pc, #32]	; (8003404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ee:	4a05      	ldr	r2, [pc, #20]	; (8003404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 f806 	bl	8003408 <HAL_GPIO_EXTI_Callback>
  }
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40013c00 	.word	0x40013c00

08003408 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e1bd      	b.n	80037ae <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a93      	ldr	r2, [pc, #588]	; (8003684 <HAL_I2C_Init+0x264>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00e      	beq.n	800345a <HAL_I2C_Init+0x3a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a91      	ldr	r2, [pc, #580]	; (8003688 <HAL_I2C_Init+0x268>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d009      	beq.n	800345a <HAL_I2C_Init+0x3a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a90      	ldr	r2, [pc, #576]	; (800368c <HAL_I2C_Init+0x26c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_I2C_Init+0x3a>
 8003450:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8003454:	488e      	ldr	r0, [pc, #568]	; (8003690 <HAL_I2C_Init+0x270>)
 8003456:	f7ff f9a2 	bl	800279e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <HAL_I2C_Init+0x4c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4a8b      	ldr	r2, [pc, #556]	; (8003694 <HAL_I2C_Init+0x274>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d904      	bls.n	8003476 <HAL_I2C_Init+0x56>
 800346c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003470:	4887      	ldr	r0, [pc, #540]	; (8003690 <HAL_I2C_Init+0x270>)
 8003472:	f7ff f994 	bl	800279e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_I2C_Init+0x72>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003486:	d004      	beq.n	8003492 <HAL_I2C_Init+0x72>
 8003488:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800348c:	4880      	ldr	r0, [pc, #512]	; (8003690 <HAL_I2C_Init+0x270>)
 800348e:	f7ff f986 	bl	800279e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d004      	beq.n	80034ac <HAL_I2C_Init+0x8c>
 80034a2:	f240 11c1 	movw	r1, #449	; 0x1c1
 80034a6:	487a      	ldr	r0, [pc, #488]	; (8003690 <HAL_I2C_Init+0x270>)
 80034a8:	f7ff f979 	bl	800279e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b4:	d009      	beq.n	80034ca <HAL_I2C_Init+0xaa>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034be:	d004      	beq.n	80034ca <HAL_I2C_Init+0xaa>
 80034c0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80034c4:	4872      	ldr	r0, [pc, #456]	; (8003690 <HAL_I2C_Init+0x270>)
 80034c6:	f7ff f96a 	bl	800279e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_I2C_Init+0xc4>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d004      	beq.n	80034e4 <HAL_I2C_Init+0xc4>
 80034da:	f240 11c3 	movw	r1, #451	; 0x1c3
 80034de:	486c      	ldr	r0, [pc, #432]	; (8003690 <HAL_I2C_Init+0x270>)
 80034e0:	f7ff f95d 	bl	800279e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <HAL_I2C_Init+0xda>
 80034f0:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80034f4:	4866      	ldr	r0, [pc, #408]	; (8003690 <HAL_I2C_Init+0x270>)
 80034f6:	f7ff f952 	bl	800279e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_I2C_Init+0xf4>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d004      	beq.n	8003514 <HAL_I2C_Init+0xf4>
 800350a:	f240 11c5 	movw	r1, #453	; 0x1c5
 800350e:	4860      	ldr	r0, [pc, #384]	; (8003690 <HAL_I2C_Init+0x270>)
 8003510:	f7ff f945 	bl	800279e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_I2C_Init+0x10e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	2b80      	cmp	r3, #128	; 0x80
 8003522:	d004      	beq.n	800352e <HAL_I2C_Init+0x10e>
 8003524:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003528:	4859      	ldr	r0, [pc, #356]	; (8003690 <HAL_I2C_Init+0x270>)
 800352a:	f7ff f938 	bl	800279e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fe ff2c 	bl	80023a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2224      	movs	r2, #36	; 0x24
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800356e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800357e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003580:	f001 fd76 	bl	8005070 <HAL_RCC_GetPCLK1Freq>
 8003584:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4a43      	ldr	r2, [pc, #268]	; (8003698 <HAL_I2C_Init+0x278>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d807      	bhi.n	80035a0 <HAL_I2C_Init+0x180>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4a42      	ldr	r2, [pc, #264]	; (800369c <HAL_I2C_Init+0x27c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	bf94      	ite	ls
 8003598:	2301      	movls	r3, #1
 800359a:	2300      	movhi	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e006      	b.n	80035ae <HAL_I2C_Init+0x18e>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4a3f      	ldr	r2, [pc, #252]	; (80036a0 <HAL_I2C_Init+0x280>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	bf94      	ite	ls
 80035a8:	2301      	movls	r3, #1
 80035aa:	2300      	movhi	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e0fb      	b.n	80037ae <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a3a      	ldr	r2, [pc, #232]	; (80036a4 <HAL_I2C_Init+0x284>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	0c9b      	lsrs	r3, r3, #18
 80035c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4a2c      	ldr	r2, [pc, #176]	; (8003698 <HAL_I2C_Init+0x278>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d802      	bhi.n	80035f0 <HAL_I2C_Init+0x1d0>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	3301      	adds	r3, #1
 80035ee:	e009      	b.n	8003604 <HAL_I2C_Init+0x1e4>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	4a2b      	ldr	r2, [pc, #172]	; (80036a8 <HAL_I2C_Init+0x288>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	3301      	adds	r3, #1
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	430b      	orrs	r3, r1
 800360a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003616:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	491e      	ldr	r1, [pc, #120]	; (8003698 <HAL_I2C_Init+0x278>)
 8003620:	428b      	cmp	r3, r1
 8003622:	d819      	bhi.n	8003658 <HAL_I2C_Init+0x238>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1e59      	subs	r1, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003632:	1c59      	adds	r1, r3, #1
 8003634:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003638:	400b      	ands	r3, r1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_I2C_Init+0x234>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1e59      	subs	r1, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	fbb1 f3f3 	udiv	r3, r1, r3
 800364c:	3301      	adds	r3, #1
 800364e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003652:	e065      	b.n	8003720 <HAL_I2C_Init+0x300>
 8003654:	2304      	movs	r3, #4
 8003656:	e063      	b.n	8003720 <HAL_I2C_Init+0x300>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d125      	bne.n	80036ac <HAL_I2C_Init+0x28c>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1e58      	subs	r0, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	440b      	add	r3, r1
 800366e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003672:	3301      	adds	r3, #1
 8003674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003678:	2b00      	cmp	r3, #0
 800367a:	bf0c      	ite	eq
 800367c:	2301      	moveq	r3, #1
 800367e:	2300      	movne	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e026      	b.n	80036d2 <HAL_I2C_Init+0x2b2>
 8003684:	40005400 	.word	0x40005400
 8003688:	40005800 	.word	0x40005800
 800368c:	40005c00 	.word	0x40005c00
 8003690:	08006170 	.word	0x08006170
 8003694:	00061a80 	.word	0x00061a80
 8003698:	000186a0 	.word	0x000186a0
 800369c:	001e847f 	.word	0x001e847f
 80036a0:	003d08ff 	.word	0x003d08ff
 80036a4:	431bde83 	.word	0x431bde83
 80036a8:	10624dd3 	.word	0x10624dd3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1e58      	subs	r0, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	0099      	lsls	r1, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Init+0x2ba>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e022      	b.n	8003720 <HAL_I2C_Init+0x300>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10e      	bne.n	8003700 <HAL_I2C_Init+0x2e0>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1e58      	subs	r0, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	460b      	mov	r3, r1
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	440b      	add	r3, r1
 80036f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fe:	e00f      	b.n	8003720 <HAL_I2C_Init+0x300>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1e58      	subs	r0, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	0099      	lsls	r1, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	fbb0 f3f3 	udiv	r3, r0, r3
 8003716:	3301      	adds	r3, #1
 8003718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	6809      	ldr	r1, [r1, #0]
 8003724:	4313      	orrs	r3, r2
 8003726:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800374e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6911      	ldr	r1, [r2, #16]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68d2      	ldr	r2, [r2, #12]
 800375a:	4311      	orrs	r1, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	430b      	orrs	r3, r1
 8003762:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop

080037b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af02      	add	r7, sp, #8
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	4608      	mov	r0, r1
 80037c2:	4611      	mov	r1, r2
 80037c4:	461a      	mov	r2, r3
 80037c6:	4603      	mov	r3, r0
 80037c8:	817b      	strh	r3, [r7, #10]
 80037ca:	460b      	mov	r3, r1
 80037cc:	813b      	strh	r3, [r7, #8]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037d2:	f7ff f97b 	bl	8002acc <HAL_GetTick>
 80037d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d007      	beq.n	80037ee <HAL_I2C_Mem_Write+0x36>
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d004      	beq.n	80037ee <HAL_I2C_Mem_Write+0x36>
 80037e4:	f640 11b9 	movw	r1, #2489	; 0x9b9
 80037e8:	4873      	ldr	r0, [pc, #460]	; (80039b8 <HAL_I2C_Mem_Write+0x200>)
 80037ea:	f7fe ffd8 	bl	800279e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	f040 80d9 	bne.w	80039ae <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2319      	movs	r3, #25
 8003802:	2201      	movs	r2, #1
 8003804:	496d      	ldr	r1, [pc, #436]	; (80039bc <HAL_I2C_Mem_Write+0x204>)
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fc8c 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
 8003814:	e0cc      	b.n	80039b0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_I2C_Mem_Write+0x6c>
 8003820:	2302      	movs	r3, #2
 8003822:	e0c5      	b.n	80039b0 <HAL_I2C_Mem_Write+0x1f8>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d007      	beq.n	800384a <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003858:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2221      	movs	r2, #33	; 0x21
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2240      	movs	r2, #64	; 0x40
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a3a      	ldr	r2, [r7, #32]
 8003874:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800387a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4a4d      	ldr	r2, [pc, #308]	; (80039c0 <HAL_I2C_Mem_Write+0x208>)
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800388c:	88f8      	ldrh	r0, [r7, #6]
 800388e:	893a      	ldrh	r2, [r7, #8]
 8003890:	8979      	ldrh	r1, [r7, #10]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	9301      	str	r3, [sp, #4]
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	4603      	mov	r3, r0
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fac3 	bl	8003e28 <I2C_RequestMemoryWrite>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d052      	beq.n	800394e <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e081      	b.n	80039b0 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fd0d 	bl	80042d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00d      	beq.n	80038d8 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d107      	bne.n	80038d4 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e06b      	b.n	80039b0 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	781a      	ldrb	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b04      	cmp	r3, #4
 8003914:	d11b      	bne.n	800394e <HAL_I2C_Mem_Write+0x196>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	d017      	beq.n	800394e <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	781a      	ldrb	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1aa      	bne.n	80038ac <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fcf9 	bl	8004352 <I2C_WaitOnBTFFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2b04      	cmp	r3, #4
 800396c:	d107      	bne.n	800397e <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e016      	b.n	80039b0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003990:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e000      	b.n	80039b0 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	08006170 	.word	0x08006170
 80039bc:	00100002 	.word	0x00100002
 80039c0:	ffff0000 	.word	0xffff0000

080039c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08c      	sub	sp, #48	; 0x30
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	4608      	mov	r0, r1
 80039ce:	4611      	mov	r1, r2
 80039d0:	461a      	mov	r2, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	817b      	strh	r3, [r7, #10]
 80039d6:	460b      	mov	r3, r1
 80039d8:	813b      	strh	r3, [r7, #8]
 80039da:	4613      	mov	r3, r2
 80039dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039de:	f7ff f875 	bl	8002acc <HAL_GetTick>
 80039e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d007      	beq.n	80039fa <HAL_I2C_Mem_Read+0x36>
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d004      	beq.n	80039fa <HAL_I2C_Mem_Read+0x36>
 80039f0:	f640 2134 	movw	r1, #2612	; 0xa34
 80039f4:	4881      	ldr	r0, [pc, #516]	; (8003bfc <HAL_I2C_Mem_Read+0x238>)
 80039f6:	f7fe fed2 	bl	800279e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	f040 8209 	bne.w	8003e1a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2319      	movs	r3, #25
 8003a0e:	2201      	movs	r2, #1
 8003a10:	497b      	ldr	r1, [pc, #492]	; (8003c00 <HAL_I2C_Mem_Read+0x23c>)
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fb86 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e1fc      	b.n	8003e1c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_I2C_Mem_Read+0x6c>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e1f5      	b.n	8003e1c <HAL_I2C_Mem_Read+0x458>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d007      	beq.n	8003a56 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a64:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2222      	movs	r2, #34	; 0x22
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2240      	movs	r2, #64	; 0x40
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a5b      	ldr	r2, [pc, #364]	; (8003c04 <HAL_I2C_Mem_Read+0x240>)
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a98:	88f8      	ldrh	r0, [r7, #6]
 8003a9a:	893a      	ldrh	r2, [r7, #8]
 8003a9c:	8979      	ldrh	r1, [r7, #10]
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	9301      	str	r3, [sp, #4]
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fa53 	bl	8003f54 <I2C_RequestMemoryRead>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e1b1      	b.n	8003e1c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d113      	bne.n	8003ae8 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	623b      	str	r3, [r7, #32]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e185      	b.n	8003df4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d11b      	bne.n	8003b28 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afe:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e165      	b.n	8003df4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d11b      	bne.n	8003b68 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3e:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b50:	2300      	movs	r3, #0
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	e145      	b.n	8003df4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b7e:	e139      	b.n	8003df4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	f200 80f2 	bhi.w	8003d6e <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d123      	bne.n	8003bda <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fc1c 	bl	80043d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e13a      	b.n	8003e1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bd8:	e10c      	b.n	8003df4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d14f      	bne.n	8003c82 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	2200      	movs	r2, #0
 8003bea:	4907      	ldr	r1, [pc, #28]	; (8003c08 <HAL_I2C_Mem_Read+0x244>)
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 fa99 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d009      	beq.n	8003c0c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e10f      	b.n	8003e1c <HAL_I2C_Mem_Read+0x458>
 8003bfc:	08006170 	.word	0x08006170
 8003c00:	00100002 	.word	0x00100002
 8003c04:	ffff0000 	.word	0xffff0000
 8003c08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c80:	e0b8      	b.n	8003df4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	2200      	movs	r2, #0
 8003c8a:	4966      	ldr	r1, [pc, #408]	; (8003e24 <HAL_I2C_Mem_Read+0x460>)
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fa49 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0bf      	b.n	8003e1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	494f      	ldr	r1, [pc, #316]	; (8003e24 <HAL_I2C_Mem_Read+0x460>)
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fa1b 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e091      	b.n	8003e1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d6c:	e042      	b.n	8003df4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fb2e 	bl	80043d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e04c      	b.n	8003e1c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d118      	bne.n	8003df4 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f47f aec1 	bne.w	8003b80 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e000      	b.n	8003e1c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003e1a:	2302      	movs	r3, #2
  }
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3728      	adds	r7, #40	; 0x28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	00010004 	.word	0x00010004

08003e28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	4608      	mov	r0, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	817b      	strh	r3, [r7, #10]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	813b      	strh	r3, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f960 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00d      	beq.n	8003e86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e78:	d103      	bne.n	8003e82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e05f      	b.n	8003f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e86:	897b      	ldrh	r3, [r7, #10]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	6a3a      	ldr	r2, [r7, #32]
 8003e9a:	492d      	ldr	r1, [pc, #180]	; (8003f50 <I2C_RequestMemoryWrite+0x128>)
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f998 	bl	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e04c      	b.n	8003f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec4:	6a39      	ldr	r1, [r7, #32]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fa02 	bl	80042d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d107      	bne.n	8003eea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e02b      	b.n	8003f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d105      	bne.n	8003f00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef4:	893b      	ldrh	r3, [r7, #8]
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	611a      	str	r2, [r3, #16]
 8003efe:	e021      	b.n	8003f44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f00:	893b      	ldrh	r3, [r7, #8]
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f10:	6a39      	ldr	r1, [r7, #32]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f9dc 	bl	80042d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00d      	beq.n	8003f3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d107      	bne.n	8003f36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e005      	b.n	8003f46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f3a:	893b      	ldrh	r3, [r7, #8]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	00010002 	.word	0x00010002

08003f54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	461a      	mov	r2, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	817b      	strh	r3, [r7, #10]
 8003f66:	460b      	mov	r3, r1
 8003f68:	813b      	strh	r3, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f8c2 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb4:	d103      	bne.n	8003fbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e0aa      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fc2:	897b      	ldrh	r3, [r7, #10]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	6a3a      	ldr	r2, [r7, #32]
 8003fd6:	4952      	ldr	r1, [pc, #328]	; (8004120 <I2C_RequestMemoryRead+0x1cc>)
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f8fa 	bl	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e097      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004000:	6a39      	ldr	r1, [r7, #32]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f964 	bl	80042d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b04      	cmp	r3, #4
 8004014:	d107      	bne.n	8004026 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004024:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e076      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d105      	bne.n	800403c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004030:	893b      	ldrh	r3, [r7, #8]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	611a      	str	r2, [r3, #16]
 800403a:	e021      	b.n	8004080 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800403c:	893b      	ldrh	r3, [r7, #8]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	b29b      	uxth	r3, r3
 8004042:	b2da      	uxtb	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	6a39      	ldr	r1, [r7, #32]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f93e 	bl	80042d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00d      	beq.n	8004076 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	2b04      	cmp	r3, #4
 8004060:	d107      	bne.n	8004072 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004070:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e050      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004076:	893b      	ldrh	r3, [r7, #8]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004082:	6a39      	ldr	r1, [r7, #32]
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f923 	bl	80042d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	2b04      	cmp	r3, #4
 8004096:	d107      	bne.n	80040a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e035      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f82b 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00d      	beq.n	80040f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e2:	d103      	bne.n	80040ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e013      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040f0:	897b      	ldrh	r3, [r7, #10]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	6a3a      	ldr	r2, [r7, #32]
 8004104:	4906      	ldr	r1, [pc, #24]	; (8004120 <I2C_RequestMemoryRead+0x1cc>)
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f863 	bl	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	00010002 	.word	0x00010002

08004124 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004134:	e025      	b.n	8004182 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413c:	d021      	beq.n	8004182 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413e:	f7fe fcc5 	bl	8002acc <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d302      	bcc.n	8004154 <I2C_WaitOnFlagUntilTimeout+0x30>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d116      	bne.n	8004182 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f043 0220 	orr.w	r2, r3, #32
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e023      	b.n	80041ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b01      	cmp	r3, #1
 800418a:	d10d      	bne.n	80041a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	43da      	mvns	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4013      	ands	r3, r2
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf0c      	ite	eq
 800419e:	2301      	moveq	r3, #1
 80041a0:	2300      	movne	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	e00c      	b.n	80041c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	43da      	mvns	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf0c      	ite	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	2300      	movne	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d0b6      	beq.n	8004136 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041e0:	e051      	b.n	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f0:	d123      	bne.n	800423a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004200:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800420a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f043 0204 	orr.w	r2, r3, #4
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e046      	b.n	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d021      	beq.n	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004242:	f7fe fc43 	bl	8002acc <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	429a      	cmp	r2, r3
 8004250:	d302      	bcc.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d116      	bne.n	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f043 0220 	orr.w	r2, r3, #32
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e020      	b.n	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d10c      	bne.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	43da      	mvns	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4013      	ands	r3, r2
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bf14      	ite	ne
 80042a2:	2301      	movne	r3, #1
 80042a4:	2300      	moveq	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	e00b      	b.n	80042c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	43da      	mvns	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d18d      	bne.n	80041e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042dc:	e02d      	b.n	800433a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f8ce 	bl	8004480 <I2C_IsAcknowledgeFailed>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e02d      	b.n	800434a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f4:	d021      	beq.n	800433a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f6:	f7fe fbe9 	bl	8002acc <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	429a      	cmp	r2, r3
 8004304:	d302      	bcc.n	800430c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d116      	bne.n	800433a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f043 0220 	orr.w	r2, r3, #32
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e007      	b.n	800434a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004344:	2b80      	cmp	r3, #128	; 0x80
 8004346:	d1ca      	bne.n	80042de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800435e:	e02d      	b.n	80043bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f88d 	bl	8004480 <I2C_IsAcknowledgeFailed>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e02d      	b.n	80043cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d021      	beq.n	80043bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004378:	f7fe fba8 	bl	8002acc <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	429a      	cmp	r2, r3
 8004386:	d302      	bcc.n	800438e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d116      	bne.n	80043bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	f043 0220 	orr.w	r2, r3, #32
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e007      	b.n	80043cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d1ca      	bne.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043e0:	e042      	b.n	8004468 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	d119      	bne.n	8004424 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0210 	mvn.w	r2, #16
 80043f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e029      	b.n	8004478 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004424:	f7fe fb52 	bl	8002acc <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	429a      	cmp	r2, r3
 8004432:	d302      	bcc.n	800443a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d116      	bne.n	8004468 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	f043 0220 	orr.w	r2, r3, #32
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e007      	b.n	8004478 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d1b5      	bne.n	80043e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004496:	d11b      	bne.n	80044d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f043 0204 	orr.w	r2, r3, #4
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e314      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b0f      	cmp	r3, #15
 80044f8:	d903      	bls.n	8004502 <HAL_RCC_OscConfig+0x22>
 80044fa:	21e6      	movs	r1, #230	; 0xe6
 80044fc:	4897      	ldr	r0, [pc, #604]	; (800475c <HAL_RCC_OscConfig+0x27c>)
 80044fe:	f7fe f94e 	bl	800279e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8088 	beq.w	8004620 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00d      	beq.n	8004534 <HAL_RCC_OscConfig+0x54>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004520:	d008      	beq.n	8004534 <HAL_RCC_OscConfig+0x54>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800452a:	d003      	beq.n	8004534 <HAL_RCC_OscConfig+0x54>
 800452c:	21eb      	movs	r1, #235	; 0xeb
 800452e:	488b      	ldr	r0, [pc, #556]	; (800475c <HAL_RCC_OscConfig+0x27c>)
 8004530:	f7fe f935 	bl	800279e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004534:	4b8a      	ldr	r3, [pc, #552]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	2b04      	cmp	r3, #4
 800453e:	d00c      	beq.n	800455a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004540:	4b87      	ldr	r3, [pc, #540]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004548:	2b08      	cmp	r3, #8
 800454a:	d112      	bne.n	8004572 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454c:	4b84      	ldr	r3, [pc, #528]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004558:	d10b      	bne.n	8004572 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455a:	4b81      	ldr	r3, [pc, #516]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d05b      	beq.n	800461e <HAL_RCC_OscConfig+0x13e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d157      	bne.n	800461e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e2d4      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457a:	d106      	bne.n	800458a <HAL_RCC_OscConfig+0xaa>
 800457c:	4b78      	ldr	r3, [pc, #480]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a77      	ldr	r2, [pc, #476]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 8004582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	e01d      	b.n	80045c6 <HAL_RCC_OscConfig+0xe6>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004592:	d10c      	bne.n	80045ae <HAL_RCC_OscConfig+0xce>
 8004594:	4b72      	ldr	r3, [pc, #456]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a71      	ldr	r2, [pc, #452]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 800459a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	4b6f      	ldr	r3, [pc, #444]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a6e      	ldr	r2, [pc, #440]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 80045a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	e00b      	b.n	80045c6 <HAL_RCC_OscConfig+0xe6>
 80045ae:	4b6c      	ldr	r3, [pc, #432]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a6b      	ldr	r2, [pc, #428]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 80045b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	4b69      	ldr	r3, [pc, #420]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a68      	ldr	r2, [pc, #416]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 80045c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d013      	beq.n	80045f6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ce:	f7fe fa7d 	bl	8002acc <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d6:	f7fe fa79 	bl	8002acc <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b64      	cmp	r3, #100	; 0x64
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e299      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e8:	4b5d      	ldr	r3, [pc, #372]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0xf6>
 80045f4:	e014      	b.n	8004620 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fe fa69 	bl	8002acc <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045fe:	f7fe fa65 	bl	8002acc <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b64      	cmp	r3, #100	; 0x64
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e285      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004610:	4b53      	ldr	r3, [pc, #332]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f0      	bne.n	80045fe <HAL_RCC_OscConfig+0x11e>
 800461c:	e000      	b.n	8004620 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d079      	beq.n	8004720 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_RCC_OscConfig+0x166>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d004      	beq.n	8004646 <HAL_RCC_OscConfig+0x166>
 800463c:	f240 111d 	movw	r1, #285	; 0x11d
 8004640:	4846      	ldr	r0, [pc, #280]	; (800475c <HAL_RCC_OscConfig+0x27c>)
 8004642:	f7fe f8ac 	bl	800279e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b1f      	cmp	r3, #31
 800464c:	d904      	bls.n	8004658 <HAL_RCC_OscConfig+0x178>
 800464e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004652:	4842      	ldr	r0, [pc, #264]	; (800475c <HAL_RCC_OscConfig+0x27c>)
 8004654:	f7fe f8a3 	bl	800279e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004658:	4b41      	ldr	r3, [pc, #260]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 030c 	and.w	r3, r3, #12
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00b      	beq.n	800467c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004664:	4b3e      	ldr	r3, [pc, #248]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800466c:	2b08      	cmp	r3, #8
 800466e:	d11c      	bne.n	80046aa <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004670:	4b3b      	ldr	r3, [pc, #236]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d116      	bne.n	80046aa <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467c:	4b38      	ldr	r3, [pc, #224]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_OscConfig+0x1b4>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d001      	beq.n	8004694 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e243      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b32      	ldr	r3, [pc, #200]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	492f      	ldr	r1, [pc, #188]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046a8:	e03a      	b.n	8004720 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d020      	beq.n	80046f4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b2:	4b2c      	ldr	r3, [pc, #176]	; (8004764 <HAL_RCC_OscConfig+0x284>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fe fa08 	bl	8002acc <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c0:	f7fe fa04 	bl	8002acc <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e224      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d2:	4b23      	ldr	r3, [pc, #140]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046de:	4b20      	ldr	r3, [pc, #128]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	491c      	ldr	r1, [pc, #112]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]
 80046f2:	e015      	b.n	8004720 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f4:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <HAL_RCC_OscConfig+0x284>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fa:	f7fe f9e7 	bl	8002acc <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004702:	f7fe f9e3 	bl	8002acc <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e203      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004714:	4b12      	ldr	r3, [pc, #72]	; (8004760 <HAL_RCC_OscConfig+0x280>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f0      	bne.n	8004702 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d045      	beq.n	80047b8 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_RCC_OscConfig+0x266>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d004      	beq.n	8004746 <HAL_RCC_OscConfig+0x266>
 800473c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004740:	4806      	ldr	r0, [pc, #24]	; (800475c <HAL_RCC_OscConfig+0x27c>)
 8004742:	f7fe f82c 	bl	800279e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01e      	beq.n	800478c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004754:	f7fe f9ba 	bl	8002acc <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475a:	e010      	b.n	800477e <HAL_RCC_OscConfig+0x29e>
 800475c:	080061a8 	.word	0x080061a8
 8004760:	40023800 	.word	0x40023800
 8004764:	42470000 	.word	0x42470000
 8004768:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800476c:	f7fe f9ae 	bl	8002acc <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e1ce      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477e:	4b5e      	ldr	r3, [pc, #376]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 8004780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x28c>
 800478a:	e015      	b.n	80047b8 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800478c:	4b5b      	ldr	r3, [pc, #364]	; (80048fc <HAL_RCC_OscConfig+0x41c>)
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004792:	f7fe f99b 	bl	8002acc <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800479a:	f7fe f997 	bl	8002acc <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e1b7      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ac:	4b52      	ldr	r3, [pc, #328]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 80047ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80b0 	beq.w	8004926 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00c      	beq.n	80047ec <HAL_RCC_OscConfig+0x30c>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d008      	beq.n	80047ec <HAL_RCC_OscConfig+0x30c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b05      	cmp	r3, #5
 80047e0:	d004      	beq.n	80047ec <HAL_RCC_OscConfig+0x30c>
 80047e2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80047e6:	4846      	ldr	r0, [pc, #280]	; (8004900 <HAL_RCC_OscConfig+0x420>)
 80047e8:	f7fd ffd9 	bl	800279e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ec:	4b42      	ldr	r3, [pc, #264]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10f      	bne.n	8004818 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f8:	2300      	movs	r3, #0
 80047fa:	60bb      	str	r3, [r7, #8]
 80047fc:	4b3e      	ldr	r3, [pc, #248]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	4a3d      	ldr	r2, [pc, #244]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 8004802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004806:	6413      	str	r3, [r2, #64]	; 0x40
 8004808:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004814:	2301      	movs	r3, #1
 8004816:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	4b3a      	ldr	r3, [pc, #232]	; (8004904 <HAL_RCC_OscConfig+0x424>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d118      	bne.n	8004856 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004824:	4b37      	ldr	r3, [pc, #220]	; (8004904 <HAL_RCC_OscConfig+0x424>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a36      	ldr	r2, [pc, #216]	; (8004904 <HAL_RCC_OscConfig+0x424>)
 800482a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004830:	f7fe f94c 	bl	8002acc <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004838:	f7fe f948 	bl	8002acc <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e168      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484a:	4b2e      	ldr	r3, [pc, #184]	; (8004904 <HAL_RCC_OscConfig+0x424>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d106      	bne.n	800486c <HAL_RCC_OscConfig+0x38c>
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a25      	ldr	r2, [pc, #148]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
 800486a:	e01c      	b.n	80048a6 <HAL_RCC_OscConfig+0x3c6>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b05      	cmp	r3, #5
 8004872:	d10c      	bne.n	800488e <HAL_RCC_OscConfig+0x3ae>
 8004874:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	4a1f      	ldr	r2, [pc, #124]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 800487a:	f043 0304 	orr.w	r3, r3, #4
 800487e:	6713      	str	r3, [r2, #112]	; 0x70
 8004880:	4b1d      	ldr	r3, [pc, #116]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 8004882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004884:	4a1c      	ldr	r2, [pc, #112]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	6713      	str	r3, [r2, #112]	; 0x70
 800488c:	e00b      	b.n	80048a6 <HAL_RCC_OscConfig+0x3c6>
 800488e:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	6713      	str	r3, [r2, #112]	; 0x70
 800489a:	4b17      	ldr	r3, [pc, #92]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	4a16      	ldr	r2, [pc, #88]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 80048a0:	f023 0304 	bic.w	r3, r3, #4
 80048a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d015      	beq.n	80048da <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fe f90d 	bl	8002acc <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b6:	f7fe f909 	bl	8002acc <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e127      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <HAL_RCC_OscConfig+0x418>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0ee      	beq.n	80048b6 <HAL_RCC_OscConfig+0x3d6>
 80048d8:	e01c      	b.n	8004914 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048da:	f7fe f8f7 	bl	8002acc <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e0:	e012      	b.n	8004908 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e2:	f7fe f8f3 	bl	8002acc <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d909      	bls.n	8004908 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e111      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
 80048f8:	40023800 	.word	0x40023800
 80048fc:	42470e80 	.word	0x42470e80
 8004900:	080061a8 	.word	0x080061a8
 8004904:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004908:	4b86      	ldr	r3, [pc, #536]	; (8004b24 <HAL_RCC_OscConfig+0x644>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e6      	bne.n	80048e2 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004914:	7dfb      	ldrb	r3, [r7, #23]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d105      	bne.n	8004926 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800491a:	4b82      	ldr	r3, [pc, #520]	; (8004b24 <HAL_RCC_OscConfig+0x644>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	4a81      	ldr	r2, [pc, #516]	; (8004b24 <HAL_RCC_OscConfig+0x644>)
 8004920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004924:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00c      	beq.n	8004948 <HAL_RCC_OscConfig+0x468>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d008      	beq.n	8004948 <HAL_RCC_OscConfig+0x468>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2b02      	cmp	r3, #2
 800493c:	d004      	beq.n	8004948 <HAL_RCC_OscConfig+0x468>
 800493e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8004942:	4879      	ldr	r0, [pc, #484]	; (8004b28 <HAL_RCC_OscConfig+0x648>)
 8004944:	f7fd ff2b 	bl	800279e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80e4 	beq.w	8004b1a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004952:	4b74      	ldr	r3, [pc, #464]	; (8004b24 <HAL_RCC_OscConfig+0x644>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b08      	cmp	r3, #8
 800495c:	f000 80a5 	beq.w	8004aaa <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	2b02      	cmp	r3, #2
 8004966:	f040 8089 	bne.w	8004a7c <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d009      	beq.n	8004986 <HAL_RCC_OscConfig+0x4a6>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800497a:	d004      	beq.n	8004986 <HAL_RCC_OscConfig+0x4a6>
 800497c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004980:	4869      	ldr	r0, [pc, #420]	; (8004b28 <HAL_RCC_OscConfig+0x648>)
 8004982:	f7fd ff0c 	bl	800279e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	2b3f      	cmp	r3, #63	; 0x3f
 800498c:	d904      	bls.n	8004998 <HAL_RCC_OscConfig+0x4b8>
 800498e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004992:	4865      	ldr	r0, [pc, #404]	; (8004b28 <HAL_RCC_OscConfig+0x648>)
 8004994:	f7fd ff03 	bl	800279e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	2b31      	cmp	r3, #49	; 0x31
 800499e:	d904      	bls.n	80049aa <HAL_RCC_OscConfig+0x4ca>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80049a8:	d904      	bls.n	80049b4 <HAL_RCC_OscConfig+0x4d4>
 80049aa:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80049ae:	485e      	ldr	r0, [pc, #376]	; (8004b28 <HAL_RCC_OscConfig+0x648>)
 80049b0:	f7fd fef5 	bl	800279e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d010      	beq.n	80049de <HAL_RCC_OscConfig+0x4fe>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d00c      	beq.n	80049de <HAL_RCC_OscConfig+0x4fe>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	2b06      	cmp	r3, #6
 80049ca:	d008      	beq.n	80049de <HAL_RCC_OscConfig+0x4fe>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d004      	beq.n	80049de <HAL_RCC_OscConfig+0x4fe>
 80049d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80049d8:	4853      	ldr	r0, [pc, #332]	; (8004b28 <HAL_RCC_OscConfig+0x648>)
 80049da:	f7fd fee0 	bl	800279e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d903      	bls.n	80049ee <HAL_RCC_OscConfig+0x50e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	2b0f      	cmp	r3, #15
 80049ec:	d904      	bls.n	80049f8 <HAL_RCC_OscConfig+0x518>
 80049ee:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80049f2:	484d      	ldr	r0, [pc, #308]	; (8004b28 <HAL_RCC_OscConfig+0x648>)
 80049f4:	f7fd fed3 	bl	800279e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f8:	4b4c      	ldr	r3, [pc, #304]	; (8004b2c <HAL_RCC_OscConfig+0x64c>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fe:	f7fe f865 	bl	8002acc <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a06:	f7fe f861 	bl	8002acc <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e081      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a18:	4b42      	ldr	r3, [pc, #264]	; (8004b24 <HAL_RCC_OscConfig+0x644>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f0      	bne.n	8004a06 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	69da      	ldr	r2, [r3, #28]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	019b      	lsls	r3, r3, #6
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	041b      	lsls	r3, r3, #16
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	061b      	lsls	r3, r3, #24
 8004a48:	4936      	ldr	r1, [pc, #216]	; (8004b24 <HAL_RCC_OscConfig+0x644>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a4e:	4b37      	ldr	r3, [pc, #220]	; (8004b2c <HAL_RCC_OscConfig+0x64c>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fe f83a 	bl	8002acc <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fe f836 	bl	8002acc <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e056      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6e:	4b2d      	ldr	r3, [pc, #180]	; (8004b24 <HAL_RCC_OscConfig+0x644>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x57c>
 8004a7a:	e04e      	b.n	8004b1a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7c:	4b2b      	ldr	r3, [pc, #172]	; (8004b2c <HAL_RCC_OscConfig+0x64c>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a82:	f7fe f823 	bl	8002acc <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a8a:	f7fe f81f 	bl	8002acc <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e03f      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9c:	4b21      	ldr	r3, [pc, #132]	; (8004b24 <HAL_RCC_OscConfig+0x644>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f0      	bne.n	8004a8a <HAL_RCC_OscConfig+0x5aa>
 8004aa8:	e037      	b.n	8004b1a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e032      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <HAL_RCC_OscConfig+0x644>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d028      	beq.n	8004b16 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d121      	bne.n	8004b16 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d11a      	bne.n	8004b16 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d111      	bne.n	8004b16 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	3b01      	subs	r3, #1
 8004b00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d001      	beq.n	8004b1a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40023800 	.word	0x40023800
 8004b28:	080061a8 	.word	0x080061a8
 8004b2c:	42470060 	.word	0x42470060

08004b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e174      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x24>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b0f      	cmp	r3, #15
 8004b52:	d904      	bls.n	8004b5e <HAL_RCC_ClockConfig+0x2e>
 8004b54:	f240 215a 	movw	r1, #602	; 0x25a
 8004b58:	487b      	ldr	r0, [pc, #492]	; (8004d48 <HAL_RCC_ClockConfig+0x218>)
 8004b5a:	f7fd fe20 	bl	800279e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d019      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x68>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d016      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x68>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d013      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x68>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d010      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x68>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d00d      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x68>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b05      	cmp	r3, #5
 8004b80:	d00a      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x68>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b06      	cmp	r3, #6
 8004b86:	d007      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x68>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b07      	cmp	r3, #7
 8004b8c:	d004      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x68>
 8004b8e:	f240 215b 	movw	r1, #603	; 0x25b
 8004b92:	486d      	ldr	r0, [pc, #436]	; (8004d48 <HAL_RCC_ClockConfig+0x218>)
 8004b94:	f7fd fe03 	bl	800279e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b98:	4b6c      	ldr	r3, [pc, #432]	; (8004d4c <HAL_RCC_ClockConfig+0x21c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d90c      	bls.n	8004bc0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b69      	ldr	r3, [pc, #420]	; (8004d4c <HAL_RCC_ClockConfig+0x21c>)
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bae:	4b67      	ldr	r3, [pc, #412]	; (8004d4c <HAL_RCC_ClockConfig+0x21c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e136      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d049      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd8:	4b5d      	ldr	r3, [pc, #372]	; (8004d50 <HAL_RCC_ClockConfig+0x220>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	4a5c      	ldr	r2, [pc, #368]	; (8004d50 <HAL_RCC_ClockConfig+0x220>)
 8004bde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004be2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf0:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <HAL_RCC_ClockConfig+0x220>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4a56      	ldr	r2, [pc, #344]	; (8004d50 <HAL_RCC_ClockConfig+0x220>)
 8004bf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d024      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x11e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2b80      	cmp	r3, #128	; 0x80
 8004c0a:	d020      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x11e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b90      	cmp	r3, #144	; 0x90
 8004c12:	d01c      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x11e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2ba0      	cmp	r3, #160	; 0xa0
 8004c1a:	d018      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x11e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2bb0      	cmp	r3, #176	; 0xb0
 8004c22:	d014      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x11e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2bc0      	cmp	r3, #192	; 0xc0
 8004c2a:	d010      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x11e>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2bd0      	cmp	r3, #208	; 0xd0
 8004c32:	d00c      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x11e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2be0      	cmp	r3, #224	; 0xe0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x11e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2bf0      	cmp	r3, #240	; 0xf0
 8004c42:	d004      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x11e>
 8004c44:	f240 217e 	movw	r1, #638	; 0x27e
 8004c48:	483f      	ldr	r0, [pc, #252]	; (8004d48 <HAL_RCC_ClockConfig+0x218>)
 8004c4a:	f7fd fda8 	bl	800279e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c4e:	4b40      	ldr	r3, [pc, #256]	; (8004d50 <HAL_RCC_ClockConfig+0x220>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	493d      	ldr	r1, [pc, #244]	; (8004d50 <HAL_RCC_ClockConfig+0x220>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d059      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d010      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x166>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d00c      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x166>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d008      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x166>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d004      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x166>
 8004c8c:	f240 2185 	movw	r1, #645	; 0x285
 8004c90:	482d      	ldr	r0, [pc, #180]	; (8004d48 <HAL_RCC_ClockConfig+0x218>)
 8004c92:	f7fd fd84 	bl	800279e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d107      	bne.n	8004cae <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	; (8004d50 <HAL_RCC_ClockConfig+0x220>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d119      	bne.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e0bf      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d003      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d107      	bne.n	8004cce <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbe:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <HAL_RCC_ClockConfig+0x220>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e0af      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cce:	4b20      	ldr	r3, [pc, #128]	; (8004d50 <HAL_RCC_ClockConfig+0x220>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e0a7      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cde:	4b1c      	ldr	r3, [pc, #112]	; (8004d50 <HAL_RCC_ClockConfig+0x220>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f023 0203 	bic.w	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4919      	ldr	r1, [pc, #100]	; (8004d50 <HAL_RCC_ClockConfig+0x220>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cf0:	f7fd feec 	bl	8002acc <HAL_GetTick>
 8004cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf6:	e00a      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf8:	f7fd fee8 	bl	8002acc <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e08f      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0e:	4b10      	ldr	r3, [pc, #64]	; (8004d50 <HAL_RCC_ClockConfig+0x220>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 020c 	and.w	r2, r3, #12
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d1eb      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <HAL_RCC_ClockConfig+0x21c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d212      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2e:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <HAL_RCC_ClockConfig+0x21c>)
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_RCC_ClockConfig+0x21c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d007      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e072      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2fe>
 8004d48:	080061a8 	.word	0x080061a8
 8004d4c:	40023c00 	.word	0x40023c00
 8004d50:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d025      	beq.n	8004dac <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d018      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x26a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d70:	d013      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x26a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d7a:	d00e      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x26a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004d84:	d009      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x26a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004d8e:	d004      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x26a>
 8004d90:	f240 21c3 	movw	r1, #707	; 0x2c3
 8004d94:	4828      	ldr	r0, [pc, #160]	; (8004e38 <HAL_RCC_ClockConfig+0x308>)
 8004d96:	f7fd fd02 	bl	800279e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d9a:	4b28      	ldr	r3, [pc, #160]	; (8004e3c <HAL_RCC_ClockConfig+0x30c>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	4925      	ldr	r1, [pc, #148]	; (8004e3c <HAL_RCC_ClockConfig+0x30c>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d026      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d018      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x2c2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc8:	d013      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x2c2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004dd2:	d00e      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x2c2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x2c2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004de6:	d004      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x2c2>
 8004de8:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004dec:	4812      	ldr	r0, [pc, #72]	; (8004e38 <HAL_RCC_ClockConfig+0x308>)
 8004dee:	f7fd fcd6 	bl	800279e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004df2:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <HAL_RCC_ClockConfig+0x30c>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	490e      	ldr	r1, [pc, #56]	; (8004e3c <HAL_RCC_ClockConfig+0x30c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e06:	f000 f821 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCC_ClockConfig+0x30c>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	490a      	ldr	r1, [pc, #40]	; (8004e40 <HAL_RCC_ClockConfig+0x310>)
 8004e18:	5ccb      	ldrb	r3, [r1, r3]
 8004e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1e:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <HAL_RCC_ClockConfig+0x314>)
 8004e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <HAL_RCC_ClockConfig+0x318>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd fe0c 	bl	8002a44 <HAL_InitTick>

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	080061a8 	.word	0x080061a8
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	08006218 	.word	0x08006218
 8004e44:	20000004 	.word	0x20000004
 8004e48:	20000008 	.word	0x20000008

08004e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e50:	b094      	sub	sp, #80	; 0x50
 8004e52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	647b      	str	r3, [r7, #68]	; 0x44
 8004e58:	2300      	movs	r3, #0
 8004e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e64:	4b79      	ldr	r3, [pc, #484]	; (800504c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 030c 	and.w	r3, r3, #12
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d00d      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0x40>
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	f200 80e1 	bhi.w	8005038 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_RCC_GetSysClockFreq+0x34>
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d003      	beq.n	8004e86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e7e:	e0db      	b.n	8005038 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e80:	4b73      	ldr	r3, [pc, #460]	; (8005050 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e84:	e0db      	b.n	800503e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e86:	4b73      	ldr	r3, [pc, #460]	; (8005054 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e8a:	e0d8      	b.n	800503e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e8c:	4b6f      	ldr	r3, [pc, #444]	; (800504c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e96:	4b6d      	ldr	r3, [pc, #436]	; (800504c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d063      	beq.n	8004f6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea2:	4b6a      	ldr	r3, [pc, #424]	; (800504c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	099b      	lsrs	r3, r3, #6
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ebe:	4622      	mov	r2, r4
 8004ec0:	462b      	mov	r3, r5
 8004ec2:	f04f 0000 	mov.w	r0, #0
 8004ec6:	f04f 0100 	mov.w	r1, #0
 8004eca:	0159      	lsls	r1, r3, #5
 8004ecc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ed0:	0150      	lsls	r0, r2, #5
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	1a51      	subs	r1, r2, r1
 8004eda:	6139      	str	r1, [r7, #16]
 8004edc:	4629      	mov	r1, r5
 8004ede:	eb63 0301 	sbc.w	r3, r3, r1
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ef0:	4659      	mov	r1, fp
 8004ef2:	018b      	lsls	r3, r1, #6
 8004ef4:	4651      	mov	r1, sl
 8004ef6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004efa:	4651      	mov	r1, sl
 8004efc:	018a      	lsls	r2, r1, #6
 8004efe:	4651      	mov	r1, sl
 8004f00:	ebb2 0801 	subs.w	r8, r2, r1
 8004f04:	4659      	mov	r1, fp
 8004f06:	eb63 0901 	sbc.w	r9, r3, r1
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f1e:	4690      	mov	r8, r2
 8004f20:	4699      	mov	r9, r3
 8004f22:	4623      	mov	r3, r4
 8004f24:	eb18 0303 	adds.w	r3, r8, r3
 8004f28:	60bb      	str	r3, [r7, #8]
 8004f2a:	462b      	mov	r3, r5
 8004f2c:	eb49 0303 	adc.w	r3, r9, r3
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f3e:	4629      	mov	r1, r5
 8004f40:	024b      	lsls	r3, r1, #9
 8004f42:	4621      	mov	r1, r4
 8004f44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f48:	4621      	mov	r1, r4
 8004f4a:	024a      	lsls	r2, r1, #9
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	4619      	mov	r1, r3
 8004f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f52:	2200      	movs	r2, #0
 8004f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f5c:	f7fb fdaa 	bl	8000ab4 <__aeabi_uldivmod>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4613      	mov	r3, r2
 8004f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f68:	e058      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f6a:	4b38      	ldr	r3, [pc, #224]	; (800504c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	099b      	lsrs	r3, r3, #6
 8004f70:	2200      	movs	r2, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	4611      	mov	r1, r2
 8004f76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f7a:	623b      	str	r3, [r7, #32]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f84:	4642      	mov	r2, r8
 8004f86:	464b      	mov	r3, r9
 8004f88:	f04f 0000 	mov.w	r0, #0
 8004f8c:	f04f 0100 	mov.w	r1, #0
 8004f90:	0159      	lsls	r1, r3, #5
 8004f92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f96:	0150      	lsls	r0, r2, #5
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fbc:	ebb2 040a 	subs.w	r4, r2, sl
 8004fc0:	eb63 050b 	sbc.w	r5, r3, fp
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	00eb      	lsls	r3, r5, #3
 8004fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fd2:	00e2      	lsls	r2, r4, #3
 8004fd4:	4614      	mov	r4, r2
 8004fd6:	461d      	mov	r5, r3
 8004fd8:	4643      	mov	r3, r8
 8004fda:	18e3      	adds	r3, r4, r3
 8004fdc:	603b      	str	r3, [r7, #0]
 8004fde:	464b      	mov	r3, r9
 8004fe0:	eb45 0303 	adc.w	r3, r5, r3
 8004fe4:	607b      	str	r3, [r7, #4]
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	028b      	lsls	r3, r1, #10
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	028a      	lsls	r2, r1, #10
 8005000:	4610      	mov	r0, r2
 8005002:	4619      	mov	r1, r3
 8005004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005006:	2200      	movs	r2, #0
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	61fa      	str	r2, [r7, #28]
 800500c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005010:	f7fb fd50 	bl	8000ab4 <__aeabi_uldivmod>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4613      	mov	r3, r2
 800501a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_RCC_GetSysClockFreq+0x200>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	0c1b      	lsrs	r3, r3, #16
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	3301      	adds	r3, #1
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800502c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800502e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005030:	fbb2 f3f3 	udiv	r3, r2, r3
 8005034:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005036:	e002      	b.n	800503e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <HAL_RCC_GetSysClockFreq+0x204>)
 800503a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800503c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800503e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005040:	4618      	mov	r0, r3
 8005042:	3750      	adds	r7, #80	; 0x50
 8005044:	46bd      	mov	sp, r7
 8005046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800
 8005050:	00f42400 	.word	0x00f42400
 8005054:	007a1200 	.word	0x007a1200

08005058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800505c:	4b03      	ldr	r3, [pc, #12]	; (800506c <HAL_RCC_GetHCLKFreq+0x14>)
 800505e:	681b      	ldr	r3, [r3, #0]
}
 8005060:	4618      	mov	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	20000004 	.word	0x20000004

08005070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005074:	f7ff fff0 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 8005078:	4602      	mov	r2, r0
 800507a:	4b05      	ldr	r3, [pc, #20]	; (8005090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	0a9b      	lsrs	r3, r3, #10
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	4903      	ldr	r1, [pc, #12]	; (8005094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005086:	5ccb      	ldrb	r3, [r1, r3]
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800508c:	4618      	mov	r0, r3
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40023800 	.word	0x40023800
 8005094:	08006228 	.word	0x08006228

08005098 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e18c      	b.n	80053c4 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a75      	ldr	r2, [pc, #468]	; (8005284 <HAL_SPI_Init+0x1ec>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d018      	beq.n	80050e6 <HAL_SPI_Init+0x4e>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a73      	ldr	r2, [pc, #460]	; (8005288 <HAL_SPI_Init+0x1f0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <HAL_SPI_Init+0x4e>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a72      	ldr	r2, [pc, #456]	; (800528c <HAL_SPI_Init+0x1f4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00e      	beq.n	80050e6 <HAL_SPI_Init+0x4e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a70      	ldr	r2, [pc, #448]	; (8005290 <HAL_SPI_Init+0x1f8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d009      	beq.n	80050e6 <HAL_SPI_Init+0x4e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6f      	ldr	r2, [pc, #444]	; (8005294 <HAL_SPI_Init+0x1fc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <HAL_SPI_Init+0x4e>
 80050dc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80050e0:	486d      	ldr	r0, [pc, #436]	; (8005298 <HAL_SPI_Init+0x200>)
 80050e2:	f7fd fb5c 	bl	800279e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <HAL_SPI_Init+0x6a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050f6:	d004      	beq.n	8005102 <HAL_SPI_Init+0x6a>
 80050f8:	f240 1141 	movw	r1, #321	; 0x141
 80050fc:	4866      	ldr	r0, [pc, #408]	; (8005298 <HAL_SPI_Init+0x200>)
 80050fe:	f7fd fb4e 	bl	800279e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00e      	beq.n	8005128 <HAL_SPI_Init+0x90>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005112:	d009      	beq.n	8005128 <HAL_SPI_Init+0x90>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800511c:	d004      	beq.n	8005128 <HAL_SPI_Init+0x90>
 800511e:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005122:	485d      	ldr	r0, [pc, #372]	; (8005298 <HAL_SPI_Init+0x200>)
 8005124:	f7fd fb3b 	bl	800279e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005130:	d008      	beq.n	8005144 <HAL_SPI_Init+0xac>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <HAL_SPI_Init+0xac>
 800513a:	f240 1143 	movw	r1, #323	; 0x143
 800513e:	4856      	ldr	r0, [pc, #344]	; (8005298 <HAL_SPI_Init+0x200>)
 8005140:	f7fd fb2d 	bl	800279e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514c:	d00d      	beq.n	800516a <HAL_SPI_Init+0xd2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <HAL_SPI_Init+0xd2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800515e:	d004      	beq.n	800516a <HAL_SPI_Init+0xd2>
 8005160:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005164:	484c      	ldr	r0, [pc, #304]	; (8005298 <HAL_SPI_Init+0x200>)
 8005166:	f7fd fb1a 	bl	800279e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d020      	beq.n	80051b4 <HAL_SPI_Init+0x11c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	2b08      	cmp	r3, #8
 8005178:	d01c      	beq.n	80051b4 <HAL_SPI_Init+0x11c>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	2b10      	cmp	r3, #16
 8005180:	d018      	beq.n	80051b4 <HAL_SPI_Init+0x11c>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	2b18      	cmp	r3, #24
 8005188:	d014      	beq.n	80051b4 <HAL_SPI_Init+0x11c>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	2b20      	cmp	r3, #32
 8005190:	d010      	beq.n	80051b4 <HAL_SPI_Init+0x11c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	2b28      	cmp	r3, #40	; 0x28
 8005198:	d00c      	beq.n	80051b4 <HAL_SPI_Init+0x11c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	2b30      	cmp	r3, #48	; 0x30
 80051a0:	d008      	beq.n	80051b4 <HAL_SPI_Init+0x11c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	2b38      	cmp	r3, #56	; 0x38
 80051a8:	d004      	beq.n	80051b4 <HAL_SPI_Init+0x11c>
 80051aa:	f240 1145 	movw	r1, #325	; 0x145
 80051ae:	483a      	ldr	r0, [pc, #232]	; (8005298 <HAL_SPI_Init+0x200>)
 80051b0:	f7fd faf5 	bl	800279e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_SPI_Init+0x136>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	2b80      	cmp	r3, #128	; 0x80
 80051c2:	d004      	beq.n	80051ce <HAL_SPI_Init+0x136>
 80051c4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80051c8:	4833      	ldr	r0, [pc, #204]	; (8005298 <HAL_SPI_Init+0x200>)
 80051ca:	f7fd fae8 	bl	800279e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d008      	beq.n	80051e8 <HAL_SPI_Init+0x150>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d004      	beq.n	80051e8 <HAL_SPI_Init+0x150>
 80051de:	f240 1147 	movw	r1, #327	; 0x147
 80051e2:	482d      	ldr	r0, [pc, #180]	; (8005298 <HAL_SPI_Init+0x200>)
 80051e4:	f7fd fadb 	bl	800279e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d155      	bne.n	800529c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_SPI_Init+0x172>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d004      	beq.n	800520a <HAL_SPI_Init+0x172>
 8005200:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005204:	4824      	ldr	r0, [pc, #144]	; (8005298 <HAL_SPI_Init+0x200>)
 8005206:	f7fd faca 	bl	800279e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <HAL_SPI_Init+0x18c>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d004      	beq.n	8005224 <HAL_SPI_Init+0x18c>
 800521a:	f240 114b 	movw	r1, #331	; 0x14b
 800521e:	481e      	ldr	r0, [pc, #120]	; (8005298 <HAL_SPI_Init+0x200>)
 8005220:	f7fd fabd 	bl	800279e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800522c:	d125      	bne.n	800527a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d05d      	beq.n	80052f2 <HAL_SPI_Init+0x25a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	2b08      	cmp	r3, #8
 800523c:	d059      	beq.n	80052f2 <HAL_SPI_Init+0x25a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	2b10      	cmp	r3, #16
 8005244:	d055      	beq.n	80052f2 <HAL_SPI_Init+0x25a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	2b18      	cmp	r3, #24
 800524c:	d051      	beq.n	80052f2 <HAL_SPI_Init+0x25a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	2b20      	cmp	r3, #32
 8005254:	d04d      	beq.n	80052f2 <HAL_SPI_Init+0x25a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	2b28      	cmp	r3, #40	; 0x28
 800525c:	d049      	beq.n	80052f2 <HAL_SPI_Init+0x25a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	2b30      	cmp	r3, #48	; 0x30
 8005264:	d045      	beq.n	80052f2 <HAL_SPI_Init+0x25a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	2b38      	cmp	r3, #56	; 0x38
 800526c:	d041      	beq.n	80052f2 <HAL_SPI_Init+0x25a>
 800526e:	f240 114f 	movw	r1, #335	; 0x14f
 8005272:	4809      	ldr	r0, [pc, #36]	; (8005298 <HAL_SPI_Init+0x200>)
 8005274:	f7fd fa93 	bl	800279e <assert_failed>
 8005278:	e03b      	b.n	80052f2 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	61da      	str	r2, [r3, #28]
 8005280:	e037      	b.n	80052f2 <HAL_SPI_Init+0x25a>
 8005282:	bf00      	nop
 8005284:	40013000 	.word	0x40013000
 8005288:	40003800 	.word	0x40003800
 800528c:	40003c00 	.word	0x40003c00
 8005290:	40013400 	.word	0x40013400
 8005294:	40015000 	.word	0x40015000
 8005298:	080061e0 	.word	0x080061e0
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d020      	beq.n	80052e6 <HAL_SPI_Init+0x24e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d01c      	beq.n	80052e6 <HAL_SPI_Init+0x24e>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d018      	beq.n	80052e6 <HAL_SPI_Init+0x24e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	2b18      	cmp	r3, #24
 80052ba:	d014      	beq.n	80052e6 <HAL_SPI_Init+0x24e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d010      	beq.n	80052e6 <HAL_SPI_Init+0x24e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	2b28      	cmp	r3, #40	; 0x28
 80052ca:	d00c      	beq.n	80052e6 <HAL_SPI_Init+0x24e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	2b30      	cmp	r3, #48	; 0x30
 80052d2:	d008      	beq.n	80052e6 <HAL_SPI_Init+0x24e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	2b38      	cmp	r3, #56	; 0x38
 80052da:	d004      	beq.n	80052e6 <HAL_SPI_Init+0x24e>
 80052dc:	f240 1159 	movw	r1, #345	; 0x159
 80052e0:	483a      	ldr	r0, [pc, #232]	; (80053cc <HAL_SPI_Init+0x334>)
 80052e2:	f7fd fa5c 	bl	800279e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7fd fa87 	bl	8002820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005328:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	ea42 0103 	orr.w	r1, r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	f003 0104 	and.w	r1, r3, #4
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	f003 0210 	and.w	r2, r3, #16
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	080061e0 	.word	0x080061e0

080053d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d009      	beq.n	8005400 <HAL_SPI_Transmit+0x30>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053f4:	d004      	beq.n	8005400 <HAL_SPI_Transmit+0x30>
 80053f6:	f44f 7142 	mov.w	r1, #776	; 0x308
 80053fa:	4880      	ldr	r0, [pc, #512]	; (80055fc <HAL_SPI_Transmit+0x22c>)
 80053fc:	f7fd f9cf 	bl	800279e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_SPI_Transmit+0x3e>
 800540a:	2302      	movs	r3, #2
 800540c:	e128      	b.n	8005660 <HAL_SPI_Transmit+0x290>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005416:	f7fd fb59 	bl	8002acc <HAL_GetTick>
 800541a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800541c:	88fb      	ldrh	r3, [r7, #6]
 800541e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d002      	beq.n	8005432 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800542c:	2302      	movs	r3, #2
 800542e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005430:	e10d      	b.n	800564e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_SPI_Transmit+0x6e>
 8005438:	88fb      	ldrh	r3, [r7, #6]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d102      	bne.n	8005444 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005442:	e104      	b.n	800564e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2203      	movs	r2, #3
 8005448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	88fa      	ldrh	r2, [r7, #6]
 8005462:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800548a:	d10f      	bne.n	80054ac <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	d007      	beq.n	80054ca <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d2:	d14b      	bne.n	800556c <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <HAL_SPI_Transmit+0x112>
 80054dc:	8afb      	ldrh	r3, [r7, #22]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d13e      	bne.n	8005560 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	881a      	ldrh	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	1c9a      	adds	r2, r3, #2
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005506:	e02b      	b.n	8005560 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b02      	cmp	r3, #2
 8005514:	d112      	bne.n	800553c <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	881a      	ldrh	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	1c9a      	adds	r2, r3, #2
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	86da      	strh	r2, [r3, #54]	; 0x36
 800553a:	e011      	b.n	8005560 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800553c:	f7fd fac6 	bl	8002acc <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d803      	bhi.n	8005554 <HAL_SPI_Transmit+0x184>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005552:	d102      	bne.n	800555a <HAL_SPI_Transmit+0x18a>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d102      	bne.n	8005560 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800555e:	e076      	b.n	800564e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1ce      	bne.n	8005508 <HAL_SPI_Transmit+0x138>
 800556a:	e04e      	b.n	800560a <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <HAL_SPI_Transmit+0x1aa>
 8005574:	8afb      	ldrh	r3, [r7, #22]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d142      	bne.n	8005600 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	7812      	ldrb	r2, [r2, #0]
 8005586:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055a0:	e02e      	b.n	8005600 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d113      	bne.n	80055d8 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	7812      	ldrb	r2, [r2, #0]
 80055bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80055d6:	e013      	b.n	8005600 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055d8:	f7fd fa78 	bl	8002acc <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d803      	bhi.n	80055f0 <HAL_SPI_Transmit+0x220>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ee:	d102      	bne.n	80055f6 <HAL_SPI_Transmit+0x226>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d104      	bne.n	8005600 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055fa:	e028      	b.n	800564e <HAL_SPI_Transmit+0x27e>
 80055fc:	080061e0 	.word	0x080061e0
    while (hspi->TxXferCount > 0U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1cb      	bne.n	80055a2 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 fcf8 	bl	8006004 <SPI_EndRxTxTransaction>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e000      	b.n	800564e <HAL_SPI_Transmit+0x27e>
  }

error:
 800564c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800565e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3720      	adds	r7, #32
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005684:	d112      	bne.n	80056ac <HAL_SPI_Receive+0x44>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10e      	bne.n	80056ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2204      	movs	r2, #4
 8005692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f8f2 	bl	800588c <HAL_SPI_TransmitReceive>
 80056a8:	4603      	mov	r3, r0
 80056aa:	e0ea      	b.n	8005882 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_SPI_Receive+0x52>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e0e3      	b.n	8005882 <HAL_SPI_Receive+0x21a>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056c2:	f7fd fa03 	bl	8002acc <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d002      	beq.n	80056da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
 80056d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056d8:	e0ca      	b.n	8005870 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <HAL_SPI_Receive+0x7e>
 80056e0:	88fb      	ldrh	r3, [r7, #6]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d102      	bne.n	80056ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056ea:	e0c1      	b.n	8005870 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2204      	movs	r2, #4
 80056f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	88fa      	ldrh	r2, [r7, #6]
 8005704:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	88fa      	ldrh	r2, [r7, #6]
 800570a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005732:	d10f      	bne.n	8005754 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005742:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005752:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d007      	beq.n	8005772 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005770:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d162      	bne.n	8005840 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800577a:	e02e      	b.n	80057da <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b01      	cmp	r3, #1
 8005788:	d115      	bne.n	80057b6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f103 020c 	add.w	r2, r3, #12
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	7812      	ldrb	r2, [r2, #0]
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057b4:	e011      	b.n	80057da <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057b6:	f7fd f989 	bl	8002acc <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d803      	bhi.n	80057ce <HAL_SPI_Receive+0x166>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d102      	bne.n	80057d4 <HAL_SPI_Receive+0x16c>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057d8:	e04a      	b.n	8005870 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1cb      	bne.n	800577c <HAL_SPI_Receive+0x114>
 80057e4:	e031      	b.n	800584a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d113      	bne.n	800581c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	b292      	uxth	r2, r2
 8005800:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	1c9a      	adds	r2, r3, #2
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	87da      	strh	r2, [r3, #62]	; 0x3e
 800581a:	e011      	b.n	8005840 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800581c:	f7fd f956 	bl	8002acc <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d803      	bhi.n	8005834 <HAL_SPI_Receive+0x1cc>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	d102      	bne.n	800583a <HAL_SPI_Receive+0x1d2>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d102      	bne.n	8005840 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800583e:	e017      	b.n	8005870 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1cd      	bne.n	80057e6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 fb72 	bl	8005f38 <SPI_EndRxTransaction>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	75fb      	strb	r3, [r7, #23]
 800586c:	e000      	b.n	8005870 <HAL_SPI_Receive+0x208>
  }

error :
 800586e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08c      	sub	sp, #48	; 0x30
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800589a:	2301      	movs	r3, #1
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d004      	beq.n	80058b6 <HAL_SPI_TransmitReceive+0x2a>
 80058ac:	f240 417c 	movw	r1, #1148	; 0x47c
 80058b0:	4884      	ldr	r0, [pc, #528]	; (8005ac4 <HAL_SPI_TransmitReceive+0x238>)
 80058b2:	f7fc ff74 	bl	800279e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_SPI_TransmitReceive+0x38>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e18d      	b.n	8005be0 <HAL_SPI_TransmitReceive+0x354>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058cc:	f7fd f8fe 	bl	8002acc <HAL_GetTick>
 80058d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80058e2:	887b      	ldrh	r3, [r7, #2]
 80058e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d00f      	beq.n	800590e <HAL_SPI_TransmitReceive+0x82>
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058f4:	d107      	bne.n	8005906 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d103      	bne.n	8005906 <HAL_SPI_TransmitReceive+0x7a>
 80058fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005902:	2b04      	cmp	r3, #4
 8005904:	d003      	beq.n	800590e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8005906:	2302      	movs	r3, #2
 8005908:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800590c:	e15e      	b.n	8005bcc <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_SPI_TransmitReceive+0x94>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_SPI_TransmitReceive+0x94>
 800591a:	887b      	ldrh	r3, [r7, #2]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005926:	e151      	b.n	8005bcc <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b04      	cmp	r3, #4
 8005932:	d003      	beq.n	800593c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2205      	movs	r2, #5
 8005938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	887a      	ldrh	r2, [r7, #2]
 800594c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	887a      	ldrh	r2, [r7, #2]
 8005952:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	887a      	ldrh	r2, [r7, #2]
 800595e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	887a      	ldrh	r2, [r7, #2]
 8005964:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b40      	cmp	r3, #64	; 0x40
 800597e:	d007      	beq.n	8005990 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800598e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005998:	d178      	bne.n	8005a8c <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_SPI_TransmitReceive+0x11c>
 80059a2:	8b7b      	ldrh	r3, [r7, #26]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d166      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	881a      	ldrh	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	1c9a      	adds	r2, r3, #2
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059cc:	e053      	b.n	8005a76 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d11b      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x188>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d016      	beq.n	8005a14 <HAL_SPI_TransmitReceive+0x188>
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d113      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	881a      	ldrh	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	1c9a      	adds	r2, r3, #2
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d119      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x1ca>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d014      	beq.n	8005a56 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	b292      	uxth	r2, r2
 8005a38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	1c9a      	adds	r2, r3, #2
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a52:	2301      	movs	r3, #1
 8005a54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a56:	f7fd f839 	bl	8002acc <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d807      	bhi.n	8005a76 <HAL_SPI_TransmitReceive+0x1ea>
 8005a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6c:	d003      	beq.n	8005a76 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a74:	e0aa      	b.n	8005bcc <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1a6      	bne.n	80059ce <HAL_SPI_TransmitReceive+0x142>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1a1      	bne.n	80059ce <HAL_SPI_TransmitReceive+0x142>
 8005a8a:	e07f      	b.n	8005b8c <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_SPI_TransmitReceive+0x20e>
 8005a94:	8b7b      	ldrh	r3, [r7, #26]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d16e      	bne.n	8005b78 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	7812      	ldrb	r2, [r2, #0]
 8005aa6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ac0:	e05a      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x2ec>
 8005ac2:	bf00      	nop
 8005ac4:	080061e0 	.word	0x080061e0
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d11c      	bne.n	8005b10 <HAL_SPI_TransmitReceive+0x284>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d017      	beq.n	8005b10 <HAL_SPI_TransmitReceive+0x284>
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d114      	bne.n	8005b10 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	330c      	adds	r3, #12
 8005af0:	7812      	ldrb	r2, [r2, #0]
 8005af2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d119      	bne.n	8005b52 <HAL_SPI_TransmitReceive+0x2c6>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d014      	beq.n	8005b52 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b52:	f7fc ffbb 	bl	8002acc <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d803      	bhi.n	8005b6a <HAL_SPI_TransmitReceive+0x2de>
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b68:	d102      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x2e4>
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d103      	bne.n	8005b78 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b76:	e029      	b.n	8005bcc <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1a2      	bne.n	8005ac8 <HAL_SPI_TransmitReceive+0x23c>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d19d      	bne.n	8005ac8 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 fa37 	bl	8006004 <SPI_EndRxTxTransaction>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d006      	beq.n	8005baa <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005ba8:	e010      	b.n	8005bcc <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10b      	bne.n	8005bca <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	e000      	b.n	8005bcc <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8005bca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3730      	adds	r7, #48	; 0x30
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10e      	bne.n	8005c28 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d004      	beq.n	8005c28 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	4798      	blx	r3
    return;
 8005c26:	e0ce      	b.n	8005dc6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <HAL_SPI_IRQHandler+0x5e>
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d004      	beq.n	8005c46 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	4798      	blx	r3
    return;
 8005c44:	e0bf      	b.n	8005dc6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	f003 0320 	and.w	r3, r3, #32
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <HAL_SPI_IRQHandler+0x7e>
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d105      	bne.n	8005c66 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80b0 	beq.w	8005dc6 <HAL_SPI_IRQHandler+0x1de>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 80aa 	beq.w	8005dc6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d023      	beq.n	8005cc4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d011      	beq.n	8005cac <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8c:	f043 0204 	orr.w	r2, r3, #4
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	e00b      	b.n	8005cc4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	693b      	ldr	r3, [r7, #16]
        return;
 8005cc2:	e080      	b.n	8005dc6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d014      	beq.n	8005cf8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd2:	f043 0201 	orr.w	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00c      	beq.n	8005d1c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d06:	f043 0208 	orr.w	r2, r3, #8
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60bb      	str	r3, [r7, #8]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	60bb      	str	r3, [r7, #8]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d04f      	beq.n	8005dc4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d32:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d104      	bne.n	8005d50 <HAL_SPI_IRQHandler+0x168>
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d034      	beq.n	8005dba <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0203 	bic.w	r2, r2, #3
 8005d5e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d011      	beq.n	8005d8c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6c:	4a17      	ldr	r2, [pc, #92]	; (8005dcc <HAL_SPI_IRQHandler+0x1e4>)
 8005d6e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fd f819 	bl	8002dac <HAL_DMA_Abort_IT>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d016      	beq.n	8005dc2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d98:	4a0c      	ldr	r2, [pc, #48]	; (8005dcc <HAL_SPI_IRQHandler+0x1e4>)
 8005d9a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fd f803 	bl	8002dac <HAL_DMA_Abort_IT>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005db8:	e003      	b.n	8005dc2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f808 	bl	8005dd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005dc0:	e000      	b.n	8005dc4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005dc2:	bf00      	nop
    return;
 8005dc4:	bf00      	nop
  }
}
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	08005e01 	.word	0x08005e01

08005dd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005df2:	b2db      	uxtb	r3, r3
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff ffd8 	bl	8005dd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	4613      	mov	r3, r2
 8005e36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e38:	f7fc fe48 	bl	8002acc <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	4413      	add	r3, r2
 8005e46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e48:	f7fc fe40 	bl	8002acc <HAL_GetTick>
 8005e4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e4e:	4b39      	ldr	r3, [pc, #228]	; (8005f34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	015b      	lsls	r3, r3, #5
 8005e54:	0d1b      	lsrs	r3, r3, #20
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	fb02 f303 	mul.w	r3, r2, r3
 8005e5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e5e:	e054      	b.n	8005f0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e66:	d050      	beq.n	8005f0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e68:	f7fc fe30 	bl	8002acc <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d902      	bls.n	8005e7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d13d      	bne.n	8005efa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e96:	d111      	bne.n	8005ebc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea0:	d004      	beq.n	8005eac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eaa:	d107      	bne.n	8005ebc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec4:	d10f      	bne.n	8005ee6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ee4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e017      	b.n	8005f2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4013      	ands	r3, r2
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	bf0c      	ite	eq
 8005f1a:	2301      	moveq	r3, #1
 8005f1c:	2300      	movne	r3, #0
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	461a      	mov	r2, r3
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d19b      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3720      	adds	r7, #32
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000004 	.word	0x20000004

08005f38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f4c:	d111      	bne.n	8005f72 <SPI_EndRxTransaction+0x3a>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f56:	d004      	beq.n	8005f62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f60:	d107      	bne.n	8005f72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f70:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f7a:	d12a      	bne.n	8005fd2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f84:	d012      	beq.n	8005fac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2180      	movs	r1, #128	; 0x80
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7ff ff49 	bl	8005e28 <SPI_WaitFlagStateUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d02d      	beq.n	8005ff8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa0:	f043 0220 	orr.w	r2, r3, #32
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e026      	b.n	8005ffa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f7ff ff36 	bl	8005e28 <SPI_WaitFlagStateUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d01a      	beq.n	8005ff8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc6:	f043 0220 	orr.w	r2, r3, #32
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e013      	b.n	8005ffa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2101      	movs	r1, #1
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff ff23 	bl	8005e28 <SPI_WaitFlagStateUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fec:	f043 0220 	orr.w	r2, r3, #32
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e000      	b.n	8005ffa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006010:	4b1b      	ldr	r3, [pc, #108]	; (8006080 <SPI_EndRxTxTransaction+0x7c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a1b      	ldr	r2, [pc, #108]	; (8006084 <SPI_EndRxTxTransaction+0x80>)
 8006016:	fba2 2303 	umull	r2, r3, r2, r3
 800601a:	0d5b      	lsrs	r3, r3, #21
 800601c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006020:	fb02 f303 	mul.w	r3, r2, r3
 8006024:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800602e:	d112      	bne.n	8006056 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2200      	movs	r2, #0
 8006038:	2180      	movs	r1, #128	; 0x80
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f7ff fef4 	bl	8005e28 <SPI_WaitFlagStateUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d016      	beq.n	8006074 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604a:	f043 0220 	orr.w	r2, r3, #32
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e00f      	b.n	8006076 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	3b01      	subs	r3, #1
 8006060:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606c:	2b80      	cmp	r3, #128	; 0x80
 800606e:	d0f2      	beq.n	8006056 <SPI_EndRxTxTransaction+0x52>
 8006070:	e000      	b.n	8006074 <SPI_EndRxTxTransaction+0x70>
        break;
 8006072:	bf00      	nop
  }

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000004 	.word	0x20000004
 8006084:	165e9f81 	.word	0x165e9f81

08006088 <memset>:
 8006088:	4402      	add	r2, r0
 800608a:	4603      	mov	r3, r0
 800608c:	4293      	cmp	r3, r2
 800608e:	d100      	bne.n	8006092 <memset+0xa>
 8006090:	4770      	bx	lr
 8006092:	f803 1b01 	strb.w	r1, [r3], #1
 8006096:	e7f9      	b.n	800608c <memset+0x4>

08006098 <__libc_init_array>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	4d0d      	ldr	r5, [pc, #52]	; (80060d0 <__libc_init_array+0x38>)
 800609c:	4c0d      	ldr	r4, [pc, #52]	; (80060d4 <__libc_init_array+0x3c>)
 800609e:	1b64      	subs	r4, r4, r5
 80060a0:	10a4      	asrs	r4, r4, #2
 80060a2:	2600      	movs	r6, #0
 80060a4:	42a6      	cmp	r6, r4
 80060a6:	d109      	bne.n	80060bc <__libc_init_array+0x24>
 80060a8:	4d0b      	ldr	r5, [pc, #44]	; (80060d8 <__libc_init_array+0x40>)
 80060aa:	4c0c      	ldr	r4, [pc, #48]	; (80060dc <__libc_init_array+0x44>)
 80060ac:	f000 f818 	bl	80060e0 <_init>
 80060b0:	1b64      	subs	r4, r4, r5
 80060b2:	10a4      	asrs	r4, r4, #2
 80060b4:	2600      	movs	r6, #0
 80060b6:	42a6      	cmp	r6, r4
 80060b8:	d105      	bne.n	80060c6 <__libc_init_array+0x2e>
 80060ba:	bd70      	pop	{r4, r5, r6, pc}
 80060bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c0:	4798      	blx	r3
 80060c2:	3601      	adds	r6, #1
 80060c4:	e7ee      	b.n	80060a4 <__libc_init_array+0xc>
 80060c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ca:	4798      	blx	r3
 80060cc:	3601      	adds	r6, #1
 80060ce:	e7f2      	b.n	80060b6 <__libc_init_array+0x1e>
 80060d0:	08006238 	.word	0x08006238
 80060d4:	08006238 	.word	0x08006238
 80060d8:	08006238 	.word	0x08006238
 80060dc:	0800623c 	.word	0x0800623c

080060e0 <_init>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	bf00      	nop
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr

080060ec <_fini>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	bf00      	nop
 80060f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f2:	bc08      	pop	{r3}
 80060f4:	469e      	mov	lr, r3
 80060f6:	4770      	bx	lr
