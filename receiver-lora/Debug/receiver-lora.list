
receiver-lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  08009370  08009370  00019370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098d0  080098d0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080098d0  080098d0  000198d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098d8  080098d8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098d8  080098d8  000198d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098dc  080098dc  000198dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080098e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001d4  08009ab4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08009ab4  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac9a  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ed  00000000  00000000  0002aee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  0002cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000813  00000000  00000000  0002da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000038f9  00000000  00000000  0002e28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eab7  00000000  00000000  00031b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000895cd  00000000  00000000  0004063b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f94  00000000  00000000  000c9c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000cdb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009358 	.word	0x08009358

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009358 	.word	0x08009358

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001000:	b4b0      	push	{r4, r5, r7}
 8001002:	b08f      	sub	sp, #60	; 0x3c
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001008:	f240 13b1 	movw	r3, #433	; 0x1b1
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800100e:	2307      	movs	r3, #7
 8001010:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8001014:	2307      	movs	r3, #7
 8001016:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 800101a:	2301      	movs	r3, #1
 800101c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8001020:	23ff      	movs	r3, #255	; 0xff
 8001022:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8001026:	2364      	movs	r3, #100	; 0x64
 8001028:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 800102c:	2308      	movs	r3, #8
 800102e:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	461d      	mov	r5, r3
 8001034:	f107 040c 	add.w	r4, r7, #12
 8001038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001040:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001044:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	373c      	adds	r7, #60	; 0x3c
 800104c:	46bd      	mov	sp, r7
 800104e:	bcb0      	pop	{r4, r5, r7}
 8001050:	4770      	bx	lr

08001052 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 800105c:	2101      	movs	r1, #1
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f99f 	bl	80013a2 <LoRa_read>
 8001064:	4603      	mov	r3, r0
 8001066:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d107      	bne.n	8001082 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	f023 0307 	bic.w	r3, r3, #7
 8001078:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	61da      	str	r2, [r3, #28]
 8001080:	e03e      	b.n	8001100 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d10c      	bne.n	80010a2 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800108c:	f023 0307 	bic.w	r3, r3, #7
 8001090:	b25b      	sxtb	r3, r3
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	b25b      	sxtb	r3, r3
 8001098:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	61da      	str	r2, [r3, #28]
 80010a0:	e02e      	b.n	8001100 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d10c      	bne.n	80010c2 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80010a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010ac:	f023 0307 	bic.w	r3, r3, #7
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	f043 0303 	orr.w	r3, r3, #3
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2203      	movs	r2, #3
 80010be:	61da      	str	r2, [r3, #28]
 80010c0:	e01e      	b.n	8001100 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b05      	cmp	r3, #5
 80010c6:	d10c      	bne.n	80010e2 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80010c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010cc:	f023 0307 	bic.w	r3, r3, #7
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	f043 0305 	orr.w	r3, r3, #5
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2205      	movs	r2, #5
 80010de:	61da      	str	r2, [r3, #28]
 80010e0:	e00e      	b.n	8001100 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2b06      	cmp	r3, #6
 80010e6:	d10b      	bne.n	8001100 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80010e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010ec:	f023 0307 	bic.w	r3, r3, #7
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	f043 0306 	orr.w	r3, r3, #6
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2206      	movs	r2, #6
 80010fe:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	461a      	mov	r2, r3
 8001104:	2101      	movs	r1, #1
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f965 	bl	80013d6 <LoRa_write>
	//HAL_Delay(10);
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	4613      	mov	r3, r2
 8001122:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	889b      	ldrh	r3, [r3, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	4619      	mov	r1, r3
 8001130:	f001 fb26 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6998      	ldr	r0, [r3, #24]
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800113e:	68b9      	ldr	r1, [r7, #8]
 8001140:	f002 ffe8 	bl	8004114 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001144:	bf00      	nop
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fbee 	bl	800492c <HAL_SPI_GetState>
 8001150:	4603      	mov	r3, r0
 8001152:	2b01      	cmp	r3, #1
 8001154:	d1f7      	bne.n	8001146 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6998      	ldr	r0, [r3, #24]
 800115a:	8b3a      	ldrh	r2, [r7, #24]
 800115c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	f003 f923 	bl	80043ac <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001166:	bf00      	nop
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4618      	mov	r0, r3
 800116e:	f003 fbdd 	bl	800492c <HAL_SPI_GetState>
 8001172:	4603      	mov	r3, r0
 8001174:	2b01      	cmp	r3, #1
 8001176:	d1f7      	bne.n	8001168 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	889b      	ldrh	r3, [r3, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	4619      	mov	r1, r3
 8001184:	f001 fafc 	bl	8002780 <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	4613      	mov	r3, r2
 800119e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	889b      	ldrh	r3, [r3, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	f001 fae8 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6998      	ldr	r0, [r3, #24]
 80011b4:	88fa      	ldrh	r2, [r7, #6]
 80011b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011ba:	68b9      	ldr	r1, [r7, #8]
 80011bc:	f002 ffaa 	bl	8004114 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011c0:	bf00      	nop
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 fbb0 	bl	800492c <HAL_SPI_GetState>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d1f7      	bne.n	80011c2 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6998      	ldr	r0, [r3, #24]
 80011d6:	8b3a      	ldrh	r2, [r7, #24]
 80011d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011dc:	6839      	ldr	r1, [r7, #0]
 80011de:	f002 ff99 	bl	8004114 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011e2:	bf00      	nop
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fb9f 	bl	800492c <HAL_SPI_GetState>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d1f7      	bne.n	80011e4 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	889b      	ldrh	r3, [r3, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	4619      	mov	r1, r3
 8001200:	f001 fabe 	bl	8002780 <HAL_GPIO_WritePin>
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	04db      	lsls	r3, r3, #19
 800121a:	115b      	asrs	r3, r3, #5
 800121c:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	0c1b      	lsrs	r3, r3, #16
 8001222:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001224:	7afb      	ldrb	r3, [r7, #11]
 8001226:	461a      	mov	r2, r3
 8001228:	2106      	movs	r1, #6
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f8d3 	bl	80013d6 <LoRa_write>
	HAL_Delay(5);
 8001230:	2005      	movs	r0, #5
 8001232:	f000 fea7 	bl	8001f84 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800123c:	7afb      	ldrb	r3, [r7, #11]
 800123e:	461a      	mov	r2, r3
 8001240:	2107      	movs	r1, #7
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f8c7 	bl	80013d6 <LoRa_write>
	HAL_Delay(5);
 8001248:	2005      	movs	r0, #5
 800124a:	f000 fe9b 	bl	8001f84 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001252:	7afb      	ldrb	r3, [r7, #11]
 8001254:	461a      	mov	r2, r3
 8001256:	2108      	movs	r1, #8
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f8bc 	bl	80013d6 <LoRa_write>
	HAL_Delay(5);
 800125e:	2005      	movs	r0, #5
 8001260:	f000 fe90 	bl	8001f84 <HAL_Delay>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2b0c      	cmp	r3, #12
 800127a:	dd01      	ble.n	8001280 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800127c:	230c      	movs	r3, #12
 800127e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2b06      	cmp	r3, #6
 8001284:	dc01      	bgt.n	800128a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001286:	2307      	movs	r3, #7
 8001288:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800128a:	211e      	movs	r1, #30
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f888 	bl	80013a2 <LoRa_read>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001296:	200a      	movs	r0, #10
 8001298:	f000 fe74 	bl	8001f84 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80012b0:	7bbb      	ldrb	r3, [r7, #14]
 80012b2:	461a      	mov	r2, r3
 80012b4:	211e      	movs	r1, #30
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f88d 	bl	80013d6 <LoRa_write>
	HAL_Delay(10);
 80012bc:	200a      	movs	r0, #10
 80012be:	f000 fe61 	bl	8001f84 <HAL_Delay>
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	461a      	mov	r2, r3
 80012da:	2109      	movs	r1, #9
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 f87a 	bl	80013d6 <LoRa_write>
	HAL_Delay(10);
 80012e2:	200a      	movs	r0, #10
 80012e4:	f000 fe4e 	bl	8001f84 <HAL_Delay>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2b2c      	cmp	r3, #44	; 0x2c
 8001304:	d801      	bhi.n	800130a <LoRa_setOCP+0x1a>
		current = 45;
 8001306:	232d      	movs	r3, #45	; 0x2d
 8001308:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	2bf0      	cmp	r3, #240	; 0xf0
 800130e:	d901      	bls.n	8001314 <LoRa_setOCP+0x24>
		current = 240;
 8001310:	23f0      	movs	r3, #240	; 0xf0
 8001312:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	2b78      	cmp	r3, #120	; 0x78
 8001318:	d809      	bhi.n	800132e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	3b2d      	subs	r3, #45	; 0x2d
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <LoRa_setOCP+0x78>)
 8001320:	fb82 1203 	smull	r1, r2, r2, r3
 8001324:	1052      	asrs	r2, r2, #1
 8001326:	17db      	asrs	r3, r3, #31
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e00b      	b.n	8001346 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800132e:	78fb      	ldrb	r3, [r7, #3]
 8001330:	2bf0      	cmp	r3, #240	; 0xf0
 8001332:	d808      	bhi.n	8001346 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	331e      	adds	r3, #30
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <LoRa_setOCP+0x78>)
 800133a:	fb82 1203 	smull	r1, r2, r2, r3
 800133e:	1092      	asrs	r2, r2, #2
 8001340:	17db      	asrs	r3, r3, #31
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	3320      	adds	r3, #32
 800134a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	461a      	mov	r2, r3
 8001350:	210b      	movs	r1, #11
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f83f 	bl	80013d6 <LoRa_write>
	HAL_Delay(10);
 8001358:	200a      	movs	r0, #10
 800135a:	f000 fe13 	bl	8001f84 <HAL_Delay>
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	66666667 	.word	0x66666667

0800136c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001374:	211e      	movs	r1, #30
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f813 	bl	80013a2 <LoRa_read>
 800137c:	4603      	mov	r3, r0
 800137e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	f043 0307 	orr.w	r3, r3, #7
 8001386:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	461a      	mov	r2, r3
 800138c:	211e      	movs	r1, #30
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f821 	bl	80013d6 <LoRa_write>
	HAL_Delay(10);
 8001394:	200a      	movs	r0, #10
 8001396:	f000 fdf5 	bl	8001f84 <HAL_Delay>
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af02      	add	r7, sp, #8
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80013b8:	f107 030f 	add.w	r3, r7, #15
 80013bc:	f107 010e 	add.w	r1, r7, #14
 80013c0:	2201      	movs	r2, #1
 80013c2:	9200      	str	r2, [sp, #0]
 80013c4:	2201      	movs	r2, #1
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fea4 	bl	8001114 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af02      	add	r7, sp, #8
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	70fb      	strb	r3, [r7, #3]
 80013e2:	4613      	mov	r3, r2
 80013e4:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	73bb      	strb	r3, [r7, #14]
	data = value;
 80013f0:	78bb      	ldrb	r3, [r7, #2]
 80013f2:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80013f4:	f107 030f 	add.w	r3, r7, #15
 80013f8:	f107 010e 	add.w	r1, r7, #14
 80013fc:	2201      	movs	r2, #1
 80013fe:	9200      	str	r2, [sp, #0]
 8001400:	2201      	movs	r2, #1
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fec4 	bl	8001190 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

	return 1;
 8001418:	2301      	movs	r3, #1
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800142e:	2105      	movs	r1, #5
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fe0e 	bl	8001052 <LoRa_gotoMode>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	4613      	mov	r3, r2
 800144c:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	e007      	b.n	8001468 <LoRa_receive+0x28>
		data[i]=0;
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	4413      	add	r3, r2
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	3301      	adds	r3, #1
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbf3      	blt.n	8001458 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001470:	2101      	movs	r1, #1
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff fded 	bl	8001052 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001478:	2112      	movs	r1, #18
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f7ff ff91 	bl	80013a2 <LoRa_read>
 8001480:	4603      	mov	r3, r0
 8001482:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001484:	7cfb      	ldrb	r3, [r7, #19]
 8001486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800148a:	2b00      	cmp	r3, #0
 800148c:	d034      	beq.n	80014f8 <LoRa_receive+0xb8>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800148e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001492:	481e      	ldr	r0, [pc, #120]	; (800150c <LoRa_receive+0xcc>)
 8001494:	f001 f9a6 	bl	80027e4 <HAL_GPIO_TogglePin>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001498:	22ff      	movs	r2, #255	; 0xff
 800149a:	2112      	movs	r1, #18
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f7ff ff9a 	bl	80013d6 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80014a2:	2113      	movs	r1, #19
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff ff7c 	bl	80013a2 <LoRa_read>
 80014aa:	4603      	mov	r3, r0
 80014ac:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80014ae:	2110      	movs	r1, #16
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff ff76 	bl	80013a2 <LoRa_read>
 80014b6:	4603      	mov	r3, r0
 80014b8:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80014ba:	7cfb      	ldrb	r3, [r7, #19]
 80014bc:	461a      	mov	r2, r3
 80014be:	210d      	movs	r1, #13
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f7ff ff88 	bl	80013d6 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80014c6:	7cba      	ldrb	r2, [r7, #18]
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4293      	cmp	r3, r2
 80014cc:	bf28      	it	cs
 80014ce:	4613      	movcs	r3, r2
 80014d0:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e00b      	b.n	80014f0 <LoRa_receive+0xb0>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	18d4      	adds	r4, r2, r3
 80014de:	2100      	movs	r1, #0
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f7ff ff5e 	bl	80013a2 <LoRa_read>
 80014e6:	4603      	mov	r3, r0
 80014e8:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	7ffb      	ldrb	r3, [r7, #31]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbef      	blt.n	80014d8 <LoRa_receive+0x98>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80014f8:	2105      	movs	r1, #5
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f7ff fda9 	bl	8001052 <LoRa_gotoMode>
    return min;
 8001500:	7ffb      	ldrb	r3, [r7, #31]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd90      	pop	{r4, r7, pc}
 800150a:	bf00      	nop
 800150c:	40020c00 	.word	0x40020c00

08001510 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff79 	bl	8001410 <LoRa_isvalid>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8093 	beq.w	800164c <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001526:	2100      	movs	r1, #0
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fd92 	bl	8001052 <LoRa_gotoMode>
			HAL_Delay(10);
 800152e:	200a      	movs	r0, #10
 8001530:	f000 fd28 	bl	8001f84 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001534:	2101      	movs	r1, #1
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff33 	bl	80013a2 <LoRa_read>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001540:	200a      	movs	r0, #10
 8001542:	f000 fd1f 	bl	8001f84 <HAL_Delay>
			data = read | 0x80;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800154c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800154e:	7bbb      	ldrb	r3, [r7, #14]
 8001550:	461a      	mov	r2, r3
 8001552:	2101      	movs	r1, #1
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff3e 	bl	80013d6 <LoRa_write>
			HAL_Delay(100);
 800155a:	2064      	movs	r0, #100	; 0x64
 800155c:	f000 fd12 	bl	8001f84 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4619      	mov	r1, r3
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fe50 	bl	800120c <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001572:	4619      	mov	r1, r3
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fea8 	bl	80012ca <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff feb4 	bl	80012f0 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001588:	2223      	movs	r2, #35	; 0x23
 800158a:	210c      	movs	r1, #12
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff22 	bl	80013d6 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff feea 	bl	800136c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fe63 	bl	800126c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	211f      	movs	r1, #31
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff13 	bl	80013d6 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80015cc:	7bbb      	ldrb	r3, [r7, #14]
 80015ce:	461a      	mov	r2, r3
 80015d0:	211d      	movs	r1, #29
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff feff 	bl	80013d6 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	2120      	movs	r1, #32
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fef5 	bl	80013d6 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	2121      	movs	r1, #33	; 0x21
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff feed 	bl	80013d6 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80015fc:	2140      	movs	r1, #64	; 0x40
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fecf 	bl	80013a2 <LoRa_read>
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800160e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001610:	7bbb      	ldrb	r3, [r7, #14]
 8001612:	461a      	mov	r2, r3
 8001614:	2140      	movs	r1, #64	; 0x40
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fedd 	bl	80013d6 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800161c:	2101      	movs	r1, #1
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fd17 	bl	8001052 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800162a:	200a      	movs	r0, #10
 800162c:	f000 fcaa 	bl	8001f84 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001630:	2142      	movs	r1, #66	; 0x42
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff feb5 	bl	80013a2 <LoRa_read>
 8001638:	4603      	mov	r3, r0
 800163a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	2b12      	cmp	r3, #18
 8001640:	d101      	bne.n	8001646 <LoRa_init+0x136>
				return LORA_OK;
 8001642:	23c8      	movs	r3, #200	; 0xc8
 8001644:	e004      	b.n	8001650 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8001646:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800164a:	e001      	b.n	8001650 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 800164c:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <MX_GPIO_Init+0x108>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a3a      	ldr	r2, [pc, #232]	; (8001760 <MX_GPIO_Init+0x108>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b38      	ldr	r3, [pc, #224]	; (8001760 <MX_GPIO_Init+0x108>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <MX_GPIO_Init+0x108>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a33      	ldr	r2, [pc, #204]	; (8001760 <MX_GPIO_Init+0x108>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b31      	ldr	r3, [pc, #196]	; (8001760 <MX_GPIO_Init+0x108>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <MX_GPIO_Init+0x108>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a2c      	ldr	r2, [pc, #176]	; (8001760 <MX_GPIO_Init+0x108>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <MX_GPIO_Init+0x108>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b26      	ldr	r3, [pc, #152]	; (8001760 <MX_GPIO_Init+0x108>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a25      	ldr	r2, [pc, #148]	; (8001760 <MX_GPIO_Init+0x108>)
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b23      	ldr	r3, [pc, #140]	; (8001760 <MX_GPIO_Init+0x108>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RESET_Pin, GPIO_PIN_SET);
 80016de:	2201      	movs	r2, #1
 80016e0:	2103      	movs	r1, #3
 80016e2:	4820      	ldr	r0, [pc, #128]	; (8001764 <MX_GPIO_Init+0x10c>)
 80016e4:	f001 f84c 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80016ee:	481e      	ldr	r0, [pc, #120]	; (8001768 <MX_GPIO_Init+0x110>)
 80016f0:	f001 f846 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NSS_Pin|RESET_Pin;
 80016f4:	2303      	movs	r3, #3
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4816      	ldr	r0, [pc, #88]	; (8001764 <MX_GPIO_Init+0x10c>)
 800170c:	f000 fd9e 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001710:	2304      	movs	r3, #4
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001714:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	480f      	ldr	r0, [pc, #60]	; (8001764 <MX_GPIO_Init+0x10c>)
 8001726:	f000 fd91 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800172a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <MX_GPIO_Init+0x110>)
 8001744:	f000 fd82 	bl	800224c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2008      	movs	r0, #8
 800174e:	f000 fd2d 	bl	80021ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001752:	2008      	movs	r0, #8
 8001754:	f000 fd56 	bl	8002204 <HAL_NVIC_EnableIRQ>

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800
 8001764:	40020400 	.word	0x40020400
 8001768:	40020c00 	.word	0x40020c00

0800176c <lcd_send_cmd>:
#include "i2c-lcd.h"
extern I2C_HandleTypeDef hi2c1;
#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd){
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af02      	add	r7, sp, #8
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f023 030f 	bic.w	r3, r3, #15
 800177c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	f043 030c 	orr.w	r3, r3, #12
 800178a:	b2db      	uxtb	r3, r3
 800178c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	b2db      	uxtb	r3, r3
 8001796:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001798:	7bbb      	ldrb	r3, [r7, #14]
 800179a:	f043 030c 	orr.w	r3, r3, #12
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80017a2:	7bbb      	ldrb	r3, [r7, #14]
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 50);
 80017ac:	f107 0208 	add.w	r2, r7, #8
 80017b0:	2332      	movs	r3, #50	; 0x32
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2304      	movs	r3, #4
 80017b6:	214e      	movs	r1, #78	; 0x4e
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <lcd_send_cmd+0x5c>)
 80017ba:	f001 fa2b 	bl	8002c14 <HAL_I2C_Master_Transmit>
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200001f0 	.word	0x200001f0

080017cc <lcd_init>:
            break;
    }
    lcd_send_cmd (col);
}

void lcd_init (void){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80017d0:	2032      	movs	r0, #50	; 0x32
 80017d2:	f000 fbd7 	bl	8001f84 <HAL_Delay>
	lcd_send_cmd(0x30);
 80017d6:	2030      	movs	r0, #48	; 0x30
 80017d8:	f7ff ffc8 	bl	800176c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80017dc:	2005      	movs	r0, #5
 80017de:	f000 fbd1 	bl	8001f84 <HAL_Delay>
	lcd_send_cmd(0x30);
 80017e2:	2030      	movs	r0, #48	; 0x30
 80017e4:	f7ff ffc2 	bl	800176c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80017e8:	2001      	movs	r0, #1
 80017ea:	f000 fbcb 	bl	8001f84 <HAL_Delay>
	lcd_send_cmd(0x30);
 80017ee:	2030      	movs	r0, #48	; 0x30
 80017f0:	f7ff ffbc 	bl	800176c <lcd_send_cmd>
	HAL_Delay(10);
 80017f4:	200a      	movs	r0, #10
 80017f6:	f000 fbc5 	bl	8001f84 <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 80017fa:	2020      	movs	r0, #32
 80017fc:	f7ff ffb6 	bl	800176c <lcd_send_cmd>
	HAL_Delay(10);
 8001800:	200a      	movs	r0, #10
 8001802:	f000 fbbf 	bl	8001f84 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001806:	2028      	movs	r0, #40	; 0x28
 8001808:	f7ff ffb0 	bl	800176c <lcd_send_cmd>
	HAL_Delay(1);
 800180c:	2001      	movs	r0, #1
 800180e:	f000 fbb9 	bl	8001f84 <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001812:	2008      	movs	r0, #8
 8001814:	f7ff ffaa 	bl	800176c <lcd_send_cmd>
	HAL_Delay(1);
 8001818:	2001      	movs	r0, #1
 800181a:	f000 fbb3 	bl	8001f84 <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff ffa4 	bl	800176c <lcd_send_cmd>
	HAL_Delay(1);
 8001824:	2001      	movs	r0, #1
 8001826:	f000 fbad 	bl	8001f84 <HAL_Delay>
	HAL_Delay(1);
 800182a:	2001      	movs	r0, #1
 800182c:	f000 fbaa 	bl	8001f84 <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001830:	2006      	movs	r0, #6
 8001832:	f7ff ff9b 	bl	800176c <lcd_send_cmd>
	HAL_Delay(1);
 8001836:	2001      	movs	r0, #1
 8001838:	f000 fba4 	bl	8001f84 <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800183c:	200c      	movs	r0, #12
 800183e:	f7ff ff95 	bl	800176c <lcd_send_cmd>
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_I2C1_Init+0x50>)
 800184e:	4a13      	ldr	r2, [pc, #76]	; (800189c <MX_I2C1_Init+0x54>)
 8001850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_I2C1_Init+0x50>)
 8001854:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <MX_I2C1_Init+0x58>)
 8001856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_I2C1_Init+0x50>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_I2C1_Init+0x50>)
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_I2C1_Init+0x50>)
 8001866:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <MX_I2C1_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_I2C1_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <MX_I2C1_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_I2C1_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_I2C1_Init+0x50>)
 8001886:	f000 fff9 	bl	800287c <HAL_I2C_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001890:	f000 f91e 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200001f0 	.word	0x200001f0
 800189c:	40005400 	.word	0x40005400
 80018a0:	000186a0 	.word	0x000186a0

080018a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_I2C_MspInit+0x84>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12b      	bne.n	800191e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_I2C_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_I2C_MspInit+0x88>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_I2C_MspInit+0x88>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e2:	23c0      	movs	r3, #192	; 0xc0
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e6:	2312      	movs	r3, #18
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f2:	2304      	movs	r3, #4
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	480c      	ldr	r0, [pc, #48]	; (8001930 <HAL_I2C_MspInit+0x8c>)
 80018fe:	f000 fca5 	bl	800224c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_I2C_MspInit+0x88>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_I2C_MspInit+0x88>)
 800190c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_I2C_MspInit+0x88>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40005400 	.word	0x40005400
 800192c:	40023800 	.word	0x40023800
 8001930:	40020400 	.word	0x40020400

08001934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001934:	b5b0      	push	{r4, r5, r7, lr}
 8001936:	b09c      	sub	sp, #112	; 0x70
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193a:	f000 fab1 	bl	8001ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800193e:	f000 f85f 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001942:	f7ff fe89 	bl	8001658 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001946:	f7ff ff7f 	bl	8001848 <MX_I2C1_Init>
  MX_SPI1_Init();
 800194a:	f000 f8d1 	bl	8001af0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800194e:	f7ff ff3d 	bl	80017cc <lcd_init>
//  int ret = BMP280_Config(OSRS_16, OSRS_16, OSRS_OFF, MODE_NORMAL, T_SB_1000, IIR_16);
  char msgstr[64];

  myLora = newLoRa();
 8001952:	4c25      	ldr	r4, [pc, #148]	; (80019e8 <main+0xb4>)
 8001954:	463b      	mov	r3, r7
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fb52 	bl	8001000 <newLoRa>
 800195c:	4625      	mov	r5, r4
 800195e:	463c      	mov	r4, r7
 8001960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001968:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800196c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myLora.CS_port         = NSS_GPIO_Port;
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <main+0xb4>)
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <main+0xb8>)
 8001974:	601a      	str	r2, [r3, #0]
  myLora.CS_pin          = NSS_Pin;
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <main+0xb4>)
 8001978:	2201      	movs	r2, #1
 800197a:	809a      	strh	r2, [r3, #4]
  myLora.reset_port      = RESET_GPIO_Port;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <main+0xb4>)
 800197e:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <main+0xb8>)
 8001980:	609a      	str	r2, [r3, #8]
  myLora.reset_pin       = RESET_Pin;
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <main+0xb4>)
 8001984:	2202      	movs	r2, #2
 8001986:	819a      	strh	r2, [r3, #12]
  myLora.DIO0_port       = DIO0_GPIO_Port;
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <main+0xb4>)
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <main+0xb8>)
 800198c:	611a      	str	r2, [r3, #16]
  myLora.DIO0_pin        = DIO0_Pin;
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <main+0xb4>)
 8001990:	2204      	movs	r2, #4
 8001992:	829a      	strh	r2, [r3, #20]
  myLora.hSPIx           = &hspi1;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <main+0xb4>)
 8001996:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <main+0xbc>)
 8001998:	619a      	str	r2, [r3, #24]

  if (LoRa_init(&myLora) == LORA_OK) {
 800199a:	4813      	ldr	r0, [pc, #76]	; (80019e8 <main+0xb4>)
 800199c:	f7ff fdb8 	bl	8001510 <LoRa_init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2bc8      	cmp	r3, #200	; 0xc8
 80019a4:	d103      	bne.n	80019ae <main+0x7a>
      LoRa_status = 1;
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <main+0xc0>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	e005      	b.n	80019ba <main+0x86>
  } else {
  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b4:	4810      	ldr	r0, [pc, #64]	; (80019f8 <main+0xc4>)
 80019b6:	f000 fee3 	bl	8002780 <HAL_GPIO_WritePin>
  }

  LoRa_startReceiving(&myLora);
 80019ba:	480b      	ldr	r0, [pc, #44]	; (80019e8 <main+0xb4>)
 80019bc:	f7ff fd33 	bl	8001426 <LoRa_startReceiving>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (LoRa_status) {
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <main+0xc0>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0fb      	beq.n	80019c0 <main+0x8c>
		  HAL_Delay(1000);
 80019c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019cc:	f000 fada 	bl	8001f84 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80019d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019d4:	4808      	ldr	r0, [pc, #32]	; (80019f8 <main+0xc4>)
 80019d6:	f000 ff05 	bl	80027e4 <HAL_GPIO_TogglePin>
		  LoRa_receive(&myLora, &result, 1);
 80019da:	2201      	movs	r2, #1
 80019dc:	4907      	ldr	r1, [pc, #28]	; (80019fc <main+0xc8>)
 80019de:	4802      	ldr	r0, [pc, #8]	; (80019e8 <main+0xb4>)
 80019e0:	f7ff fd2e 	bl	8001440 <LoRa_receive>
	  if (LoRa_status) {
 80019e4:	e7ec      	b.n	80019c0 <main+0x8c>
 80019e6:	bf00      	nop
 80019e8:	20000244 	.word	0x20000244
 80019ec:	40020400 	.word	0x40020400
 80019f0:	20000274 	.word	0x20000274
 80019f4:	20000270 	.word	0x20000270
 80019f8:	40020c00 	.word	0x40020c00
 80019fc:	20000271 	.word	0x20000271

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b094      	sub	sp, #80	; 0x50
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 0320 	add.w	r3, r7, #32
 8001a0a:	2230      	movs	r2, #48	; 0x30
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 f865 	bl	8005ade <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <SystemClock_Config+0xc8>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <SystemClock_Config+0xc8>)
 8001a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6413      	str	r3, [r2, #64]	; 0x40
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <SystemClock_Config+0xc8>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <SystemClock_Config+0xcc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a20      	ldr	r2, [pc, #128]	; (8001acc <SystemClock_Config+0xcc>)
 8001a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <SystemClock_Config+0xcc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a66:	2302      	movs	r3, #2
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a70:	2304      	movs	r3, #4
 8001a72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a74:	2348      	movs	r3, #72	; 0x48
 8001a76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a80:	f107 0320 	add.w	r3, r7, #32
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fbcd 	bl	8003224 <HAL_RCC_OscConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a90:	f000 f81e 	bl	8001ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a94:	230f      	movs	r3, #15
 8001a96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	2102      	movs	r1, #2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f001 fedf 	bl	8003874 <HAL_RCC_ClockConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001abc:	f000 f808 	bl	8001ad0 <Error_Handler>
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3750      	adds	r7, #80	; 0x50
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40007000 	.word	0x40007000

08001ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad4:	b672      	cpsid	i
}
 8001ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <Error_Handler+0x8>

08001ada <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001af6:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <MX_SPI1_Init+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b24:	2210      	movs	r2, #16
 8001b26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b3c:	220a      	movs	r2, #10
 8001b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b42:	f002 f94b 	bl	8003ddc <HAL_SPI_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b4c:	f7ff ffc0 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000274 	.word	0x20000274
 8001b58:	40013000 	.word	0x40013000

08001b5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_SPI_MspInit+0x84>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12b      	bne.n	8001bd6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001b88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bb6:	23e0      	movs	r3, #224	; 0xe0
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <HAL_SPI_MspInit+0x8c>)
 8001bd2:	f000 fb3b 	bl	800224c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40013000 	.word	0x40013000
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000

08001bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_MspInit+0x4c>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_MspInit+0x4c>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <NMI_Handler+0x4>

08001c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <MemManage_Handler+0x4>

08001c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c88:	f000 f95c 	bl	8001f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001c94:	2004      	movs	r0, #4
 8001c96:	f000 fdcd 	bl	8002834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  return 1;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <_kill>:

int _kill(int pid, int sig)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cb8:	f003 ff64 	bl	8005b84 <__errno>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2216      	movs	r2, #22
 8001cc0:	601a      	str	r2, [r3, #0]
  return -1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_exit>:

void _exit (int status)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cd6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffe7 	bl	8001cae <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ce0:	e7fe      	b.n	8001ce0 <_exit+0x12>

08001ce2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e00a      	b.n	8001d0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	4601      	mov	r1, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	60ba      	str	r2, [r7, #8]
 8001d00:	b2ca      	uxtb	r2, r1
 8001d02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3301      	adds	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	dbf0      	blt.n	8001cf4 <_read+0x12>
  }

  return len;
 8001d12:	687b      	ldr	r3, [r7, #4]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e009      	b.n	8001d42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	60ba      	str	r2, [r7, #8]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	dbf1      	blt.n	8001d2e <_write+0x12>
  }
  return len;
 8001d4a:	687b      	ldr	r3, [r7, #4]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_close>:

int _close(int file)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d7c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_isatty>:

int _isatty(int file)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d94:	2301      	movs	r3, #1
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b085      	sub	sp, #20
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc4:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <_sbrk+0x5c>)
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <_sbrk+0x60>)
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <_sbrk+0x64>)
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <_sbrk+0x68>)
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d207      	bcs.n	8001dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dec:	f003 feca 	bl	8005b84 <__errno>
 8001df0:	4603      	mov	r3, r0
 8001df2:	220c      	movs	r2, #12
 8001df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	e009      	b.n	8001e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <_sbrk+0x64>)
 8001e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20020000 	.word	0x20020000
 8001e1c:	00000400 	.word	0x00000400
 8001e20:	200002cc 	.word	0x200002cc
 8001e24:	20000420 	.word	0x20000420

08001e28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <SystemInit+0x20>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <SystemInit+0x20>)
 8001e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e52:	490e      	ldr	r1, [pc, #56]	; (8001e8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e54:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e58:	e002      	b.n	8001e60 <LoopCopyDataInit>

08001e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5e:	3304      	adds	r3, #4

08001e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e64:	d3f9      	bcc.n	8001e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e66:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e68:	4c0b      	ldr	r4, [pc, #44]	; (8001e98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e6c:	e001      	b.n	8001e72 <LoopFillZerobss>

08001e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e70:	3204      	adds	r2, #4

08001e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e74:	d3fb      	bcc.n	8001e6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e76:	f7ff ffd7 	bl	8001e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f003 fe89 	bl	8005b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7e:	f7ff fd59 	bl	8001934 <main>
  bx  lr    
 8001e82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e90:	080098e0 	.word	0x080098e0
  ldr r2, =_sbss
 8001e94:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e98:	20000420 	.word	0x20000420

08001e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC_IRQHandler>
	...

08001ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <HAL_Init+0x40>)
 8001eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_Init+0x40>)
 8001eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <HAL_Init+0x40>)
 8001ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 f94f 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f000 f808 	bl	8001ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed4:	f7ff fe8a 	bl	8001bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00

08001ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_InitTick+0x54>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_InitTick+0x58>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f996 	bl	8002234 <HAL_SYSTICK_Config>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00e      	b.n	8001f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d80a      	bhi.n	8001f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f000 f944 	bl	80021ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f24:	4a06      	ldr	r2, [pc, #24]	; (8001f40 <HAL_InitTick+0x5c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_IncTick+0x20>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x24>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <HAL_IncTick+0x24>)
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000008 	.word	0x20000008
 8001f68:	200002d0 	.word	0x200002d0

08001f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <HAL_GetTick+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	200002d0 	.word	0x200002d0

08001f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff ffee 	bl	8001f6c <HAL_GetTick>
 8001f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d005      	beq.n	8001faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_Delay+0x44>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001faa:	bf00      	nop
 8001fac:	f7ff ffde 	bl	8001f6c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d8f7      	bhi.n	8001fac <HAL_Delay+0x28>
  {
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000008 	.word	0x20000008

08001fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	60d3      	str	r3, [r2, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <__NVIC_GetPriorityGrouping+0x18>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	f003 0307 	and.w	r3, r3, #7
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db0b      	blt.n	800205a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4907      	ldr	r1, [pc, #28]	; (8002068 <__NVIC_EnableIRQ+0x38>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2001      	movs	r0, #1
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	; (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	; (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f1c3 0307 	rsb	r3, r3, #7
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf28      	it	cs
 80020de:	2304      	movcs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d902      	bls.n	80020f0 <NVIC_EncodePriority+0x30>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b03      	subs	r3, #3
 80020ee:	e000      	b.n	80020f2 <NVIC_EncodePriority+0x32>
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43d9      	mvns	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	4313      	orrs	r3, r2
         );
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f7ff ff8e 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b07      	cmp	r3, #7
 8002178:	d00f      	beq.n	800219a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b06      	cmp	r3, #6
 800217e:	d00c      	beq.n	800219a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d009      	beq.n	800219a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d006      	beq.n	800219a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d003      	beq.n	800219a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002192:	2190      	movs	r1, #144	; 0x90
 8002194:	4804      	ldr	r0, [pc, #16]	; (80021a8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002196:	f7ff fca0 	bl	8001ada <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ff16 	bl	8001fcc <__NVIC_SetPriorityGrouping>
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	08009370 	.word	0x08009370

080021ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	d903      	bls.n	80021cc <HAL_NVIC_SetPriority+0x20>
 80021c4:	21a8      	movs	r1, #168	; 0xa8
 80021c6:	480e      	ldr	r0, [pc, #56]	; (8002200 <HAL_NVIC_SetPriority+0x54>)
 80021c8:	f7ff fc87 	bl	8001ada <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	d903      	bls.n	80021da <HAL_NVIC_SetPriority+0x2e>
 80021d2:	21a9      	movs	r1, #169	; 0xa9
 80021d4:	480a      	ldr	r0, [pc, #40]	; (8002200 <HAL_NVIC_SetPriority+0x54>)
 80021d6:	f7ff fc80 	bl	8001ada <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021da:	f7ff ff1b 	bl	8002014 <__NVIC_GetPriorityGrouping>
 80021de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68b9      	ldr	r1, [r7, #8]
 80021e4:	6978      	ldr	r0, [r7, #20]
 80021e6:	f7ff ff6b 	bl	80020c0 <NVIC_EncodePriority>
 80021ea:	4602      	mov	r2, r0
 80021ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff3a 	bl	800206c <__NVIC_SetPriority>
}
 80021f8:	bf00      	nop
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	08009370 	.word	0x08009370

08002204 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	da03      	bge.n	800221e <HAL_NVIC_EnableIRQ+0x1a>
 8002216:	21bc      	movs	r1, #188	; 0xbc
 8002218:	4805      	ldr	r0, [pc, #20]	; (8002230 <HAL_NVIC_EnableIRQ+0x2c>)
 800221a:	f7ff fc5e 	bl	8001ada <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff04 	bl	8002030 <__NVIC_EnableIRQ>
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	08009370 	.word	0x08009370

08002234 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff73 	bl	8002128 <SysTick_Config>
 8002242:	4603      	mov	r3, r0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a33      	ldr	r2, [pc, #204]	; (8002334 <HAL_GPIO_Init+0xe8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d017      	beq.n	800229a <HAL_GPIO_Init+0x4e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a32      	ldr	r2, [pc, #200]	; (8002338 <HAL_GPIO_Init+0xec>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0x4e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a31      	ldr	r2, [pc, #196]	; (800233c <HAL_GPIO_Init+0xf0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00f      	beq.n	800229a <HAL_GPIO_Init+0x4e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a30      	ldr	r2, [pc, #192]	; (8002340 <HAL_GPIO_Init+0xf4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00b      	beq.n	800229a <HAL_GPIO_Init+0x4e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <HAL_GPIO_Init+0xf8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <HAL_GPIO_Init+0x4e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a2e      	ldr	r2, [pc, #184]	; (8002348 <HAL_GPIO_Init+0xfc>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x4e>
 8002292:	21ac      	movs	r1, #172	; 0xac
 8002294:	482d      	ldr	r0, [pc, #180]	; (800234c <HAL_GPIO_Init+0x100>)
 8002296:	f7ff fc20 	bl	8001ada <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_GPIO_Init+0x64>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	041b      	lsls	r3, r3, #16
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x6c>
 80022b0:	21ad      	movs	r1, #173	; 0xad
 80022b2:	4826      	ldr	r0, [pc, #152]	; (800234c <HAL_GPIO_Init+0x100>)
 80022b4:	f7ff fc11 	bl	8001ada <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d035      	beq.n	800232c <HAL_GPIO_Init+0xe0>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d031      	beq.n	800232c <HAL_GPIO_Init+0xe0>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b11      	cmp	r3, #17
 80022ce:	d02d      	beq.n	800232c <HAL_GPIO_Init+0xe0>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d029      	beq.n	800232c <HAL_GPIO_Init+0xe0>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b12      	cmp	r3, #18
 80022de:	d025      	beq.n	800232c <HAL_GPIO_Init+0xe0>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80022e8:	d020      	beq.n	800232c <HAL_GPIO_Init+0xe0>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80022f2:	d01b      	beq.n	800232c <HAL_GPIO_Init+0xe0>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80022fc:	d016      	beq.n	800232c <HAL_GPIO_Init+0xe0>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002306:	d011      	beq.n	800232c <HAL_GPIO_Init+0xe0>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002310:	d00c      	beq.n	800232c <HAL_GPIO_Init+0xe0>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800231a:	d007      	beq.n	800232c <HAL_GPIO_Init+0xe0>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0xe0>
 8002324:	21ae      	movs	r1, #174	; 0xae
 8002326:	4809      	ldr	r0, [pc, #36]	; (800234c <HAL_GPIO_Init+0x100>)
 8002328:	f7ff fbd7 	bl	8001ada <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	e20c      	b.n	800274c <HAL_GPIO_Init+0x500>
 8002332:	bf00      	nop
 8002334:	40020000 	.word	0x40020000
 8002338:	40020400 	.word	0x40020400
 800233c:	40020800 	.word	0x40020800
 8002340:	40020c00 	.word	0x40020c00
 8002344:	40021000 	.word	0x40021000
 8002348:	40021c00 	.word	0x40021c00
 800234c:	080093ac 	.word	0x080093ac
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002350:	2201      	movs	r2, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	429a      	cmp	r2, r3
 800236a:	f040 81ec 	bne.w	8002746 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d005      	beq.n	8002386 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002382:	2b02      	cmp	r3, #2
 8002384:	d144      	bne.n	8002410 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00f      	beq.n	80023ae <HAL_GPIO_Init+0x162>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d00b      	beq.n	80023ae <HAL_GPIO_Init+0x162>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x162>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x162>
 80023a6:	21c0      	movs	r1, #192	; 0xc0
 80023a8:	4884      	ldr	r0, [pc, #528]	; (80025bc <HAL_GPIO_Init+0x370>)
 80023aa:	f7ff fb96 	bl	8001ada <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	2203      	movs	r2, #3
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e4:	2201      	movs	r2, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 0201 	and.w	r2, r3, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b03      	cmp	r3, #3
 800241a:	d027      	beq.n	800246c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00b      	beq.n	800243c <HAL_GPIO_Init+0x1f0>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d007      	beq.n	800243c <HAL_GPIO_Init+0x1f0>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x1f0>
 8002434:	21d1      	movs	r1, #209	; 0xd1
 8002436:	4861      	ldr	r0, [pc, #388]	; (80025bc <HAL_GPIO_Init+0x370>)
 8002438:	f7ff fb4f 	bl	8001ada <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b02      	cmp	r3, #2
 8002476:	f040 80a3 	bne.w	80025c0 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d077      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b09      	cmp	r3, #9
 8002488:	d073      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d06f      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d06b      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d067      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d063      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d05f      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d05b      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d057      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d053      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d04f      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d04b      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d047      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d043      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d03f      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d03b      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d037      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b06      	cmp	r3, #6
 8002508:	d033      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b06      	cmp	r3, #6
 8002510:	d02f      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b05      	cmp	r3, #5
 8002518:	d02b      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b06      	cmp	r3, #6
 8002520:	d027      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b07      	cmp	r3, #7
 8002528:	d023      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b07      	cmp	r3, #7
 8002530:	d01f      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b07      	cmp	r3, #7
 8002538:	d01b      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b08      	cmp	r3, #8
 8002540:	d017      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b0a      	cmp	r3, #10
 8002548:	d013      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b09      	cmp	r3, #9
 8002550:	d00f      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b09      	cmp	r3, #9
 8002558:	d00b      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b0f      	cmp	r3, #15
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x326>
 800256a:	21de      	movs	r1, #222	; 0xde
 800256c:	4813      	ldr	r0, [pc, #76]	; (80025bc <HAL_GPIO_Init+0x370>)
 800256e:	f7ff fab4 	bl	8001ada <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	69b9      	ldr	r1, [r7, #24]
 80025b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80025ba:	e001      	b.n	80025c0 <HAL_GPIO_Init+0x374>
 80025bc:	080093ac 	.word	0x080093ac
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0203 	and.w	r2, r3, #3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80a2 	beq.w	8002746 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b56      	ldr	r3, [pc, #344]	; (8002760 <HAL_GPIO_Init+0x514>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a55      	ldr	r2, [pc, #340]	; (8002760 <HAL_GPIO_Init+0x514>)
 800260c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b53      	ldr	r3, [pc, #332]	; (8002760 <HAL_GPIO_Init+0x514>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261e:	4a51      	ldr	r2, [pc, #324]	; (8002764 <HAL_GPIO_Init+0x518>)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a48      	ldr	r2, [pc, #288]	; (8002768 <HAL_GPIO_Init+0x51c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d019      	beq.n	800267e <HAL_GPIO_Init+0x432>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a47      	ldr	r2, [pc, #284]	; (800276c <HAL_GPIO_Init+0x520>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_GPIO_Init+0x42e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a46      	ldr	r2, [pc, #280]	; (8002770 <HAL_GPIO_Init+0x524>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00d      	beq.n	8002676 <HAL_GPIO_Init+0x42a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a45      	ldr	r2, [pc, #276]	; (8002774 <HAL_GPIO_Init+0x528>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <HAL_GPIO_Init+0x426>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a44      	ldr	r2, [pc, #272]	; (8002778 <HAL_GPIO_Init+0x52c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_GPIO_Init+0x422>
 800266a:	2304      	movs	r3, #4
 800266c:	e008      	b.n	8002680 <HAL_GPIO_Init+0x434>
 800266e:	2307      	movs	r3, #7
 8002670:	e006      	b.n	8002680 <HAL_GPIO_Init+0x434>
 8002672:	2303      	movs	r3, #3
 8002674:	e004      	b.n	8002680 <HAL_GPIO_Init+0x434>
 8002676:	2302      	movs	r3, #2
 8002678:	e002      	b.n	8002680 <HAL_GPIO_Init+0x434>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_GPIO_Init+0x434>
 800267e:	2300      	movs	r3, #0
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	f002 0203 	and.w	r2, r2, #3
 8002686:	0092      	lsls	r2, r2, #2
 8002688:	4093      	lsls	r3, r2
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002690:	4934      	ldr	r1, [pc, #208]	; (8002764 <HAL_GPIO_Init+0x518>)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <HAL_GPIO_Init+0x530>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c2:	4a2e      	ldr	r2, [pc, #184]	; (800277c <HAL_GPIO_Init+0x530>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c8:	4b2c      	ldr	r3, [pc, #176]	; (800277c <HAL_GPIO_Init+0x530>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ec:	4a23      	ldr	r2, [pc, #140]	; (800277c <HAL_GPIO_Init+0x530>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026f2:	4b22      	ldr	r3, [pc, #136]	; (800277c <HAL_GPIO_Init+0x530>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002716:	4a19      	ldr	r2, [pc, #100]	; (800277c <HAL_GPIO_Init+0x530>)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800271c:	4b17      	ldr	r3, [pc, #92]	; (800277c <HAL_GPIO_Init+0x530>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002740:	4a0e      	ldr	r2, [pc, #56]	; (800277c <HAL_GPIO_Init+0x530>)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3301      	adds	r3, #1
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b0f      	cmp	r3, #15
 8002750:	f67f adfe 	bls.w	8002350 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	40013800 	.word	0x40013800
 8002768:	40020000 	.word	0x40020000
 800276c:	40020400 	.word	0x40020400
 8002770:	40020800 	.word	0x40020800
 8002774:	40020c00 	.word	0x40020c00
 8002778:	40021000 	.word	0x40021000
 800277c:	40013c00 	.word	0x40013c00

08002780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002790:	887b      	ldrh	r3, [r7, #2]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HAL_GPIO_WritePin+0x20>
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	041b      	lsls	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <HAL_GPIO_WritePin+0x2a>
 80027a0:	f240 119d 	movw	r1, #413	; 0x19d
 80027a4:	480e      	ldr	r0, [pc, #56]	; (80027e0 <HAL_GPIO_WritePin+0x60>)
 80027a6:	f7ff f998 	bl	8001ada <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80027aa:	787b      	ldrb	r3, [r7, #1]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_GPIO_WritePin+0x40>
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d004      	beq.n	80027c0 <HAL_GPIO_WritePin+0x40>
 80027b6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80027ba:	4809      	ldr	r0, [pc, #36]	; (80027e0 <HAL_GPIO_WritePin+0x60>)
 80027bc:	f7ff f98d 	bl	8001ada <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027cc:	e003      	b.n	80027d6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	041a      	lsls	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	619a      	str	r2, [r3, #24]
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	080093ac 	.word	0x080093ac

080027e4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80027f0:	887b      	ldrh	r3, [r7, #2]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <HAL_GPIO_TogglePin+0x1c>
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <HAL_GPIO_TogglePin+0x26>
 8002800:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002804:	480a      	ldr	r0, [pc, #40]	; (8002830 <HAL_GPIO_TogglePin+0x4c>)
 8002806:	f7ff f968 	bl	8001ada <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002810:	887a      	ldrh	r2, [r7, #2]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4013      	ands	r3, r2
 8002816:	041a      	lsls	r2, r3, #16
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43d9      	mvns	r1, r3
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	400b      	ands	r3, r1
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	619a      	str	r2, [r3, #24]
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	080093ac 	.word	0x080093ac

08002834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800284a:	4a05      	ldr	r2, [pc, #20]	; (8002860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f806 	bl	8002864 <HAL_GPIO_EXTI_Callback>
  }
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40013c00 	.word	0x40013c00

08002864 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e1bd      	b.n	8002c0a <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a93      	ldr	r2, [pc, #588]	; (8002ae0 <HAL_I2C_Init+0x264>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00e      	beq.n	80028b6 <HAL_I2C_Init+0x3a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a91      	ldr	r2, [pc, #580]	; (8002ae4 <HAL_I2C_Init+0x268>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d009      	beq.n	80028b6 <HAL_I2C_Init+0x3a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a90      	ldr	r2, [pc, #576]	; (8002ae8 <HAL_I2C_Init+0x26c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d004      	beq.n	80028b6 <HAL_I2C_Init+0x3a>
 80028ac:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80028b0:	488e      	ldr	r0, [pc, #568]	; (8002aec <HAL_I2C_Init+0x270>)
 80028b2:	f7ff f912 	bl	8001ada <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d004      	beq.n	80028c8 <HAL_I2C_Init+0x4c>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4a8b      	ldr	r2, [pc, #556]	; (8002af0 <HAL_I2C_Init+0x274>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d904      	bls.n	80028d2 <HAL_I2C_Init+0x56>
 80028c8:	f240 11bf 	movw	r1, #447	; 0x1bf
 80028cc:	4887      	ldr	r0, [pc, #540]	; (8002aec <HAL_I2C_Init+0x270>)
 80028ce:	f7ff f904 	bl	8001ada <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_I2C_Init+0x72>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028e2:	d004      	beq.n	80028ee <HAL_I2C_Init+0x72>
 80028e4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80028e8:	4880      	ldr	r0, [pc, #512]	; (8002aec <HAL_I2C_Init+0x270>)
 80028ea:	f7ff f8f6 	bl	8001ada <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028f6:	f023 0303 	bic.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <HAL_I2C_Init+0x8c>
 80028fe:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002902:	487a      	ldr	r0, [pc, #488]	; (8002aec <HAL_I2C_Init+0x270>)
 8002904:	f7ff f8e9 	bl	8001ada <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002910:	d009      	beq.n	8002926 <HAL_I2C_Init+0xaa>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800291a:	d004      	beq.n	8002926 <HAL_I2C_Init+0xaa>
 800291c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002920:	4872      	ldr	r0, [pc, #456]	; (8002aec <HAL_I2C_Init+0x270>)
 8002922:	f7ff f8da 	bl	8001ada <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <HAL_I2C_Init+0xc4>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d004      	beq.n	8002940 <HAL_I2C_Init+0xc4>
 8002936:	f240 11c3 	movw	r1, #451	; 0x1c3
 800293a:	486c      	ldr	r0, [pc, #432]	; (8002aec <HAL_I2C_Init+0x270>)
 800293c:	f7ff f8cd 	bl	8001ada <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <HAL_I2C_Init+0xda>
 800294c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002950:	4866      	ldr	r0, [pc, #408]	; (8002aec <HAL_I2C_Init+0x270>)
 8002952:	f7ff f8c2 	bl	8001ada <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_I2C_Init+0xf4>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	2b40      	cmp	r3, #64	; 0x40
 8002964:	d004      	beq.n	8002970 <HAL_I2C_Init+0xf4>
 8002966:	f240 11c5 	movw	r1, #453	; 0x1c5
 800296a:	4860      	ldr	r0, [pc, #384]	; (8002aec <HAL_I2C_Init+0x270>)
 800296c:	f7ff f8b5 	bl	8001ada <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_I2C_Init+0x10e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	2b80      	cmp	r3, #128	; 0x80
 800297e:	d004      	beq.n	800298a <HAL_I2C_Init+0x10e>
 8002980:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002984:	4859      	ldr	r0, [pc, #356]	; (8002aec <HAL_I2C_Init+0x270>)
 8002986:	f7ff f8a8 	bl	8001ada <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe ff80 	bl	80018a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029dc:	f001 f9ea 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 80029e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a43      	ldr	r2, [pc, #268]	; (8002af4 <HAL_I2C_Init+0x278>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d807      	bhi.n	80029fc <HAL_I2C_Init+0x180>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a42      	ldr	r2, [pc, #264]	; (8002af8 <HAL_I2C_Init+0x27c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	bf94      	ite	ls
 80029f4:	2301      	movls	r3, #1
 80029f6:	2300      	movhi	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e006      	b.n	8002a0a <HAL_I2C_Init+0x18e>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a3f      	ldr	r2, [pc, #252]	; (8002afc <HAL_I2C_Init+0x280>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	bf94      	ite	ls
 8002a04:	2301      	movls	r3, #1
 8002a06:	2300      	movhi	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0fb      	b.n	8002c0a <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a3a      	ldr	r2, [pc, #232]	; (8002b00 <HAL_I2C_Init+0x284>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0c9b      	lsrs	r3, r3, #18
 8002a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a2c      	ldr	r2, [pc, #176]	; (8002af4 <HAL_I2C_Init+0x278>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d802      	bhi.n	8002a4c <HAL_I2C_Init+0x1d0>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	e009      	b.n	8002a60 <HAL_I2C_Init+0x1e4>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	4a2b      	ldr	r2, [pc, #172]	; (8002b04 <HAL_I2C_Init+0x288>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	099b      	lsrs	r3, r3, #6
 8002a5e:	3301      	adds	r3, #1
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	491e      	ldr	r1, [pc, #120]	; (8002af4 <HAL_I2C_Init+0x278>)
 8002a7c:	428b      	cmp	r3, r1
 8002a7e:	d819      	bhi.n	8002ab4 <HAL_I2C_Init+0x238>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e59      	subs	r1, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8e:	1c59      	adds	r1, r3, #1
 8002a90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a94:	400b      	ands	r3, r1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_I2C_Init+0x234>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1e59      	subs	r1, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aae:	e065      	b.n	8002b7c <HAL_I2C_Init+0x300>
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	e063      	b.n	8002b7c <HAL_I2C_Init+0x300>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d125      	bne.n	8002b08 <HAL_I2C_Init+0x28c>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1e58      	subs	r0, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	440b      	add	r3, r1
 8002aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e026      	b.n	8002b2e <HAL_I2C_Init+0x2b2>
 8002ae0:	40005400 	.word	0x40005400
 8002ae4:	40005800 	.word	0x40005800
 8002ae8:	40005c00 	.word	0x40005c00
 8002aec:	080093e8 	.word	0x080093e8
 8002af0:	00061a80 	.word	0x00061a80
 8002af4:	000186a0 	.word	0x000186a0
 8002af8:	001e847f 	.word	0x001e847f
 8002afc:	003d08ff 	.word	0x003d08ff
 8002b00:	431bde83 	.word	0x431bde83
 8002b04:	10624dd3 	.word	0x10624dd3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1e58      	subs	r0, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	0099      	lsls	r1, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Init+0x2ba>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e022      	b.n	8002b7c <HAL_I2C_Init+0x300>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10e      	bne.n	8002b5c <HAL_I2C_Init+0x2e0>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1e58      	subs	r0, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6859      	ldr	r1, [r3, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	440b      	add	r3, r1
 8002b4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5a:	e00f      	b.n	8002b7c <HAL_I2C_Init+0x300>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1e58      	subs	r0, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	0099      	lsls	r1, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	6809      	ldr	r1, [r1, #0]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002baa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6911      	ldr	r1, [r2, #16]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68d2      	ldr	r2, [r2, #12]
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop

08002c14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	460b      	mov	r3, r1
 8002c22:	817b      	strh	r3, [r7, #10]
 8002c24:	4613      	mov	r3, r2
 8002c26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff f9a0 	bl	8001f6c <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	f040 80e0 	bne.w	8002dfc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2319      	movs	r3, #25
 8002c42:	2201      	movs	r2, #1
 8002c44:	4970      	ldr	r1, [pc, #448]	; (8002e08 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f964 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
 8002c54:	e0d3      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_I2C_Master_Transmit+0x50>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e0cc      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d007      	beq.n	8002c8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2221      	movs	r2, #33	; 0x21
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	893a      	ldrh	r2, [r7, #8]
 8002cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a50      	ldr	r2, [pc, #320]	; (8002e0c <HAL_I2C_Master_Transmit+0x1f8>)
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ccc:	8979      	ldrh	r1, [r7, #10]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	6a3a      	ldr	r2, [r7, #32]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f89c 	bl	8002e10 <I2C_MasterRequestWrite>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e08d      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cf8:	e066      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	6a39      	ldr	r1, [r7, #32]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f9de 	bl	80030c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00d      	beq.n	8002d26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d107      	bne.n	8002d22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e06b      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d11b      	bne.n	8002d9c <HAL_I2C_Master_Transmit+0x188>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d017      	beq.n	8002d9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	6a39      	ldr	r1, [r7, #32]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f9ce 	bl	8003142 <I2C_WaitOnBTFFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d107      	bne.n	8002dc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e01a      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d194      	bne.n	8002cfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e000      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dfc:	2302      	movs	r3, #2
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	00100002 	.word	0x00100002
 8002e0c:	ffff0000 	.word	0xffff0000

08002e10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d006      	beq.n	8002e3a <I2C_MasterRequestWrite+0x2a>
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d003      	beq.n	8002e3a <I2C_MasterRequestWrite+0x2a>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e38:	d108      	bne.n	8002e4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e00b      	b.n	8002e64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	2b12      	cmp	r3, #18
 8002e52:	d107      	bne.n	8002e64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f84f 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00d      	beq.n	8002e98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e8a:	d103      	bne.n	8002e94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e035      	b.n	8002f04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea0:	d108      	bne.n	8002eb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ea2:	897b      	ldrh	r3, [r7, #10]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eb0:	611a      	str	r2, [r3, #16]
 8002eb2:	e01b      	b.n	8002eec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002eb4:	897b      	ldrh	r3, [r7, #10]
 8002eb6:	11db      	asrs	r3, r3, #7
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f003 0306 	and.w	r3, r3, #6
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f063 030f 	orn	r3, r3, #15
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	490e      	ldr	r1, [pc, #56]	; (8002f0c <I2C_MasterRequestWrite+0xfc>)
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f875 	bl	8002fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e010      	b.n	8002f04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4907      	ldr	r1, [pc, #28]	; (8002f10 <I2C_MasterRequestWrite+0x100>)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f865 	bl	8002fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	00010008 	.word	0x00010008
 8002f10:	00010002 	.word	0x00010002

08002f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f24:	e025      	b.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d021      	beq.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7ff f81d 	bl	8001f6c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d116      	bne.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f043 0220 	orr.w	r2, r3, #32
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e023      	b.n	8002fba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d10d      	bne.n	8002f98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4013      	ands	r3, r2
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bf0c      	ite	eq
 8002f8e:	2301      	moveq	r3, #1
 8002f90:	2300      	movne	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	e00c      	b.n	8002fb2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf0c      	ite	eq
 8002faa:	2301      	moveq	r3, #1
 8002fac:	2300      	movne	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d0b6      	beq.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd0:	e051      	b.n	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe0:	d123      	bne.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ffa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f043 0204 	orr.w	r2, r3, #4
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e046      	b.n	80030b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d021      	beq.n	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003032:	f7fe ff9b 	bl	8001f6c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d116      	bne.n	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e020      	b.n	80030b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	0c1b      	lsrs	r3, r3, #16
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b01      	cmp	r3, #1
 800307e:	d10c      	bne.n	800309a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	43da      	mvns	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4013      	ands	r3, r2
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	e00b      	b.n	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	43da      	mvns	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4013      	ands	r3, r2
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d18d      	bne.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030cc:	e02d      	b.n	800312a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f878 	bl	80031c4 <I2C_IsAcknowledgeFailed>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e02d      	b.n	800313a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d021      	beq.n	800312a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7fe ff41 	bl	8001f6c <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d116      	bne.n	800312a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f043 0220 	orr.w	r2, r3, #32
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e007      	b.n	800313a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003134:	2b80      	cmp	r3, #128	; 0x80
 8003136:	d1ca      	bne.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800314e:	e02d      	b.n	80031ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f837 	bl	80031c4 <I2C_IsAcknowledgeFailed>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e02d      	b.n	80031bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d021      	beq.n	80031ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003168:	f7fe ff00 	bl	8001f6c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	429a      	cmp	r2, r3
 8003176:	d302      	bcc.n	800317e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d116      	bne.n	80031ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e007      	b.n	80031bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d1ca      	bne.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031da:	d11b      	bne.n	8003214 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f043 0204 	orr.w	r2, r3, #4
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e314      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b0f      	cmp	r3, #15
 800323c:	d903      	bls.n	8003246 <HAL_RCC_OscConfig+0x22>
 800323e:	21e6      	movs	r1, #230	; 0xe6
 8003240:	4897      	ldr	r0, [pc, #604]	; (80034a0 <HAL_RCC_OscConfig+0x27c>)
 8003242:	f7fe fc4a 	bl	8001ada <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8088 	beq.w	8003364 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <HAL_RCC_OscConfig+0x54>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d008      	beq.n	8003278 <HAL_RCC_OscConfig+0x54>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800326e:	d003      	beq.n	8003278 <HAL_RCC_OscConfig+0x54>
 8003270:	21eb      	movs	r1, #235	; 0xeb
 8003272:	488b      	ldr	r0, [pc, #556]	; (80034a0 <HAL_RCC_OscConfig+0x27c>)
 8003274:	f7fe fc31 	bl	8001ada <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003278:	4b8a      	ldr	r3, [pc, #552]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b04      	cmp	r3, #4
 8003282:	d00c      	beq.n	800329e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003284:	4b87      	ldr	r3, [pc, #540]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800328c:	2b08      	cmp	r3, #8
 800328e:	d112      	bne.n	80032b6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003290:	4b84      	ldr	r3, [pc, #528]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329c:	d10b      	bne.n	80032b6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329e:	4b81      	ldr	r3, [pc, #516]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d05b      	beq.n	8003362 <HAL_RCC_OscConfig+0x13e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d157      	bne.n	8003362 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e2d4      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032be:	d106      	bne.n	80032ce <HAL_RCC_OscConfig+0xaa>
 80032c0:	4b78      	ldr	r3, [pc, #480]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a77      	ldr	r2, [pc, #476]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	e01d      	b.n	800330a <HAL_RCC_OscConfig+0xe6>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCC_OscConfig+0xce>
 80032d8:	4b72      	ldr	r3, [pc, #456]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a71      	ldr	r2, [pc, #452]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	4b6f      	ldr	r3, [pc, #444]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a6e      	ldr	r2, [pc, #440]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	e00b      	b.n	800330a <HAL_RCC_OscConfig+0xe6>
 80032f2:	4b6c      	ldr	r3, [pc, #432]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a6b      	ldr	r2, [pc, #428]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80032f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b69      	ldr	r3, [pc, #420]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a68      	ldr	r2, [pc, #416]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d013      	beq.n	800333a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fe fe2b 	bl	8001f6c <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331a:	f7fe fe27 	bl	8001f6c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b64      	cmp	r3, #100	; 0x64
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e299      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332c:	4b5d      	ldr	r3, [pc, #372]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0xf6>
 8003338:	e014      	b.n	8003364 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fe fe17 	bl	8001f6c <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003342:	f7fe fe13 	bl	8001f6c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b64      	cmp	r3, #100	; 0x64
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e285      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003354:	4b53      	ldr	r3, [pc, #332]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f0      	bne.n	8003342 <HAL_RCC_OscConfig+0x11e>
 8003360:	e000      	b.n	8003364 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003362:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d079      	beq.n	8003464 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_OscConfig+0x166>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d004      	beq.n	800338a <HAL_RCC_OscConfig+0x166>
 8003380:	f240 111d 	movw	r1, #285	; 0x11d
 8003384:	4846      	ldr	r0, [pc, #280]	; (80034a0 <HAL_RCC_OscConfig+0x27c>)
 8003386:	f7fe fba8 	bl	8001ada <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b1f      	cmp	r3, #31
 8003390:	d904      	bls.n	800339c <HAL_RCC_OscConfig+0x178>
 8003392:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003396:	4842      	ldr	r0, [pc, #264]	; (80034a0 <HAL_RCC_OscConfig+0x27c>)
 8003398:	f7fe fb9f 	bl	8001ada <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800339c:	4b41      	ldr	r3, [pc, #260]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00b      	beq.n	80033c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033a8:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d11c      	bne.n	80033ee <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b4:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c0:	4b38      	ldr	r3, [pc, #224]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_OscConfig+0x1b4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e243      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d8:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	492f      	ldr	r1, [pc, #188]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ec:	e03a      	b.n	8003464 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d020      	beq.n	8003438 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f6:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <HAL_RCC_OscConfig+0x284>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe fdb6 	bl	8001f6c <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003404:	f7fe fdb2 	bl	8001f6c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e224      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003416:	4b23      	ldr	r3, [pc, #140]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003422:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	491c      	ldr	r1, [pc, #112]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
 8003436:	e015      	b.n	8003464 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_RCC_OscConfig+0x284>)
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fe fd95 	bl	8001f6c <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003446:	f7fe fd91 	bl	8001f6c <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e203      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003458:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <HAL_RCC_OscConfig+0x280>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f0      	bne.n	8003446 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d045      	beq.n	80034fc <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_OscConfig+0x266>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d004      	beq.n	800348a <HAL_RCC_OscConfig+0x266>
 8003480:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003484:	4806      	ldr	r0, [pc, #24]	; (80034a0 <HAL_RCC_OscConfig+0x27c>)
 8003486:	f7fe fb28 	bl	8001ada <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d01e      	beq.n	80034d0 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_RCC_OscConfig+0x288>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7fe fd68 	bl	8001f6c <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	e010      	b.n	80034c2 <HAL_RCC_OscConfig+0x29e>
 80034a0:	08009420 	.word	0x08009420
 80034a4:	40023800 	.word	0x40023800
 80034a8:	42470000 	.word	0x42470000
 80034ac:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b0:	f7fe fd5c 	bl	8001f6c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e1ce      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	4b5e      	ldr	r3, [pc, #376]	; (800363c <HAL_RCC_OscConfig+0x418>)
 80034c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x28c>
 80034ce:	e015      	b.n	80034fc <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d0:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <HAL_RCC_OscConfig+0x41c>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d6:	f7fe fd49 	bl	8001f6c <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034de:	f7fe fd45 	bl	8001f6c <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e1b7      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	4b52      	ldr	r3, [pc, #328]	; (800363c <HAL_RCC_OscConfig+0x418>)
 80034f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f0      	bne.n	80034de <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80b0 	beq.w	800366a <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_RCC_OscConfig+0x30c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d008      	beq.n	8003530 <HAL_RCC_OscConfig+0x30c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b05      	cmp	r3, #5
 8003524:	d004      	beq.n	8003530 <HAL_RCC_OscConfig+0x30c>
 8003526:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800352a:	4846      	ldr	r0, [pc, #280]	; (8003644 <HAL_RCC_OscConfig+0x420>)
 800352c:	f7fe fad5 	bl	8001ada <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003530:	4b42      	ldr	r3, [pc, #264]	; (800363c <HAL_RCC_OscConfig+0x418>)
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10f      	bne.n	800355c <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353c:	2300      	movs	r3, #0
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	4b3e      	ldr	r3, [pc, #248]	; (800363c <HAL_RCC_OscConfig+0x418>)
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	4a3d      	ldr	r2, [pc, #244]	; (800363c <HAL_RCC_OscConfig+0x418>)
 8003546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354a:	6413      	str	r3, [r2, #64]	; 0x40
 800354c:	4b3b      	ldr	r3, [pc, #236]	; (800363c <HAL_RCC_OscConfig+0x418>)
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003558:	2301      	movs	r3, #1
 800355a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <HAL_RCC_OscConfig+0x424>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d118      	bne.n	800359a <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003568:	4b37      	ldr	r3, [pc, #220]	; (8003648 <HAL_RCC_OscConfig+0x424>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a36      	ldr	r2, [pc, #216]	; (8003648 <HAL_RCC_OscConfig+0x424>)
 800356e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003572:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003574:	f7fe fcfa 	bl	8001f6c <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357c:	f7fe fcf6 	bl	8001f6c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e168      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <HAL_RCC_OscConfig+0x424>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d106      	bne.n	80035b0 <HAL_RCC_OscConfig+0x38c>
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <HAL_RCC_OscConfig+0x418>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	4a25      	ldr	r2, [pc, #148]	; (800363c <HAL_RCC_OscConfig+0x418>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	6713      	str	r3, [r2, #112]	; 0x70
 80035ae:	e01c      	b.n	80035ea <HAL_RCC_OscConfig+0x3c6>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b05      	cmp	r3, #5
 80035b6:	d10c      	bne.n	80035d2 <HAL_RCC_OscConfig+0x3ae>
 80035b8:	4b20      	ldr	r3, [pc, #128]	; (800363c <HAL_RCC_OscConfig+0x418>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a1f      	ldr	r2, [pc, #124]	; (800363c <HAL_RCC_OscConfig+0x418>)
 80035be:	f043 0304 	orr.w	r3, r3, #4
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <HAL_RCC_OscConfig+0x418>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a1c      	ldr	r2, [pc, #112]	; (800363c <HAL_RCC_OscConfig+0x418>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70
 80035d0:	e00b      	b.n	80035ea <HAL_RCC_OscConfig+0x3c6>
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <HAL_RCC_OscConfig+0x418>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	4a19      	ldr	r2, [pc, #100]	; (800363c <HAL_RCC_OscConfig+0x418>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6713      	str	r3, [r2, #112]	; 0x70
 80035de:	4b17      	ldr	r3, [pc, #92]	; (800363c <HAL_RCC_OscConfig+0x418>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	4a16      	ldr	r2, [pc, #88]	; (800363c <HAL_RCC_OscConfig+0x418>)
 80035e4:	f023 0304 	bic.w	r3, r3, #4
 80035e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d015      	beq.n	800361e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f2:	f7fe fcbb 	bl	8001f6c <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe fcb7 	bl	8001f6c <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	; 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e127      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <HAL_RCC_OscConfig+0x418>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ee      	beq.n	80035fa <HAL_RCC_OscConfig+0x3d6>
 800361c:	e01c      	b.n	8003658 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe fca5 	bl	8001f6c <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003624:	e012      	b.n	800364c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fe fca1 	bl	8001f6c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	; 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d909      	bls.n	800364c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e111      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
 800363c:	40023800 	.word	0x40023800
 8003640:	42470e80 	.word	0x42470e80
 8003644:	08009420 	.word	0x08009420
 8003648:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364c:	4b86      	ldr	r3, [pc, #536]	; (8003868 <HAL_RCC_OscConfig+0x644>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e6      	bne.n	8003626 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d105      	bne.n	800366a <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365e:	4b82      	ldr	r3, [pc, #520]	; (8003868 <HAL_RCC_OscConfig+0x644>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	4a81      	ldr	r2, [pc, #516]	; (8003868 <HAL_RCC_OscConfig+0x644>)
 8003664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003668:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00c      	beq.n	800368c <HAL_RCC_OscConfig+0x468>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d008      	beq.n	800368c <HAL_RCC_OscConfig+0x468>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d004      	beq.n	800368c <HAL_RCC_OscConfig+0x468>
 8003682:	f240 11cd 	movw	r1, #461	; 0x1cd
 8003686:	4879      	ldr	r0, [pc, #484]	; (800386c <HAL_RCC_OscConfig+0x648>)
 8003688:	f7fe fa27 	bl	8001ada <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80e4 	beq.w	800385e <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003696:	4b74      	ldr	r3, [pc, #464]	; (8003868 <HAL_RCC_OscConfig+0x644>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b08      	cmp	r3, #8
 80036a0:	f000 80a5 	beq.w	80037ee <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	f040 8089 	bne.w	80037c0 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <HAL_RCC_OscConfig+0x4a6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036be:	d004      	beq.n	80036ca <HAL_RCC_OscConfig+0x4a6>
 80036c0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80036c4:	4869      	ldr	r0, [pc, #420]	; (800386c <HAL_RCC_OscConfig+0x648>)
 80036c6:	f7fe fa08 	bl	8001ada <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	2b3f      	cmp	r3, #63	; 0x3f
 80036d0:	d904      	bls.n	80036dc <HAL_RCC_OscConfig+0x4b8>
 80036d2:	f240 11d7 	movw	r1, #471	; 0x1d7
 80036d6:	4865      	ldr	r0, [pc, #404]	; (800386c <HAL_RCC_OscConfig+0x648>)
 80036d8:	f7fe f9ff 	bl	8001ada <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	2b31      	cmp	r3, #49	; 0x31
 80036e2:	d904      	bls.n	80036ee <HAL_RCC_OscConfig+0x4ca>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80036ec:	d904      	bls.n	80036f8 <HAL_RCC_OscConfig+0x4d4>
 80036ee:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80036f2:	485e      	ldr	r0, [pc, #376]	; (800386c <HAL_RCC_OscConfig+0x648>)
 80036f4:	f7fe f9f1 	bl	8001ada <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d010      	beq.n	8003722 <HAL_RCC_OscConfig+0x4fe>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	2b04      	cmp	r3, #4
 8003706:	d00c      	beq.n	8003722 <HAL_RCC_OscConfig+0x4fe>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	2b06      	cmp	r3, #6
 800370e:	d008      	beq.n	8003722 <HAL_RCC_OscConfig+0x4fe>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	2b08      	cmp	r3, #8
 8003716:	d004      	beq.n	8003722 <HAL_RCC_OscConfig+0x4fe>
 8003718:	f240 11d9 	movw	r1, #473	; 0x1d9
 800371c:	4853      	ldr	r0, [pc, #332]	; (800386c <HAL_RCC_OscConfig+0x648>)
 800371e:	f7fe f9dc 	bl	8001ada <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d903      	bls.n	8003732 <HAL_RCC_OscConfig+0x50e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	2b0f      	cmp	r3, #15
 8003730:	d904      	bls.n	800373c <HAL_RCC_OscConfig+0x518>
 8003732:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003736:	484d      	ldr	r0, [pc, #308]	; (800386c <HAL_RCC_OscConfig+0x648>)
 8003738:	f7fe f9cf 	bl	8001ada <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373c:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <HAL_RCC_OscConfig+0x64c>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003742:	f7fe fc13 	bl	8001f6c <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374a:	f7fe fc0f 	bl	8001f6c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e081      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375c:	4b42      	ldr	r3, [pc, #264]	; (8003868 <HAL_RCC_OscConfig+0x644>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f0      	bne.n	800374a <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	019b      	lsls	r3, r3, #6
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	3b01      	subs	r3, #1
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	061b      	lsls	r3, r3, #24
 800378c:	4936      	ldr	r1, [pc, #216]	; (8003868 <HAL_RCC_OscConfig+0x644>)
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003792:	4b37      	ldr	r3, [pc, #220]	; (8003870 <HAL_RCC_OscConfig+0x64c>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe fbe8 	bl	8001f6c <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe fbe4 	bl	8001f6c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e056      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b2:	4b2d      	ldr	r3, [pc, #180]	; (8003868 <HAL_RCC_OscConfig+0x644>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x57c>
 80037be:	e04e      	b.n	800385e <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c0:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCC_OscConfig+0x64c>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c6:	f7fe fbd1 	bl	8001f6c <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fe fbcd 	bl	8001f6c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e03f      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_RCC_OscConfig+0x644>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f0      	bne.n	80037ce <HAL_RCC_OscConfig+0x5aa>
 80037ec:	e037      	b.n	800385e <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e032      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037fa:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <HAL_RCC_OscConfig+0x644>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d028      	beq.n	800385a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d121      	bne.n	800385a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d11a      	bne.n	800385a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800382a:	4013      	ands	r3, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003830:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003832:	4293      	cmp	r3, r2
 8003834:	d111      	bne.n	800385a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	3b01      	subs	r3, #1
 8003844:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003846:	429a      	cmp	r2, r3
 8003848:	d107      	bne.n	800385a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40023800 	.word	0x40023800
 800386c:	08009420 	.word	0x08009420
 8003870:	42470060 	.word	0x42470060

08003874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e174      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_RCC_ClockConfig+0x24>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b0f      	cmp	r3, #15
 8003896:	d904      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x2e>
 8003898:	f240 215a 	movw	r1, #602	; 0x25a
 800389c:	487b      	ldr	r0, [pc, #492]	; (8003a8c <HAL_RCC_ClockConfig+0x218>)
 800389e:	f7fe f91c 	bl	8001ada <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d019      	beq.n	80038dc <HAL_RCC_ClockConfig+0x68>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d016      	beq.n	80038dc <HAL_RCC_ClockConfig+0x68>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d013      	beq.n	80038dc <HAL_RCC_ClockConfig+0x68>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d010      	beq.n	80038dc <HAL_RCC_ClockConfig+0x68>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d00d      	beq.n	80038dc <HAL_RCC_ClockConfig+0x68>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d00a      	beq.n	80038dc <HAL_RCC_ClockConfig+0x68>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b06      	cmp	r3, #6
 80038ca:	d007      	beq.n	80038dc <HAL_RCC_ClockConfig+0x68>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b07      	cmp	r3, #7
 80038d0:	d004      	beq.n	80038dc <HAL_RCC_ClockConfig+0x68>
 80038d2:	f240 215b 	movw	r1, #603	; 0x25b
 80038d6:	486d      	ldr	r0, [pc, #436]	; (8003a8c <HAL_RCC_ClockConfig+0x218>)
 80038d8:	f7fe f8ff 	bl	8001ada <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038dc:	4b6c      	ldr	r3, [pc, #432]	; (8003a90 <HAL_RCC_ClockConfig+0x21c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d90c      	bls.n	8003904 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b69      	ldr	r3, [pc, #420]	; (8003a90 <HAL_RCC_ClockConfig+0x21c>)
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b67      	ldr	r3, [pc, #412]	; (8003a90 <HAL_RCC_ClockConfig+0x21c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e136      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d049      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800391c:	4b5d      	ldr	r3, [pc, #372]	; (8003a94 <HAL_RCC_ClockConfig+0x220>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4a5c      	ldr	r2, [pc, #368]	; (8003a94 <HAL_RCC_ClockConfig+0x220>)
 8003922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003934:	4b57      	ldr	r3, [pc, #348]	; (8003a94 <HAL_RCC_ClockConfig+0x220>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a56      	ldr	r2, [pc, #344]	; (8003a94 <HAL_RCC_ClockConfig+0x220>)
 800393a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800393e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d024      	beq.n	8003992 <HAL_RCC_ClockConfig+0x11e>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d020      	beq.n	8003992 <HAL_RCC_ClockConfig+0x11e>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b90      	cmp	r3, #144	; 0x90
 8003956:	d01c      	beq.n	8003992 <HAL_RCC_ClockConfig+0x11e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2ba0      	cmp	r3, #160	; 0xa0
 800395e:	d018      	beq.n	8003992 <HAL_RCC_ClockConfig+0x11e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2bb0      	cmp	r3, #176	; 0xb0
 8003966:	d014      	beq.n	8003992 <HAL_RCC_ClockConfig+0x11e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2bc0      	cmp	r3, #192	; 0xc0
 800396e:	d010      	beq.n	8003992 <HAL_RCC_ClockConfig+0x11e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2bd0      	cmp	r3, #208	; 0xd0
 8003976:	d00c      	beq.n	8003992 <HAL_RCC_ClockConfig+0x11e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2be0      	cmp	r3, #224	; 0xe0
 800397e:	d008      	beq.n	8003992 <HAL_RCC_ClockConfig+0x11e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2bf0      	cmp	r3, #240	; 0xf0
 8003986:	d004      	beq.n	8003992 <HAL_RCC_ClockConfig+0x11e>
 8003988:	f240 217e 	movw	r1, #638	; 0x27e
 800398c:	483f      	ldr	r0, [pc, #252]	; (8003a8c <HAL_RCC_ClockConfig+0x218>)
 800398e:	f7fe f8a4 	bl	8001ada <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003992:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <HAL_RCC_ClockConfig+0x220>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	493d      	ldr	r1, [pc, #244]	; (8003a94 <HAL_RCC_ClockConfig+0x220>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d059      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d010      	beq.n	80039da <HAL_RCC_ClockConfig+0x166>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d00c      	beq.n	80039da <HAL_RCC_ClockConfig+0x166>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d008      	beq.n	80039da <HAL_RCC_ClockConfig+0x166>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d004      	beq.n	80039da <HAL_RCC_ClockConfig+0x166>
 80039d0:	f240 2185 	movw	r1, #645	; 0x285
 80039d4:	482d      	ldr	r0, [pc, #180]	; (8003a8c <HAL_RCC_ClockConfig+0x218>)
 80039d6:	f7fe f880 	bl	8001ada <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	4b2c      	ldr	r3, [pc, #176]	; (8003a94 <HAL_RCC_ClockConfig+0x220>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d119      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e0bf      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d003      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a02:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <HAL_RCC_ClockConfig+0x220>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e0af      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a12:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <HAL_RCC_ClockConfig+0x220>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e0a7      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a22:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <HAL_RCC_ClockConfig+0x220>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f023 0203 	bic.w	r2, r3, #3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4919      	ldr	r1, [pc, #100]	; (8003a94 <HAL_RCC_ClockConfig+0x220>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a34:	f7fe fa9a 	bl	8001f6c <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3c:	f7fe fa96 	bl	8001f6c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e08f      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <HAL_RCC_ClockConfig+0x220>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 020c 	and.w	r2, r3, #12
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d1eb      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a64:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <HAL_RCC_ClockConfig+0x21c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d212      	bcs.n	8003a98 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <HAL_RCC_ClockConfig+0x21c>)
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCC_ClockConfig+0x21c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d007      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e072      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2fe>
 8003a8c:	08009420 	.word	0x08009420
 8003a90:	40023c00 	.word	0x40023c00
 8003a94:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d025      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d018      	beq.n	8003ade <HAL_RCC_ClockConfig+0x26a>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab4:	d013      	beq.n	8003ade <HAL_RCC_ClockConfig+0x26a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003abe:	d00e      	beq.n	8003ade <HAL_RCC_ClockConfig+0x26a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003ac8:	d009      	beq.n	8003ade <HAL_RCC_ClockConfig+0x26a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003ad2:	d004      	beq.n	8003ade <HAL_RCC_ClockConfig+0x26a>
 8003ad4:	f240 21c3 	movw	r1, #707	; 0x2c3
 8003ad8:	4828      	ldr	r0, [pc, #160]	; (8003b7c <HAL_RCC_ClockConfig+0x308>)
 8003ada:	f7fd fffe 	bl	8001ada <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ade:	4b28      	ldr	r3, [pc, #160]	; (8003b80 <HAL_RCC_ClockConfig+0x30c>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	4925      	ldr	r1, [pc, #148]	; (8003b80 <HAL_RCC_ClockConfig+0x30c>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d026      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d018      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x2c2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0c:	d013      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x2c2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b16:	d00e      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x2c2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003b20:	d009      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x2c2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003b2a:	d004      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x2c2>
 8003b2c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8003b30:	4812      	ldr	r0, [pc, #72]	; (8003b7c <HAL_RCC_ClockConfig+0x308>)
 8003b32:	f7fd ffd2 	bl	8001ada <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b36:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <HAL_RCC_ClockConfig+0x30c>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	490e      	ldr	r1, [pc, #56]	; (8003b80 <HAL_RCC_ClockConfig+0x30c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b4a:	f000 f821 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_RCC_ClockConfig+0x30c>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	490a      	ldr	r1, [pc, #40]	; (8003b84 <HAL_RCC_ClockConfig+0x310>)
 8003b5c:	5ccb      	ldrb	r3, [r1, r3]
 8003b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b62:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x314>)
 8003b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b66:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCC_ClockConfig+0x318>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fe f9ba 	bl	8001ee4 <HAL_InitTick>

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	08009420 	.word	0x08009420
 8003b80:	40023800 	.word	0x40023800
 8003b84:	08009490 	.word	0x08009490
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	20000004 	.word	0x20000004

08003b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b94:	b094      	sub	sp, #80	; 0x50
 8003b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ba8:	4b79      	ldr	r3, [pc, #484]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 030c 	and.w	r3, r3, #12
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d00d      	beq.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	f200 80e1 	bhi.w	8003d7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d003      	beq.n	8003bca <HAL_RCC_GetSysClockFreq+0x3a>
 8003bc2:	e0db      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bc4:	4b73      	ldr	r3, [pc, #460]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bc8:	e0db      	b.n	8003d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bca:	4b73      	ldr	r3, [pc, #460]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bce:	e0d8      	b.n	8003d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd0:	4b6f      	ldr	r3, [pc, #444]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bda:	4b6d      	ldr	r3, [pc, #436]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d063      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be6:	4b6a      	ldr	r3, [pc, #424]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	099b      	lsrs	r3, r3, #6
 8003bec:	2200      	movs	r2, #0
 8003bee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8003bfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c02:	4622      	mov	r2, r4
 8003c04:	462b      	mov	r3, r5
 8003c06:	f04f 0000 	mov.w	r0, #0
 8003c0a:	f04f 0100 	mov.w	r1, #0
 8003c0e:	0159      	lsls	r1, r3, #5
 8003c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c14:	0150      	lsls	r0, r2, #5
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	1a51      	subs	r1, r2, r1
 8003c1e:	6139      	str	r1, [r7, #16]
 8003c20:	4629      	mov	r1, r5
 8003c22:	eb63 0301 	sbc.w	r3, r3, r1
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c34:	4659      	mov	r1, fp
 8003c36:	018b      	lsls	r3, r1, #6
 8003c38:	4651      	mov	r1, sl
 8003c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c3e:	4651      	mov	r1, sl
 8003c40:	018a      	lsls	r2, r1, #6
 8003c42:	4651      	mov	r1, sl
 8003c44:	ebb2 0801 	subs.w	r8, r2, r1
 8003c48:	4659      	mov	r1, fp
 8003c4a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c62:	4690      	mov	r8, r2
 8003c64:	4699      	mov	r9, r3
 8003c66:	4623      	mov	r3, r4
 8003c68:	eb18 0303 	adds.w	r3, r8, r3
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	462b      	mov	r3, r5
 8003c70:	eb49 0303 	adc.w	r3, r9, r3
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c82:	4629      	mov	r1, r5
 8003c84:	024b      	lsls	r3, r1, #9
 8003c86:	4621      	mov	r1, r4
 8003c88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	024a      	lsls	r2, r1, #9
 8003c90:	4610      	mov	r0, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c96:	2200      	movs	r2, #0
 8003c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ca0:	f7fc fffa 	bl	8000c98 <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4613      	mov	r3, r2
 8003caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cac:	e058      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cae:	4b38      	ldr	r3, [pc, #224]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	099b      	lsrs	r3, r3, #6
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	4611      	mov	r1, r2
 8003cba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cbe:	623b      	str	r3, [r7, #32]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cc8:	4642      	mov	r2, r8
 8003cca:	464b      	mov	r3, r9
 8003ccc:	f04f 0000 	mov.w	r0, #0
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	0159      	lsls	r1, r3, #5
 8003cd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cda:	0150      	lsls	r0, r2, #5
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d00:	ebb2 040a 	subs.w	r4, r2, sl
 8003d04:	eb63 050b 	sbc.w	r5, r3, fp
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	00eb      	lsls	r3, r5, #3
 8003d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d16:	00e2      	lsls	r2, r4, #3
 8003d18:	4614      	mov	r4, r2
 8003d1a:	461d      	mov	r5, r3
 8003d1c:	4643      	mov	r3, r8
 8003d1e:	18e3      	adds	r3, r4, r3
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	464b      	mov	r3, r9
 8003d24:	eb45 0303 	adc.w	r3, r5, r3
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d36:	4629      	mov	r1, r5
 8003d38:	028b      	lsls	r3, r1, #10
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d40:	4621      	mov	r1, r4
 8003d42:	028a      	lsls	r2, r1, #10
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	61fa      	str	r2, [r7, #28]
 8003d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d54:	f7fc ffa0 	bl	8000c98 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	0c1b      	lsrs	r3, r3, #16
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d7a:	e002      	b.n	8003d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3750      	adds	r7, #80	; 0x50
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800
 8003d94:	00f42400 	.word	0x00f42400
 8003d98:	007a1200 	.word	0x007a1200

08003d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da2:	681b      	ldr	r3, [r3, #0]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000000 	.word	0x20000000

08003db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003db8:	f7ff fff0 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0a9b      	lsrs	r3, r3, #10
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4903      	ldr	r1, [pc, #12]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	080094a0 	.word	0x080094a0

08003ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e18c      	b.n	8004108 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a75      	ldr	r2, [pc, #468]	; (8003fc8 <HAL_SPI_Init+0x1ec>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d018      	beq.n	8003e2a <HAL_SPI_Init+0x4e>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a73      	ldr	r2, [pc, #460]	; (8003fcc <HAL_SPI_Init+0x1f0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d013      	beq.n	8003e2a <HAL_SPI_Init+0x4e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a72      	ldr	r2, [pc, #456]	; (8003fd0 <HAL_SPI_Init+0x1f4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00e      	beq.n	8003e2a <HAL_SPI_Init+0x4e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a70      	ldr	r2, [pc, #448]	; (8003fd4 <HAL_SPI_Init+0x1f8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d009      	beq.n	8003e2a <HAL_SPI_Init+0x4e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a6f      	ldr	r2, [pc, #444]	; (8003fd8 <HAL_SPI_Init+0x1fc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d004      	beq.n	8003e2a <HAL_SPI_Init+0x4e>
 8003e20:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003e24:	486d      	ldr	r0, [pc, #436]	; (8003fdc <HAL_SPI_Init+0x200>)
 8003e26:	f7fd fe58 	bl	8001ada <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_SPI_Init+0x6a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3a:	d004      	beq.n	8003e46 <HAL_SPI_Init+0x6a>
 8003e3c:	f240 1141 	movw	r1, #321	; 0x141
 8003e40:	4866      	ldr	r0, [pc, #408]	; (8003fdc <HAL_SPI_Init+0x200>)
 8003e42:	f7fd fe4a 	bl	8001ada <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00e      	beq.n	8003e6c <HAL_SPI_Init+0x90>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e56:	d009      	beq.n	8003e6c <HAL_SPI_Init+0x90>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e60:	d004      	beq.n	8003e6c <HAL_SPI_Init+0x90>
 8003e62:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003e66:	485d      	ldr	r0, [pc, #372]	; (8003fdc <HAL_SPI_Init+0x200>)
 8003e68:	f7fd fe37 	bl	8001ada <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e74:	d008      	beq.n	8003e88 <HAL_SPI_Init+0xac>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <HAL_SPI_Init+0xac>
 8003e7e:	f240 1143 	movw	r1, #323	; 0x143
 8003e82:	4856      	ldr	r0, [pc, #344]	; (8003fdc <HAL_SPI_Init+0x200>)
 8003e84:	f7fd fe29 	bl	8001ada <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e90:	d00d      	beq.n	8003eae <HAL_SPI_Init+0xd2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <HAL_SPI_Init+0xd2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ea2:	d004      	beq.n	8003eae <HAL_SPI_Init+0xd2>
 8003ea4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003ea8:	484c      	ldr	r0, [pc, #304]	; (8003fdc <HAL_SPI_Init+0x200>)
 8003eaa:	f7fd fe16 	bl	8001ada <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d020      	beq.n	8003ef8 <HAL_SPI_Init+0x11c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d01c      	beq.n	8003ef8 <HAL_SPI_Init+0x11c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	d018      	beq.n	8003ef8 <HAL_SPI_Init+0x11c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	2b18      	cmp	r3, #24
 8003ecc:	d014      	beq.n	8003ef8 <HAL_SPI_Init+0x11c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d010      	beq.n	8003ef8 <HAL_SPI_Init+0x11c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	2b28      	cmp	r3, #40	; 0x28
 8003edc:	d00c      	beq.n	8003ef8 <HAL_SPI_Init+0x11c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	2b30      	cmp	r3, #48	; 0x30
 8003ee4:	d008      	beq.n	8003ef8 <HAL_SPI_Init+0x11c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	2b38      	cmp	r3, #56	; 0x38
 8003eec:	d004      	beq.n	8003ef8 <HAL_SPI_Init+0x11c>
 8003eee:	f240 1145 	movw	r1, #325	; 0x145
 8003ef2:	483a      	ldr	r0, [pc, #232]	; (8003fdc <HAL_SPI_Init+0x200>)
 8003ef4:	f7fd fdf1 	bl	8001ada <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_SPI_Init+0x136>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d004      	beq.n	8003f12 <HAL_SPI_Init+0x136>
 8003f08:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003f0c:	4833      	ldr	r0, [pc, #204]	; (8003fdc <HAL_SPI_Init+0x200>)
 8003f0e:	f7fd fde4 	bl	8001ada <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_SPI_Init+0x150>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d004      	beq.n	8003f2c <HAL_SPI_Init+0x150>
 8003f22:	f240 1147 	movw	r1, #327	; 0x147
 8003f26:	482d      	ldr	r0, [pc, #180]	; (8003fdc <HAL_SPI_Init+0x200>)
 8003f28:	f7fd fdd7 	bl	8001ada <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d155      	bne.n	8003fe0 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_SPI_Init+0x172>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d004      	beq.n	8003f4e <HAL_SPI_Init+0x172>
 8003f44:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003f48:	4824      	ldr	r0, [pc, #144]	; (8003fdc <HAL_SPI_Init+0x200>)
 8003f4a:	f7fd fdc6 	bl	8001ada <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_SPI_Init+0x18c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d004      	beq.n	8003f68 <HAL_SPI_Init+0x18c>
 8003f5e:	f240 114b 	movw	r1, #331	; 0x14b
 8003f62:	481e      	ldr	r0, [pc, #120]	; (8003fdc <HAL_SPI_Init+0x200>)
 8003f64:	f7fd fdb9 	bl	8001ada <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f70:	d125      	bne.n	8003fbe <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d05d      	beq.n	8004036 <HAL_SPI_Init+0x25a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d059      	beq.n	8004036 <HAL_SPI_Init+0x25a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d055      	beq.n	8004036 <HAL_SPI_Init+0x25a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	2b18      	cmp	r3, #24
 8003f90:	d051      	beq.n	8004036 <HAL_SPI_Init+0x25a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d04d      	beq.n	8004036 <HAL_SPI_Init+0x25a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	2b28      	cmp	r3, #40	; 0x28
 8003fa0:	d049      	beq.n	8004036 <HAL_SPI_Init+0x25a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	2b30      	cmp	r3, #48	; 0x30
 8003fa8:	d045      	beq.n	8004036 <HAL_SPI_Init+0x25a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	2b38      	cmp	r3, #56	; 0x38
 8003fb0:	d041      	beq.n	8004036 <HAL_SPI_Init+0x25a>
 8003fb2:	f240 114f 	movw	r1, #335	; 0x14f
 8003fb6:	4809      	ldr	r0, [pc, #36]	; (8003fdc <HAL_SPI_Init+0x200>)
 8003fb8:	f7fd fd8f 	bl	8001ada <assert_failed>
 8003fbc:	e03b      	b.n	8004036 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	61da      	str	r2, [r3, #28]
 8003fc4:	e037      	b.n	8004036 <HAL_SPI_Init+0x25a>
 8003fc6:	bf00      	nop
 8003fc8:	40013000 	.word	0x40013000
 8003fcc:	40003800 	.word	0x40003800
 8003fd0:	40003c00 	.word	0x40003c00
 8003fd4:	40013400 	.word	0x40013400
 8003fd8:	40015000 	.word	0x40015000
 8003fdc:	08009458 	.word	0x08009458
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d020      	beq.n	800402a <HAL_SPI_Init+0x24e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d01c      	beq.n	800402a <HAL_SPI_Init+0x24e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d018      	beq.n	800402a <HAL_SPI_Init+0x24e>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	2b18      	cmp	r3, #24
 8003ffe:	d014      	beq.n	800402a <HAL_SPI_Init+0x24e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	2b20      	cmp	r3, #32
 8004006:	d010      	beq.n	800402a <HAL_SPI_Init+0x24e>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	2b28      	cmp	r3, #40	; 0x28
 800400e:	d00c      	beq.n	800402a <HAL_SPI_Init+0x24e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b30      	cmp	r3, #48	; 0x30
 8004016:	d008      	beq.n	800402a <HAL_SPI_Init+0x24e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	2b38      	cmp	r3, #56	; 0x38
 800401e:	d004      	beq.n	800402a <HAL_SPI_Init+0x24e>
 8004020:	f240 1159 	movw	r1, #345	; 0x159
 8004024:	483a      	ldr	r0, [pc, #232]	; (8004110 <HAL_SPI_Init+0x334>)
 8004026:	f7fd fd58 	bl	8001ada <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fd fd83 	bl	8001b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800406c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	ea42 0103 	orr.w	r1, r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	0c1b      	lsrs	r3, r3, #16
 80040d4:	f003 0104 	and.w	r1, r3, #4
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	f003 0210 	and.w	r2, r3, #16
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	08009458 	.word	0x08009458

08004114 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <HAL_SPI_Transmit+0x30>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004138:	d004      	beq.n	8004144 <HAL_SPI_Transmit+0x30>
 800413a:	f44f 7142 	mov.w	r1, #776	; 0x308
 800413e:	4880      	ldr	r0, [pc, #512]	; (8004340 <HAL_SPI_Transmit+0x22c>)
 8004140:	f7fd fccb 	bl	8001ada <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_SPI_Transmit+0x3e>
 800414e:	2302      	movs	r3, #2
 8004150:	e128      	b.n	80043a4 <HAL_SPI_Transmit+0x290>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800415a:	f7fd ff07 	bl	8001f6c <HAL_GetTick>
 800415e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d002      	beq.n	8004176 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8004170:	2302      	movs	r3, #2
 8004172:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004174:	e10d      	b.n	8004392 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_SPI_Transmit+0x6e>
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004186:	e104      	b.n	8004392 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2203      	movs	r2, #3
 800418c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ce:	d10f      	bne.n	80041f0 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d007      	beq.n	800420e <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800420c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004216:	d14b      	bne.n	80042b0 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_SPI_Transmit+0x112>
 8004220:	8afb      	ldrh	r3, [r7, #22]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d13e      	bne.n	80042a4 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	881a      	ldrh	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	1c9a      	adds	r2, r3, #2
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800424a:	e02b      	b.n	80042a4 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b02      	cmp	r3, #2
 8004258:	d112      	bne.n	8004280 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	881a      	ldrh	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	1c9a      	adds	r2, r3, #2
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	86da      	strh	r2, [r3, #54]	; 0x36
 800427e:	e011      	b.n	80042a4 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004280:	f7fd fe74 	bl	8001f6c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d803      	bhi.n	8004298 <HAL_SPI_Transmit+0x184>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004296:	d102      	bne.n	800429e <HAL_SPI_Transmit+0x18a>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042a2:	e076      	b.n	8004392 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ce      	bne.n	800424c <HAL_SPI_Transmit+0x138>
 80042ae:	e04e      	b.n	800434e <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_SPI_Transmit+0x1aa>
 80042b8:	8afb      	ldrh	r3, [r7, #22]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d142      	bne.n	8004344 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	330c      	adds	r3, #12
 80042c8:	7812      	ldrb	r2, [r2, #0]
 80042ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042e4:	e02e      	b.n	8004344 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d113      	bne.n	800431c <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	7812      	ldrb	r2, [r2, #0]
 8004300:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	86da      	strh	r2, [r3, #54]	; 0x36
 800431a:	e013      	b.n	8004344 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800431c:	f7fd fe26 	bl	8001f6c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d803      	bhi.n	8004334 <HAL_SPI_Transmit+0x220>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004332:	d102      	bne.n	800433a <HAL_SPI_Transmit+0x226>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d104      	bne.n	8004344 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800433e:	e028      	b.n	8004392 <HAL_SPI_Transmit+0x27e>
 8004340:	08009458 	.word	0x08009458
    while (hspi->TxXferCount > 0U)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1cb      	bne.n	80042e6 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	6839      	ldr	r1, [r7, #0]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fbe6 	bl	8004b24 <SPI_EndRxTxTransaction>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800436c:	2300      	movs	r3, #0
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	77fb      	strb	r3, [r7, #31]
 800438e:	e000      	b.n	8004392 <HAL_SPI_Transmit+0x27e>
  }

error:
 8004390:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043c8:	d112      	bne.n	80043f0 <HAL_SPI_Receive+0x44>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10e      	bne.n	80043f0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2204      	movs	r2, #4
 80043d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f8f2 	bl	80045d0 <HAL_SPI_TransmitReceive>
 80043ec:	4603      	mov	r3, r0
 80043ee:	e0ea      	b.n	80045c6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_SPI_Receive+0x52>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e0e3      	b.n	80045c6 <HAL_SPI_Receive+0x21a>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004406:	f7fd fdb1 	bl	8001f6c <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d002      	beq.n	800441e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004418:	2302      	movs	r3, #2
 800441a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800441c:	e0ca      	b.n	80045b4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_SPI_Receive+0x7e>
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d102      	bne.n	8004430 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800442e:	e0c1      	b.n	80045b4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2204      	movs	r2, #4
 8004434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	88fa      	ldrh	r2, [r7, #6]
 8004448:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	88fa      	ldrh	r2, [r7, #6]
 800444e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004476:	d10f      	bne.n	8004498 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004486:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004496:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d007      	beq.n	80044b6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d162      	bne.n	8004584 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80044be:	e02e      	b.n	800451e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d115      	bne.n	80044fa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f103 020c 	add.w	r2, r3, #12
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	7812      	ldrb	r2, [r2, #0]
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044f8:	e011      	b.n	800451e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fa:	f7fd fd37 	bl	8001f6c <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d803      	bhi.n	8004512 <HAL_SPI_Receive+0x166>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d102      	bne.n	8004518 <HAL_SPI_Receive+0x16c>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d102      	bne.n	800451e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800451c:	e04a      	b.n	80045b4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1cb      	bne.n	80044c0 <HAL_SPI_Receive+0x114>
 8004528:	e031      	b.n	800458e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b01      	cmp	r3, #1
 8004536:	d113      	bne.n	8004560 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	b292      	uxth	r2, r2
 8004544:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	1c9a      	adds	r2, r3, #2
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800455e:	e011      	b.n	8004584 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004560:	f7fd fd04 	bl	8001f6c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d803      	bhi.n	8004578 <HAL_SPI_Receive+0x1cc>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004576:	d102      	bne.n	800457e <HAL_SPI_Receive+0x1d2>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004582:	e017      	b.n	80045b4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1cd      	bne.n	800452a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	6839      	ldr	r1, [r7, #0]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fa60 	bl	8004a58 <SPI_EndRxTransaction>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	75fb      	strb	r3, [r7, #23]
 80045b0:	e000      	b.n	80045b4 <HAL_SPI_Receive+0x208>
  }

error :
 80045b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	; 0x30
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045de:	2301      	movs	r3, #1
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <HAL_SPI_TransmitReceive+0x2a>
 80045f0:	f240 417c 	movw	r1, #1148	; 0x47c
 80045f4:	4884      	ldr	r0, [pc, #528]	; (8004808 <HAL_SPI_TransmitReceive+0x238>)
 80045f6:	f7fd fa70 	bl	8001ada <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x38>
 8004604:	2302      	movs	r3, #2
 8004606:	e18d      	b.n	8004924 <HAL_SPI_TransmitReceive+0x354>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004610:	f7fd fcac 	bl	8001f6c <HAL_GetTick>
 8004614:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800461c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004626:	887b      	ldrh	r3, [r7, #2]
 8004628:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800462a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800462e:	2b01      	cmp	r3, #1
 8004630:	d00f      	beq.n	8004652 <HAL_SPI_TransmitReceive+0x82>
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004638:	d107      	bne.n	800464a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d103      	bne.n	800464a <HAL_SPI_TransmitReceive+0x7a>
 8004642:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004646:	2b04      	cmp	r3, #4
 8004648:	d003      	beq.n	8004652 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800464a:	2302      	movs	r3, #2
 800464c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004650:	e15e      	b.n	8004910 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_SPI_TransmitReceive+0x94>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_SPI_TransmitReceive+0x94>
 800465e:	887b      	ldrh	r3, [r7, #2]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d103      	bne.n	800466c <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800466a:	e151      	b.n	8004910 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b04      	cmp	r3, #4
 8004676:	d003      	beq.n	8004680 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2205      	movs	r2, #5
 800467c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	887a      	ldrh	r2, [r7, #2]
 8004690:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	887a      	ldrh	r2, [r7, #2]
 8004696:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	887a      	ldrh	r2, [r7, #2]
 80046a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d007      	beq.n	80046d4 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046dc:	d178      	bne.n	80047d0 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_SPI_TransmitReceive+0x11c>
 80046e6:	8b7b      	ldrh	r3, [r7, #26]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d166      	bne.n	80047ba <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	881a      	ldrh	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	1c9a      	adds	r2, r3, #2
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004710:	e053      	b.n	80047ba <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b02      	cmp	r3, #2
 800471e:	d11b      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x188>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d016      	beq.n	8004758 <HAL_SPI_TransmitReceive+0x188>
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	2b01      	cmp	r3, #1
 800472e:	d113      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	881a      	ldrh	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	1c9a      	adds	r2, r3, #2
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d119      	bne.n	800479a <HAL_SPI_TransmitReceive+0x1ca>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d014      	beq.n	800479a <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	b292      	uxth	r2, r2
 800477c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	1c9a      	adds	r2, r3, #2
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004796:	2301      	movs	r3, #1
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800479a:	f7fd fbe7 	bl	8001f6c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d807      	bhi.n	80047ba <HAL_SPI_TransmitReceive+0x1ea>
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d003      	beq.n	80047ba <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047b8:	e0aa      	b.n	8004910 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1a6      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x142>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1a1      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x142>
 80047ce:	e07f      	b.n	80048d0 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_SPI_TransmitReceive+0x20e>
 80047d8:	8b7b      	ldrh	r3, [r7, #26]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d16e      	bne.n	80048bc <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	7812      	ldrb	r2, [r2, #0]
 80047ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004804:	e05a      	b.n	80048bc <HAL_SPI_TransmitReceive+0x2ec>
 8004806:	bf00      	nop
 8004808:	08009458 	.word	0x08009458
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b02      	cmp	r3, #2
 8004818:	d11c      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x284>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d017      	beq.n	8004854 <HAL_SPI_TransmitReceive+0x284>
 8004824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d114      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	7812      	ldrb	r2, [r2, #0]
 8004836:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b01      	cmp	r3, #1
 8004860:	d119      	bne.n	8004896 <HAL_SPI_TransmitReceive+0x2c6>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d014      	beq.n	8004896 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004892:	2301      	movs	r3, #1
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004896:	f7fd fb69 	bl	8001f6c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d803      	bhi.n	80048ae <HAL_SPI_TransmitReceive+0x2de>
 80048a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d102      	bne.n	80048b4 <HAL_SPI_TransmitReceive+0x2e4>
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048ba:	e029      	b.n	8004910 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1a2      	bne.n	800480c <HAL_SPI_TransmitReceive+0x23c>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d19d      	bne.n	800480c <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 f925 	bl	8004b24 <SPI_EndRxTxTransaction>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d006      	beq.n	80048ee <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80048ec:	e010      	b.n	8004910 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10b      	bne.n	800490e <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	e000      	b.n	8004910 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 800490e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004920:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004924:	4618      	mov	r0, r3
 8004926:	3730      	adds	r7, #48	; 0x30
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800493a:	b2db      	uxtb	r3, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004958:	f7fd fb08 	bl	8001f6c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	4413      	add	r3, r2
 8004966:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004968:	f7fd fb00 	bl	8001f6c <HAL_GetTick>
 800496c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800496e:	4b39      	ldr	r3, [pc, #228]	; (8004a54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	015b      	lsls	r3, r3, #5
 8004974:	0d1b      	lsrs	r3, r3, #20
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800497e:	e054      	b.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d050      	beq.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004988:	f7fd faf0 	bl	8001f6c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	429a      	cmp	r2, r3
 8004996:	d902      	bls.n	800499e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d13d      	bne.n	8004a1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049b6:	d111      	bne.n	80049dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c0:	d004      	beq.n	80049cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ca:	d107      	bne.n	80049dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e4:	d10f      	bne.n	8004a06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e017      	b.n	8004a4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4013      	ands	r3, r2
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	bf0c      	ite	eq
 8004a3a:	2301      	moveq	r3, #1
 8004a3c:	2300      	movne	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d19b      	bne.n	8004980 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000000 	.word	0x20000000

08004a58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a6c:	d111      	bne.n	8004a92 <SPI_EndRxTransaction+0x3a>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a76:	d004      	beq.n	8004a82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d107      	bne.n	8004a92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a90:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9a:	d12a      	bne.n	8004af2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa4:	d012      	beq.n	8004acc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff ff49 	bl	8004948 <SPI_WaitFlagStateUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d02d      	beq.n	8004b18 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e026      	b.n	8004b1a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f7ff ff36 	bl	8004948 <SPI_WaitFlagStateUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01a      	beq.n	8004b18 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	f043 0220 	orr.w	r2, r3, #32
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e013      	b.n	8004b1a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2200      	movs	r2, #0
 8004afa:	2101      	movs	r1, #1
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff ff23 	bl	8004948 <SPI_WaitFlagStateUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0c:	f043 0220 	orr.w	r2, r3, #32
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e000      	b.n	8004b1a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b30:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <SPI_EndRxTxTransaction+0x7c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1b      	ldr	r2, [pc, #108]	; (8004ba4 <SPI_EndRxTxTransaction+0x80>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	0d5b      	lsrs	r3, r3, #21
 8004b3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b40:	fb02 f303 	mul.w	r3, r2, r3
 8004b44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b4e:	d112      	bne.n	8004b76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2200      	movs	r2, #0
 8004b58:	2180      	movs	r1, #128	; 0x80
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff fef4 	bl	8004948 <SPI_WaitFlagStateUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e00f      	b.n	8004b96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d0f2      	beq.n	8004b76 <SPI_EndRxTxTransaction+0x52>
 8004b90:	e000      	b.n	8004b94 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b92:	bf00      	nop
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000000 	.word	0x20000000
 8004ba4:	165e9f81 	.word	0x165e9f81

08004ba8 <__cvt>:
 8004ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bac:	ec55 4b10 	vmov	r4, r5, d0
 8004bb0:	2d00      	cmp	r5, #0
 8004bb2:	460e      	mov	r6, r1
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	462b      	mov	r3, r5
 8004bb8:	bfbb      	ittet	lt
 8004bba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004bbe:	461d      	movlt	r5, r3
 8004bc0:	2300      	movge	r3, #0
 8004bc2:	232d      	movlt	r3, #45	; 0x2d
 8004bc4:	700b      	strb	r3, [r1, #0]
 8004bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004bcc:	4691      	mov	r9, r2
 8004bce:	f023 0820 	bic.w	r8, r3, #32
 8004bd2:	bfbc      	itt	lt
 8004bd4:	4622      	movlt	r2, r4
 8004bd6:	4614      	movlt	r4, r2
 8004bd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bdc:	d005      	beq.n	8004bea <__cvt+0x42>
 8004bde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004be2:	d100      	bne.n	8004be6 <__cvt+0x3e>
 8004be4:	3601      	adds	r6, #1
 8004be6:	2102      	movs	r1, #2
 8004be8:	e000      	b.n	8004bec <__cvt+0x44>
 8004bea:	2103      	movs	r1, #3
 8004bec:	ab03      	add	r3, sp, #12
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	ab02      	add	r3, sp, #8
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	ec45 4b10 	vmov	d0, r4, r5
 8004bf8:	4653      	mov	r3, sl
 8004bfa:	4632      	mov	r2, r6
 8004bfc:	f001 f880 	bl	8005d00 <_dtoa_r>
 8004c00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c04:	4607      	mov	r7, r0
 8004c06:	d102      	bne.n	8004c0e <__cvt+0x66>
 8004c08:	f019 0f01 	tst.w	r9, #1
 8004c0c:	d022      	beq.n	8004c54 <__cvt+0xac>
 8004c0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c12:	eb07 0906 	add.w	r9, r7, r6
 8004c16:	d110      	bne.n	8004c3a <__cvt+0x92>
 8004c18:	783b      	ldrb	r3, [r7, #0]
 8004c1a:	2b30      	cmp	r3, #48	; 0x30
 8004c1c:	d10a      	bne.n	8004c34 <__cvt+0x8c>
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2300      	movs	r3, #0
 8004c22:	4620      	mov	r0, r4
 8004c24:	4629      	mov	r1, r5
 8004c26:	f7fb ff57 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c2a:	b918      	cbnz	r0, 8004c34 <__cvt+0x8c>
 8004c2c:	f1c6 0601 	rsb	r6, r6, #1
 8004c30:	f8ca 6000 	str.w	r6, [sl]
 8004c34:	f8da 3000 	ldr.w	r3, [sl]
 8004c38:	4499      	add	r9, r3
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4620      	mov	r0, r4
 8004c40:	4629      	mov	r1, r5
 8004c42:	f7fb ff49 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c46:	b108      	cbz	r0, 8004c4c <__cvt+0xa4>
 8004c48:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c4c:	2230      	movs	r2, #48	; 0x30
 8004c4e:	9b03      	ldr	r3, [sp, #12]
 8004c50:	454b      	cmp	r3, r9
 8004c52:	d307      	bcc.n	8004c64 <__cvt+0xbc>
 8004c54:	9b03      	ldr	r3, [sp, #12]
 8004c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c58:	1bdb      	subs	r3, r3, r7
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	b004      	add	sp, #16
 8004c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c64:	1c59      	adds	r1, r3, #1
 8004c66:	9103      	str	r1, [sp, #12]
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	e7f0      	b.n	8004c4e <__cvt+0xa6>

08004c6c <__exponent>:
 8004c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2900      	cmp	r1, #0
 8004c72:	bfb8      	it	lt
 8004c74:	4249      	neglt	r1, r1
 8004c76:	f803 2b02 	strb.w	r2, [r3], #2
 8004c7a:	bfb4      	ite	lt
 8004c7c:	222d      	movlt	r2, #45	; 0x2d
 8004c7e:	222b      	movge	r2, #43	; 0x2b
 8004c80:	2909      	cmp	r1, #9
 8004c82:	7042      	strb	r2, [r0, #1]
 8004c84:	dd2a      	ble.n	8004cdc <__exponent+0x70>
 8004c86:	f10d 0207 	add.w	r2, sp, #7
 8004c8a:	4617      	mov	r7, r2
 8004c8c:	260a      	movs	r6, #10
 8004c8e:	4694      	mov	ip, r2
 8004c90:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c94:	fb06 1415 	mls	r4, r6, r5, r1
 8004c98:	3430      	adds	r4, #48	; 0x30
 8004c9a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	2c63      	cmp	r4, #99	; 0x63
 8004ca2:	f102 32ff 	add.w	r2, r2, #4294967295
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	dcf1      	bgt.n	8004c8e <__exponent+0x22>
 8004caa:	3130      	adds	r1, #48	; 0x30
 8004cac:	f1ac 0402 	sub.w	r4, ip, #2
 8004cb0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004cb4:	1c41      	adds	r1, r0, #1
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	42ba      	cmp	r2, r7
 8004cba:	d30a      	bcc.n	8004cd2 <__exponent+0x66>
 8004cbc:	f10d 0209 	add.w	r2, sp, #9
 8004cc0:	eba2 020c 	sub.w	r2, r2, ip
 8004cc4:	42bc      	cmp	r4, r7
 8004cc6:	bf88      	it	hi
 8004cc8:	2200      	movhi	r2, #0
 8004cca:	4413      	add	r3, r2
 8004ccc:	1a18      	subs	r0, r3, r0
 8004cce:	b003      	add	sp, #12
 8004cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cd2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004cd6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004cda:	e7ed      	b.n	8004cb8 <__exponent+0x4c>
 8004cdc:	2330      	movs	r3, #48	; 0x30
 8004cde:	3130      	adds	r1, #48	; 0x30
 8004ce0:	7083      	strb	r3, [r0, #2]
 8004ce2:	70c1      	strb	r1, [r0, #3]
 8004ce4:	1d03      	adds	r3, r0, #4
 8004ce6:	e7f1      	b.n	8004ccc <__exponent+0x60>

08004ce8 <_printf_float>:
 8004ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cec:	ed2d 8b02 	vpush	{d8}
 8004cf0:	b08d      	sub	sp, #52	; 0x34
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	461f      	mov	r7, r3
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	f000 fef7 	bl	8005af0 <_localeconv_r>
 8004d02:	f8d0 a000 	ldr.w	sl, [r0]
 8004d06:	4650      	mov	r0, sl
 8004d08:	f7fb faba 	bl	8000280 <strlen>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	9305      	str	r3, [sp, #20]
 8004d14:	f8d8 3000 	ldr.w	r3, [r8]
 8004d18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d1c:	3307      	adds	r3, #7
 8004d1e:	f023 0307 	bic.w	r3, r3, #7
 8004d22:	f103 0208 	add.w	r2, r3, #8
 8004d26:	f8c8 2000 	str.w	r2, [r8]
 8004d2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d32:	9307      	str	r3, [sp, #28]
 8004d34:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d38:	ee08 0a10 	vmov	s16, r0
 8004d3c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004d40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d44:	4b9e      	ldr	r3, [pc, #632]	; (8004fc0 <_printf_float+0x2d8>)
 8004d46:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4a:	f7fb fef7 	bl	8000b3c <__aeabi_dcmpun>
 8004d4e:	bb88      	cbnz	r0, 8004db4 <_printf_float+0xcc>
 8004d50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d54:	4b9a      	ldr	r3, [pc, #616]	; (8004fc0 <_printf_float+0x2d8>)
 8004d56:	f04f 32ff 	mov.w	r2, #4294967295
 8004d5a:	f7fb fed1 	bl	8000b00 <__aeabi_dcmple>
 8004d5e:	bb48      	cbnz	r0, 8004db4 <_printf_float+0xcc>
 8004d60:	2200      	movs	r2, #0
 8004d62:	2300      	movs	r3, #0
 8004d64:	4640      	mov	r0, r8
 8004d66:	4649      	mov	r1, r9
 8004d68:	f7fb fec0 	bl	8000aec <__aeabi_dcmplt>
 8004d6c:	b110      	cbz	r0, 8004d74 <_printf_float+0x8c>
 8004d6e:	232d      	movs	r3, #45	; 0x2d
 8004d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d74:	4a93      	ldr	r2, [pc, #588]	; (8004fc4 <_printf_float+0x2dc>)
 8004d76:	4b94      	ldr	r3, [pc, #592]	; (8004fc8 <_printf_float+0x2e0>)
 8004d78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004d7c:	bf94      	ite	ls
 8004d7e:	4690      	movls	r8, r2
 8004d80:	4698      	movhi	r8, r3
 8004d82:	2303      	movs	r3, #3
 8004d84:	6123      	str	r3, [r4, #16]
 8004d86:	9b05      	ldr	r3, [sp, #20]
 8004d88:	f023 0304 	bic.w	r3, r3, #4
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	f04f 0900 	mov.w	r9, #0
 8004d92:	9700      	str	r7, [sp, #0]
 8004d94:	4633      	mov	r3, r6
 8004d96:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f000 f9da 	bl	8005154 <_printf_common>
 8004da0:	3001      	adds	r0, #1
 8004da2:	f040 8090 	bne.w	8004ec6 <_printf_float+0x1de>
 8004da6:	f04f 30ff 	mov.w	r0, #4294967295
 8004daa:	b00d      	add	sp, #52	; 0x34
 8004dac:	ecbd 8b02 	vpop	{d8}
 8004db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db4:	4642      	mov	r2, r8
 8004db6:	464b      	mov	r3, r9
 8004db8:	4640      	mov	r0, r8
 8004dba:	4649      	mov	r1, r9
 8004dbc:	f7fb febe 	bl	8000b3c <__aeabi_dcmpun>
 8004dc0:	b140      	cbz	r0, 8004dd4 <_printf_float+0xec>
 8004dc2:	464b      	mov	r3, r9
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bfbc      	itt	lt
 8004dc8:	232d      	movlt	r3, #45	; 0x2d
 8004dca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004dce:	4a7f      	ldr	r2, [pc, #508]	; (8004fcc <_printf_float+0x2e4>)
 8004dd0:	4b7f      	ldr	r3, [pc, #508]	; (8004fd0 <_printf_float+0x2e8>)
 8004dd2:	e7d1      	b.n	8004d78 <_printf_float+0x90>
 8004dd4:	6863      	ldr	r3, [r4, #4]
 8004dd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004dda:	9206      	str	r2, [sp, #24]
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	d13f      	bne.n	8004e60 <_printf_float+0x178>
 8004de0:	2306      	movs	r3, #6
 8004de2:	6063      	str	r3, [r4, #4]
 8004de4:	9b05      	ldr	r3, [sp, #20]
 8004de6:	6861      	ldr	r1, [r4, #4]
 8004de8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004dec:	2300      	movs	r3, #0
 8004dee:	9303      	str	r3, [sp, #12]
 8004df0:	ab0a      	add	r3, sp, #40	; 0x28
 8004df2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004df6:	ab09      	add	r3, sp, #36	; 0x24
 8004df8:	ec49 8b10 	vmov	d0, r8, r9
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	6022      	str	r2, [r4, #0]
 8004e00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e04:	4628      	mov	r0, r5
 8004e06:	f7ff fecf 	bl	8004ba8 <__cvt>
 8004e0a:	9b06      	ldr	r3, [sp, #24]
 8004e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e0e:	2b47      	cmp	r3, #71	; 0x47
 8004e10:	4680      	mov	r8, r0
 8004e12:	d108      	bne.n	8004e26 <_printf_float+0x13e>
 8004e14:	1cc8      	adds	r0, r1, #3
 8004e16:	db02      	blt.n	8004e1e <_printf_float+0x136>
 8004e18:	6863      	ldr	r3, [r4, #4]
 8004e1a:	4299      	cmp	r1, r3
 8004e1c:	dd41      	ble.n	8004ea2 <_printf_float+0x1ba>
 8004e1e:	f1ab 0302 	sub.w	r3, fp, #2
 8004e22:	fa5f fb83 	uxtb.w	fp, r3
 8004e26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e2a:	d820      	bhi.n	8004e6e <_printf_float+0x186>
 8004e2c:	3901      	subs	r1, #1
 8004e2e:	465a      	mov	r2, fp
 8004e30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e34:	9109      	str	r1, [sp, #36]	; 0x24
 8004e36:	f7ff ff19 	bl	8004c6c <__exponent>
 8004e3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e3c:	1813      	adds	r3, r2, r0
 8004e3e:	2a01      	cmp	r2, #1
 8004e40:	4681      	mov	r9, r0
 8004e42:	6123      	str	r3, [r4, #16]
 8004e44:	dc02      	bgt.n	8004e4c <_printf_float+0x164>
 8004e46:	6822      	ldr	r2, [r4, #0]
 8004e48:	07d2      	lsls	r2, r2, #31
 8004e4a:	d501      	bpl.n	8004e50 <_printf_float+0x168>
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	6123      	str	r3, [r4, #16]
 8004e50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d09c      	beq.n	8004d92 <_printf_float+0xaa>
 8004e58:	232d      	movs	r3, #45	; 0x2d
 8004e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e5e:	e798      	b.n	8004d92 <_printf_float+0xaa>
 8004e60:	9a06      	ldr	r2, [sp, #24]
 8004e62:	2a47      	cmp	r2, #71	; 0x47
 8004e64:	d1be      	bne.n	8004de4 <_printf_float+0xfc>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1bc      	bne.n	8004de4 <_printf_float+0xfc>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e7b9      	b.n	8004de2 <_printf_float+0xfa>
 8004e6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004e72:	d118      	bne.n	8004ea6 <_printf_float+0x1be>
 8004e74:	2900      	cmp	r1, #0
 8004e76:	6863      	ldr	r3, [r4, #4]
 8004e78:	dd0b      	ble.n	8004e92 <_printf_float+0x1aa>
 8004e7a:	6121      	str	r1, [r4, #16]
 8004e7c:	b913      	cbnz	r3, 8004e84 <_printf_float+0x19c>
 8004e7e:	6822      	ldr	r2, [r4, #0]
 8004e80:	07d0      	lsls	r0, r2, #31
 8004e82:	d502      	bpl.n	8004e8a <_printf_float+0x1a2>
 8004e84:	3301      	adds	r3, #1
 8004e86:	440b      	add	r3, r1
 8004e88:	6123      	str	r3, [r4, #16]
 8004e8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e8c:	f04f 0900 	mov.w	r9, #0
 8004e90:	e7de      	b.n	8004e50 <_printf_float+0x168>
 8004e92:	b913      	cbnz	r3, 8004e9a <_printf_float+0x1b2>
 8004e94:	6822      	ldr	r2, [r4, #0]
 8004e96:	07d2      	lsls	r2, r2, #31
 8004e98:	d501      	bpl.n	8004e9e <_printf_float+0x1b6>
 8004e9a:	3302      	adds	r3, #2
 8004e9c:	e7f4      	b.n	8004e88 <_printf_float+0x1a0>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e7f2      	b.n	8004e88 <_printf_float+0x1a0>
 8004ea2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ea8:	4299      	cmp	r1, r3
 8004eaa:	db05      	blt.n	8004eb8 <_printf_float+0x1d0>
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	6121      	str	r1, [r4, #16]
 8004eb0:	07d8      	lsls	r0, r3, #31
 8004eb2:	d5ea      	bpl.n	8004e8a <_printf_float+0x1a2>
 8004eb4:	1c4b      	adds	r3, r1, #1
 8004eb6:	e7e7      	b.n	8004e88 <_printf_float+0x1a0>
 8004eb8:	2900      	cmp	r1, #0
 8004eba:	bfd4      	ite	le
 8004ebc:	f1c1 0202 	rsble	r2, r1, #2
 8004ec0:	2201      	movgt	r2, #1
 8004ec2:	4413      	add	r3, r2
 8004ec4:	e7e0      	b.n	8004e88 <_printf_float+0x1a0>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	055a      	lsls	r2, r3, #21
 8004eca:	d407      	bmi.n	8004edc <_printf_float+0x1f4>
 8004ecc:	6923      	ldr	r3, [r4, #16]
 8004ece:	4642      	mov	r2, r8
 8004ed0:	4631      	mov	r1, r6
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	47b8      	blx	r7
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	d12c      	bne.n	8004f34 <_printf_float+0x24c>
 8004eda:	e764      	b.n	8004da6 <_printf_float+0xbe>
 8004edc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ee0:	f240 80e0 	bls.w	80050a4 <_printf_float+0x3bc>
 8004ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2300      	movs	r3, #0
 8004eec:	f7fb fdf4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d034      	beq.n	8004f5e <_printf_float+0x276>
 8004ef4:	4a37      	ldr	r2, [pc, #220]	; (8004fd4 <_printf_float+0x2ec>)
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4631      	mov	r1, r6
 8004efa:	4628      	mov	r0, r5
 8004efc:	47b8      	blx	r7
 8004efe:	3001      	adds	r0, #1
 8004f00:	f43f af51 	beq.w	8004da6 <_printf_float+0xbe>
 8004f04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	db02      	blt.n	8004f12 <_printf_float+0x22a>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	07d8      	lsls	r0, r3, #31
 8004f10:	d510      	bpl.n	8004f34 <_printf_float+0x24c>
 8004f12:	ee18 3a10 	vmov	r3, s16
 8004f16:	4652      	mov	r2, sl
 8004f18:	4631      	mov	r1, r6
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	47b8      	blx	r7
 8004f1e:	3001      	adds	r0, #1
 8004f20:	f43f af41 	beq.w	8004da6 <_printf_float+0xbe>
 8004f24:	f04f 0800 	mov.w	r8, #0
 8004f28:	f104 091a 	add.w	r9, r4, #26
 8004f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	4543      	cmp	r3, r8
 8004f32:	dc09      	bgt.n	8004f48 <_printf_float+0x260>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	079b      	lsls	r3, r3, #30
 8004f38:	f100 8107 	bmi.w	800514a <_printf_float+0x462>
 8004f3c:	68e0      	ldr	r0, [r4, #12]
 8004f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f40:	4298      	cmp	r0, r3
 8004f42:	bfb8      	it	lt
 8004f44:	4618      	movlt	r0, r3
 8004f46:	e730      	b.n	8004daa <_printf_float+0xc2>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	464a      	mov	r2, r9
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	f43f af27 	beq.w	8004da6 <_printf_float+0xbe>
 8004f58:	f108 0801 	add.w	r8, r8, #1
 8004f5c:	e7e6      	b.n	8004f2c <_printf_float+0x244>
 8004f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	dc39      	bgt.n	8004fd8 <_printf_float+0x2f0>
 8004f64:	4a1b      	ldr	r2, [pc, #108]	; (8004fd4 <_printf_float+0x2ec>)
 8004f66:	2301      	movs	r3, #1
 8004f68:	4631      	mov	r1, r6
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	47b8      	blx	r7
 8004f6e:	3001      	adds	r0, #1
 8004f70:	f43f af19 	beq.w	8004da6 <_printf_float+0xbe>
 8004f74:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	d102      	bne.n	8004f82 <_printf_float+0x29a>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	07d9      	lsls	r1, r3, #31
 8004f80:	d5d8      	bpl.n	8004f34 <_printf_float+0x24c>
 8004f82:	ee18 3a10 	vmov	r3, s16
 8004f86:	4652      	mov	r2, sl
 8004f88:	4631      	mov	r1, r6
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	47b8      	blx	r7
 8004f8e:	3001      	adds	r0, #1
 8004f90:	f43f af09 	beq.w	8004da6 <_printf_float+0xbe>
 8004f94:	f04f 0900 	mov.w	r9, #0
 8004f98:	f104 0a1a 	add.w	sl, r4, #26
 8004f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9e:	425b      	negs	r3, r3
 8004fa0:	454b      	cmp	r3, r9
 8004fa2:	dc01      	bgt.n	8004fa8 <_printf_float+0x2c0>
 8004fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fa6:	e792      	b.n	8004ece <_printf_float+0x1e6>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4652      	mov	r2, sl
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	f43f aef7 	beq.w	8004da6 <_printf_float+0xbe>
 8004fb8:	f109 0901 	add.w	r9, r9, #1
 8004fbc:	e7ee      	b.n	8004f9c <_printf_float+0x2b4>
 8004fbe:	bf00      	nop
 8004fc0:	7fefffff 	.word	0x7fefffff
 8004fc4:	080094a8 	.word	0x080094a8
 8004fc8:	080094ac 	.word	0x080094ac
 8004fcc:	080094b0 	.word	0x080094b0
 8004fd0:	080094b4 	.word	0x080094b4
 8004fd4:	080094b8 	.word	0x080094b8
 8004fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	bfa8      	it	ge
 8004fe0:	461a      	movge	r2, r3
 8004fe2:	2a00      	cmp	r2, #0
 8004fe4:	4691      	mov	r9, r2
 8004fe6:	dc37      	bgt.n	8005058 <_printf_float+0x370>
 8004fe8:	f04f 0b00 	mov.w	fp, #0
 8004fec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ff0:	f104 021a 	add.w	r2, r4, #26
 8004ff4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ff6:	9305      	str	r3, [sp, #20]
 8004ff8:	eba3 0309 	sub.w	r3, r3, r9
 8004ffc:	455b      	cmp	r3, fp
 8004ffe:	dc33      	bgt.n	8005068 <_printf_float+0x380>
 8005000:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005004:	429a      	cmp	r2, r3
 8005006:	db3b      	blt.n	8005080 <_printf_float+0x398>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	07da      	lsls	r2, r3, #31
 800500c:	d438      	bmi.n	8005080 <_printf_float+0x398>
 800500e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005012:	eba2 0903 	sub.w	r9, r2, r3
 8005016:	9b05      	ldr	r3, [sp, #20]
 8005018:	1ad2      	subs	r2, r2, r3
 800501a:	4591      	cmp	r9, r2
 800501c:	bfa8      	it	ge
 800501e:	4691      	movge	r9, r2
 8005020:	f1b9 0f00 	cmp.w	r9, #0
 8005024:	dc35      	bgt.n	8005092 <_printf_float+0x3aa>
 8005026:	f04f 0800 	mov.w	r8, #0
 800502a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800502e:	f104 0a1a 	add.w	sl, r4, #26
 8005032:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	eba3 0309 	sub.w	r3, r3, r9
 800503c:	4543      	cmp	r3, r8
 800503e:	f77f af79 	ble.w	8004f34 <_printf_float+0x24c>
 8005042:	2301      	movs	r3, #1
 8005044:	4652      	mov	r2, sl
 8005046:	4631      	mov	r1, r6
 8005048:	4628      	mov	r0, r5
 800504a:	47b8      	blx	r7
 800504c:	3001      	adds	r0, #1
 800504e:	f43f aeaa 	beq.w	8004da6 <_printf_float+0xbe>
 8005052:	f108 0801 	add.w	r8, r8, #1
 8005056:	e7ec      	b.n	8005032 <_printf_float+0x34a>
 8005058:	4613      	mov	r3, r2
 800505a:	4631      	mov	r1, r6
 800505c:	4642      	mov	r2, r8
 800505e:	4628      	mov	r0, r5
 8005060:	47b8      	blx	r7
 8005062:	3001      	adds	r0, #1
 8005064:	d1c0      	bne.n	8004fe8 <_printf_float+0x300>
 8005066:	e69e      	b.n	8004da6 <_printf_float+0xbe>
 8005068:	2301      	movs	r3, #1
 800506a:	4631      	mov	r1, r6
 800506c:	4628      	mov	r0, r5
 800506e:	9205      	str	r2, [sp, #20]
 8005070:	47b8      	blx	r7
 8005072:	3001      	adds	r0, #1
 8005074:	f43f ae97 	beq.w	8004da6 <_printf_float+0xbe>
 8005078:	9a05      	ldr	r2, [sp, #20]
 800507a:	f10b 0b01 	add.w	fp, fp, #1
 800507e:	e7b9      	b.n	8004ff4 <_printf_float+0x30c>
 8005080:	ee18 3a10 	vmov	r3, s16
 8005084:	4652      	mov	r2, sl
 8005086:	4631      	mov	r1, r6
 8005088:	4628      	mov	r0, r5
 800508a:	47b8      	blx	r7
 800508c:	3001      	adds	r0, #1
 800508e:	d1be      	bne.n	800500e <_printf_float+0x326>
 8005090:	e689      	b.n	8004da6 <_printf_float+0xbe>
 8005092:	9a05      	ldr	r2, [sp, #20]
 8005094:	464b      	mov	r3, r9
 8005096:	4442      	add	r2, r8
 8005098:	4631      	mov	r1, r6
 800509a:	4628      	mov	r0, r5
 800509c:	47b8      	blx	r7
 800509e:	3001      	adds	r0, #1
 80050a0:	d1c1      	bne.n	8005026 <_printf_float+0x33e>
 80050a2:	e680      	b.n	8004da6 <_printf_float+0xbe>
 80050a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050a6:	2a01      	cmp	r2, #1
 80050a8:	dc01      	bgt.n	80050ae <_printf_float+0x3c6>
 80050aa:	07db      	lsls	r3, r3, #31
 80050ac:	d53a      	bpl.n	8005124 <_printf_float+0x43c>
 80050ae:	2301      	movs	r3, #1
 80050b0:	4642      	mov	r2, r8
 80050b2:	4631      	mov	r1, r6
 80050b4:	4628      	mov	r0, r5
 80050b6:	47b8      	blx	r7
 80050b8:	3001      	adds	r0, #1
 80050ba:	f43f ae74 	beq.w	8004da6 <_printf_float+0xbe>
 80050be:	ee18 3a10 	vmov	r3, s16
 80050c2:	4652      	mov	r2, sl
 80050c4:	4631      	mov	r1, r6
 80050c6:	4628      	mov	r0, r5
 80050c8:	47b8      	blx	r7
 80050ca:	3001      	adds	r0, #1
 80050cc:	f43f ae6b 	beq.w	8004da6 <_printf_float+0xbe>
 80050d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050d4:	2200      	movs	r2, #0
 80050d6:	2300      	movs	r3, #0
 80050d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80050dc:	f7fb fcfc 	bl	8000ad8 <__aeabi_dcmpeq>
 80050e0:	b9d8      	cbnz	r0, 800511a <_printf_float+0x432>
 80050e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80050e6:	f108 0201 	add.w	r2, r8, #1
 80050ea:	4631      	mov	r1, r6
 80050ec:	4628      	mov	r0, r5
 80050ee:	47b8      	blx	r7
 80050f0:	3001      	adds	r0, #1
 80050f2:	d10e      	bne.n	8005112 <_printf_float+0x42a>
 80050f4:	e657      	b.n	8004da6 <_printf_float+0xbe>
 80050f6:	2301      	movs	r3, #1
 80050f8:	4652      	mov	r2, sl
 80050fa:	4631      	mov	r1, r6
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b8      	blx	r7
 8005100:	3001      	adds	r0, #1
 8005102:	f43f ae50 	beq.w	8004da6 <_printf_float+0xbe>
 8005106:	f108 0801 	add.w	r8, r8, #1
 800510a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800510c:	3b01      	subs	r3, #1
 800510e:	4543      	cmp	r3, r8
 8005110:	dcf1      	bgt.n	80050f6 <_printf_float+0x40e>
 8005112:	464b      	mov	r3, r9
 8005114:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005118:	e6da      	b.n	8004ed0 <_printf_float+0x1e8>
 800511a:	f04f 0800 	mov.w	r8, #0
 800511e:	f104 0a1a 	add.w	sl, r4, #26
 8005122:	e7f2      	b.n	800510a <_printf_float+0x422>
 8005124:	2301      	movs	r3, #1
 8005126:	4642      	mov	r2, r8
 8005128:	e7df      	b.n	80050ea <_printf_float+0x402>
 800512a:	2301      	movs	r3, #1
 800512c:	464a      	mov	r2, r9
 800512e:	4631      	mov	r1, r6
 8005130:	4628      	mov	r0, r5
 8005132:	47b8      	blx	r7
 8005134:	3001      	adds	r0, #1
 8005136:	f43f ae36 	beq.w	8004da6 <_printf_float+0xbe>
 800513a:	f108 0801 	add.w	r8, r8, #1
 800513e:	68e3      	ldr	r3, [r4, #12]
 8005140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005142:	1a5b      	subs	r3, r3, r1
 8005144:	4543      	cmp	r3, r8
 8005146:	dcf0      	bgt.n	800512a <_printf_float+0x442>
 8005148:	e6f8      	b.n	8004f3c <_printf_float+0x254>
 800514a:	f04f 0800 	mov.w	r8, #0
 800514e:	f104 0919 	add.w	r9, r4, #25
 8005152:	e7f4      	b.n	800513e <_printf_float+0x456>

08005154 <_printf_common>:
 8005154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005158:	4616      	mov	r6, r2
 800515a:	4699      	mov	r9, r3
 800515c:	688a      	ldr	r2, [r1, #8]
 800515e:	690b      	ldr	r3, [r1, #16]
 8005160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005164:	4293      	cmp	r3, r2
 8005166:	bfb8      	it	lt
 8005168:	4613      	movlt	r3, r2
 800516a:	6033      	str	r3, [r6, #0]
 800516c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005170:	4607      	mov	r7, r0
 8005172:	460c      	mov	r4, r1
 8005174:	b10a      	cbz	r2, 800517a <_printf_common+0x26>
 8005176:	3301      	adds	r3, #1
 8005178:	6033      	str	r3, [r6, #0]
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	0699      	lsls	r1, r3, #26
 800517e:	bf42      	ittt	mi
 8005180:	6833      	ldrmi	r3, [r6, #0]
 8005182:	3302      	addmi	r3, #2
 8005184:	6033      	strmi	r3, [r6, #0]
 8005186:	6825      	ldr	r5, [r4, #0]
 8005188:	f015 0506 	ands.w	r5, r5, #6
 800518c:	d106      	bne.n	800519c <_printf_common+0x48>
 800518e:	f104 0a19 	add.w	sl, r4, #25
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	6832      	ldr	r2, [r6, #0]
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	42ab      	cmp	r3, r5
 800519a:	dc26      	bgt.n	80051ea <_printf_common+0x96>
 800519c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051a0:	1e13      	subs	r3, r2, #0
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	bf18      	it	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	0692      	lsls	r2, r2, #26
 80051aa:	d42b      	bmi.n	8005204 <_printf_common+0xb0>
 80051ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051b0:	4649      	mov	r1, r9
 80051b2:	4638      	mov	r0, r7
 80051b4:	47c0      	blx	r8
 80051b6:	3001      	adds	r0, #1
 80051b8:	d01e      	beq.n	80051f8 <_printf_common+0xa4>
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	6922      	ldr	r2, [r4, #16]
 80051be:	f003 0306 	and.w	r3, r3, #6
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	bf02      	ittt	eq
 80051c6:	68e5      	ldreq	r5, [r4, #12]
 80051c8:	6833      	ldreq	r3, [r6, #0]
 80051ca:	1aed      	subeq	r5, r5, r3
 80051cc:	68a3      	ldr	r3, [r4, #8]
 80051ce:	bf0c      	ite	eq
 80051d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051d4:	2500      	movne	r5, #0
 80051d6:	4293      	cmp	r3, r2
 80051d8:	bfc4      	itt	gt
 80051da:	1a9b      	subgt	r3, r3, r2
 80051dc:	18ed      	addgt	r5, r5, r3
 80051de:	2600      	movs	r6, #0
 80051e0:	341a      	adds	r4, #26
 80051e2:	42b5      	cmp	r5, r6
 80051e4:	d11a      	bne.n	800521c <_printf_common+0xc8>
 80051e6:	2000      	movs	r0, #0
 80051e8:	e008      	b.n	80051fc <_printf_common+0xa8>
 80051ea:	2301      	movs	r3, #1
 80051ec:	4652      	mov	r2, sl
 80051ee:	4649      	mov	r1, r9
 80051f0:	4638      	mov	r0, r7
 80051f2:	47c0      	blx	r8
 80051f4:	3001      	adds	r0, #1
 80051f6:	d103      	bne.n	8005200 <_printf_common+0xac>
 80051f8:	f04f 30ff 	mov.w	r0, #4294967295
 80051fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005200:	3501      	adds	r5, #1
 8005202:	e7c6      	b.n	8005192 <_printf_common+0x3e>
 8005204:	18e1      	adds	r1, r4, r3
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	2030      	movs	r0, #48	; 0x30
 800520a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800520e:	4422      	add	r2, r4
 8005210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005218:	3302      	adds	r3, #2
 800521a:	e7c7      	b.n	80051ac <_printf_common+0x58>
 800521c:	2301      	movs	r3, #1
 800521e:	4622      	mov	r2, r4
 8005220:	4649      	mov	r1, r9
 8005222:	4638      	mov	r0, r7
 8005224:	47c0      	blx	r8
 8005226:	3001      	adds	r0, #1
 8005228:	d0e6      	beq.n	80051f8 <_printf_common+0xa4>
 800522a:	3601      	adds	r6, #1
 800522c:	e7d9      	b.n	80051e2 <_printf_common+0x8e>
	...

08005230 <_printf_i>:
 8005230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005234:	7e0f      	ldrb	r7, [r1, #24]
 8005236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005238:	2f78      	cmp	r7, #120	; 0x78
 800523a:	4691      	mov	r9, r2
 800523c:	4680      	mov	r8, r0
 800523e:	460c      	mov	r4, r1
 8005240:	469a      	mov	sl, r3
 8005242:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005246:	d807      	bhi.n	8005258 <_printf_i+0x28>
 8005248:	2f62      	cmp	r7, #98	; 0x62
 800524a:	d80a      	bhi.n	8005262 <_printf_i+0x32>
 800524c:	2f00      	cmp	r7, #0
 800524e:	f000 80d4 	beq.w	80053fa <_printf_i+0x1ca>
 8005252:	2f58      	cmp	r7, #88	; 0x58
 8005254:	f000 80c0 	beq.w	80053d8 <_printf_i+0x1a8>
 8005258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800525c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005260:	e03a      	b.n	80052d8 <_printf_i+0xa8>
 8005262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005266:	2b15      	cmp	r3, #21
 8005268:	d8f6      	bhi.n	8005258 <_printf_i+0x28>
 800526a:	a101      	add	r1, pc, #4	; (adr r1, 8005270 <_printf_i+0x40>)
 800526c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005270:	080052c9 	.word	0x080052c9
 8005274:	080052dd 	.word	0x080052dd
 8005278:	08005259 	.word	0x08005259
 800527c:	08005259 	.word	0x08005259
 8005280:	08005259 	.word	0x08005259
 8005284:	08005259 	.word	0x08005259
 8005288:	080052dd 	.word	0x080052dd
 800528c:	08005259 	.word	0x08005259
 8005290:	08005259 	.word	0x08005259
 8005294:	08005259 	.word	0x08005259
 8005298:	08005259 	.word	0x08005259
 800529c:	080053e1 	.word	0x080053e1
 80052a0:	08005309 	.word	0x08005309
 80052a4:	0800539b 	.word	0x0800539b
 80052a8:	08005259 	.word	0x08005259
 80052ac:	08005259 	.word	0x08005259
 80052b0:	08005403 	.word	0x08005403
 80052b4:	08005259 	.word	0x08005259
 80052b8:	08005309 	.word	0x08005309
 80052bc:	08005259 	.word	0x08005259
 80052c0:	08005259 	.word	0x08005259
 80052c4:	080053a3 	.word	0x080053a3
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	1d1a      	adds	r2, r3, #4
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	602a      	str	r2, [r5, #0]
 80052d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052d8:	2301      	movs	r3, #1
 80052da:	e09f      	b.n	800541c <_printf_i+0x1ec>
 80052dc:	6820      	ldr	r0, [r4, #0]
 80052de:	682b      	ldr	r3, [r5, #0]
 80052e0:	0607      	lsls	r7, r0, #24
 80052e2:	f103 0104 	add.w	r1, r3, #4
 80052e6:	6029      	str	r1, [r5, #0]
 80052e8:	d501      	bpl.n	80052ee <_printf_i+0xbe>
 80052ea:	681e      	ldr	r6, [r3, #0]
 80052ec:	e003      	b.n	80052f6 <_printf_i+0xc6>
 80052ee:	0646      	lsls	r6, r0, #25
 80052f0:	d5fb      	bpl.n	80052ea <_printf_i+0xba>
 80052f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052f6:	2e00      	cmp	r6, #0
 80052f8:	da03      	bge.n	8005302 <_printf_i+0xd2>
 80052fa:	232d      	movs	r3, #45	; 0x2d
 80052fc:	4276      	negs	r6, r6
 80052fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005302:	485a      	ldr	r0, [pc, #360]	; (800546c <_printf_i+0x23c>)
 8005304:	230a      	movs	r3, #10
 8005306:	e012      	b.n	800532e <_printf_i+0xfe>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	6820      	ldr	r0, [r4, #0]
 800530c:	1d19      	adds	r1, r3, #4
 800530e:	6029      	str	r1, [r5, #0]
 8005310:	0605      	lsls	r5, r0, #24
 8005312:	d501      	bpl.n	8005318 <_printf_i+0xe8>
 8005314:	681e      	ldr	r6, [r3, #0]
 8005316:	e002      	b.n	800531e <_printf_i+0xee>
 8005318:	0641      	lsls	r1, r0, #25
 800531a:	d5fb      	bpl.n	8005314 <_printf_i+0xe4>
 800531c:	881e      	ldrh	r6, [r3, #0]
 800531e:	4853      	ldr	r0, [pc, #332]	; (800546c <_printf_i+0x23c>)
 8005320:	2f6f      	cmp	r7, #111	; 0x6f
 8005322:	bf0c      	ite	eq
 8005324:	2308      	moveq	r3, #8
 8005326:	230a      	movne	r3, #10
 8005328:	2100      	movs	r1, #0
 800532a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800532e:	6865      	ldr	r5, [r4, #4]
 8005330:	60a5      	str	r5, [r4, #8]
 8005332:	2d00      	cmp	r5, #0
 8005334:	bfa2      	ittt	ge
 8005336:	6821      	ldrge	r1, [r4, #0]
 8005338:	f021 0104 	bicge.w	r1, r1, #4
 800533c:	6021      	strge	r1, [r4, #0]
 800533e:	b90e      	cbnz	r6, 8005344 <_printf_i+0x114>
 8005340:	2d00      	cmp	r5, #0
 8005342:	d04b      	beq.n	80053dc <_printf_i+0x1ac>
 8005344:	4615      	mov	r5, r2
 8005346:	fbb6 f1f3 	udiv	r1, r6, r3
 800534a:	fb03 6711 	mls	r7, r3, r1, r6
 800534e:	5dc7      	ldrb	r7, [r0, r7]
 8005350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005354:	4637      	mov	r7, r6
 8005356:	42bb      	cmp	r3, r7
 8005358:	460e      	mov	r6, r1
 800535a:	d9f4      	bls.n	8005346 <_printf_i+0x116>
 800535c:	2b08      	cmp	r3, #8
 800535e:	d10b      	bne.n	8005378 <_printf_i+0x148>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	07de      	lsls	r6, r3, #31
 8005364:	d508      	bpl.n	8005378 <_printf_i+0x148>
 8005366:	6923      	ldr	r3, [r4, #16]
 8005368:	6861      	ldr	r1, [r4, #4]
 800536a:	4299      	cmp	r1, r3
 800536c:	bfde      	ittt	le
 800536e:	2330      	movle	r3, #48	; 0x30
 8005370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005374:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005378:	1b52      	subs	r2, r2, r5
 800537a:	6122      	str	r2, [r4, #16]
 800537c:	f8cd a000 	str.w	sl, [sp]
 8005380:	464b      	mov	r3, r9
 8005382:	aa03      	add	r2, sp, #12
 8005384:	4621      	mov	r1, r4
 8005386:	4640      	mov	r0, r8
 8005388:	f7ff fee4 	bl	8005154 <_printf_common>
 800538c:	3001      	adds	r0, #1
 800538e:	d14a      	bne.n	8005426 <_printf_i+0x1f6>
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	b004      	add	sp, #16
 8005396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	f043 0320 	orr.w	r3, r3, #32
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	4833      	ldr	r0, [pc, #204]	; (8005470 <_printf_i+0x240>)
 80053a4:	2778      	movs	r7, #120	; 0x78
 80053a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	6829      	ldr	r1, [r5, #0]
 80053ae:	061f      	lsls	r7, r3, #24
 80053b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80053b4:	d402      	bmi.n	80053bc <_printf_i+0x18c>
 80053b6:	065f      	lsls	r7, r3, #25
 80053b8:	bf48      	it	mi
 80053ba:	b2b6      	uxthmi	r6, r6
 80053bc:	07df      	lsls	r7, r3, #31
 80053be:	bf48      	it	mi
 80053c0:	f043 0320 	orrmi.w	r3, r3, #32
 80053c4:	6029      	str	r1, [r5, #0]
 80053c6:	bf48      	it	mi
 80053c8:	6023      	strmi	r3, [r4, #0]
 80053ca:	b91e      	cbnz	r6, 80053d4 <_printf_i+0x1a4>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	f023 0320 	bic.w	r3, r3, #32
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	2310      	movs	r3, #16
 80053d6:	e7a7      	b.n	8005328 <_printf_i+0xf8>
 80053d8:	4824      	ldr	r0, [pc, #144]	; (800546c <_printf_i+0x23c>)
 80053da:	e7e4      	b.n	80053a6 <_printf_i+0x176>
 80053dc:	4615      	mov	r5, r2
 80053de:	e7bd      	b.n	800535c <_printf_i+0x12c>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	6826      	ldr	r6, [r4, #0]
 80053e4:	6961      	ldr	r1, [r4, #20]
 80053e6:	1d18      	adds	r0, r3, #4
 80053e8:	6028      	str	r0, [r5, #0]
 80053ea:	0635      	lsls	r5, r6, #24
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	d501      	bpl.n	80053f4 <_printf_i+0x1c4>
 80053f0:	6019      	str	r1, [r3, #0]
 80053f2:	e002      	b.n	80053fa <_printf_i+0x1ca>
 80053f4:	0670      	lsls	r0, r6, #25
 80053f6:	d5fb      	bpl.n	80053f0 <_printf_i+0x1c0>
 80053f8:	8019      	strh	r1, [r3, #0]
 80053fa:	2300      	movs	r3, #0
 80053fc:	6123      	str	r3, [r4, #16]
 80053fe:	4615      	mov	r5, r2
 8005400:	e7bc      	b.n	800537c <_printf_i+0x14c>
 8005402:	682b      	ldr	r3, [r5, #0]
 8005404:	1d1a      	adds	r2, r3, #4
 8005406:	602a      	str	r2, [r5, #0]
 8005408:	681d      	ldr	r5, [r3, #0]
 800540a:	6862      	ldr	r2, [r4, #4]
 800540c:	2100      	movs	r1, #0
 800540e:	4628      	mov	r0, r5
 8005410:	f7fa fee6 	bl	80001e0 <memchr>
 8005414:	b108      	cbz	r0, 800541a <_printf_i+0x1ea>
 8005416:	1b40      	subs	r0, r0, r5
 8005418:	6060      	str	r0, [r4, #4]
 800541a:	6863      	ldr	r3, [r4, #4]
 800541c:	6123      	str	r3, [r4, #16]
 800541e:	2300      	movs	r3, #0
 8005420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005424:	e7aa      	b.n	800537c <_printf_i+0x14c>
 8005426:	6923      	ldr	r3, [r4, #16]
 8005428:	462a      	mov	r2, r5
 800542a:	4649      	mov	r1, r9
 800542c:	4640      	mov	r0, r8
 800542e:	47d0      	blx	sl
 8005430:	3001      	adds	r0, #1
 8005432:	d0ad      	beq.n	8005390 <_printf_i+0x160>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	079b      	lsls	r3, r3, #30
 8005438:	d413      	bmi.n	8005462 <_printf_i+0x232>
 800543a:	68e0      	ldr	r0, [r4, #12]
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	4298      	cmp	r0, r3
 8005440:	bfb8      	it	lt
 8005442:	4618      	movlt	r0, r3
 8005444:	e7a6      	b.n	8005394 <_printf_i+0x164>
 8005446:	2301      	movs	r3, #1
 8005448:	4632      	mov	r2, r6
 800544a:	4649      	mov	r1, r9
 800544c:	4640      	mov	r0, r8
 800544e:	47d0      	blx	sl
 8005450:	3001      	adds	r0, #1
 8005452:	d09d      	beq.n	8005390 <_printf_i+0x160>
 8005454:	3501      	adds	r5, #1
 8005456:	68e3      	ldr	r3, [r4, #12]
 8005458:	9903      	ldr	r1, [sp, #12]
 800545a:	1a5b      	subs	r3, r3, r1
 800545c:	42ab      	cmp	r3, r5
 800545e:	dcf2      	bgt.n	8005446 <_printf_i+0x216>
 8005460:	e7eb      	b.n	800543a <_printf_i+0x20a>
 8005462:	2500      	movs	r5, #0
 8005464:	f104 0619 	add.w	r6, r4, #25
 8005468:	e7f5      	b.n	8005456 <_printf_i+0x226>
 800546a:	bf00      	nop
 800546c:	080094ba 	.word	0x080094ba
 8005470:	080094cb 	.word	0x080094cb

08005474 <_scanf_float>:
 8005474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005478:	b087      	sub	sp, #28
 800547a:	4617      	mov	r7, r2
 800547c:	9303      	str	r3, [sp, #12]
 800547e:	688b      	ldr	r3, [r1, #8]
 8005480:	1e5a      	subs	r2, r3, #1
 8005482:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005486:	bf83      	ittte	hi
 8005488:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800548c:	195b      	addhi	r3, r3, r5
 800548e:	9302      	strhi	r3, [sp, #8]
 8005490:	2300      	movls	r3, #0
 8005492:	bf86      	itte	hi
 8005494:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005498:	608b      	strhi	r3, [r1, #8]
 800549a:	9302      	strls	r3, [sp, #8]
 800549c:	680b      	ldr	r3, [r1, #0]
 800549e:	468b      	mov	fp, r1
 80054a0:	2500      	movs	r5, #0
 80054a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80054a6:	f84b 3b1c 	str.w	r3, [fp], #28
 80054aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80054ae:	4680      	mov	r8, r0
 80054b0:	460c      	mov	r4, r1
 80054b2:	465e      	mov	r6, fp
 80054b4:	46aa      	mov	sl, r5
 80054b6:	46a9      	mov	r9, r5
 80054b8:	9501      	str	r5, [sp, #4]
 80054ba:	68a2      	ldr	r2, [r4, #8]
 80054bc:	b152      	cbz	r2, 80054d4 <_scanf_float+0x60>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b4e      	cmp	r3, #78	; 0x4e
 80054c4:	d864      	bhi.n	8005590 <_scanf_float+0x11c>
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d83c      	bhi.n	8005544 <_scanf_float+0xd0>
 80054ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80054ce:	b2c8      	uxtb	r0, r1
 80054d0:	280e      	cmp	r0, #14
 80054d2:	d93a      	bls.n	800554a <_scanf_float+0xd6>
 80054d4:	f1b9 0f00 	cmp.w	r9, #0
 80054d8:	d003      	beq.n	80054e2 <_scanf_float+0x6e>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054e6:	f1ba 0f01 	cmp.w	sl, #1
 80054ea:	f200 8113 	bhi.w	8005714 <_scanf_float+0x2a0>
 80054ee:	455e      	cmp	r6, fp
 80054f0:	f200 8105 	bhi.w	80056fe <_scanf_float+0x28a>
 80054f4:	2501      	movs	r5, #1
 80054f6:	4628      	mov	r0, r5
 80054f8:	b007      	add	sp, #28
 80054fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005502:	2a0d      	cmp	r2, #13
 8005504:	d8e6      	bhi.n	80054d4 <_scanf_float+0x60>
 8005506:	a101      	add	r1, pc, #4	; (adr r1, 800550c <_scanf_float+0x98>)
 8005508:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800550c:	0800564b 	.word	0x0800564b
 8005510:	080054d5 	.word	0x080054d5
 8005514:	080054d5 	.word	0x080054d5
 8005518:	080054d5 	.word	0x080054d5
 800551c:	080056ab 	.word	0x080056ab
 8005520:	08005683 	.word	0x08005683
 8005524:	080054d5 	.word	0x080054d5
 8005528:	080054d5 	.word	0x080054d5
 800552c:	08005659 	.word	0x08005659
 8005530:	080054d5 	.word	0x080054d5
 8005534:	080054d5 	.word	0x080054d5
 8005538:	080054d5 	.word	0x080054d5
 800553c:	080054d5 	.word	0x080054d5
 8005540:	08005611 	.word	0x08005611
 8005544:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005548:	e7db      	b.n	8005502 <_scanf_float+0x8e>
 800554a:	290e      	cmp	r1, #14
 800554c:	d8c2      	bhi.n	80054d4 <_scanf_float+0x60>
 800554e:	a001      	add	r0, pc, #4	; (adr r0, 8005554 <_scanf_float+0xe0>)
 8005550:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005554:	08005603 	.word	0x08005603
 8005558:	080054d5 	.word	0x080054d5
 800555c:	08005603 	.word	0x08005603
 8005560:	08005697 	.word	0x08005697
 8005564:	080054d5 	.word	0x080054d5
 8005568:	080055b1 	.word	0x080055b1
 800556c:	080055ed 	.word	0x080055ed
 8005570:	080055ed 	.word	0x080055ed
 8005574:	080055ed 	.word	0x080055ed
 8005578:	080055ed 	.word	0x080055ed
 800557c:	080055ed 	.word	0x080055ed
 8005580:	080055ed 	.word	0x080055ed
 8005584:	080055ed 	.word	0x080055ed
 8005588:	080055ed 	.word	0x080055ed
 800558c:	080055ed 	.word	0x080055ed
 8005590:	2b6e      	cmp	r3, #110	; 0x6e
 8005592:	d809      	bhi.n	80055a8 <_scanf_float+0x134>
 8005594:	2b60      	cmp	r3, #96	; 0x60
 8005596:	d8b2      	bhi.n	80054fe <_scanf_float+0x8a>
 8005598:	2b54      	cmp	r3, #84	; 0x54
 800559a:	d077      	beq.n	800568c <_scanf_float+0x218>
 800559c:	2b59      	cmp	r3, #89	; 0x59
 800559e:	d199      	bne.n	80054d4 <_scanf_float+0x60>
 80055a0:	2d07      	cmp	r5, #7
 80055a2:	d197      	bne.n	80054d4 <_scanf_float+0x60>
 80055a4:	2508      	movs	r5, #8
 80055a6:	e029      	b.n	80055fc <_scanf_float+0x188>
 80055a8:	2b74      	cmp	r3, #116	; 0x74
 80055aa:	d06f      	beq.n	800568c <_scanf_float+0x218>
 80055ac:	2b79      	cmp	r3, #121	; 0x79
 80055ae:	e7f6      	b.n	800559e <_scanf_float+0x12a>
 80055b0:	6821      	ldr	r1, [r4, #0]
 80055b2:	05c8      	lsls	r0, r1, #23
 80055b4:	d51a      	bpl.n	80055ec <_scanf_float+0x178>
 80055b6:	9b02      	ldr	r3, [sp, #8]
 80055b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80055bc:	6021      	str	r1, [r4, #0]
 80055be:	f109 0901 	add.w	r9, r9, #1
 80055c2:	b11b      	cbz	r3, 80055cc <_scanf_float+0x158>
 80055c4:	3b01      	subs	r3, #1
 80055c6:	3201      	adds	r2, #1
 80055c8:	9302      	str	r3, [sp, #8]
 80055ca:	60a2      	str	r2, [r4, #8]
 80055cc:	68a3      	ldr	r3, [r4, #8]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	60a3      	str	r3, [r4, #8]
 80055d2:	6923      	ldr	r3, [r4, #16]
 80055d4:	3301      	adds	r3, #1
 80055d6:	6123      	str	r3, [r4, #16]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3b01      	subs	r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	607b      	str	r3, [r7, #4]
 80055e0:	f340 8084 	ble.w	80056ec <_scanf_float+0x278>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	3301      	adds	r3, #1
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	e766      	b.n	80054ba <_scanf_float+0x46>
 80055ec:	eb1a 0f05 	cmn.w	sl, r5
 80055f0:	f47f af70 	bne.w	80054d4 <_scanf_float+0x60>
 80055f4:	6822      	ldr	r2, [r4, #0]
 80055f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80055fa:	6022      	str	r2, [r4, #0]
 80055fc:	f806 3b01 	strb.w	r3, [r6], #1
 8005600:	e7e4      	b.n	80055cc <_scanf_float+0x158>
 8005602:	6822      	ldr	r2, [r4, #0]
 8005604:	0610      	lsls	r0, r2, #24
 8005606:	f57f af65 	bpl.w	80054d4 <_scanf_float+0x60>
 800560a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800560e:	e7f4      	b.n	80055fa <_scanf_float+0x186>
 8005610:	f1ba 0f00 	cmp.w	sl, #0
 8005614:	d10e      	bne.n	8005634 <_scanf_float+0x1c0>
 8005616:	f1b9 0f00 	cmp.w	r9, #0
 800561a:	d10e      	bne.n	800563a <_scanf_float+0x1c6>
 800561c:	6822      	ldr	r2, [r4, #0]
 800561e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005622:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005626:	d108      	bne.n	800563a <_scanf_float+0x1c6>
 8005628:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800562c:	6022      	str	r2, [r4, #0]
 800562e:	f04f 0a01 	mov.w	sl, #1
 8005632:	e7e3      	b.n	80055fc <_scanf_float+0x188>
 8005634:	f1ba 0f02 	cmp.w	sl, #2
 8005638:	d055      	beq.n	80056e6 <_scanf_float+0x272>
 800563a:	2d01      	cmp	r5, #1
 800563c:	d002      	beq.n	8005644 <_scanf_float+0x1d0>
 800563e:	2d04      	cmp	r5, #4
 8005640:	f47f af48 	bne.w	80054d4 <_scanf_float+0x60>
 8005644:	3501      	adds	r5, #1
 8005646:	b2ed      	uxtb	r5, r5
 8005648:	e7d8      	b.n	80055fc <_scanf_float+0x188>
 800564a:	f1ba 0f01 	cmp.w	sl, #1
 800564e:	f47f af41 	bne.w	80054d4 <_scanf_float+0x60>
 8005652:	f04f 0a02 	mov.w	sl, #2
 8005656:	e7d1      	b.n	80055fc <_scanf_float+0x188>
 8005658:	b97d      	cbnz	r5, 800567a <_scanf_float+0x206>
 800565a:	f1b9 0f00 	cmp.w	r9, #0
 800565e:	f47f af3c 	bne.w	80054da <_scanf_float+0x66>
 8005662:	6822      	ldr	r2, [r4, #0]
 8005664:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005668:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800566c:	f47f af39 	bne.w	80054e2 <_scanf_float+0x6e>
 8005670:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005674:	6022      	str	r2, [r4, #0]
 8005676:	2501      	movs	r5, #1
 8005678:	e7c0      	b.n	80055fc <_scanf_float+0x188>
 800567a:	2d03      	cmp	r5, #3
 800567c:	d0e2      	beq.n	8005644 <_scanf_float+0x1d0>
 800567e:	2d05      	cmp	r5, #5
 8005680:	e7de      	b.n	8005640 <_scanf_float+0x1cc>
 8005682:	2d02      	cmp	r5, #2
 8005684:	f47f af26 	bne.w	80054d4 <_scanf_float+0x60>
 8005688:	2503      	movs	r5, #3
 800568a:	e7b7      	b.n	80055fc <_scanf_float+0x188>
 800568c:	2d06      	cmp	r5, #6
 800568e:	f47f af21 	bne.w	80054d4 <_scanf_float+0x60>
 8005692:	2507      	movs	r5, #7
 8005694:	e7b2      	b.n	80055fc <_scanf_float+0x188>
 8005696:	6822      	ldr	r2, [r4, #0]
 8005698:	0591      	lsls	r1, r2, #22
 800569a:	f57f af1b 	bpl.w	80054d4 <_scanf_float+0x60>
 800569e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80056a2:	6022      	str	r2, [r4, #0]
 80056a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80056a8:	e7a8      	b.n	80055fc <_scanf_float+0x188>
 80056aa:	6822      	ldr	r2, [r4, #0]
 80056ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80056b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80056b4:	d006      	beq.n	80056c4 <_scanf_float+0x250>
 80056b6:	0550      	lsls	r0, r2, #21
 80056b8:	f57f af0c 	bpl.w	80054d4 <_scanf_float+0x60>
 80056bc:	f1b9 0f00 	cmp.w	r9, #0
 80056c0:	f43f af0f 	beq.w	80054e2 <_scanf_float+0x6e>
 80056c4:	0591      	lsls	r1, r2, #22
 80056c6:	bf58      	it	pl
 80056c8:	9901      	ldrpl	r1, [sp, #4]
 80056ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80056ce:	bf58      	it	pl
 80056d0:	eba9 0101 	subpl.w	r1, r9, r1
 80056d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80056d8:	bf58      	it	pl
 80056da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80056de:	6022      	str	r2, [r4, #0]
 80056e0:	f04f 0900 	mov.w	r9, #0
 80056e4:	e78a      	b.n	80055fc <_scanf_float+0x188>
 80056e6:	f04f 0a03 	mov.w	sl, #3
 80056ea:	e787      	b.n	80055fc <_scanf_float+0x188>
 80056ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80056f0:	4639      	mov	r1, r7
 80056f2:	4640      	mov	r0, r8
 80056f4:	4798      	blx	r3
 80056f6:	2800      	cmp	r0, #0
 80056f8:	f43f aedf 	beq.w	80054ba <_scanf_float+0x46>
 80056fc:	e6ea      	b.n	80054d4 <_scanf_float+0x60>
 80056fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005702:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005706:	463a      	mov	r2, r7
 8005708:	4640      	mov	r0, r8
 800570a:	4798      	blx	r3
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	3b01      	subs	r3, #1
 8005710:	6123      	str	r3, [r4, #16]
 8005712:	e6ec      	b.n	80054ee <_scanf_float+0x7a>
 8005714:	1e6b      	subs	r3, r5, #1
 8005716:	2b06      	cmp	r3, #6
 8005718:	d825      	bhi.n	8005766 <_scanf_float+0x2f2>
 800571a:	2d02      	cmp	r5, #2
 800571c:	d836      	bhi.n	800578c <_scanf_float+0x318>
 800571e:	455e      	cmp	r6, fp
 8005720:	f67f aee8 	bls.w	80054f4 <_scanf_float+0x80>
 8005724:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005728:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800572c:	463a      	mov	r2, r7
 800572e:	4640      	mov	r0, r8
 8005730:	4798      	blx	r3
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	3b01      	subs	r3, #1
 8005736:	6123      	str	r3, [r4, #16]
 8005738:	e7f1      	b.n	800571e <_scanf_float+0x2aa>
 800573a:	9802      	ldr	r0, [sp, #8]
 800573c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005740:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005744:	9002      	str	r0, [sp, #8]
 8005746:	463a      	mov	r2, r7
 8005748:	4640      	mov	r0, r8
 800574a:	4798      	blx	r3
 800574c:	6923      	ldr	r3, [r4, #16]
 800574e:	3b01      	subs	r3, #1
 8005750:	6123      	str	r3, [r4, #16]
 8005752:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005756:	fa5f fa8a 	uxtb.w	sl, sl
 800575a:	f1ba 0f02 	cmp.w	sl, #2
 800575e:	d1ec      	bne.n	800573a <_scanf_float+0x2c6>
 8005760:	3d03      	subs	r5, #3
 8005762:	b2ed      	uxtb	r5, r5
 8005764:	1b76      	subs	r6, r6, r5
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	05da      	lsls	r2, r3, #23
 800576a:	d52f      	bpl.n	80057cc <_scanf_float+0x358>
 800576c:	055b      	lsls	r3, r3, #21
 800576e:	d510      	bpl.n	8005792 <_scanf_float+0x31e>
 8005770:	455e      	cmp	r6, fp
 8005772:	f67f aebf 	bls.w	80054f4 <_scanf_float+0x80>
 8005776:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800577a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800577e:	463a      	mov	r2, r7
 8005780:	4640      	mov	r0, r8
 8005782:	4798      	blx	r3
 8005784:	6923      	ldr	r3, [r4, #16]
 8005786:	3b01      	subs	r3, #1
 8005788:	6123      	str	r3, [r4, #16]
 800578a:	e7f1      	b.n	8005770 <_scanf_float+0x2fc>
 800578c:	46aa      	mov	sl, r5
 800578e:	9602      	str	r6, [sp, #8]
 8005790:	e7df      	b.n	8005752 <_scanf_float+0x2de>
 8005792:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005796:	6923      	ldr	r3, [r4, #16]
 8005798:	2965      	cmp	r1, #101	; 0x65
 800579a:	f103 33ff 	add.w	r3, r3, #4294967295
 800579e:	f106 35ff 	add.w	r5, r6, #4294967295
 80057a2:	6123      	str	r3, [r4, #16]
 80057a4:	d00c      	beq.n	80057c0 <_scanf_float+0x34c>
 80057a6:	2945      	cmp	r1, #69	; 0x45
 80057a8:	d00a      	beq.n	80057c0 <_scanf_float+0x34c>
 80057aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057ae:	463a      	mov	r2, r7
 80057b0:	4640      	mov	r0, r8
 80057b2:	4798      	blx	r3
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	1eb5      	subs	r5, r6, #2
 80057be:	6123      	str	r3, [r4, #16]
 80057c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057c4:	463a      	mov	r2, r7
 80057c6:	4640      	mov	r0, r8
 80057c8:	4798      	blx	r3
 80057ca:	462e      	mov	r6, r5
 80057cc:	6825      	ldr	r5, [r4, #0]
 80057ce:	f015 0510 	ands.w	r5, r5, #16
 80057d2:	d158      	bne.n	8005886 <_scanf_float+0x412>
 80057d4:	7035      	strb	r5, [r6, #0]
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e0:	d11c      	bne.n	800581c <_scanf_float+0x3a8>
 80057e2:	9b01      	ldr	r3, [sp, #4]
 80057e4:	454b      	cmp	r3, r9
 80057e6:	eba3 0209 	sub.w	r2, r3, r9
 80057ea:	d124      	bne.n	8005836 <_scanf_float+0x3c2>
 80057ec:	2200      	movs	r2, #0
 80057ee:	4659      	mov	r1, fp
 80057f0:	4640      	mov	r0, r8
 80057f2:	f002 fc31 	bl	8008058 <_strtod_r>
 80057f6:	9b03      	ldr	r3, [sp, #12]
 80057f8:	6821      	ldr	r1, [r4, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f011 0f02 	tst.w	r1, #2
 8005800:	ec57 6b10 	vmov	r6, r7, d0
 8005804:	f103 0204 	add.w	r2, r3, #4
 8005808:	d020      	beq.n	800584c <_scanf_float+0x3d8>
 800580a:	9903      	ldr	r1, [sp, #12]
 800580c:	600a      	str	r2, [r1, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	e9c3 6700 	strd	r6, r7, [r3]
 8005814:	68e3      	ldr	r3, [r4, #12]
 8005816:	3301      	adds	r3, #1
 8005818:	60e3      	str	r3, [r4, #12]
 800581a:	e66c      	b.n	80054f6 <_scanf_float+0x82>
 800581c:	9b04      	ldr	r3, [sp, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0e4      	beq.n	80057ec <_scanf_float+0x378>
 8005822:	9905      	ldr	r1, [sp, #20]
 8005824:	230a      	movs	r3, #10
 8005826:	462a      	mov	r2, r5
 8005828:	3101      	adds	r1, #1
 800582a:	4640      	mov	r0, r8
 800582c:	f002 fc9c 	bl	8008168 <_strtol_r>
 8005830:	9b04      	ldr	r3, [sp, #16]
 8005832:	9e05      	ldr	r6, [sp, #20]
 8005834:	1ac2      	subs	r2, r0, r3
 8005836:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800583a:	429e      	cmp	r6, r3
 800583c:	bf28      	it	cs
 800583e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005842:	4912      	ldr	r1, [pc, #72]	; (800588c <_scanf_float+0x418>)
 8005844:	4630      	mov	r0, r6
 8005846:	f000 f8e7 	bl	8005a18 <siprintf>
 800584a:	e7cf      	b.n	80057ec <_scanf_float+0x378>
 800584c:	f011 0f04 	tst.w	r1, #4
 8005850:	9903      	ldr	r1, [sp, #12]
 8005852:	600a      	str	r2, [r1, #0]
 8005854:	d1db      	bne.n	800580e <_scanf_float+0x39a>
 8005856:	f8d3 8000 	ldr.w	r8, [r3]
 800585a:	ee10 2a10 	vmov	r2, s0
 800585e:	ee10 0a10 	vmov	r0, s0
 8005862:	463b      	mov	r3, r7
 8005864:	4639      	mov	r1, r7
 8005866:	f7fb f969 	bl	8000b3c <__aeabi_dcmpun>
 800586a:	b128      	cbz	r0, 8005878 <_scanf_float+0x404>
 800586c:	4808      	ldr	r0, [pc, #32]	; (8005890 <_scanf_float+0x41c>)
 800586e:	f000 f9b7 	bl	8005be0 <nanf>
 8005872:	ed88 0a00 	vstr	s0, [r8]
 8005876:	e7cd      	b.n	8005814 <_scanf_float+0x3a0>
 8005878:	4630      	mov	r0, r6
 800587a:	4639      	mov	r1, r7
 800587c:	f7fb f9bc 	bl	8000bf8 <__aeabi_d2f>
 8005880:	f8c8 0000 	str.w	r0, [r8]
 8005884:	e7c6      	b.n	8005814 <_scanf_float+0x3a0>
 8005886:	2500      	movs	r5, #0
 8005888:	e635      	b.n	80054f6 <_scanf_float+0x82>
 800588a:	bf00      	nop
 800588c:	080094dc 	.word	0x080094dc
 8005890:	0800986d 	.word	0x0800986d

08005894 <std>:
 8005894:	2300      	movs	r3, #0
 8005896:	b510      	push	{r4, lr}
 8005898:	4604      	mov	r4, r0
 800589a:	e9c0 3300 	strd	r3, r3, [r0]
 800589e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058a2:	6083      	str	r3, [r0, #8]
 80058a4:	8181      	strh	r1, [r0, #12]
 80058a6:	6643      	str	r3, [r0, #100]	; 0x64
 80058a8:	81c2      	strh	r2, [r0, #14]
 80058aa:	6183      	str	r3, [r0, #24]
 80058ac:	4619      	mov	r1, r3
 80058ae:	2208      	movs	r2, #8
 80058b0:	305c      	adds	r0, #92	; 0x5c
 80058b2:	f000 f914 	bl	8005ade <memset>
 80058b6:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <std+0x58>)
 80058b8:	6263      	str	r3, [r4, #36]	; 0x24
 80058ba:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <std+0x5c>)
 80058bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80058be:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <std+0x60>)
 80058c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058c2:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <std+0x64>)
 80058c4:	6323      	str	r3, [r4, #48]	; 0x30
 80058c6:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <std+0x68>)
 80058c8:	6224      	str	r4, [r4, #32]
 80058ca:	429c      	cmp	r4, r3
 80058cc:	d006      	beq.n	80058dc <std+0x48>
 80058ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80058d2:	4294      	cmp	r4, r2
 80058d4:	d002      	beq.n	80058dc <std+0x48>
 80058d6:	33d0      	adds	r3, #208	; 0xd0
 80058d8:	429c      	cmp	r4, r3
 80058da:	d105      	bne.n	80058e8 <std+0x54>
 80058dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e4:	f000 b978 	b.w	8005bd8 <__retarget_lock_init_recursive>
 80058e8:	bd10      	pop	{r4, pc}
 80058ea:	bf00      	nop
 80058ec:	08005a59 	.word	0x08005a59
 80058f0:	08005a7b 	.word	0x08005a7b
 80058f4:	08005ab3 	.word	0x08005ab3
 80058f8:	08005ad7 	.word	0x08005ad7
 80058fc:	200002d4 	.word	0x200002d4

08005900 <stdio_exit_handler>:
 8005900:	4a02      	ldr	r2, [pc, #8]	; (800590c <stdio_exit_handler+0xc>)
 8005902:	4903      	ldr	r1, [pc, #12]	; (8005910 <stdio_exit_handler+0x10>)
 8005904:	4803      	ldr	r0, [pc, #12]	; (8005914 <stdio_exit_handler+0x14>)
 8005906:	f000 b869 	b.w	80059dc <_fwalk_sglue>
 800590a:	bf00      	nop
 800590c:	2000000c 	.word	0x2000000c
 8005910:	08008529 	.word	0x08008529
 8005914:	20000018 	.word	0x20000018

08005918 <cleanup_stdio>:
 8005918:	6841      	ldr	r1, [r0, #4]
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <cleanup_stdio+0x34>)
 800591c:	4299      	cmp	r1, r3
 800591e:	b510      	push	{r4, lr}
 8005920:	4604      	mov	r4, r0
 8005922:	d001      	beq.n	8005928 <cleanup_stdio+0x10>
 8005924:	f002 fe00 	bl	8008528 <_fflush_r>
 8005928:	68a1      	ldr	r1, [r4, #8]
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <cleanup_stdio+0x38>)
 800592c:	4299      	cmp	r1, r3
 800592e:	d002      	beq.n	8005936 <cleanup_stdio+0x1e>
 8005930:	4620      	mov	r0, r4
 8005932:	f002 fdf9 	bl	8008528 <_fflush_r>
 8005936:	68e1      	ldr	r1, [r4, #12]
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <cleanup_stdio+0x3c>)
 800593a:	4299      	cmp	r1, r3
 800593c:	d004      	beq.n	8005948 <cleanup_stdio+0x30>
 800593e:	4620      	mov	r0, r4
 8005940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005944:	f002 bdf0 	b.w	8008528 <_fflush_r>
 8005948:	bd10      	pop	{r4, pc}
 800594a:	bf00      	nop
 800594c:	200002d4 	.word	0x200002d4
 8005950:	2000033c 	.word	0x2000033c
 8005954:	200003a4 	.word	0x200003a4

08005958 <global_stdio_init.part.0>:
 8005958:	b510      	push	{r4, lr}
 800595a:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <global_stdio_init.part.0+0x30>)
 800595c:	4c0b      	ldr	r4, [pc, #44]	; (800598c <global_stdio_init.part.0+0x34>)
 800595e:	4a0c      	ldr	r2, [pc, #48]	; (8005990 <global_stdio_init.part.0+0x38>)
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	4620      	mov	r0, r4
 8005964:	2200      	movs	r2, #0
 8005966:	2104      	movs	r1, #4
 8005968:	f7ff ff94 	bl	8005894 <std>
 800596c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005970:	2201      	movs	r2, #1
 8005972:	2109      	movs	r1, #9
 8005974:	f7ff ff8e 	bl	8005894 <std>
 8005978:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800597c:	2202      	movs	r2, #2
 800597e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005982:	2112      	movs	r1, #18
 8005984:	f7ff bf86 	b.w	8005894 <std>
 8005988:	2000040c 	.word	0x2000040c
 800598c:	200002d4 	.word	0x200002d4
 8005990:	08005901 	.word	0x08005901

08005994 <__sfp_lock_acquire>:
 8005994:	4801      	ldr	r0, [pc, #4]	; (800599c <__sfp_lock_acquire+0x8>)
 8005996:	f000 b920 	b.w	8005bda <__retarget_lock_acquire_recursive>
 800599a:	bf00      	nop
 800599c:	20000415 	.word	0x20000415

080059a0 <__sfp_lock_release>:
 80059a0:	4801      	ldr	r0, [pc, #4]	; (80059a8 <__sfp_lock_release+0x8>)
 80059a2:	f000 b91b 	b.w	8005bdc <__retarget_lock_release_recursive>
 80059a6:	bf00      	nop
 80059a8:	20000415 	.word	0x20000415

080059ac <__sinit>:
 80059ac:	b510      	push	{r4, lr}
 80059ae:	4604      	mov	r4, r0
 80059b0:	f7ff fff0 	bl	8005994 <__sfp_lock_acquire>
 80059b4:	6a23      	ldr	r3, [r4, #32]
 80059b6:	b11b      	cbz	r3, 80059c0 <__sinit+0x14>
 80059b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059bc:	f7ff bff0 	b.w	80059a0 <__sfp_lock_release>
 80059c0:	4b04      	ldr	r3, [pc, #16]	; (80059d4 <__sinit+0x28>)
 80059c2:	6223      	str	r3, [r4, #32]
 80059c4:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <__sinit+0x2c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1f5      	bne.n	80059b8 <__sinit+0xc>
 80059cc:	f7ff ffc4 	bl	8005958 <global_stdio_init.part.0>
 80059d0:	e7f2      	b.n	80059b8 <__sinit+0xc>
 80059d2:	bf00      	nop
 80059d4:	08005919 	.word	0x08005919
 80059d8:	2000040c 	.word	0x2000040c

080059dc <_fwalk_sglue>:
 80059dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e0:	4607      	mov	r7, r0
 80059e2:	4688      	mov	r8, r1
 80059e4:	4614      	mov	r4, r2
 80059e6:	2600      	movs	r6, #0
 80059e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059ec:	f1b9 0901 	subs.w	r9, r9, #1
 80059f0:	d505      	bpl.n	80059fe <_fwalk_sglue+0x22>
 80059f2:	6824      	ldr	r4, [r4, #0]
 80059f4:	2c00      	cmp	r4, #0
 80059f6:	d1f7      	bne.n	80059e8 <_fwalk_sglue+0xc>
 80059f8:	4630      	mov	r0, r6
 80059fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059fe:	89ab      	ldrh	r3, [r5, #12]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d907      	bls.n	8005a14 <_fwalk_sglue+0x38>
 8005a04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	d003      	beq.n	8005a14 <_fwalk_sglue+0x38>
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	4638      	mov	r0, r7
 8005a10:	47c0      	blx	r8
 8005a12:	4306      	orrs	r6, r0
 8005a14:	3568      	adds	r5, #104	; 0x68
 8005a16:	e7e9      	b.n	80059ec <_fwalk_sglue+0x10>

08005a18 <siprintf>:
 8005a18:	b40e      	push	{r1, r2, r3}
 8005a1a:	b500      	push	{lr}
 8005a1c:	b09c      	sub	sp, #112	; 0x70
 8005a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8005a20:	9002      	str	r0, [sp, #8]
 8005a22:	9006      	str	r0, [sp, #24]
 8005a24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a28:	4809      	ldr	r0, [pc, #36]	; (8005a50 <siprintf+0x38>)
 8005a2a:	9107      	str	r1, [sp, #28]
 8005a2c:	9104      	str	r1, [sp, #16]
 8005a2e:	4909      	ldr	r1, [pc, #36]	; (8005a54 <siprintf+0x3c>)
 8005a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a34:	9105      	str	r1, [sp, #20]
 8005a36:	6800      	ldr	r0, [r0, #0]
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	a902      	add	r1, sp, #8
 8005a3c:	f002 fbf0 	bl	8008220 <_svfiprintf_r>
 8005a40:	9b02      	ldr	r3, [sp, #8]
 8005a42:	2200      	movs	r2, #0
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	b01c      	add	sp, #112	; 0x70
 8005a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a4c:	b003      	add	sp, #12
 8005a4e:	4770      	bx	lr
 8005a50:	20000064 	.word	0x20000064
 8005a54:	ffff0208 	.word	0xffff0208

08005a58 <__sread>:
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a60:	f000 f86c 	bl	8005b3c <_read_r>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	bfab      	itete	ge
 8005a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a6c:	181b      	addge	r3, r3, r0
 8005a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a72:	bfac      	ite	ge
 8005a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a76:	81a3      	strhlt	r3, [r4, #12]
 8005a78:	bd10      	pop	{r4, pc}

08005a7a <__swrite>:
 8005a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7e:	461f      	mov	r7, r3
 8005a80:	898b      	ldrh	r3, [r1, #12]
 8005a82:	05db      	lsls	r3, r3, #23
 8005a84:	4605      	mov	r5, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	4616      	mov	r6, r2
 8005a8a:	d505      	bpl.n	8005a98 <__swrite+0x1e>
 8005a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a90:	2302      	movs	r3, #2
 8005a92:	2200      	movs	r2, #0
 8005a94:	f000 f840 	bl	8005b18 <_lseek_r>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	4632      	mov	r2, r6
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aae:	f000 b857 	b.w	8005b60 <_write_r>

08005ab2 <__sseek>:
 8005ab2:	b510      	push	{r4, lr}
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aba:	f000 f82d 	bl	8005b18 <_lseek_r>
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	bf15      	itete	ne
 8005ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ace:	81a3      	strheq	r3, [r4, #12]
 8005ad0:	bf18      	it	ne
 8005ad2:	81a3      	strhne	r3, [r4, #12]
 8005ad4:	bd10      	pop	{r4, pc}

08005ad6 <__sclose>:
 8005ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ada:	f000 b80d 	b.w	8005af8 <_close_r>

08005ade <memset>:
 8005ade:	4402      	add	r2, r0
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d100      	bne.n	8005ae8 <memset+0xa>
 8005ae6:	4770      	bx	lr
 8005ae8:	f803 1b01 	strb.w	r1, [r3], #1
 8005aec:	e7f9      	b.n	8005ae2 <memset+0x4>
	...

08005af0 <_localeconv_r>:
 8005af0:	4800      	ldr	r0, [pc, #0]	; (8005af4 <_localeconv_r+0x4>)
 8005af2:	4770      	bx	lr
 8005af4:	20000158 	.word	0x20000158

08005af8 <_close_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	4d06      	ldr	r5, [pc, #24]	; (8005b14 <_close_r+0x1c>)
 8005afc:	2300      	movs	r3, #0
 8005afe:	4604      	mov	r4, r0
 8005b00:	4608      	mov	r0, r1
 8005b02:	602b      	str	r3, [r5, #0]
 8005b04:	f7fc f926 	bl	8001d54 <_close>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d102      	bne.n	8005b12 <_close_r+0x1a>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	b103      	cbz	r3, 8005b12 <_close_r+0x1a>
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	bd38      	pop	{r3, r4, r5, pc}
 8005b14:	20000410 	.word	0x20000410

08005b18 <_lseek_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	4d07      	ldr	r5, [pc, #28]	; (8005b38 <_lseek_r+0x20>)
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	4608      	mov	r0, r1
 8005b20:	4611      	mov	r1, r2
 8005b22:	2200      	movs	r2, #0
 8005b24:	602a      	str	r2, [r5, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	f7fc f93b 	bl	8001da2 <_lseek>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d102      	bne.n	8005b36 <_lseek_r+0x1e>
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	b103      	cbz	r3, 8005b36 <_lseek_r+0x1e>
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	20000410 	.word	0x20000410

08005b3c <_read_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4d07      	ldr	r5, [pc, #28]	; (8005b5c <_read_r+0x20>)
 8005b40:	4604      	mov	r4, r0
 8005b42:	4608      	mov	r0, r1
 8005b44:	4611      	mov	r1, r2
 8005b46:	2200      	movs	r2, #0
 8005b48:	602a      	str	r2, [r5, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f7fc f8c9 	bl	8001ce2 <_read>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_read_r+0x1e>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_read_r+0x1e>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	20000410 	.word	0x20000410

08005b60 <_write_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4d07      	ldr	r5, [pc, #28]	; (8005b80 <_write_r+0x20>)
 8005b64:	4604      	mov	r4, r0
 8005b66:	4608      	mov	r0, r1
 8005b68:	4611      	mov	r1, r2
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	602a      	str	r2, [r5, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f7fc f8d4 	bl	8001d1c <_write>
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	d102      	bne.n	8005b7e <_write_r+0x1e>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	b103      	cbz	r3, 8005b7e <_write_r+0x1e>
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	bd38      	pop	{r3, r4, r5, pc}
 8005b80:	20000410 	.word	0x20000410

08005b84 <__errno>:
 8005b84:	4b01      	ldr	r3, [pc, #4]	; (8005b8c <__errno+0x8>)
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	20000064 	.word	0x20000064

08005b90 <__libc_init_array>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	4d0d      	ldr	r5, [pc, #52]	; (8005bc8 <__libc_init_array+0x38>)
 8005b94:	4c0d      	ldr	r4, [pc, #52]	; (8005bcc <__libc_init_array+0x3c>)
 8005b96:	1b64      	subs	r4, r4, r5
 8005b98:	10a4      	asrs	r4, r4, #2
 8005b9a:	2600      	movs	r6, #0
 8005b9c:	42a6      	cmp	r6, r4
 8005b9e:	d109      	bne.n	8005bb4 <__libc_init_array+0x24>
 8005ba0:	4d0b      	ldr	r5, [pc, #44]	; (8005bd0 <__libc_init_array+0x40>)
 8005ba2:	4c0c      	ldr	r4, [pc, #48]	; (8005bd4 <__libc_init_array+0x44>)
 8005ba4:	f003 fbd8 	bl	8009358 <_init>
 8005ba8:	1b64      	subs	r4, r4, r5
 8005baa:	10a4      	asrs	r4, r4, #2
 8005bac:	2600      	movs	r6, #0
 8005bae:	42a6      	cmp	r6, r4
 8005bb0:	d105      	bne.n	8005bbe <__libc_init_array+0x2e>
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb8:	4798      	blx	r3
 8005bba:	3601      	adds	r6, #1
 8005bbc:	e7ee      	b.n	8005b9c <__libc_init_array+0xc>
 8005bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc2:	4798      	blx	r3
 8005bc4:	3601      	adds	r6, #1
 8005bc6:	e7f2      	b.n	8005bae <__libc_init_array+0x1e>
 8005bc8:	080098d8 	.word	0x080098d8
 8005bcc:	080098d8 	.word	0x080098d8
 8005bd0:	080098d8 	.word	0x080098d8
 8005bd4:	080098dc 	.word	0x080098dc

08005bd8 <__retarget_lock_init_recursive>:
 8005bd8:	4770      	bx	lr

08005bda <__retarget_lock_acquire_recursive>:
 8005bda:	4770      	bx	lr

08005bdc <__retarget_lock_release_recursive>:
 8005bdc:	4770      	bx	lr
	...

08005be0 <nanf>:
 8005be0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005be8 <nanf+0x8>
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	7fc00000 	.word	0x7fc00000

08005bec <quorem>:
 8005bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	6903      	ldr	r3, [r0, #16]
 8005bf2:	690c      	ldr	r4, [r1, #16]
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	4607      	mov	r7, r0
 8005bf8:	db7e      	blt.n	8005cf8 <quorem+0x10c>
 8005bfa:	3c01      	subs	r4, #1
 8005bfc:	f101 0814 	add.w	r8, r1, #20
 8005c00:	f100 0514 	add.w	r5, r0, #20
 8005c04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c12:	3301      	adds	r3, #1
 8005c14:	429a      	cmp	r2, r3
 8005c16:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c1a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c1e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c22:	d331      	bcc.n	8005c88 <quorem+0x9c>
 8005c24:	f04f 0e00 	mov.w	lr, #0
 8005c28:	4640      	mov	r0, r8
 8005c2a:	46ac      	mov	ip, r5
 8005c2c:	46f2      	mov	sl, lr
 8005c2e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c32:	b293      	uxth	r3, r2
 8005c34:	fb06 e303 	mla	r3, r6, r3, lr
 8005c38:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c3c:	0c1a      	lsrs	r2, r3, #16
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	ebaa 0303 	sub.w	r3, sl, r3
 8005c44:	f8dc a000 	ldr.w	sl, [ip]
 8005c48:	fa13 f38a 	uxtah	r3, r3, sl
 8005c4c:	fb06 220e 	mla	r2, r6, lr, r2
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	9b00      	ldr	r3, [sp, #0]
 8005c54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c58:	b292      	uxth	r2, r2
 8005c5a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c62:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c66:	4581      	cmp	r9, r0
 8005c68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c6c:	f84c 3b04 	str.w	r3, [ip], #4
 8005c70:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c74:	d2db      	bcs.n	8005c2e <quorem+0x42>
 8005c76:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c7a:	b92b      	cbnz	r3, 8005c88 <quorem+0x9c>
 8005c7c:	9b01      	ldr	r3, [sp, #4]
 8005c7e:	3b04      	subs	r3, #4
 8005c80:	429d      	cmp	r5, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	d32c      	bcc.n	8005ce0 <quorem+0xf4>
 8005c86:	613c      	str	r4, [r7, #16]
 8005c88:	4638      	mov	r0, r7
 8005c8a:	f001 f9f1 	bl	8007070 <__mcmp>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	db22      	blt.n	8005cd8 <quorem+0xec>
 8005c92:	3601      	adds	r6, #1
 8005c94:	4629      	mov	r1, r5
 8005c96:	2000      	movs	r0, #0
 8005c98:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c9c:	f8d1 c000 	ldr.w	ip, [r1]
 8005ca0:	b293      	uxth	r3, r2
 8005ca2:	1ac3      	subs	r3, r0, r3
 8005ca4:	0c12      	lsrs	r2, r2, #16
 8005ca6:	fa13 f38c 	uxtah	r3, r3, ip
 8005caa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005cae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cb8:	45c1      	cmp	r9, r8
 8005cba:	f841 3b04 	str.w	r3, [r1], #4
 8005cbe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005cc2:	d2e9      	bcs.n	8005c98 <quorem+0xac>
 8005cc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ccc:	b922      	cbnz	r2, 8005cd8 <quorem+0xec>
 8005cce:	3b04      	subs	r3, #4
 8005cd0:	429d      	cmp	r5, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	d30a      	bcc.n	8005cec <quorem+0x100>
 8005cd6:	613c      	str	r4, [r7, #16]
 8005cd8:	4630      	mov	r0, r6
 8005cda:	b003      	add	sp, #12
 8005cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce0:	6812      	ldr	r2, [r2, #0]
 8005ce2:	3b04      	subs	r3, #4
 8005ce4:	2a00      	cmp	r2, #0
 8005ce6:	d1ce      	bne.n	8005c86 <quorem+0x9a>
 8005ce8:	3c01      	subs	r4, #1
 8005cea:	e7c9      	b.n	8005c80 <quorem+0x94>
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	3b04      	subs	r3, #4
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	d1f0      	bne.n	8005cd6 <quorem+0xea>
 8005cf4:	3c01      	subs	r4, #1
 8005cf6:	e7eb      	b.n	8005cd0 <quorem+0xe4>
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	e7ee      	b.n	8005cda <quorem+0xee>
 8005cfc:	0000      	movs	r0, r0
	...

08005d00 <_dtoa_r>:
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	ed2d 8b04 	vpush	{d8-d9}
 8005d08:	69c5      	ldr	r5, [r0, #28]
 8005d0a:	b093      	sub	sp, #76	; 0x4c
 8005d0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005d10:	ec57 6b10 	vmov	r6, r7, d0
 8005d14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d18:	9107      	str	r1, [sp, #28]
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	920a      	str	r2, [sp, #40]	; 0x28
 8005d1e:	930d      	str	r3, [sp, #52]	; 0x34
 8005d20:	b975      	cbnz	r5, 8005d40 <_dtoa_r+0x40>
 8005d22:	2010      	movs	r0, #16
 8005d24:	f000 fe2a 	bl	800697c <malloc>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	61e0      	str	r0, [r4, #28]
 8005d2c:	b920      	cbnz	r0, 8005d38 <_dtoa_r+0x38>
 8005d2e:	4bae      	ldr	r3, [pc, #696]	; (8005fe8 <_dtoa_r+0x2e8>)
 8005d30:	21ef      	movs	r1, #239	; 0xef
 8005d32:	48ae      	ldr	r0, [pc, #696]	; (8005fec <_dtoa_r+0x2ec>)
 8005d34:	f002 fc74 	bl	8008620 <__assert_func>
 8005d38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d3c:	6005      	str	r5, [r0, #0]
 8005d3e:	60c5      	str	r5, [r0, #12]
 8005d40:	69e3      	ldr	r3, [r4, #28]
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	b151      	cbz	r1, 8005d5c <_dtoa_r+0x5c>
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	604a      	str	r2, [r1, #4]
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	4093      	lsls	r3, r2
 8005d4e:	608b      	str	r3, [r1, #8]
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 ff07 	bl	8006b64 <_Bfree>
 8005d56:	69e3      	ldr	r3, [r4, #28]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	1e3b      	subs	r3, r7, #0
 8005d5e:	bfbb      	ittet	lt
 8005d60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d64:	9303      	strlt	r3, [sp, #12]
 8005d66:	2300      	movge	r3, #0
 8005d68:	2201      	movlt	r2, #1
 8005d6a:	bfac      	ite	ge
 8005d6c:	f8c8 3000 	strge.w	r3, [r8]
 8005d70:	f8c8 2000 	strlt.w	r2, [r8]
 8005d74:	4b9e      	ldr	r3, [pc, #632]	; (8005ff0 <_dtoa_r+0x2f0>)
 8005d76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d7a:	ea33 0308 	bics.w	r3, r3, r8
 8005d7e:	d11b      	bne.n	8005db8 <_dtoa_r+0xb8>
 8005d80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d82:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005d8c:	4333      	orrs	r3, r6
 8005d8e:	f000 8593 	beq.w	80068b8 <_dtoa_r+0xbb8>
 8005d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d94:	b963      	cbnz	r3, 8005db0 <_dtoa_r+0xb0>
 8005d96:	4b97      	ldr	r3, [pc, #604]	; (8005ff4 <_dtoa_r+0x2f4>)
 8005d98:	e027      	b.n	8005dea <_dtoa_r+0xea>
 8005d9a:	4b97      	ldr	r3, [pc, #604]	; (8005ff8 <_dtoa_r+0x2f8>)
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	3308      	adds	r3, #8
 8005da0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	9800      	ldr	r0, [sp, #0]
 8005da6:	b013      	add	sp, #76	; 0x4c
 8005da8:	ecbd 8b04 	vpop	{d8-d9}
 8005dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db0:	4b90      	ldr	r3, [pc, #576]	; (8005ff4 <_dtoa_r+0x2f4>)
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	3303      	adds	r3, #3
 8005db6:	e7f3      	b.n	8005da0 <_dtoa_r+0xa0>
 8005db8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	ec51 0b17 	vmov	r0, r1, d7
 8005dc2:	eeb0 8a47 	vmov.f32	s16, s14
 8005dc6:	eef0 8a67 	vmov.f32	s17, s15
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f7fa fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dd0:	4681      	mov	r9, r0
 8005dd2:	b160      	cbz	r0, 8005dee <_dtoa_r+0xee>
 8005dd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 8568 	beq.w	80068b2 <_dtoa_r+0xbb2>
 8005de2:	4b86      	ldr	r3, [pc, #536]	; (8005ffc <_dtoa_r+0x2fc>)
 8005de4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	e7da      	b.n	8005da4 <_dtoa_r+0xa4>
 8005dee:	aa10      	add	r2, sp, #64	; 0x40
 8005df0:	a911      	add	r1, sp, #68	; 0x44
 8005df2:	4620      	mov	r0, r4
 8005df4:	eeb0 0a48 	vmov.f32	s0, s16
 8005df8:	eef0 0a68 	vmov.f32	s1, s17
 8005dfc:	f001 fa4e 	bl	800729c <__d2b>
 8005e00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005e04:	4682      	mov	sl, r0
 8005e06:	2d00      	cmp	r5, #0
 8005e08:	d07f      	beq.n	8005f0a <_dtoa_r+0x20a>
 8005e0a:	ee18 3a90 	vmov	r3, s17
 8005e0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005e16:	ec51 0b18 	vmov	r0, r1, d8
 8005e1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005e1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005e26:	4619      	mov	r1, r3
 8005e28:	2200      	movs	r2, #0
 8005e2a:	4b75      	ldr	r3, [pc, #468]	; (8006000 <_dtoa_r+0x300>)
 8005e2c:	f7fa fa34 	bl	8000298 <__aeabi_dsub>
 8005e30:	a367      	add	r3, pc, #412	; (adr r3, 8005fd0 <_dtoa_r+0x2d0>)
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f7fa fbe7 	bl	8000608 <__aeabi_dmul>
 8005e3a:	a367      	add	r3, pc, #412	; (adr r3, 8005fd8 <_dtoa_r+0x2d8>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	f7fa fa2c 	bl	800029c <__adddf3>
 8005e44:	4606      	mov	r6, r0
 8005e46:	4628      	mov	r0, r5
 8005e48:	460f      	mov	r7, r1
 8005e4a:	f7fa fb73 	bl	8000534 <__aeabi_i2d>
 8005e4e:	a364      	add	r3, pc, #400	; (adr r3, 8005fe0 <_dtoa_r+0x2e0>)
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f7fa fbd8 	bl	8000608 <__aeabi_dmul>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	4639      	mov	r1, r7
 8005e60:	f7fa fa1c 	bl	800029c <__adddf3>
 8005e64:	4606      	mov	r6, r0
 8005e66:	460f      	mov	r7, r1
 8005e68:	f7fa fe7e 	bl	8000b68 <__aeabi_d2iz>
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	4683      	mov	fp, r0
 8005e70:	2300      	movs	r3, #0
 8005e72:	4630      	mov	r0, r6
 8005e74:	4639      	mov	r1, r7
 8005e76:	f7fa fe39 	bl	8000aec <__aeabi_dcmplt>
 8005e7a:	b148      	cbz	r0, 8005e90 <_dtoa_r+0x190>
 8005e7c:	4658      	mov	r0, fp
 8005e7e:	f7fa fb59 	bl	8000534 <__aeabi_i2d>
 8005e82:	4632      	mov	r2, r6
 8005e84:	463b      	mov	r3, r7
 8005e86:	f7fa fe27 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e8a:	b908      	cbnz	r0, 8005e90 <_dtoa_r+0x190>
 8005e8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e90:	f1bb 0f16 	cmp.w	fp, #22
 8005e94:	d857      	bhi.n	8005f46 <_dtoa_r+0x246>
 8005e96:	4b5b      	ldr	r3, [pc, #364]	; (8006004 <_dtoa_r+0x304>)
 8005e98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	ec51 0b18 	vmov	r0, r1, d8
 8005ea4:	f7fa fe22 	bl	8000aec <__aeabi_dcmplt>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d04e      	beq.n	8005f4a <_dtoa_r+0x24a>
 8005eac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	930c      	str	r3, [sp, #48]	; 0x30
 8005eb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005eb6:	1b5b      	subs	r3, r3, r5
 8005eb8:	1e5a      	subs	r2, r3, #1
 8005eba:	bf45      	ittet	mi
 8005ebc:	f1c3 0301 	rsbmi	r3, r3, #1
 8005ec0:	9305      	strmi	r3, [sp, #20]
 8005ec2:	2300      	movpl	r3, #0
 8005ec4:	2300      	movmi	r3, #0
 8005ec6:	9206      	str	r2, [sp, #24]
 8005ec8:	bf54      	ite	pl
 8005eca:	9305      	strpl	r3, [sp, #20]
 8005ecc:	9306      	strmi	r3, [sp, #24]
 8005ece:	f1bb 0f00 	cmp.w	fp, #0
 8005ed2:	db3c      	blt.n	8005f4e <_dtoa_r+0x24e>
 8005ed4:	9b06      	ldr	r3, [sp, #24]
 8005ed6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005eda:	445b      	add	r3, fp
 8005edc:	9306      	str	r3, [sp, #24]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9308      	str	r3, [sp, #32]
 8005ee2:	9b07      	ldr	r3, [sp, #28]
 8005ee4:	2b09      	cmp	r3, #9
 8005ee6:	d868      	bhi.n	8005fba <_dtoa_r+0x2ba>
 8005ee8:	2b05      	cmp	r3, #5
 8005eea:	bfc4      	itt	gt
 8005eec:	3b04      	subgt	r3, #4
 8005eee:	9307      	strgt	r3, [sp, #28]
 8005ef0:	9b07      	ldr	r3, [sp, #28]
 8005ef2:	f1a3 0302 	sub.w	r3, r3, #2
 8005ef6:	bfcc      	ite	gt
 8005ef8:	2500      	movgt	r5, #0
 8005efa:	2501      	movle	r5, #1
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	f200 8085 	bhi.w	800600c <_dtoa_r+0x30c>
 8005f02:	e8df f003 	tbb	[pc, r3]
 8005f06:	3b2e      	.short	0x3b2e
 8005f08:	5839      	.short	0x5839
 8005f0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005f0e:	441d      	add	r5, r3
 8005f10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	bfc1      	itttt	gt
 8005f18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005f20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005f24:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005f28:	bfd6      	itet	le
 8005f2a:	f1c3 0320 	rsble	r3, r3, #32
 8005f2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005f32:	fa06 f003 	lslle.w	r0, r6, r3
 8005f36:	f7fa faed 	bl	8000514 <__aeabi_ui2d>
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005f40:	3d01      	subs	r5, #1
 8005f42:	920e      	str	r2, [sp, #56]	; 0x38
 8005f44:	e76f      	b.n	8005e26 <_dtoa_r+0x126>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e7b3      	b.n	8005eb2 <_dtoa_r+0x1b2>
 8005f4a:	900c      	str	r0, [sp, #48]	; 0x30
 8005f4c:	e7b2      	b.n	8005eb4 <_dtoa_r+0x1b4>
 8005f4e:	9b05      	ldr	r3, [sp, #20]
 8005f50:	eba3 030b 	sub.w	r3, r3, fp
 8005f54:	9305      	str	r3, [sp, #20]
 8005f56:	f1cb 0300 	rsb	r3, fp, #0
 8005f5a:	9308      	str	r3, [sp, #32]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f60:	e7bf      	b.n	8005ee2 <_dtoa_r+0x1e2>
 8005f62:	2300      	movs	r3, #0
 8005f64:	9309      	str	r3, [sp, #36]	; 0x24
 8005f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	dc52      	bgt.n	8006012 <_dtoa_r+0x312>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	461a      	mov	r2, r3
 8005f74:	920a      	str	r2, [sp, #40]	; 0x28
 8005f76:	e00b      	b.n	8005f90 <_dtoa_r+0x290>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e7f3      	b.n	8005f64 <_dtoa_r+0x264>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f82:	445b      	add	r3, fp
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	3301      	adds	r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	9304      	str	r3, [sp, #16]
 8005f8c:	bfb8      	it	lt
 8005f8e:	2301      	movlt	r3, #1
 8005f90:	69e0      	ldr	r0, [r4, #28]
 8005f92:	2100      	movs	r1, #0
 8005f94:	2204      	movs	r2, #4
 8005f96:	f102 0614 	add.w	r6, r2, #20
 8005f9a:	429e      	cmp	r6, r3
 8005f9c:	d93d      	bls.n	800601a <_dtoa_r+0x31a>
 8005f9e:	6041      	str	r1, [r0, #4]
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fd9f 	bl	8006ae4 <_Balloc>
 8005fa6:	9000      	str	r0, [sp, #0]
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d139      	bne.n	8006020 <_dtoa_r+0x320>
 8005fac:	4b16      	ldr	r3, [pc, #88]	; (8006008 <_dtoa_r+0x308>)
 8005fae:	4602      	mov	r2, r0
 8005fb0:	f240 11af 	movw	r1, #431	; 0x1af
 8005fb4:	e6bd      	b.n	8005d32 <_dtoa_r+0x32>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e7e1      	b.n	8005f7e <_dtoa_r+0x27e>
 8005fba:	2501      	movs	r5, #1
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	9307      	str	r3, [sp, #28]
 8005fc0:	9509      	str	r5, [sp, #36]	; 0x24
 8005fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	9304      	str	r3, [sp, #16]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2312      	movs	r3, #18
 8005fce:	e7d1      	b.n	8005f74 <_dtoa_r+0x274>
 8005fd0:	636f4361 	.word	0x636f4361
 8005fd4:	3fd287a7 	.word	0x3fd287a7
 8005fd8:	8b60c8b3 	.word	0x8b60c8b3
 8005fdc:	3fc68a28 	.word	0x3fc68a28
 8005fe0:	509f79fb 	.word	0x509f79fb
 8005fe4:	3fd34413 	.word	0x3fd34413
 8005fe8:	080094ee 	.word	0x080094ee
 8005fec:	08009505 	.word	0x08009505
 8005ff0:	7ff00000 	.word	0x7ff00000
 8005ff4:	080094ea 	.word	0x080094ea
 8005ff8:	080094e1 	.word	0x080094e1
 8005ffc:	080094b9 	.word	0x080094b9
 8006000:	3ff80000 	.word	0x3ff80000
 8006004:	080095f0 	.word	0x080095f0
 8006008:	0800955d 	.word	0x0800955d
 800600c:	2301      	movs	r3, #1
 800600e:	9309      	str	r3, [sp, #36]	; 0x24
 8006010:	e7d7      	b.n	8005fc2 <_dtoa_r+0x2c2>
 8006012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	9304      	str	r3, [sp, #16]
 8006018:	e7ba      	b.n	8005f90 <_dtoa_r+0x290>
 800601a:	3101      	adds	r1, #1
 800601c:	0052      	lsls	r2, r2, #1
 800601e:	e7ba      	b.n	8005f96 <_dtoa_r+0x296>
 8006020:	69e3      	ldr	r3, [r4, #28]
 8006022:	9a00      	ldr	r2, [sp, #0]
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	9b04      	ldr	r3, [sp, #16]
 8006028:	2b0e      	cmp	r3, #14
 800602a:	f200 80a8 	bhi.w	800617e <_dtoa_r+0x47e>
 800602e:	2d00      	cmp	r5, #0
 8006030:	f000 80a5 	beq.w	800617e <_dtoa_r+0x47e>
 8006034:	f1bb 0f00 	cmp.w	fp, #0
 8006038:	dd38      	ble.n	80060ac <_dtoa_r+0x3ac>
 800603a:	4bc0      	ldr	r3, [pc, #768]	; (800633c <_dtoa_r+0x63c>)
 800603c:	f00b 020f 	and.w	r2, fp, #15
 8006040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006044:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006048:	e9d3 6700 	ldrd	r6, r7, [r3]
 800604c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006050:	d019      	beq.n	8006086 <_dtoa_r+0x386>
 8006052:	4bbb      	ldr	r3, [pc, #748]	; (8006340 <_dtoa_r+0x640>)
 8006054:	ec51 0b18 	vmov	r0, r1, d8
 8006058:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800605c:	f7fa fbfe 	bl	800085c <__aeabi_ddiv>
 8006060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006064:	f008 080f 	and.w	r8, r8, #15
 8006068:	2503      	movs	r5, #3
 800606a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006340 <_dtoa_r+0x640>
 800606e:	f1b8 0f00 	cmp.w	r8, #0
 8006072:	d10a      	bne.n	800608a <_dtoa_r+0x38a>
 8006074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006078:	4632      	mov	r2, r6
 800607a:	463b      	mov	r3, r7
 800607c:	f7fa fbee 	bl	800085c <__aeabi_ddiv>
 8006080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006084:	e02b      	b.n	80060de <_dtoa_r+0x3de>
 8006086:	2502      	movs	r5, #2
 8006088:	e7ef      	b.n	800606a <_dtoa_r+0x36a>
 800608a:	f018 0f01 	tst.w	r8, #1
 800608e:	d008      	beq.n	80060a2 <_dtoa_r+0x3a2>
 8006090:	4630      	mov	r0, r6
 8006092:	4639      	mov	r1, r7
 8006094:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006098:	f7fa fab6 	bl	8000608 <__aeabi_dmul>
 800609c:	3501      	adds	r5, #1
 800609e:	4606      	mov	r6, r0
 80060a0:	460f      	mov	r7, r1
 80060a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80060a6:	f109 0908 	add.w	r9, r9, #8
 80060aa:	e7e0      	b.n	800606e <_dtoa_r+0x36e>
 80060ac:	f000 809f 	beq.w	80061ee <_dtoa_r+0x4ee>
 80060b0:	f1cb 0600 	rsb	r6, fp, #0
 80060b4:	4ba1      	ldr	r3, [pc, #644]	; (800633c <_dtoa_r+0x63c>)
 80060b6:	4fa2      	ldr	r7, [pc, #648]	; (8006340 <_dtoa_r+0x640>)
 80060b8:	f006 020f 	and.w	r2, r6, #15
 80060bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	ec51 0b18 	vmov	r0, r1, d8
 80060c8:	f7fa fa9e 	bl	8000608 <__aeabi_dmul>
 80060cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060d0:	1136      	asrs	r6, r6, #4
 80060d2:	2300      	movs	r3, #0
 80060d4:	2502      	movs	r5, #2
 80060d6:	2e00      	cmp	r6, #0
 80060d8:	d17e      	bne.n	80061d8 <_dtoa_r+0x4d8>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1d0      	bne.n	8006080 <_dtoa_r+0x380>
 80060de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8084 	beq.w	80061f2 <_dtoa_r+0x4f2>
 80060ea:	4b96      	ldr	r3, [pc, #600]	; (8006344 <_dtoa_r+0x644>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	4640      	mov	r0, r8
 80060f0:	4649      	mov	r1, r9
 80060f2:	f7fa fcfb 	bl	8000aec <__aeabi_dcmplt>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d07b      	beq.n	80061f2 <_dtoa_r+0x4f2>
 80060fa:	9b04      	ldr	r3, [sp, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d078      	beq.n	80061f2 <_dtoa_r+0x4f2>
 8006100:	9b01      	ldr	r3, [sp, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	dd39      	ble.n	800617a <_dtoa_r+0x47a>
 8006106:	4b90      	ldr	r3, [pc, #576]	; (8006348 <_dtoa_r+0x648>)
 8006108:	2200      	movs	r2, #0
 800610a:	4640      	mov	r0, r8
 800610c:	4649      	mov	r1, r9
 800610e:	f7fa fa7b 	bl	8000608 <__aeabi_dmul>
 8006112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006116:	9e01      	ldr	r6, [sp, #4]
 8006118:	f10b 37ff 	add.w	r7, fp, #4294967295
 800611c:	3501      	adds	r5, #1
 800611e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006122:	4628      	mov	r0, r5
 8006124:	f7fa fa06 	bl	8000534 <__aeabi_i2d>
 8006128:	4642      	mov	r2, r8
 800612a:	464b      	mov	r3, r9
 800612c:	f7fa fa6c 	bl	8000608 <__aeabi_dmul>
 8006130:	4b86      	ldr	r3, [pc, #536]	; (800634c <_dtoa_r+0x64c>)
 8006132:	2200      	movs	r2, #0
 8006134:	f7fa f8b2 	bl	800029c <__adddf3>
 8006138:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800613c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006140:	9303      	str	r3, [sp, #12]
 8006142:	2e00      	cmp	r6, #0
 8006144:	d158      	bne.n	80061f8 <_dtoa_r+0x4f8>
 8006146:	4b82      	ldr	r3, [pc, #520]	; (8006350 <_dtoa_r+0x650>)
 8006148:	2200      	movs	r2, #0
 800614a:	4640      	mov	r0, r8
 800614c:	4649      	mov	r1, r9
 800614e:	f7fa f8a3 	bl	8000298 <__aeabi_dsub>
 8006152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006156:	4680      	mov	r8, r0
 8006158:	4689      	mov	r9, r1
 800615a:	f7fa fce5 	bl	8000b28 <__aeabi_dcmpgt>
 800615e:	2800      	cmp	r0, #0
 8006160:	f040 8296 	bne.w	8006690 <_dtoa_r+0x990>
 8006164:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006168:	4640      	mov	r0, r8
 800616a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800616e:	4649      	mov	r1, r9
 8006170:	f7fa fcbc 	bl	8000aec <__aeabi_dcmplt>
 8006174:	2800      	cmp	r0, #0
 8006176:	f040 8289 	bne.w	800668c <_dtoa_r+0x98c>
 800617a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800617e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006180:	2b00      	cmp	r3, #0
 8006182:	f2c0 814e 	blt.w	8006422 <_dtoa_r+0x722>
 8006186:	f1bb 0f0e 	cmp.w	fp, #14
 800618a:	f300 814a 	bgt.w	8006422 <_dtoa_r+0x722>
 800618e:	4b6b      	ldr	r3, [pc, #428]	; (800633c <_dtoa_r+0x63c>)
 8006190:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006194:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800619a:	2b00      	cmp	r3, #0
 800619c:	f280 80dc 	bge.w	8006358 <_dtoa_r+0x658>
 80061a0:	9b04      	ldr	r3, [sp, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f300 80d8 	bgt.w	8006358 <_dtoa_r+0x658>
 80061a8:	f040 826f 	bne.w	800668a <_dtoa_r+0x98a>
 80061ac:	4b68      	ldr	r3, [pc, #416]	; (8006350 <_dtoa_r+0x650>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	4640      	mov	r0, r8
 80061b2:	4649      	mov	r1, r9
 80061b4:	f7fa fa28 	bl	8000608 <__aeabi_dmul>
 80061b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061bc:	f7fa fcaa 	bl	8000b14 <__aeabi_dcmpge>
 80061c0:	9e04      	ldr	r6, [sp, #16]
 80061c2:	4637      	mov	r7, r6
 80061c4:	2800      	cmp	r0, #0
 80061c6:	f040 8245 	bne.w	8006654 <_dtoa_r+0x954>
 80061ca:	9d00      	ldr	r5, [sp, #0]
 80061cc:	2331      	movs	r3, #49	; 0x31
 80061ce:	f805 3b01 	strb.w	r3, [r5], #1
 80061d2:	f10b 0b01 	add.w	fp, fp, #1
 80061d6:	e241      	b.n	800665c <_dtoa_r+0x95c>
 80061d8:	07f2      	lsls	r2, r6, #31
 80061da:	d505      	bpl.n	80061e8 <_dtoa_r+0x4e8>
 80061dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e0:	f7fa fa12 	bl	8000608 <__aeabi_dmul>
 80061e4:	3501      	adds	r5, #1
 80061e6:	2301      	movs	r3, #1
 80061e8:	1076      	asrs	r6, r6, #1
 80061ea:	3708      	adds	r7, #8
 80061ec:	e773      	b.n	80060d6 <_dtoa_r+0x3d6>
 80061ee:	2502      	movs	r5, #2
 80061f0:	e775      	b.n	80060de <_dtoa_r+0x3de>
 80061f2:	9e04      	ldr	r6, [sp, #16]
 80061f4:	465f      	mov	r7, fp
 80061f6:	e792      	b.n	800611e <_dtoa_r+0x41e>
 80061f8:	9900      	ldr	r1, [sp, #0]
 80061fa:	4b50      	ldr	r3, [pc, #320]	; (800633c <_dtoa_r+0x63c>)
 80061fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006200:	4431      	add	r1, r6
 8006202:	9102      	str	r1, [sp, #8]
 8006204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006206:	eeb0 9a47 	vmov.f32	s18, s14
 800620a:	eef0 9a67 	vmov.f32	s19, s15
 800620e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006212:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006216:	2900      	cmp	r1, #0
 8006218:	d044      	beq.n	80062a4 <_dtoa_r+0x5a4>
 800621a:	494e      	ldr	r1, [pc, #312]	; (8006354 <_dtoa_r+0x654>)
 800621c:	2000      	movs	r0, #0
 800621e:	f7fa fb1d 	bl	800085c <__aeabi_ddiv>
 8006222:	ec53 2b19 	vmov	r2, r3, d9
 8006226:	f7fa f837 	bl	8000298 <__aeabi_dsub>
 800622a:	9d00      	ldr	r5, [sp, #0]
 800622c:	ec41 0b19 	vmov	d9, r0, r1
 8006230:	4649      	mov	r1, r9
 8006232:	4640      	mov	r0, r8
 8006234:	f7fa fc98 	bl	8000b68 <__aeabi_d2iz>
 8006238:	4606      	mov	r6, r0
 800623a:	f7fa f97b 	bl	8000534 <__aeabi_i2d>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4640      	mov	r0, r8
 8006244:	4649      	mov	r1, r9
 8006246:	f7fa f827 	bl	8000298 <__aeabi_dsub>
 800624a:	3630      	adds	r6, #48	; 0x30
 800624c:	f805 6b01 	strb.w	r6, [r5], #1
 8006250:	ec53 2b19 	vmov	r2, r3, d9
 8006254:	4680      	mov	r8, r0
 8006256:	4689      	mov	r9, r1
 8006258:	f7fa fc48 	bl	8000aec <__aeabi_dcmplt>
 800625c:	2800      	cmp	r0, #0
 800625e:	d164      	bne.n	800632a <_dtoa_r+0x62a>
 8006260:	4642      	mov	r2, r8
 8006262:	464b      	mov	r3, r9
 8006264:	4937      	ldr	r1, [pc, #220]	; (8006344 <_dtoa_r+0x644>)
 8006266:	2000      	movs	r0, #0
 8006268:	f7fa f816 	bl	8000298 <__aeabi_dsub>
 800626c:	ec53 2b19 	vmov	r2, r3, d9
 8006270:	f7fa fc3c 	bl	8000aec <__aeabi_dcmplt>
 8006274:	2800      	cmp	r0, #0
 8006276:	f040 80b6 	bne.w	80063e6 <_dtoa_r+0x6e6>
 800627a:	9b02      	ldr	r3, [sp, #8]
 800627c:	429d      	cmp	r5, r3
 800627e:	f43f af7c 	beq.w	800617a <_dtoa_r+0x47a>
 8006282:	4b31      	ldr	r3, [pc, #196]	; (8006348 <_dtoa_r+0x648>)
 8006284:	ec51 0b19 	vmov	r0, r1, d9
 8006288:	2200      	movs	r2, #0
 800628a:	f7fa f9bd 	bl	8000608 <__aeabi_dmul>
 800628e:	4b2e      	ldr	r3, [pc, #184]	; (8006348 <_dtoa_r+0x648>)
 8006290:	ec41 0b19 	vmov	d9, r0, r1
 8006294:	2200      	movs	r2, #0
 8006296:	4640      	mov	r0, r8
 8006298:	4649      	mov	r1, r9
 800629a:	f7fa f9b5 	bl	8000608 <__aeabi_dmul>
 800629e:	4680      	mov	r8, r0
 80062a0:	4689      	mov	r9, r1
 80062a2:	e7c5      	b.n	8006230 <_dtoa_r+0x530>
 80062a4:	ec51 0b17 	vmov	r0, r1, d7
 80062a8:	f7fa f9ae 	bl	8000608 <__aeabi_dmul>
 80062ac:	9b02      	ldr	r3, [sp, #8]
 80062ae:	9d00      	ldr	r5, [sp, #0]
 80062b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062b2:	ec41 0b19 	vmov	d9, r0, r1
 80062b6:	4649      	mov	r1, r9
 80062b8:	4640      	mov	r0, r8
 80062ba:	f7fa fc55 	bl	8000b68 <__aeabi_d2iz>
 80062be:	4606      	mov	r6, r0
 80062c0:	f7fa f938 	bl	8000534 <__aeabi_i2d>
 80062c4:	3630      	adds	r6, #48	; 0x30
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4640      	mov	r0, r8
 80062cc:	4649      	mov	r1, r9
 80062ce:	f7f9 ffe3 	bl	8000298 <__aeabi_dsub>
 80062d2:	f805 6b01 	strb.w	r6, [r5], #1
 80062d6:	9b02      	ldr	r3, [sp, #8]
 80062d8:	429d      	cmp	r5, r3
 80062da:	4680      	mov	r8, r0
 80062dc:	4689      	mov	r9, r1
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	d124      	bne.n	800632e <_dtoa_r+0x62e>
 80062e4:	4b1b      	ldr	r3, [pc, #108]	; (8006354 <_dtoa_r+0x654>)
 80062e6:	ec51 0b19 	vmov	r0, r1, d9
 80062ea:	f7f9 ffd7 	bl	800029c <__adddf3>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4640      	mov	r0, r8
 80062f4:	4649      	mov	r1, r9
 80062f6:	f7fa fc17 	bl	8000b28 <__aeabi_dcmpgt>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d173      	bne.n	80063e6 <_dtoa_r+0x6e6>
 80062fe:	ec53 2b19 	vmov	r2, r3, d9
 8006302:	4914      	ldr	r1, [pc, #80]	; (8006354 <_dtoa_r+0x654>)
 8006304:	2000      	movs	r0, #0
 8006306:	f7f9 ffc7 	bl	8000298 <__aeabi_dsub>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4640      	mov	r0, r8
 8006310:	4649      	mov	r1, r9
 8006312:	f7fa fbeb 	bl	8000aec <__aeabi_dcmplt>
 8006316:	2800      	cmp	r0, #0
 8006318:	f43f af2f 	beq.w	800617a <_dtoa_r+0x47a>
 800631c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800631e:	1e6b      	subs	r3, r5, #1
 8006320:	930f      	str	r3, [sp, #60]	; 0x3c
 8006322:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006326:	2b30      	cmp	r3, #48	; 0x30
 8006328:	d0f8      	beq.n	800631c <_dtoa_r+0x61c>
 800632a:	46bb      	mov	fp, r7
 800632c:	e04a      	b.n	80063c4 <_dtoa_r+0x6c4>
 800632e:	4b06      	ldr	r3, [pc, #24]	; (8006348 <_dtoa_r+0x648>)
 8006330:	f7fa f96a 	bl	8000608 <__aeabi_dmul>
 8006334:	4680      	mov	r8, r0
 8006336:	4689      	mov	r9, r1
 8006338:	e7bd      	b.n	80062b6 <_dtoa_r+0x5b6>
 800633a:	bf00      	nop
 800633c:	080095f0 	.word	0x080095f0
 8006340:	080095c8 	.word	0x080095c8
 8006344:	3ff00000 	.word	0x3ff00000
 8006348:	40240000 	.word	0x40240000
 800634c:	401c0000 	.word	0x401c0000
 8006350:	40140000 	.word	0x40140000
 8006354:	3fe00000 	.word	0x3fe00000
 8006358:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800635c:	9d00      	ldr	r5, [sp, #0]
 800635e:	4642      	mov	r2, r8
 8006360:	464b      	mov	r3, r9
 8006362:	4630      	mov	r0, r6
 8006364:	4639      	mov	r1, r7
 8006366:	f7fa fa79 	bl	800085c <__aeabi_ddiv>
 800636a:	f7fa fbfd 	bl	8000b68 <__aeabi_d2iz>
 800636e:	9001      	str	r0, [sp, #4]
 8006370:	f7fa f8e0 	bl	8000534 <__aeabi_i2d>
 8006374:	4642      	mov	r2, r8
 8006376:	464b      	mov	r3, r9
 8006378:	f7fa f946 	bl	8000608 <__aeabi_dmul>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4630      	mov	r0, r6
 8006382:	4639      	mov	r1, r7
 8006384:	f7f9 ff88 	bl	8000298 <__aeabi_dsub>
 8006388:	9e01      	ldr	r6, [sp, #4]
 800638a:	9f04      	ldr	r7, [sp, #16]
 800638c:	3630      	adds	r6, #48	; 0x30
 800638e:	f805 6b01 	strb.w	r6, [r5], #1
 8006392:	9e00      	ldr	r6, [sp, #0]
 8006394:	1bae      	subs	r6, r5, r6
 8006396:	42b7      	cmp	r7, r6
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	d134      	bne.n	8006408 <_dtoa_r+0x708>
 800639e:	f7f9 ff7d 	bl	800029c <__adddf3>
 80063a2:	4642      	mov	r2, r8
 80063a4:	464b      	mov	r3, r9
 80063a6:	4606      	mov	r6, r0
 80063a8:	460f      	mov	r7, r1
 80063aa:	f7fa fbbd 	bl	8000b28 <__aeabi_dcmpgt>
 80063ae:	b9c8      	cbnz	r0, 80063e4 <_dtoa_r+0x6e4>
 80063b0:	4642      	mov	r2, r8
 80063b2:	464b      	mov	r3, r9
 80063b4:	4630      	mov	r0, r6
 80063b6:	4639      	mov	r1, r7
 80063b8:	f7fa fb8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80063bc:	b110      	cbz	r0, 80063c4 <_dtoa_r+0x6c4>
 80063be:	9b01      	ldr	r3, [sp, #4]
 80063c0:	07db      	lsls	r3, r3, #31
 80063c2:	d40f      	bmi.n	80063e4 <_dtoa_r+0x6e4>
 80063c4:	4651      	mov	r1, sl
 80063c6:	4620      	mov	r0, r4
 80063c8:	f000 fbcc 	bl	8006b64 <_Bfree>
 80063cc:	2300      	movs	r3, #0
 80063ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063d0:	702b      	strb	r3, [r5, #0]
 80063d2:	f10b 0301 	add.w	r3, fp, #1
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f43f ace2 	beq.w	8005da4 <_dtoa_r+0xa4>
 80063e0:	601d      	str	r5, [r3, #0]
 80063e2:	e4df      	b.n	8005da4 <_dtoa_r+0xa4>
 80063e4:	465f      	mov	r7, fp
 80063e6:	462b      	mov	r3, r5
 80063e8:	461d      	mov	r5, r3
 80063ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063ee:	2a39      	cmp	r2, #57	; 0x39
 80063f0:	d106      	bne.n	8006400 <_dtoa_r+0x700>
 80063f2:	9a00      	ldr	r2, [sp, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d1f7      	bne.n	80063e8 <_dtoa_r+0x6e8>
 80063f8:	9900      	ldr	r1, [sp, #0]
 80063fa:	2230      	movs	r2, #48	; 0x30
 80063fc:	3701      	adds	r7, #1
 80063fe:	700a      	strb	r2, [r1, #0]
 8006400:	781a      	ldrb	r2, [r3, #0]
 8006402:	3201      	adds	r2, #1
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	e790      	b.n	800632a <_dtoa_r+0x62a>
 8006408:	4ba3      	ldr	r3, [pc, #652]	; (8006698 <_dtoa_r+0x998>)
 800640a:	2200      	movs	r2, #0
 800640c:	f7fa f8fc 	bl	8000608 <__aeabi_dmul>
 8006410:	2200      	movs	r2, #0
 8006412:	2300      	movs	r3, #0
 8006414:	4606      	mov	r6, r0
 8006416:	460f      	mov	r7, r1
 8006418:	f7fa fb5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800641c:	2800      	cmp	r0, #0
 800641e:	d09e      	beq.n	800635e <_dtoa_r+0x65e>
 8006420:	e7d0      	b.n	80063c4 <_dtoa_r+0x6c4>
 8006422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006424:	2a00      	cmp	r2, #0
 8006426:	f000 80ca 	beq.w	80065be <_dtoa_r+0x8be>
 800642a:	9a07      	ldr	r2, [sp, #28]
 800642c:	2a01      	cmp	r2, #1
 800642e:	f300 80ad 	bgt.w	800658c <_dtoa_r+0x88c>
 8006432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006434:	2a00      	cmp	r2, #0
 8006436:	f000 80a5 	beq.w	8006584 <_dtoa_r+0x884>
 800643a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800643e:	9e08      	ldr	r6, [sp, #32]
 8006440:	9d05      	ldr	r5, [sp, #20]
 8006442:	9a05      	ldr	r2, [sp, #20]
 8006444:	441a      	add	r2, r3
 8006446:	9205      	str	r2, [sp, #20]
 8006448:	9a06      	ldr	r2, [sp, #24]
 800644a:	2101      	movs	r1, #1
 800644c:	441a      	add	r2, r3
 800644e:	4620      	mov	r0, r4
 8006450:	9206      	str	r2, [sp, #24]
 8006452:	f000 fc87 	bl	8006d64 <__i2b>
 8006456:	4607      	mov	r7, r0
 8006458:	b165      	cbz	r5, 8006474 <_dtoa_r+0x774>
 800645a:	9b06      	ldr	r3, [sp, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dd09      	ble.n	8006474 <_dtoa_r+0x774>
 8006460:	42ab      	cmp	r3, r5
 8006462:	9a05      	ldr	r2, [sp, #20]
 8006464:	bfa8      	it	ge
 8006466:	462b      	movge	r3, r5
 8006468:	1ad2      	subs	r2, r2, r3
 800646a:	9205      	str	r2, [sp, #20]
 800646c:	9a06      	ldr	r2, [sp, #24]
 800646e:	1aed      	subs	r5, r5, r3
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	9306      	str	r3, [sp, #24]
 8006474:	9b08      	ldr	r3, [sp, #32]
 8006476:	b1f3      	cbz	r3, 80064b6 <_dtoa_r+0x7b6>
 8006478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 80a3 	beq.w	80065c6 <_dtoa_r+0x8c6>
 8006480:	2e00      	cmp	r6, #0
 8006482:	dd10      	ble.n	80064a6 <_dtoa_r+0x7a6>
 8006484:	4639      	mov	r1, r7
 8006486:	4632      	mov	r2, r6
 8006488:	4620      	mov	r0, r4
 800648a:	f000 fd2b 	bl	8006ee4 <__pow5mult>
 800648e:	4652      	mov	r2, sl
 8006490:	4601      	mov	r1, r0
 8006492:	4607      	mov	r7, r0
 8006494:	4620      	mov	r0, r4
 8006496:	f000 fc7b 	bl	8006d90 <__multiply>
 800649a:	4651      	mov	r1, sl
 800649c:	4680      	mov	r8, r0
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 fb60 	bl	8006b64 <_Bfree>
 80064a4:	46c2      	mov	sl, r8
 80064a6:	9b08      	ldr	r3, [sp, #32]
 80064a8:	1b9a      	subs	r2, r3, r6
 80064aa:	d004      	beq.n	80064b6 <_dtoa_r+0x7b6>
 80064ac:	4651      	mov	r1, sl
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 fd18 	bl	8006ee4 <__pow5mult>
 80064b4:	4682      	mov	sl, r0
 80064b6:	2101      	movs	r1, #1
 80064b8:	4620      	mov	r0, r4
 80064ba:	f000 fc53 	bl	8006d64 <__i2b>
 80064be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	4606      	mov	r6, r0
 80064c4:	f340 8081 	ble.w	80065ca <_dtoa_r+0x8ca>
 80064c8:	461a      	mov	r2, r3
 80064ca:	4601      	mov	r1, r0
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 fd09 	bl	8006ee4 <__pow5mult>
 80064d2:	9b07      	ldr	r3, [sp, #28]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	4606      	mov	r6, r0
 80064d8:	dd7a      	ble.n	80065d0 <_dtoa_r+0x8d0>
 80064da:	f04f 0800 	mov.w	r8, #0
 80064de:	6933      	ldr	r3, [r6, #16]
 80064e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064e4:	6918      	ldr	r0, [r3, #16]
 80064e6:	f000 fbef 	bl	8006cc8 <__hi0bits>
 80064ea:	f1c0 0020 	rsb	r0, r0, #32
 80064ee:	9b06      	ldr	r3, [sp, #24]
 80064f0:	4418      	add	r0, r3
 80064f2:	f010 001f 	ands.w	r0, r0, #31
 80064f6:	f000 8094 	beq.w	8006622 <_dtoa_r+0x922>
 80064fa:	f1c0 0320 	rsb	r3, r0, #32
 80064fe:	2b04      	cmp	r3, #4
 8006500:	f340 8085 	ble.w	800660e <_dtoa_r+0x90e>
 8006504:	9b05      	ldr	r3, [sp, #20]
 8006506:	f1c0 001c 	rsb	r0, r0, #28
 800650a:	4403      	add	r3, r0
 800650c:	9305      	str	r3, [sp, #20]
 800650e:	9b06      	ldr	r3, [sp, #24]
 8006510:	4403      	add	r3, r0
 8006512:	4405      	add	r5, r0
 8006514:	9306      	str	r3, [sp, #24]
 8006516:	9b05      	ldr	r3, [sp, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	dd05      	ble.n	8006528 <_dtoa_r+0x828>
 800651c:	4651      	mov	r1, sl
 800651e:	461a      	mov	r2, r3
 8006520:	4620      	mov	r0, r4
 8006522:	f000 fd39 	bl	8006f98 <__lshift>
 8006526:	4682      	mov	sl, r0
 8006528:	9b06      	ldr	r3, [sp, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dd05      	ble.n	800653a <_dtoa_r+0x83a>
 800652e:	4631      	mov	r1, r6
 8006530:	461a      	mov	r2, r3
 8006532:	4620      	mov	r0, r4
 8006534:	f000 fd30 	bl	8006f98 <__lshift>
 8006538:	4606      	mov	r6, r0
 800653a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800653c:	2b00      	cmp	r3, #0
 800653e:	d072      	beq.n	8006626 <_dtoa_r+0x926>
 8006540:	4631      	mov	r1, r6
 8006542:	4650      	mov	r0, sl
 8006544:	f000 fd94 	bl	8007070 <__mcmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	da6c      	bge.n	8006626 <_dtoa_r+0x926>
 800654c:	2300      	movs	r3, #0
 800654e:	4651      	mov	r1, sl
 8006550:	220a      	movs	r2, #10
 8006552:	4620      	mov	r0, r4
 8006554:	f000 fb28 	bl	8006ba8 <__multadd>
 8006558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800655e:	4682      	mov	sl, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 81b0 	beq.w	80068c6 <_dtoa_r+0xbc6>
 8006566:	2300      	movs	r3, #0
 8006568:	4639      	mov	r1, r7
 800656a:	220a      	movs	r2, #10
 800656c:	4620      	mov	r0, r4
 800656e:	f000 fb1b 	bl	8006ba8 <__multadd>
 8006572:	9b01      	ldr	r3, [sp, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	4607      	mov	r7, r0
 8006578:	f300 8096 	bgt.w	80066a8 <_dtoa_r+0x9a8>
 800657c:	9b07      	ldr	r3, [sp, #28]
 800657e:	2b02      	cmp	r3, #2
 8006580:	dc59      	bgt.n	8006636 <_dtoa_r+0x936>
 8006582:	e091      	b.n	80066a8 <_dtoa_r+0x9a8>
 8006584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006586:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800658a:	e758      	b.n	800643e <_dtoa_r+0x73e>
 800658c:	9b04      	ldr	r3, [sp, #16]
 800658e:	1e5e      	subs	r6, r3, #1
 8006590:	9b08      	ldr	r3, [sp, #32]
 8006592:	42b3      	cmp	r3, r6
 8006594:	bfbf      	itttt	lt
 8006596:	9b08      	ldrlt	r3, [sp, #32]
 8006598:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800659a:	9608      	strlt	r6, [sp, #32]
 800659c:	1af3      	sublt	r3, r6, r3
 800659e:	bfb4      	ite	lt
 80065a0:	18d2      	addlt	r2, r2, r3
 80065a2:	1b9e      	subge	r6, r3, r6
 80065a4:	9b04      	ldr	r3, [sp, #16]
 80065a6:	bfbc      	itt	lt
 80065a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80065aa:	2600      	movlt	r6, #0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bfb7      	itett	lt
 80065b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80065b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80065b8:	1a9d      	sublt	r5, r3, r2
 80065ba:	2300      	movlt	r3, #0
 80065bc:	e741      	b.n	8006442 <_dtoa_r+0x742>
 80065be:	9e08      	ldr	r6, [sp, #32]
 80065c0:	9d05      	ldr	r5, [sp, #20]
 80065c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80065c4:	e748      	b.n	8006458 <_dtoa_r+0x758>
 80065c6:	9a08      	ldr	r2, [sp, #32]
 80065c8:	e770      	b.n	80064ac <_dtoa_r+0x7ac>
 80065ca:	9b07      	ldr	r3, [sp, #28]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	dc19      	bgt.n	8006604 <_dtoa_r+0x904>
 80065d0:	9b02      	ldr	r3, [sp, #8]
 80065d2:	b9bb      	cbnz	r3, 8006604 <_dtoa_r+0x904>
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065da:	b99b      	cbnz	r3, 8006604 <_dtoa_r+0x904>
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065e2:	0d1b      	lsrs	r3, r3, #20
 80065e4:	051b      	lsls	r3, r3, #20
 80065e6:	b183      	cbz	r3, 800660a <_dtoa_r+0x90a>
 80065e8:	9b05      	ldr	r3, [sp, #20]
 80065ea:	3301      	adds	r3, #1
 80065ec:	9305      	str	r3, [sp, #20]
 80065ee:	9b06      	ldr	r3, [sp, #24]
 80065f0:	3301      	adds	r3, #1
 80065f2:	9306      	str	r3, [sp, #24]
 80065f4:	f04f 0801 	mov.w	r8, #1
 80065f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f47f af6f 	bne.w	80064de <_dtoa_r+0x7de>
 8006600:	2001      	movs	r0, #1
 8006602:	e774      	b.n	80064ee <_dtoa_r+0x7ee>
 8006604:	f04f 0800 	mov.w	r8, #0
 8006608:	e7f6      	b.n	80065f8 <_dtoa_r+0x8f8>
 800660a:	4698      	mov	r8, r3
 800660c:	e7f4      	b.n	80065f8 <_dtoa_r+0x8f8>
 800660e:	d082      	beq.n	8006516 <_dtoa_r+0x816>
 8006610:	9a05      	ldr	r2, [sp, #20]
 8006612:	331c      	adds	r3, #28
 8006614:	441a      	add	r2, r3
 8006616:	9205      	str	r2, [sp, #20]
 8006618:	9a06      	ldr	r2, [sp, #24]
 800661a:	441a      	add	r2, r3
 800661c:	441d      	add	r5, r3
 800661e:	9206      	str	r2, [sp, #24]
 8006620:	e779      	b.n	8006516 <_dtoa_r+0x816>
 8006622:	4603      	mov	r3, r0
 8006624:	e7f4      	b.n	8006610 <_dtoa_r+0x910>
 8006626:	9b04      	ldr	r3, [sp, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	dc37      	bgt.n	800669c <_dtoa_r+0x99c>
 800662c:	9b07      	ldr	r3, [sp, #28]
 800662e:	2b02      	cmp	r3, #2
 8006630:	dd34      	ble.n	800669c <_dtoa_r+0x99c>
 8006632:	9b04      	ldr	r3, [sp, #16]
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	9b01      	ldr	r3, [sp, #4]
 8006638:	b963      	cbnz	r3, 8006654 <_dtoa_r+0x954>
 800663a:	4631      	mov	r1, r6
 800663c:	2205      	movs	r2, #5
 800663e:	4620      	mov	r0, r4
 8006640:	f000 fab2 	bl	8006ba8 <__multadd>
 8006644:	4601      	mov	r1, r0
 8006646:	4606      	mov	r6, r0
 8006648:	4650      	mov	r0, sl
 800664a:	f000 fd11 	bl	8007070 <__mcmp>
 800664e:	2800      	cmp	r0, #0
 8006650:	f73f adbb 	bgt.w	80061ca <_dtoa_r+0x4ca>
 8006654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006656:	9d00      	ldr	r5, [sp, #0]
 8006658:	ea6f 0b03 	mvn.w	fp, r3
 800665c:	f04f 0800 	mov.w	r8, #0
 8006660:	4631      	mov	r1, r6
 8006662:	4620      	mov	r0, r4
 8006664:	f000 fa7e 	bl	8006b64 <_Bfree>
 8006668:	2f00      	cmp	r7, #0
 800666a:	f43f aeab 	beq.w	80063c4 <_dtoa_r+0x6c4>
 800666e:	f1b8 0f00 	cmp.w	r8, #0
 8006672:	d005      	beq.n	8006680 <_dtoa_r+0x980>
 8006674:	45b8      	cmp	r8, r7
 8006676:	d003      	beq.n	8006680 <_dtoa_r+0x980>
 8006678:	4641      	mov	r1, r8
 800667a:	4620      	mov	r0, r4
 800667c:	f000 fa72 	bl	8006b64 <_Bfree>
 8006680:	4639      	mov	r1, r7
 8006682:	4620      	mov	r0, r4
 8006684:	f000 fa6e 	bl	8006b64 <_Bfree>
 8006688:	e69c      	b.n	80063c4 <_dtoa_r+0x6c4>
 800668a:	2600      	movs	r6, #0
 800668c:	4637      	mov	r7, r6
 800668e:	e7e1      	b.n	8006654 <_dtoa_r+0x954>
 8006690:	46bb      	mov	fp, r7
 8006692:	4637      	mov	r7, r6
 8006694:	e599      	b.n	80061ca <_dtoa_r+0x4ca>
 8006696:	bf00      	nop
 8006698:	40240000 	.word	0x40240000
 800669c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 80c8 	beq.w	8006834 <_dtoa_r+0xb34>
 80066a4:	9b04      	ldr	r3, [sp, #16]
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	2d00      	cmp	r5, #0
 80066aa:	dd05      	ble.n	80066b8 <_dtoa_r+0x9b8>
 80066ac:	4639      	mov	r1, r7
 80066ae:	462a      	mov	r2, r5
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 fc71 	bl	8006f98 <__lshift>
 80066b6:	4607      	mov	r7, r0
 80066b8:	f1b8 0f00 	cmp.w	r8, #0
 80066bc:	d05b      	beq.n	8006776 <_dtoa_r+0xa76>
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 fa0f 	bl	8006ae4 <_Balloc>
 80066c6:	4605      	mov	r5, r0
 80066c8:	b928      	cbnz	r0, 80066d6 <_dtoa_r+0x9d6>
 80066ca:	4b83      	ldr	r3, [pc, #524]	; (80068d8 <_dtoa_r+0xbd8>)
 80066cc:	4602      	mov	r2, r0
 80066ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80066d2:	f7ff bb2e 	b.w	8005d32 <_dtoa_r+0x32>
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	3202      	adds	r2, #2
 80066da:	0092      	lsls	r2, r2, #2
 80066dc:	f107 010c 	add.w	r1, r7, #12
 80066e0:	300c      	adds	r0, #12
 80066e2:	f001 ff85 	bl	80085f0 <memcpy>
 80066e6:	2201      	movs	r2, #1
 80066e8:	4629      	mov	r1, r5
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 fc54 	bl	8006f98 <__lshift>
 80066f0:	9b00      	ldr	r3, [sp, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	9304      	str	r3, [sp, #16]
 80066f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066fa:	4413      	add	r3, r2
 80066fc:	9308      	str	r3, [sp, #32]
 80066fe:	9b02      	ldr	r3, [sp, #8]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	46b8      	mov	r8, r7
 8006706:	9306      	str	r3, [sp, #24]
 8006708:	4607      	mov	r7, r0
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	4631      	mov	r1, r6
 800670e:	3b01      	subs	r3, #1
 8006710:	4650      	mov	r0, sl
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	f7ff fa6a 	bl	8005bec <quorem>
 8006718:	4641      	mov	r1, r8
 800671a:	9002      	str	r0, [sp, #8]
 800671c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006720:	4650      	mov	r0, sl
 8006722:	f000 fca5 	bl	8007070 <__mcmp>
 8006726:	463a      	mov	r2, r7
 8006728:	9005      	str	r0, [sp, #20]
 800672a:	4631      	mov	r1, r6
 800672c:	4620      	mov	r0, r4
 800672e:	f000 fcbb 	bl	80070a8 <__mdiff>
 8006732:	68c2      	ldr	r2, [r0, #12]
 8006734:	4605      	mov	r5, r0
 8006736:	bb02      	cbnz	r2, 800677a <_dtoa_r+0xa7a>
 8006738:	4601      	mov	r1, r0
 800673a:	4650      	mov	r0, sl
 800673c:	f000 fc98 	bl	8007070 <__mcmp>
 8006740:	4602      	mov	r2, r0
 8006742:	4629      	mov	r1, r5
 8006744:	4620      	mov	r0, r4
 8006746:	9209      	str	r2, [sp, #36]	; 0x24
 8006748:	f000 fa0c 	bl	8006b64 <_Bfree>
 800674c:	9b07      	ldr	r3, [sp, #28]
 800674e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006750:	9d04      	ldr	r5, [sp, #16]
 8006752:	ea43 0102 	orr.w	r1, r3, r2
 8006756:	9b06      	ldr	r3, [sp, #24]
 8006758:	4319      	orrs	r1, r3
 800675a:	d110      	bne.n	800677e <_dtoa_r+0xa7e>
 800675c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006760:	d029      	beq.n	80067b6 <_dtoa_r+0xab6>
 8006762:	9b05      	ldr	r3, [sp, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	dd02      	ble.n	800676e <_dtoa_r+0xa6e>
 8006768:	9b02      	ldr	r3, [sp, #8]
 800676a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800676e:	9b01      	ldr	r3, [sp, #4]
 8006770:	f883 9000 	strb.w	r9, [r3]
 8006774:	e774      	b.n	8006660 <_dtoa_r+0x960>
 8006776:	4638      	mov	r0, r7
 8006778:	e7ba      	b.n	80066f0 <_dtoa_r+0x9f0>
 800677a:	2201      	movs	r2, #1
 800677c:	e7e1      	b.n	8006742 <_dtoa_r+0xa42>
 800677e:	9b05      	ldr	r3, [sp, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	db04      	blt.n	800678e <_dtoa_r+0xa8e>
 8006784:	9907      	ldr	r1, [sp, #28]
 8006786:	430b      	orrs	r3, r1
 8006788:	9906      	ldr	r1, [sp, #24]
 800678a:	430b      	orrs	r3, r1
 800678c:	d120      	bne.n	80067d0 <_dtoa_r+0xad0>
 800678e:	2a00      	cmp	r2, #0
 8006790:	dded      	ble.n	800676e <_dtoa_r+0xa6e>
 8006792:	4651      	mov	r1, sl
 8006794:	2201      	movs	r2, #1
 8006796:	4620      	mov	r0, r4
 8006798:	f000 fbfe 	bl	8006f98 <__lshift>
 800679c:	4631      	mov	r1, r6
 800679e:	4682      	mov	sl, r0
 80067a0:	f000 fc66 	bl	8007070 <__mcmp>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	dc03      	bgt.n	80067b0 <_dtoa_r+0xab0>
 80067a8:	d1e1      	bne.n	800676e <_dtoa_r+0xa6e>
 80067aa:	f019 0f01 	tst.w	r9, #1
 80067ae:	d0de      	beq.n	800676e <_dtoa_r+0xa6e>
 80067b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067b4:	d1d8      	bne.n	8006768 <_dtoa_r+0xa68>
 80067b6:	9a01      	ldr	r2, [sp, #4]
 80067b8:	2339      	movs	r3, #57	; 0x39
 80067ba:	7013      	strb	r3, [r2, #0]
 80067bc:	462b      	mov	r3, r5
 80067be:	461d      	mov	r5, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067c6:	2a39      	cmp	r2, #57	; 0x39
 80067c8:	d06c      	beq.n	80068a4 <_dtoa_r+0xba4>
 80067ca:	3201      	adds	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	e747      	b.n	8006660 <_dtoa_r+0x960>
 80067d0:	2a00      	cmp	r2, #0
 80067d2:	dd07      	ble.n	80067e4 <_dtoa_r+0xae4>
 80067d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067d8:	d0ed      	beq.n	80067b6 <_dtoa_r+0xab6>
 80067da:	9a01      	ldr	r2, [sp, #4]
 80067dc:	f109 0301 	add.w	r3, r9, #1
 80067e0:	7013      	strb	r3, [r2, #0]
 80067e2:	e73d      	b.n	8006660 <_dtoa_r+0x960>
 80067e4:	9b04      	ldr	r3, [sp, #16]
 80067e6:	9a08      	ldr	r2, [sp, #32]
 80067e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d043      	beq.n	8006878 <_dtoa_r+0xb78>
 80067f0:	4651      	mov	r1, sl
 80067f2:	2300      	movs	r3, #0
 80067f4:	220a      	movs	r2, #10
 80067f6:	4620      	mov	r0, r4
 80067f8:	f000 f9d6 	bl	8006ba8 <__multadd>
 80067fc:	45b8      	cmp	r8, r7
 80067fe:	4682      	mov	sl, r0
 8006800:	f04f 0300 	mov.w	r3, #0
 8006804:	f04f 020a 	mov.w	r2, #10
 8006808:	4641      	mov	r1, r8
 800680a:	4620      	mov	r0, r4
 800680c:	d107      	bne.n	800681e <_dtoa_r+0xb1e>
 800680e:	f000 f9cb 	bl	8006ba8 <__multadd>
 8006812:	4680      	mov	r8, r0
 8006814:	4607      	mov	r7, r0
 8006816:	9b04      	ldr	r3, [sp, #16]
 8006818:	3301      	adds	r3, #1
 800681a:	9304      	str	r3, [sp, #16]
 800681c:	e775      	b.n	800670a <_dtoa_r+0xa0a>
 800681e:	f000 f9c3 	bl	8006ba8 <__multadd>
 8006822:	4639      	mov	r1, r7
 8006824:	4680      	mov	r8, r0
 8006826:	2300      	movs	r3, #0
 8006828:	220a      	movs	r2, #10
 800682a:	4620      	mov	r0, r4
 800682c:	f000 f9bc 	bl	8006ba8 <__multadd>
 8006830:	4607      	mov	r7, r0
 8006832:	e7f0      	b.n	8006816 <_dtoa_r+0xb16>
 8006834:	9b04      	ldr	r3, [sp, #16]
 8006836:	9301      	str	r3, [sp, #4]
 8006838:	9d00      	ldr	r5, [sp, #0]
 800683a:	4631      	mov	r1, r6
 800683c:	4650      	mov	r0, sl
 800683e:	f7ff f9d5 	bl	8005bec <quorem>
 8006842:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006846:	9b00      	ldr	r3, [sp, #0]
 8006848:	f805 9b01 	strb.w	r9, [r5], #1
 800684c:	1aea      	subs	r2, r5, r3
 800684e:	9b01      	ldr	r3, [sp, #4]
 8006850:	4293      	cmp	r3, r2
 8006852:	dd07      	ble.n	8006864 <_dtoa_r+0xb64>
 8006854:	4651      	mov	r1, sl
 8006856:	2300      	movs	r3, #0
 8006858:	220a      	movs	r2, #10
 800685a:	4620      	mov	r0, r4
 800685c:	f000 f9a4 	bl	8006ba8 <__multadd>
 8006860:	4682      	mov	sl, r0
 8006862:	e7ea      	b.n	800683a <_dtoa_r+0xb3a>
 8006864:	9b01      	ldr	r3, [sp, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	bfc8      	it	gt
 800686a:	461d      	movgt	r5, r3
 800686c:	9b00      	ldr	r3, [sp, #0]
 800686e:	bfd8      	it	le
 8006870:	2501      	movle	r5, #1
 8006872:	441d      	add	r5, r3
 8006874:	f04f 0800 	mov.w	r8, #0
 8006878:	4651      	mov	r1, sl
 800687a:	2201      	movs	r2, #1
 800687c:	4620      	mov	r0, r4
 800687e:	f000 fb8b 	bl	8006f98 <__lshift>
 8006882:	4631      	mov	r1, r6
 8006884:	4682      	mov	sl, r0
 8006886:	f000 fbf3 	bl	8007070 <__mcmp>
 800688a:	2800      	cmp	r0, #0
 800688c:	dc96      	bgt.n	80067bc <_dtoa_r+0xabc>
 800688e:	d102      	bne.n	8006896 <_dtoa_r+0xb96>
 8006890:	f019 0f01 	tst.w	r9, #1
 8006894:	d192      	bne.n	80067bc <_dtoa_r+0xabc>
 8006896:	462b      	mov	r3, r5
 8006898:	461d      	mov	r5, r3
 800689a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800689e:	2a30      	cmp	r2, #48	; 0x30
 80068a0:	d0fa      	beq.n	8006898 <_dtoa_r+0xb98>
 80068a2:	e6dd      	b.n	8006660 <_dtoa_r+0x960>
 80068a4:	9a00      	ldr	r2, [sp, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d189      	bne.n	80067be <_dtoa_r+0xabe>
 80068aa:	f10b 0b01 	add.w	fp, fp, #1
 80068ae:	2331      	movs	r3, #49	; 0x31
 80068b0:	e796      	b.n	80067e0 <_dtoa_r+0xae0>
 80068b2:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <_dtoa_r+0xbdc>)
 80068b4:	f7ff ba99 	b.w	8005dea <_dtoa_r+0xea>
 80068b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f47f aa6d 	bne.w	8005d9a <_dtoa_r+0x9a>
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <_dtoa_r+0xbe0>)
 80068c2:	f7ff ba92 	b.w	8005dea <_dtoa_r+0xea>
 80068c6:	9b01      	ldr	r3, [sp, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	dcb5      	bgt.n	8006838 <_dtoa_r+0xb38>
 80068cc:	9b07      	ldr	r3, [sp, #28]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	f73f aeb1 	bgt.w	8006636 <_dtoa_r+0x936>
 80068d4:	e7b0      	b.n	8006838 <_dtoa_r+0xb38>
 80068d6:	bf00      	nop
 80068d8:	0800955d 	.word	0x0800955d
 80068dc:	080094b8 	.word	0x080094b8
 80068e0:	080094e1 	.word	0x080094e1

080068e4 <_free_r>:
 80068e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068e6:	2900      	cmp	r1, #0
 80068e8:	d044      	beq.n	8006974 <_free_r+0x90>
 80068ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ee:	9001      	str	r0, [sp, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f1a1 0404 	sub.w	r4, r1, #4
 80068f6:	bfb8      	it	lt
 80068f8:	18e4      	addlt	r4, r4, r3
 80068fa:	f000 f8e7 	bl	8006acc <__malloc_lock>
 80068fe:	4a1e      	ldr	r2, [pc, #120]	; (8006978 <_free_r+0x94>)
 8006900:	9801      	ldr	r0, [sp, #4]
 8006902:	6813      	ldr	r3, [r2, #0]
 8006904:	b933      	cbnz	r3, 8006914 <_free_r+0x30>
 8006906:	6063      	str	r3, [r4, #4]
 8006908:	6014      	str	r4, [r2, #0]
 800690a:	b003      	add	sp, #12
 800690c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006910:	f000 b8e2 	b.w	8006ad8 <__malloc_unlock>
 8006914:	42a3      	cmp	r3, r4
 8006916:	d908      	bls.n	800692a <_free_r+0x46>
 8006918:	6825      	ldr	r5, [r4, #0]
 800691a:	1961      	adds	r1, r4, r5
 800691c:	428b      	cmp	r3, r1
 800691e:	bf01      	itttt	eq
 8006920:	6819      	ldreq	r1, [r3, #0]
 8006922:	685b      	ldreq	r3, [r3, #4]
 8006924:	1949      	addeq	r1, r1, r5
 8006926:	6021      	streq	r1, [r4, #0]
 8006928:	e7ed      	b.n	8006906 <_free_r+0x22>
 800692a:	461a      	mov	r2, r3
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	b10b      	cbz	r3, 8006934 <_free_r+0x50>
 8006930:	42a3      	cmp	r3, r4
 8006932:	d9fa      	bls.n	800692a <_free_r+0x46>
 8006934:	6811      	ldr	r1, [r2, #0]
 8006936:	1855      	adds	r5, r2, r1
 8006938:	42a5      	cmp	r5, r4
 800693a:	d10b      	bne.n	8006954 <_free_r+0x70>
 800693c:	6824      	ldr	r4, [r4, #0]
 800693e:	4421      	add	r1, r4
 8006940:	1854      	adds	r4, r2, r1
 8006942:	42a3      	cmp	r3, r4
 8006944:	6011      	str	r1, [r2, #0]
 8006946:	d1e0      	bne.n	800690a <_free_r+0x26>
 8006948:	681c      	ldr	r4, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	6053      	str	r3, [r2, #4]
 800694e:	440c      	add	r4, r1
 8006950:	6014      	str	r4, [r2, #0]
 8006952:	e7da      	b.n	800690a <_free_r+0x26>
 8006954:	d902      	bls.n	800695c <_free_r+0x78>
 8006956:	230c      	movs	r3, #12
 8006958:	6003      	str	r3, [r0, #0]
 800695a:	e7d6      	b.n	800690a <_free_r+0x26>
 800695c:	6825      	ldr	r5, [r4, #0]
 800695e:	1961      	adds	r1, r4, r5
 8006960:	428b      	cmp	r3, r1
 8006962:	bf04      	itt	eq
 8006964:	6819      	ldreq	r1, [r3, #0]
 8006966:	685b      	ldreq	r3, [r3, #4]
 8006968:	6063      	str	r3, [r4, #4]
 800696a:	bf04      	itt	eq
 800696c:	1949      	addeq	r1, r1, r5
 800696e:	6021      	streq	r1, [r4, #0]
 8006970:	6054      	str	r4, [r2, #4]
 8006972:	e7ca      	b.n	800690a <_free_r+0x26>
 8006974:	b003      	add	sp, #12
 8006976:	bd30      	pop	{r4, r5, pc}
 8006978:	20000418 	.word	0x20000418

0800697c <malloc>:
 800697c:	4b02      	ldr	r3, [pc, #8]	; (8006988 <malloc+0xc>)
 800697e:	4601      	mov	r1, r0
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	f000 b823 	b.w	80069cc <_malloc_r>
 8006986:	bf00      	nop
 8006988:	20000064 	.word	0x20000064

0800698c <sbrk_aligned>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	4e0e      	ldr	r6, [pc, #56]	; (80069c8 <sbrk_aligned+0x3c>)
 8006990:	460c      	mov	r4, r1
 8006992:	6831      	ldr	r1, [r6, #0]
 8006994:	4605      	mov	r5, r0
 8006996:	b911      	cbnz	r1, 800699e <sbrk_aligned+0x12>
 8006998:	f001 fe1a 	bl	80085d0 <_sbrk_r>
 800699c:	6030      	str	r0, [r6, #0]
 800699e:	4621      	mov	r1, r4
 80069a0:	4628      	mov	r0, r5
 80069a2:	f001 fe15 	bl	80085d0 <_sbrk_r>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d00a      	beq.n	80069c0 <sbrk_aligned+0x34>
 80069aa:	1cc4      	adds	r4, r0, #3
 80069ac:	f024 0403 	bic.w	r4, r4, #3
 80069b0:	42a0      	cmp	r0, r4
 80069b2:	d007      	beq.n	80069c4 <sbrk_aligned+0x38>
 80069b4:	1a21      	subs	r1, r4, r0
 80069b6:	4628      	mov	r0, r5
 80069b8:	f001 fe0a 	bl	80085d0 <_sbrk_r>
 80069bc:	3001      	adds	r0, #1
 80069be:	d101      	bne.n	80069c4 <sbrk_aligned+0x38>
 80069c0:	f04f 34ff 	mov.w	r4, #4294967295
 80069c4:	4620      	mov	r0, r4
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	2000041c 	.word	0x2000041c

080069cc <_malloc_r>:
 80069cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d0:	1ccd      	adds	r5, r1, #3
 80069d2:	f025 0503 	bic.w	r5, r5, #3
 80069d6:	3508      	adds	r5, #8
 80069d8:	2d0c      	cmp	r5, #12
 80069da:	bf38      	it	cc
 80069dc:	250c      	movcc	r5, #12
 80069de:	2d00      	cmp	r5, #0
 80069e0:	4607      	mov	r7, r0
 80069e2:	db01      	blt.n	80069e8 <_malloc_r+0x1c>
 80069e4:	42a9      	cmp	r1, r5
 80069e6:	d905      	bls.n	80069f4 <_malloc_r+0x28>
 80069e8:	230c      	movs	r3, #12
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	2600      	movs	r6, #0
 80069ee:	4630      	mov	r0, r6
 80069f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ac8 <_malloc_r+0xfc>
 80069f8:	f000 f868 	bl	8006acc <__malloc_lock>
 80069fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006a00:	461c      	mov	r4, r3
 8006a02:	bb5c      	cbnz	r4, 8006a5c <_malloc_r+0x90>
 8006a04:	4629      	mov	r1, r5
 8006a06:	4638      	mov	r0, r7
 8006a08:	f7ff ffc0 	bl	800698c <sbrk_aligned>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	4604      	mov	r4, r0
 8006a10:	d155      	bne.n	8006abe <_malloc_r+0xf2>
 8006a12:	f8d8 4000 	ldr.w	r4, [r8]
 8006a16:	4626      	mov	r6, r4
 8006a18:	2e00      	cmp	r6, #0
 8006a1a:	d145      	bne.n	8006aa8 <_malloc_r+0xdc>
 8006a1c:	2c00      	cmp	r4, #0
 8006a1e:	d048      	beq.n	8006ab2 <_malloc_r+0xe6>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	4631      	mov	r1, r6
 8006a24:	4638      	mov	r0, r7
 8006a26:	eb04 0903 	add.w	r9, r4, r3
 8006a2a:	f001 fdd1 	bl	80085d0 <_sbrk_r>
 8006a2e:	4581      	cmp	r9, r0
 8006a30:	d13f      	bne.n	8006ab2 <_malloc_r+0xe6>
 8006a32:	6821      	ldr	r1, [r4, #0]
 8006a34:	1a6d      	subs	r5, r5, r1
 8006a36:	4629      	mov	r1, r5
 8006a38:	4638      	mov	r0, r7
 8006a3a:	f7ff ffa7 	bl	800698c <sbrk_aligned>
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d037      	beq.n	8006ab2 <_malloc_r+0xe6>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	442b      	add	r3, r5
 8006a46:	6023      	str	r3, [r4, #0]
 8006a48:	f8d8 3000 	ldr.w	r3, [r8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d038      	beq.n	8006ac2 <_malloc_r+0xf6>
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	42a2      	cmp	r2, r4
 8006a54:	d12b      	bne.n	8006aae <_malloc_r+0xe2>
 8006a56:	2200      	movs	r2, #0
 8006a58:	605a      	str	r2, [r3, #4]
 8006a5a:	e00f      	b.n	8006a7c <_malloc_r+0xb0>
 8006a5c:	6822      	ldr	r2, [r4, #0]
 8006a5e:	1b52      	subs	r2, r2, r5
 8006a60:	d41f      	bmi.n	8006aa2 <_malloc_r+0xd6>
 8006a62:	2a0b      	cmp	r2, #11
 8006a64:	d917      	bls.n	8006a96 <_malloc_r+0xca>
 8006a66:	1961      	adds	r1, r4, r5
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	6025      	str	r5, [r4, #0]
 8006a6c:	bf18      	it	ne
 8006a6e:	6059      	strne	r1, [r3, #4]
 8006a70:	6863      	ldr	r3, [r4, #4]
 8006a72:	bf08      	it	eq
 8006a74:	f8c8 1000 	streq.w	r1, [r8]
 8006a78:	5162      	str	r2, [r4, r5]
 8006a7a:	604b      	str	r3, [r1, #4]
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	f104 060b 	add.w	r6, r4, #11
 8006a82:	f000 f829 	bl	8006ad8 <__malloc_unlock>
 8006a86:	f026 0607 	bic.w	r6, r6, #7
 8006a8a:	1d23      	adds	r3, r4, #4
 8006a8c:	1af2      	subs	r2, r6, r3
 8006a8e:	d0ae      	beq.n	80069ee <_malloc_r+0x22>
 8006a90:	1b9b      	subs	r3, r3, r6
 8006a92:	50a3      	str	r3, [r4, r2]
 8006a94:	e7ab      	b.n	80069ee <_malloc_r+0x22>
 8006a96:	42a3      	cmp	r3, r4
 8006a98:	6862      	ldr	r2, [r4, #4]
 8006a9a:	d1dd      	bne.n	8006a58 <_malloc_r+0x8c>
 8006a9c:	f8c8 2000 	str.w	r2, [r8]
 8006aa0:	e7ec      	b.n	8006a7c <_malloc_r+0xb0>
 8006aa2:	4623      	mov	r3, r4
 8006aa4:	6864      	ldr	r4, [r4, #4]
 8006aa6:	e7ac      	b.n	8006a02 <_malloc_r+0x36>
 8006aa8:	4634      	mov	r4, r6
 8006aaa:	6876      	ldr	r6, [r6, #4]
 8006aac:	e7b4      	b.n	8006a18 <_malloc_r+0x4c>
 8006aae:	4613      	mov	r3, r2
 8006ab0:	e7cc      	b.n	8006a4c <_malloc_r+0x80>
 8006ab2:	230c      	movs	r3, #12
 8006ab4:	603b      	str	r3, [r7, #0]
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	f000 f80e 	bl	8006ad8 <__malloc_unlock>
 8006abc:	e797      	b.n	80069ee <_malloc_r+0x22>
 8006abe:	6025      	str	r5, [r4, #0]
 8006ac0:	e7dc      	b.n	8006a7c <_malloc_r+0xb0>
 8006ac2:	605b      	str	r3, [r3, #4]
 8006ac4:	deff      	udf	#255	; 0xff
 8006ac6:	bf00      	nop
 8006ac8:	20000418 	.word	0x20000418

08006acc <__malloc_lock>:
 8006acc:	4801      	ldr	r0, [pc, #4]	; (8006ad4 <__malloc_lock+0x8>)
 8006ace:	f7ff b884 	b.w	8005bda <__retarget_lock_acquire_recursive>
 8006ad2:	bf00      	nop
 8006ad4:	20000414 	.word	0x20000414

08006ad8 <__malloc_unlock>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	; (8006ae0 <__malloc_unlock+0x8>)
 8006ada:	f7ff b87f 	b.w	8005bdc <__retarget_lock_release_recursive>
 8006ade:	bf00      	nop
 8006ae0:	20000414 	.word	0x20000414

08006ae4 <_Balloc>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	69c6      	ldr	r6, [r0, #28]
 8006ae8:	4604      	mov	r4, r0
 8006aea:	460d      	mov	r5, r1
 8006aec:	b976      	cbnz	r6, 8006b0c <_Balloc+0x28>
 8006aee:	2010      	movs	r0, #16
 8006af0:	f7ff ff44 	bl	800697c <malloc>
 8006af4:	4602      	mov	r2, r0
 8006af6:	61e0      	str	r0, [r4, #28]
 8006af8:	b920      	cbnz	r0, 8006b04 <_Balloc+0x20>
 8006afa:	4b18      	ldr	r3, [pc, #96]	; (8006b5c <_Balloc+0x78>)
 8006afc:	4818      	ldr	r0, [pc, #96]	; (8006b60 <_Balloc+0x7c>)
 8006afe:	216b      	movs	r1, #107	; 0x6b
 8006b00:	f001 fd8e 	bl	8008620 <__assert_func>
 8006b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b08:	6006      	str	r6, [r0, #0]
 8006b0a:	60c6      	str	r6, [r0, #12]
 8006b0c:	69e6      	ldr	r6, [r4, #28]
 8006b0e:	68f3      	ldr	r3, [r6, #12]
 8006b10:	b183      	cbz	r3, 8006b34 <_Balloc+0x50>
 8006b12:	69e3      	ldr	r3, [r4, #28]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b1a:	b9b8      	cbnz	r0, 8006b4c <_Balloc+0x68>
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	fa01 f605 	lsl.w	r6, r1, r5
 8006b22:	1d72      	adds	r2, r6, #5
 8006b24:	0092      	lsls	r2, r2, #2
 8006b26:	4620      	mov	r0, r4
 8006b28:	f001 fd98 	bl	800865c <_calloc_r>
 8006b2c:	b160      	cbz	r0, 8006b48 <_Balloc+0x64>
 8006b2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b32:	e00e      	b.n	8006b52 <_Balloc+0x6e>
 8006b34:	2221      	movs	r2, #33	; 0x21
 8006b36:	2104      	movs	r1, #4
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f001 fd8f 	bl	800865c <_calloc_r>
 8006b3e:	69e3      	ldr	r3, [r4, #28]
 8006b40:	60f0      	str	r0, [r6, #12]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e4      	bne.n	8006b12 <_Balloc+0x2e>
 8006b48:	2000      	movs	r0, #0
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	6802      	ldr	r2, [r0, #0]
 8006b4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b52:	2300      	movs	r3, #0
 8006b54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b58:	e7f7      	b.n	8006b4a <_Balloc+0x66>
 8006b5a:	bf00      	nop
 8006b5c:	080094ee 	.word	0x080094ee
 8006b60:	0800956e 	.word	0x0800956e

08006b64 <_Bfree>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	69c6      	ldr	r6, [r0, #28]
 8006b68:	4605      	mov	r5, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	b976      	cbnz	r6, 8006b8c <_Bfree+0x28>
 8006b6e:	2010      	movs	r0, #16
 8006b70:	f7ff ff04 	bl	800697c <malloc>
 8006b74:	4602      	mov	r2, r0
 8006b76:	61e8      	str	r0, [r5, #28]
 8006b78:	b920      	cbnz	r0, 8006b84 <_Bfree+0x20>
 8006b7a:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <_Bfree+0x3c>)
 8006b7c:	4809      	ldr	r0, [pc, #36]	; (8006ba4 <_Bfree+0x40>)
 8006b7e:	218f      	movs	r1, #143	; 0x8f
 8006b80:	f001 fd4e 	bl	8008620 <__assert_func>
 8006b84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b88:	6006      	str	r6, [r0, #0]
 8006b8a:	60c6      	str	r6, [r0, #12]
 8006b8c:	b13c      	cbz	r4, 8006b9e <_Bfree+0x3a>
 8006b8e:	69eb      	ldr	r3, [r5, #28]
 8006b90:	6862      	ldr	r2, [r4, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b98:	6021      	str	r1, [r4, #0]
 8006b9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	080094ee 	.word	0x080094ee
 8006ba4:	0800956e 	.word	0x0800956e

08006ba8 <__multadd>:
 8006ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bac:	690d      	ldr	r5, [r1, #16]
 8006bae:	4607      	mov	r7, r0
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	461e      	mov	r6, r3
 8006bb4:	f101 0c14 	add.w	ip, r1, #20
 8006bb8:	2000      	movs	r0, #0
 8006bba:	f8dc 3000 	ldr.w	r3, [ip]
 8006bbe:	b299      	uxth	r1, r3
 8006bc0:	fb02 6101 	mla	r1, r2, r1, r6
 8006bc4:	0c1e      	lsrs	r6, r3, #16
 8006bc6:	0c0b      	lsrs	r3, r1, #16
 8006bc8:	fb02 3306 	mla	r3, r2, r6, r3
 8006bcc:	b289      	uxth	r1, r1
 8006bce:	3001      	adds	r0, #1
 8006bd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bd4:	4285      	cmp	r5, r0
 8006bd6:	f84c 1b04 	str.w	r1, [ip], #4
 8006bda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bde:	dcec      	bgt.n	8006bba <__multadd+0x12>
 8006be0:	b30e      	cbz	r6, 8006c26 <__multadd+0x7e>
 8006be2:	68a3      	ldr	r3, [r4, #8]
 8006be4:	42ab      	cmp	r3, r5
 8006be6:	dc19      	bgt.n	8006c1c <__multadd+0x74>
 8006be8:	6861      	ldr	r1, [r4, #4]
 8006bea:	4638      	mov	r0, r7
 8006bec:	3101      	adds	r1, #1
 8006bee:	f7ff ff79 	bl	8006ae4 <_Balloc>
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	b928      	cbnz	r0, 8006c02 <__multadd+0x5a>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <__multadd+0x84>)
 8006bfa:	480d      	ldr	r0, [pc, #52]	; (8006c30 <__multadd+0x88>)
 8006bfc:	21ba      	movs	r1, #186	; 0xba
 8006bfe:	f001 fd0f 	bl	8008620 <__assert_func>
 8006c02:	6922      	ldr	r2, [r4, #16]
 8006c04:	3202      	adds	r2, #2
 8006c06:	f104 010c 	add.w	r1, r4, #12
 8006c0a:	0092      	lsls	r2, r2, #2
 8006c0c:	300c      	adds	r0, #12
 8006c0e:	f001 fcef 	bl	80085f0 <memcpy>
 8006c12:	4621      	mov	r1, r4
 8006c14:	4638      	mov	r0, r7
 8006c16:	f7ff ffa5 	bl	8006b64 <_Bfree>
 8006c1a:	4644      	mov	r4, r8
 8006c1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c20:	3501      	adds	r5, #1
 8006c22:	615e      	str	r6, [r3, #20]
 8006c24:	6125      	str	r5, [r4, #16]
 8006c26:	4620      	mov	r0, r4
 8006c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c2c:	0800955d 	.word	0x0800955d
 8006c30:	0800956e 	.word	0x0800956e

08006c34 <__s2b>:
 8006c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c38:	460c      	mov	r4, r1
 8006c3a:	4615      	mov	r5, r2
 8006c3c:	461f      	mov	r7, r3
 8006c3e:	2209      	movs	r2, #9
 8006c40:	3308      	adds	r3, #8
 8006c42:	4606      	mov	r6, r0
 8006c44:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c48:	2100      	movs	r1, #0
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	db09      	blt.n	8006c64 <__s2b+0x30>
 8006c50:	4630      	mov	r0, r6
 8006c52:	f7ff ff47 	bl	8006ae4 <_Balloc>
 8006c56:	b940      	cbnz	r0, 8006c6a <__s2b+0x36>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	4b19      	ldr	r3, [pc, #100]	; (8006cc0 <__s2b+0x8c>)
 8006c5c:	4819      	ldr	r0, [pc, #100]	; (8006cc4 <__s2b+0x90>)
 8006c5e:	21d3      	movs	r1, #211	; 0xd3
 8006c60:	f001 fcde 	bl	8008620 <__assert_func>
 8006c64:	0052      	lsls	r2, r2, #1
 8006c66:	3101      	adds	r1, #1
 8006c68:	e7f0      	b.n	8006c4c <__s2b+0x18>
 8006c6a:	9b08      	ldr	r3, [sp, #32]
 8006c6c:	6143      	str	r3, [r0, #20]
 8006c6e:	2d09      	cmp	r5, #9
 8006c70:	f04f 0301 	mov.w	r3, #1
 8006c74:	6103      	str	r3, [r0, #16]
 8006c76:	dd16      	ble.n	8006ca6 <__s2b+0x72>
 8006c78:	f104 0909 	add.w	r9, r4, #9
 8006c7c:	46c8      	mov	r8, r9
 8006c7e:	442c      	add	r4, r5
 8006c80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c84:	4601      	mov	r1, r0
 8006c86:	3b30      	subs	r3, #48	; 0x30
 8006c88:	220a      	movs	r2, #10
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f7ff ff8c 	bl	8006ba8 <__multadd>
 8006c90:	45a0      	cmp	r8, r4
 8006c92:	d1f5      	bne.n	8006c80 <__s2b+0x4c>
 8006c94:	f1a5 0408 	sub.w	r4, r5, #8
 8006c98:	444c      	add	r4, r9
 8006c9a:	1b2d      	subs	r5, r5, r4
 8006c9c:	1963      	adds	r3, r4, r5
 8006c9e:	42bb      	cmp	r3, r7
 8006ca0:	db04      	blt.n	8006cac <__s2b+0x78>
 8006ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca6:	340a      	adds	r4, #10
 8006ca8:	2509      	movs	r5, #9
 8006caa:	e7f6      	b.n	8006c9a <__s2b+0x66>
 8006cac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006cb0:	4601      	mov	r1, r0
 8006cb2:	3b30      	subs	r3, #48	; 0x30
 8006cb4:	220a      	movs	r2, #10
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7ff ff76 	bl	8006ba8 <__multadd>
 8006cbc:	e7ee      	b.n	8006c9c <__s2b+0x68>
 8006cbe:	bf00      	nop
 8006cc0:	0800955d 	.word	0x0800955d
 8006cc4:	0800956e 	.word	0x0800956e

08006cc8 <__hi0bits>:
 8006cc8:	0c03      	lsrs	r3, r0, #16
 8006cca:	041b      	lsls	r3, r3, #16
 8006ccc:	b9d3      	cbnz	r3, 8006d04 <__hi0bits+0x3c>
 8006cce:	0400      	lsls	r0, r0, #16
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006cd6:	bf04      	itt	eq
 8006cd8:	0200      	lsleq	r0, r0, #8
 8006cda:	3308      	addeq	r3, #8
 8006cdc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ce0:	bf04      	itt	eq
 8006ce2:	0100      	lsleq	r0, r0, #4
 8006ce4:	3304      	addeq	r3, #4
 8006ce6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006cea:	bf04      	itt	eq
 8006cec:	0080      	lsleq	r0, r0, #2
 8006cee:	3302      	addeq	r3, #2
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	db05      	blt.n	8006d00 <__hi0bits+0x38>
 8006cf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006cf8:	f103 0301 	add.w	r3, r3, #1
 8006cfc:	bf08      	it	eq
 8006cfe:	2320      	moveq	r3, #32
 8006d00:	4618      	mov	r0, r3
 8006d02:	4770      	bx	lr
 8006d04:	2300      	movs	r3, #0
 8006d06:	e7e4      	b.n	8006cd2 <__hi0bits+0xa>

08006d08 <__lo0bits>:
 8006d08:	6803      	ldr	r3, [r0, #0]
 8006d0a:	f013 0207 	ands.w	r2, r3, #7
 8006d0e:	d00c      	beq.n	8006d2a <__lo0bits+0x22>
 8006d10:	07d9      	lsls	r1, r3, #31
 8006d12:	d422      	bmi.n	8006d5a <__lo0bits+0x52>
 8006d14:	079a      	lsls	r2, r3, #30
 8006d16:	bf49      	itett	mi
 8006d18:	085b      	lsrmi	r3, r3, #1
 8006d1a:	089b      	lsrpl	r3, r3, #2
 8006d1c:	6003      	strmi	r3, [r0, #0]
 8006d1e:	2201      	movmi	r2, #1
 8006d20:	bf5c      	itt	pl
 8006d22:	6003      	strpl	r3, [r0, #0]
 8006d24:	2202      	movpl	r2, #2
 8006d26:	4610      	mov	r0, r2
 8006d28:	4770      	bx	lr
 8006d2a:	b299      	uxth	r1, r3
 8006d2c:	b909      	cbnz	r1, 8006d32 <__lo0bits+0x2a>
 8006d2e:	0c1b      	lsrs	r3, r3, #16
 8006d30:	2210      	movs	r2, #16
 8006d32:	b2d9      	uxtb	r1, r3
 8006d34:	b909      	cbnz	r1, 8006d3a <__lo0bits+0x32>
 8006d36:	3208      	adds	r2, #8
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	0719      	lsls	r1, r3, #28
 8006d3c:	bf04      	itt	eq
 8006d3e:	091b      	lsreq	r3, r3, #4
 8006d40:	3204      	addeq	r2, #4
 8006d42:	0799      	lsls	r1, r3, #30
 8006d44:	bf04      	itt	eq
 8006d46:	089b      	lsreq	r3, r3, #2
 8006d48:	3202      	addeq	r2, #2
 8006d4a:	07d9      	lsls	r1, r3, #31
 8006d4c:	d403      	bmi.n	8006d56 <__lo0bits+0x4e>
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	f102 0201 	add.w	r2, r2, #1
 8006d54:	d003      	beq.n	8006d5e <__lo0bits+0x56>
 8006d56:	6003      	str	r3, [r0, #0]
 8006d58:	e7e5      	b.n	8006d26 <__lo0bits+0x1e>
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	e7e3      	b.n	8006d26 <__lo0bits+0x1e>
 8006d5e:	2220      	movs	r2, #32
 8006d60:	e7e1      	b.n	8006d26 <__lo0bits+0x1e>
	...

08006d64 <__i2b>:
 8006d64:	b510      	push	{r4, lr}
 8006d66:	460c      	mov	r4, r1
 8006d68:	2101      	movs	r1, #1
 8006d6a:	f7ff febb 	bl	8006ae4 <_Balloc>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	b928      	cbnz	r0, 8006d7e <__i2b+0x1a>
 8006d72:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <__i2b+0x24>)
 8006d74:	4805      	ldr	r0, [pc, #20]	; (8006d8c <__i2b+0x28>)
 8006d76:	f240 1145 	movw	r1, #325	; 0x145
 8006d7a:	f001 fc51 	bl	8008620 <__assert_func>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	6144      	str	r4, [r0, #20]
 8006d82:	6103      	str	r3, [r0, #16]
 8006d84:	bd10      	pop	{r4, pc}
 8006d86:	bf00      	nop
 8006d88:	0800955d 	.word	0x0800955d
 8006d8c:	0800956e 	.word	0x0800956e

08006d90 <__multiply>:
 8006d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	4691      	mov	r9, r2
 8006d96:	690a      	ldr	r2, [r1, #16]
 8006d98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	bfb8      	it	lt
 8006da0:	460b      	movlt	r3, r1
 8006da2:	460c      	mov	r4, r1
 8006da4:	bfbc      	itt	lt
 8006da6:	464c      	movlt	r4, r9
 8006da8:	4699      	movlt	r9, r3
 8006daa:	6927      	ldr	r7, [r4, #16]
 8006dac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006db0:	68a3      	ldr	r3, [r4, #8]
 8006db2:	6861      	ldr	r1, [r4, #4]
 8006db4:	eb07 060a 	add.w	r6, r7, sl
 8006db8:	42b3      	cmp	r3, r6
 8006dba:	b085      	sub	sp, #20
 8006dbc:	bfb8      	it	lt
 8006dbe:	3101      	addlt	r1, #1
 8006dc0:	f7ff fe90 	bl	8006ae4 <_Balloc>
 8006dc4:	b930      	cbnz	r0, 8006dd4 <__multiply+0x44>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	4b44      	ldr	r3, [pc, #272]	; (8006edc <__multiply+0x14c>)
 8006dca:	4845      	ldr	r0, [pc, #276]	; (8006ee0 <__multiply+0x150>)
 8006dcc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006dd0:	f001 fc26 	bl	8008620 <__assert_func>
 8006dd4:	f100 0514 	add.w	r5, r0, #20
 8006dd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ddc:	462b      	mov	r3, r5
 8006dde:	2200      	movs	r2, #0
 8006de0:	4543      	cmp	r3, r8
 8006de2:	d321      	bcc.n	8006e28 <__multiply+0x98>
 8006de4:	f104 0314 	add.w	r3, r4, #20
 8006de8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006dec:	f109 0314 	add.w	r3, r9, #20
 8006df0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006df4:	9202      	str	r2, [sp, #8]
 8006df6:	1b3a      	subs	r2, r7, r4
 8006df8:	3a15      	subs	r2, #21
 8006dfa:	f022 0203 	bic.w	r2, r2, #3
 8006dfe:	3204      	adds	r2, #4
 8006e00:	f104 0115 	add.w	r1, r4, #21
 8006e04:	428f      	cmp	r7, r1
 8006e06:	bf38      	it	cc
 8006e08:	2204      	movcc	r2, #4
 8006e0a:	9201      	str	r2, [sp, #4]
 8006e0c:	9a02      	ldr	r2, [sp, #8]
 8006e0e:	9303      	str	r3, [sp, #12]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d80c      	bhi.n	8006e2e <__multiply+0x9e>
 8006e14:	2e00      	cmp	r6, #0
 8006e16:	dd03      	ble.n	8006e20 <__multiply+0x90>
 8006e18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d05b      	beq.n	8006ed8 <__multiply+0x148>
 8006e20:	6106      	str	r6, [r0, #16]
 8006e22:	b005      	add	sp, #20
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e28:	f843 2b04 	str.w	r2, [r3], #4
 8006e2c:	e7d8      	b.n	8006de0 <__multiply+0x50>
 8006e2e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e32:	f1ba 0f00 	cmp.w	sl, #0
 8006e36:	d024      	beq.n	8006e82 <__multiply+0xf2>
 8006e38:	f104 0e14 	add.w	lr, r4, #20
 8006e3c:	46a9      	mov	r9, r5
 8006e3e:	f04f 0c00 	mov.w	ip, #0
 8006e42:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e46:	f8d9 1000 	ldr.w	r1, [r9]
 8006e4a:	fa1f fb82 	uxth.w	fp, r2
 8006e4e:	b289      	uxth	r1, r1
 8006e50:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006e58:	f8d9 2000 	ldr.w	r2, [r9]
 8006e5c:	4461      	add	r1, ip
 8006e5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e62:	fb0a c20b 	mla	r2, sl, fp, ip
 8006e66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e6a:	b289      	uxth	r1, r1
 8006e6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e70:	4577      	cmp	r7, lr
 8006e72:	f849 1b04 	str.w	r1, [r9], #4
 8006e76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e7a:	d8e2      	bhi.n	8006e42 <__multiply+0xb2>
 8006e7c:	9a01      	ldr	r2, [sp, #4]
 8006e7e:	f845 c002 	str.w	ip, [r5, r2]
 8006e82:	9a03      	ldr	r2, [sp, #12]
 8006e84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	f1b9 0f00 	cmp.w	r9, #0
 8006e8e:	d021      	beq.n	8006ed4 <__multiply+0x144>
 8006e90:	6829      	ldr	r1, [r5, #0]
 8006e92:	f104 0c14 	add.w	ip, r4, #20
 8006e96:	46ae      	mov	lr, r5
 8006e98:	f04f 0a00 	mov.w	sl, #0
 8006e9c:	f8bc b000 	ldrh.w	fp, [ip]
 8006ea0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ea4:	fb09 220b 	mla	r2, r9, fp, r2
 8006ea8:	4452      	add	r2, sl
 8006eaa:	b289      	uxth	r1, r1
 8006eac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006eb0:	f84e 1b04 	str.w	r1, [lr], #4
 8006eb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006eb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ebc:	f8be 1000 	ldrh.w	r1, [lr]
 8006ec0:	fb09 110a 	mla	r1, r9, sl, r1
 8006ec4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006ec8:	4567      	cmp	r7, ip
 8006eca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ece:	d8e5      	bhi.n	8006e9c <__multiply+0x10c>
 8006ed0:	9a01      	ldr	r2, [sp, #4]
 8006ed2:	50a9      	str	r1, [r5, r2]
 8006ed4:	3504      	adds	r5, #4
 8006ed6:	e799      	b.n	8006e0c <__multiply+0x7c>
 8006ed8:	3e01      	subs	r6, #1
 8006eda:	e79b      	b.n	8006e14 <__multiply+0x84>
 8006edc:	0800955d 	.word	0x0800955d
 8006ee0:	0800956e 	.word	0x0800956e

08006ee4 <__pow5mult>:
 8006ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee8:	4615      	mov	r5, r2
 8006eea:	f012 0203 	ands.w	r2, r2, #3
 8006eee:	4606      	mov	r6, r0
 8006ef0:	460f      	mov	r7, r1
 8006ef2:	d007      	beq.n	8006f04 <__pow5mult+0x20>
 8006ef4:	4c25      	ldr	r4, [pc, #148]	; (8006f8c <__pow5mult+0xa8>)
 8006ef6:	3a01      	subs	r2, #1
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006efe:	f7ff fe53 	bl	8006ba8 <__multadd>
 8006f02:	4607      	mov	r7, r0
 8006f04:	10ad      	asrs	r5, r5, #2
 8006f06:	d03d      	beq.n	8006f84 <__pow5mult+0xa0>
 8006f08:	69f4      	ldr	r4, [r6, #28]
 8006f0a:	b97c      	cbnz	r4, 8006f2c <__pow5mult+0x48>
 8006f0c:	2010      	movs	r0, #16
 8006f0e:	f7ff fd35 	bl	800697c <malloc>
 8006f12:	4602      	mov	r2, r0
 8006f14:	61f0      	str	r0, [r6, #28]
 8006f16:	b928      	cbnz	r0, 8006f24 <__pow5mult+0x40>
 8006f18:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <__pow5mult+0xac>)
 8006f1a:	481e      	ldr	r0, [pc, #120]	; (8006f94 <__pow5mult+0xb0>)
 8006f1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006f20:	f001 fb7e 	bl	8008620 <__assert_func>
 8006f24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f28:	6004      	str	r4, [r0, #0]
 8006f2a:	60c4      	str	r4, [r0, #12]
 8006f2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006f30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f34:	b94c      	cbnz	r4, 8006f4a <__pow5mult+0x66>
 8006f36:	f240 2171 	movw	r1, #625	; 0x271
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f7ff ff12 	bl	8006d64 <__i2b>
 8006f40:	2300      	movs	r3, #0
 8006f42:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f46:	4604      	mov	r4, r0
 8006f48:	6003      	str	r3, [r0, #0]
 8006f4a:	f04f 0900 	mov.w	r9, #0
 8006f4e:	07eb      	lsls	r3, r5, #31
 8006f50:	d50a      	bpl.n	8006f68 <__pow5mult+0x84>
 8006f52:	4639      	mov	r1, r7
 8006f54:	4622      	mov	r2, r4
 8006f56:	4630      	mov	r0, r6
 8006f58:	f7ff ff1a 	bl	8006d90 <__multiply>
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	4680      	mov	r8, r0
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7ff fdff 	bl	8006b64 <_Bfree>
 8006f66:	4647      	mov	r7, r8
 8006f68:	106d      	asrs	r5, r5, #1
 8006f6a:	d00b      	beq.n	8006f84 <__pow5mult+0xa0>
 8006f6c:	6820      	ldr	r0, [r4, #0]
 8006f6e:	b938      	cbnz	r0, 8006f80 <__pow5mult+0x9c>
 8006f70:	4622      	mov	r2, r4
 8006f72:	4621      	mov	r1, r4
 8006f74:	4630      	mov	r0, r6
 8006f76:	f7ff ff0b 	bl	8006d90 <__multiply>
 8006f7a:	6020      	str	r0, [r4, #0]
 8006f7c:	f8c0 9000 	str.w	r9, [r0]
 8006f80:	4604      	mov	r4, r0
 8006f82:	e7e4      	b.n	8006f4e <__pow5mult+0x6a>
 8006f84:	4638      	mov	r0, r7
 8006f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f8a:	bf00      	nop
 8006f8c:	080096b8 	.word	0x080096b8
 8006f90:	080094ee 	.word	0x080094ee
 8006f94:	0800956e 	.word	0x0800956e

08006f98 <__lshift>:
 8006f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	6849      	ldr	r1, [r1, #4]
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fa6:	68a3      	ldr	r3, [r4, #8]
 8006fa8:	4607      	mov	r7, r0
 8006faa:	4691      	mov	r9, r2
 8006fac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fb0:	f108 0601 	add.w	r6, r8, #1
 8006fb4:	42b3      	cmp	r3, r6
 8006fb6:	db0b      	blt.n	8006fd0 <__lshift+0x38>
 8006fb8:	4638      	mov	r0, r7
 8006fba:	f7ff fd93 	bl	8006ae4 <_Balloc>
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	b948      	cbnz	r0, 8006fd6 <__lshift+0x3e>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	4b28      	ldr	r3, [pc, #160]	; (8007068 <__lshift+0xd0>)
 8006fc6:	4829      	ldr	r0, [pc, #164]	; (800706c <__lshift+0xd4>)
 8006fc8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006fcc:	f001 fb28 	bl	8008620 <__assert_func>
 8006fd0:	3101      	adds	r1, #1
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	e7ee      	b.n	8006fb4 <__lshift+0x1c>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f100 0114 	add.w	r1, r0, #20
 8006fdc:	f100 0210 	add.w	r2, r0, #16
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	4553      	cmp	r3, sl
 8006fe4:	db33      	blt.n	800704e <__lshift+0xb6>
 8006fe6:	6920      	ldr	r0, [r4, #16]
 8006fe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fec:	f104 0314 	add.w	r3, r4, #20
 8006ff0:	f019 091f 	ands.w	r9, r9, #31
 8006ff4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ff8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ffc:	d02b      	beq.n	8007056 <__lshift+0xbe>
 8006ffe:	f1c9 0e20 	rsb	lr, r9, #32
 8007002:	468a      	mov	sl, r1
 8007004:	2200      	movs	r2, #0
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	fa00 f009 	lsl.w	r0, r0, r9
 800700c:	4310      	orrs	r0, r2
 800700e:	f84a 0b04 	str.w	r0, [sl], #4
 8007012:	f853 2b04 	ldr.w	r2, [r3], #4
 8007016:	459c      	cmp	ip, r3
 8007018:	fa22 f20e 	lsr.w	r2, r2, lr
 800701c:	d8f3      	bhi.n	8007006 <__lshift+0x6e>
 800701e:	ebac 0304 	sub.w	r3, ip, r4
 8007022:	3b15      	subs	r3, #21
 8007024:	f023 0303 	bic.w	r3, r3, #3
 8007028:	3304      	adds	r3, #4
 800702a:	f104 0015 	add.w	r0, r4, #21
 800702e:	4584      	cmp	ip, r0
 8007030:	bf38      	it	cc
 8007032:	2304      	movcc	r3, #4
 8007034:	50ca      	str	r2, [r1, r3]
 8007036:	b10a      	cbz	r2, 800703c <__lshift+0xa4>
 8007038:	f108 0602 	add.w	r6, r8, #2
 800703c:	3e01      	subs	r6, #1
 800703e:	4638      	mov	r0, r7
 8007040:	612e      	str	r6, [r5, #16]
 8007042:	4621      	mov	r1, r4
 8007044:	f7ff fd8e 	bl	8006b64 <_Bfree>
 8007048:	4628      	mov	r0, r5
 800704a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007052:	3301      	adds	r3, #1
 8007054:	e7c5      	b.n	8006fe2 <__lshift+0x4a>
 8007056:	3904      	subs	r1, #4
 8007058:	f853 2b04 	ldr.w	r2, [r3], #4
 800705c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007060:	459c      	cmp	ip, r3
 8007062:	d8f9      	bhi.n	8007058 <__lshift+0xc0>
 8007064:	e7ea      	b.n	800703c <__lshift+0xa4>
 8007066:	bf00      	nop
 8007068:	0800955d 	.word	0x0800955d
 800706c:	0800956e 	.word	0x0800956e

08007070 <__mcmp>:
 8007070:	b530      	push	{r4, r5, lr}
 8007072:	6902      	ldr	r2, [r0, #16]
 8007074:	690c      	ldr	r4, [r1, #16]
 8007076:	1b12      	subs	r2, r2, r4
 8007078:	d10e      	bne.n	8007098 <__mcmp+0x28>
 800707a:	f100 0314 	add.w	r3, r0, #20
 800707e:	3114      	adds	r1, #20
 8007080:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007084:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007088:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800708c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007090:	42a5      	cmp	r5, r4
 8007092:	d003      	beq.n	800709c <__mcmp+0x2c>
 8007094:	d305      	bcc.n	80070a2 <__mcmp+0x32>
 8007096:	2201      	movs	r2, #1
 8007098:	4610      	mov	r0, r2
 800709a:	bd30      	pop	{r4, r5, pc}
 800709c:	4283      	cmp	r3, r0
 800709e:	d3f3      	bcc.n	8007088 <__mcmp+0x18>
 80070a0:	e7fa      	b.n	8007098 <__mcmp+0x28>
 80070a2:	f04f 32ff 	mov.w	r2, #4294967295
 80070a6:	e7f7      	b.n	8007098 <__mcmp+0x28>

080070a8 <__mdiff>:
 80070a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ac:	460c      	mov	r4, r1
 80070ae:	4606      	mov	r6, r0
 80070b0:	4611      	mov	r1, r2
 80070b2:	4620      	mov	r0, r4
 80070b4:	4690      	mov	r8, r2
 80070b6:	f7ff ffdb 	bl	8007070 <__mcmp>
 80070ba:	1e05      	subs	r5, r0, #0
 80070bc:	d110      	bne.n	80070e0 <__mdiff+0x38>
 80070be:	4629      	mov	r1, r5
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7ff fd0f 	bl	8006ae4 <_Balloc>
 80070c6:	b930      	cbnz	r0, 80070d6 <__mdiff+0x2e>
 80070c8:	4b3a      	ldr	r3, [pc, #232]	; (80071b4 <__mdiff+0x10c>)
 80070ca:	4602      	mov	r2, r0
 80070cc:	f240 2137 	movw	r1, #567	; 0x237
 80070d0:	4839      	ldr	r0, [pc, #228]	; (80071b8 <__mdiff+0x110>)
 80070d2:	f001 faa5 	bl	8008620 <__assert_func>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e0:	bfa4      	itt	ge
 80070e2:	4643      	movge	r3, r8
 80070e4:	46a0      	movge	r8, r4
 80070e6:	4630      	mov	r0, r6
 80070e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80070ec:	bfa6      	itte	ge
 80070ee:	461c      	movge	r4, r3
 80070f0:	2500      	movge	r5, #0
 80070f2:	2501      	movlt	r5, #1
 80070f4:	f7ff fcf6 	bl	8006ae4 <_Balloc>
 80070f8:	b920      	cbnz	r0, 8007104 <__mdiff+0x5c>
 80070fa:	4b2e      	ldr	r3, [pc, #184]	; (80071b4 <__mdiff+0x10c>)
 80070fc:	4602      	mov	r2, r0
 80070fe:	f240 2145 	movw	r1, #581	; 0x245
 8007102:	e7e5      	b.n	80070d0 <__mdiff+0x28>
 8007104:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007108:	6926      	ldr	r6, [r4, #16]
 800710a:	60c5      	str	r5, [r0, #12]
 800710c:	f104 0914 	add.w	r9, r4, #20
 8007110:	f108 0514 	add.w	r5, r8, #20
 8007114:	f100 0e14 	add.w	lr, r0, #20
 8007118:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800711c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007120:	f108 0210 	add.w	r2, r8, #16
 8007124:	46f2      	mov	sl, lr
 8007126:	2100      	movs	r1, #0
 8007128:	f859 3b04 	ldr.w	r3, [r9], #4
 800712c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007130:	fa11 f88b 	uxtah	r8, r1, fp
 8007134:	b299      	uxth	r1, r3
 8007136:	0c1b      	lsrs	r3, r3, #16
 8007138:	eba8 0801 	sub.w	r8, r8, r1
 800713c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007140:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007144:	fa1f f888 	uxth.w	r8, r8
 8007148:	1419      	asrs	r1, r3, #16
 800714a:	454e      	cmp	r6, r9
 800714c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007150:	f84a 3b04 	str.w	r3, [sl], #4
 8007154:	d8e8      	bhi.n	8007128 <__mdiff+0x80>
 8007156:	1b33      	subs	r3, r6, r4
 8007158:	3b15      	subs	r3, #21
 800715a:	f023 0303 	bic.w	r3, r3, #3
 800715e:	3304      	adds	r3, #4
 8007160:	3415      	adds	r4, #21
 8007162:	42a6      	cmp	r6, r4
 8007164:	bf38      	it	cc
 8007166:	2304      	movcc	r3, #4
 8007168:	441d      	add	r5, r3
 800716a:	4473      	add	r3, lr
 800716c:	469e      	mov	lr, r3
 800716e:	462e      	mov	r6, r5
 8007170:	4566      	cmp	r6, ip
 8007172:	d30e      	bcc.n	8007192 <__mdiff+0xea>
 8007174:	f10c 0203 	add.w	r2, ip, #3
 8007178:	1b52      	subs	r2, r2, r5
 800717a:	f022 0203 	bic.w	r2, r2, #3
 800717e:	3d03      	subs	r5, #3
 8007180:	45ac      	cmp	ip, r5
 8007182:	bf38      	it	cc
 8007184:	2200      	movcc	r2, #0
 8007186:	4413      	add	r3, r2
 8007188:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800718c:	b17a      	cbz	r2, 80071ae <__mdiff+0x106>
 800718e:	6107      	str	r7, [r0, #16]
 8007190:	e7a4      	b.n	80070dc <__mdiff+0x34>
 8007192:	f856 8b04 	ldr.w	r8, [r6], #4
 8007196:	fa11 f288 	uxtah	r2, r1, r8
 800719a:	1414      	asrs	r4, r2, #16
 800719c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80071a0:	b292      	uxth	r2, r2
 80071a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80071a6:	f84e 2b04 	str.w	r2, [lr], #4
 80071aa:	1421      	asrs	r1, r4, #16
 80071ac:	e7e0      	b.n	8007170 <__mdiff+0xc8>
 80071ae:	3f01      	subs	r7, #1
 80071b0:	e7ea      	b.n	8007188 <__mdiff+0xe0>
 80071b2:	bf00      	nop
 80071b4:	0800955d 	.word	0x0800955d
 80071b8:	0800956e 	.word	0x0800956e

080071bc <__ulp>:
 80071bc:	b082      	sub	sp, #8
 80071be:	ed8d 0b00 	vstr	d0, [sp]
 80071c2:	9a01      	ldr	r2, [sp, #4]
 80071c4:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <__ulp+0x48>)
 80071c6:	4013      	ands	r3, r2
 80071c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	dc08      	bgt.n	80071e2 <__ulp+0x26>
 80071d0:	425b      	negs	r3, r3
 80071d2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80071d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80071da:	da04      	bge.n	80071e6 <__ulp+0x2a>
 80071dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071e0:	4113      	asrs	r3, r2
 80071e2:	2200      	movs	r2, #0
 80071e4:	e008      	b.n	80071f8 <__ulp+0x3c>
 80071e6:	f1a2 0314 	sub.w	r3, r2, #20
 80071ea:	2b1e      	cmp	r3, #30
 80071ec:	bfda      	itte	le
 80071ee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80071f2:	40da      	lsrle	r2, r3
 80071f4:	2201      	movgt	r2, #1
 80071f6:	2300      	movs	r3, #0
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	ec41 0b10 	vmov	d0, r0, r1
 8007200:	b002      	add	sp, #8
 8007202:	4770      	bx	lr
 8007204:	7ff00000 	.word	0x7ff00000

08007208 <__b2d>:
 8007208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800720c:	6906      	ldr	r6, [r0, #16]
 800720e:	f100 0814 	add.w	r8, r0, #20
 8007212:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007216:	1f37      	subs	r7, r6, #4
 8007218:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800721c:	4610      	mov	r0, r2
 800721e:	f7ff fd53 	bl	8006cc8 <__hi0bits>
 8007222:	f1c0 0320 	rsb	r3, r0, #32
 8007226:	280a      	cmp	r0, #10
 8007228:	600b      	str	r3, [r1, #0]
 800722a:	491b      	ldr	r1, [pc, #108]	; (8007298 <__b2d+0x90>)
 800722c:	dc15      	bgt.n	800725a <__b2d+0x52>
 800722e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007232:	fa22 f30c 	lsr.w	r3, r2, ip
 8007236:	45b8      	cmp	r8, r7
 8007238:	ea43 0501 	orr.w	r5, r3, r1
 800723c:	bf34      	ite	cc
 800723e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007242:	2300      	movcs	r3, #0
 8007244:	3015      	adds	r0, #21
 8007246:	fa02 f000 	lsl.w	r0, r2, r0
 800724a:	fa23 f30c 	lsr.w	r3, r3, ip
 800724e:	4303      	orrs	r3, r0
 8007250:	461c      	mov	r4, r3
 8007252:	ec45 4b10 	vmov	d0, r4, r5
 8007256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800725a:	45b8      	cmp	r8, r7
 800725c:	bf3a      	itte	cc
 800725e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007262:	f1a6 0708 	subcc.w	r7, r6, #8
 8007266:	2300      	movcs	r3, #0
 8007268:	380b      	subs	r0, #11
 800726a:	d012      	beq.n	8007292 <__b2d+0x8a>
 800726c:	f1c0 0120 	rsb	r1, r0, #32
 8007270:	fa23 f401 	lsr.w	r4, r3, r1
 8007274:	4082      	lsls	r2, r0
 8007276:	4322      	orrs	r2, r4
 8007278:	4547      	cmp	r7, r8
 800727a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800727e:	bf8c      	ite	hi
 8007280:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007284:	2200      	movls	r2, #0
 8007286:	4083      	lsls	r3, r0
 8007288:	40ca      	lsrs	r2, r1
 800728a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800728e:	4313      	orrs	r3, r2
 8007290:	e7de      	b.n	8007250 <__b2d+0x48>
 8007292:	ea42 0501 	orr.w	r5, r2, r1
 8007296:	e7db      	b.n	8007250 <__b2d+0x48>
 8007298:	3ff00000 	.word	0x3ff00000

0800729c <__d2b>:
 800729c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072a0:	460f      	mov	r7, r1
 80072a2:	2101      	movs	r1, #1
 80072a4:	ec59 8b10 	vmov	r8, r9, d0
 80072a8:	4616      	mov	r6, r2
 80072aa:	f7ff fc1b 	bl	8006ae4 <_Balloc>
 80072ae:	4604      	mov	r4, r0
 80072b0:	b930      	cbnz	r0, 80072c0 <__d2b+0x24>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b24      	ldr	r3, [pc, #144]	; (8007348 <__d2b+0xac>)
 80072b6:	4825      	ldr	r0, [pc, #148]	; (800734c <__d2b+0xb0>)
 80072b8:	f240 310f 	movw	r1, #783	; 0x30f
 80072bc:	f001 f9b0 	bl	8008620 <__assert_func>
 80072c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072c8:	bb2d      	cbnz	r5, 8007316 <__d2b+0x7a>
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	f1b8 0300 	subs.w	r3, r8, #0
 80072d0:	d026      	beq.n	8007320 <__d2b+0x84>
 80072d2:	4668      	mov	r0, sp
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	f7ff fd17 	bl	8006d08 <__lo0bits>
 80072da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072de:	b1e8      	cbz	r0, 800731c <__d2b+0x80>
 80072e0:	f1c0 0320 	rsb	r3, r0, #32
 80072e4:	fa02 f303 	lsl.w	r3, r2, r3
 80072e8:	430b      	orrs	r3, r1
 80072ea:	40c2      	lsrs	r2, r0
 80072ec:	6163      	str	r3, [r4, #20]
 80072ee:	9201      	str	r2, [sp, #4]
 80072f0:	9b01      	ldr	r3, [sp, #4]
 80072f2:	61a3      	str	r3, [r4, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bf14      	ite	ne
 80072f8:	2202      	movne	r2, #2
 80072fa:	2201      	moveq	r2, #1
 80072fc:	6122      	str	r2, [r4, #16]
 80072fe:	b1bd      	cbz	r5, 8007330 <__d2b+0x94>
 8007300:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007304:	4405      	add	r5, r0
 8007306:	603d      	str	r5, [r7, #0]
 8007308:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800730c:	6030      	str	r0, [r6, #0]
 800730e:	4620      	mov	r0, r4
 8007310:	b003      	add	sp, #12
 8007312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800731a:	e7d6      	b.n	80072ca <__d2b+0x2e>
 800731c:	6161      	str	r1, [r4, #20]
 800731e:	e7e7      	b.n	80072f0 <__d2b+0x54>
 8007320:	a801      	add	r0, sp, #4
 8007322:	f7ff fcf1 	bl	8006d08 <__lo0bits>
 8007326:	9b01      	ldr	r3, [sp, #4]
 8007328:	6163      	str	r3, [r4, #20]
 800732a:	3020      	adds	r0, #32
 800732c:	2201      	movs	r2, #1
 800732e:	e7e5      	b.n	80072fc <__d2b+0x60>
 8007330:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007334:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007338:	6038      	str	r0, [r7, #0]
 800733a:	6918      	ldr	r0, [r3, #16]
 800733c:	f7ff fcc4 	bl	8006cc8 <__hi0bits>
 8007340:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007344:	e7e2      	b.n	800730c <__d2b+0x70>
 8007346:	bf00      	nop
 8007348:	0800955d 	.word	0x0800955d
 800734c:	0800956e 	.word	0x0800956e

08007350 <__ratio>:
 8007350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	4688      	mov	r8, r1
 8007356:	4669      	mov	r1, sp
 8007358:	4681      	mov	r9, r0
 800735a:	f7ff ff55 	bl	8007208 <__b2d>
 800735e:	a901      	add	r1, sp, #4
 8007360:	4640      	mov	r0, r8
 8007362:	ec55 4b10 	vmov	r4, r5, d0
 8007366:	f7ff ff4f 	bl	8007208 <__b2d>
 800736a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800736e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007372:	eba3 0c02 	sub.w	ip, r3, r2
 8007376:	e9dd 3200 	ldrd	r3, r2, [sp]
 800737a:	1a9b      	subs	r3, r3, r2
 800737c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007380:	ec51 0b10 	vmov	r0, r1, d0
 8007384:	2b00      	cmp	r3, #0
 8007386:	bfd6      	itet	le
 8007388:	460a      	movle	r2, r1
 800738a:	462a      	movgt	r2, r5
 800738c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007390:	468b      	mov	fp, r1
 8007392:	462f      	mov	r7, r5
 8007394:	bfd4      	ite	le
 8007396:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800739a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800739e:	4620      	mov	r0, r4
 80073a0:	ee10 2a10 	vmov	r2, s0
 80073a4:	465b      	mov	r3, fp
 80073a6:	4639      	mov	r1, r7
 80073a8:	f7f9 fa58 	bl	800085c <__aeabi_ddiv>
 80073ac:	ec41 0b10 	vmov	d0, r0, r1
 80073b0:	b003      	add	sp, #12
 80073b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073b6 <__copybits>:
 80073b6:	3901      	subs	r1, #1
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	1149      	asrs	r1, r1, #5
 80073bc:	6914      	ldr	r4, [r2, #16]
 80073be:	3101      	adds	r1, #1
 80073c0:	f102 0314 	add.w	r3, r2, #20
 80073c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073cc:	1f05      	subs	r5, r0, #4
 80073ce:	42a3      	cmp	r3, r4
 80073d0:	d30c      	bcc.n	80073ec <__copybits+0x36>
 80073d2:	1aa3      	subs	r3, r4, r2
 80073d4:	3b11      	subs	r3, #17
 80073d6:	f023 0303 	bic.w	r3, r3, #3
 80073da:	3211      	adds	r2, #17
 80073dc:	42a2      	cmp	r2, r4
 80073de:	bf88      	it	hi
 80073e0:	2300      	movhi	r3, #0
 80073e2:	4418      	add	r0, r3
 80073e4:	2300      	movs	r3, #0
 80073e6:	4288      	cmp	r0, r1
 80073e8:	d305      	bcc.n	80073f6 <__copybits+0x40>
 80073ea:	bd70      	pop	{r4, r5, r6, pc}
 80073ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80073f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80073f4:	e7eb      	b.n	80073ce <__copybits+0x18>
 80073f6:	f840 3b04 	str.w	r3, [r0], #4
 80073fa:	e7f4      	b.n	80073e6 <__copybits+0x30>

080073fc <__any_on>:
 80073fc:	f100 0214 	add.w	r2, r0, #20
 8007400:	6900      	ldr	r0, [r0, #16]
 8007402:	114b      	asrs	r3, r1, #5
 8007404:	4298      	cmp	r0, r3
 8007406:	b510      	push	{r4, lr}
 8007408:	db11      	blt.n	800742e <__any_on+0x32>
 800740a:	dd0a      	ble.n	8007422 <__any_on+0x26>
 800740c:	f011 011f 	ands.w	r1, r1, #31
 8007410:	d007      	beq.n	8007422 <__any_on+0x26>
 8007412:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007416:	fa24 f001 	lsr.w	r0, r4, r1
 800741a:	fa00 f101 	lsl.w	r1, r0, r1
 800741e:	428c      	cmp	r4, r1
 8007420:	d10b      	bne.n	800743a <__any_on+0x3e>
 8007422:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007426:	4293      	cmp	r3, r2
 8007428:	d803      	bhi.n	8007432 <__any_on+0x36>
 800742a:	2000      	movs	r0, #0
 800742c:	bd10      	pop	{r4, pc}
 800742e:	4603      	mov	r3, r0
 8007430:	e7f7      	b.n	8007422 <__any_on+0x26>
 8007432:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007436:	2900      	cmp	r1, #0
 8007438:	d0f5      	beq.n	8007426 <__any_on+0x2a>
 800743a:	2001      	movs	r0, #1
 800743c:	e7f6      	b.n	800742c <__any_on+0x30>

0800743e <sulp>:
 800743e:	b570      	push	{r4, r5, r6, lr}
 8007440:	4604      	mov	r4, r0
 8007442:	460d      	mov	r5, r1
 8007444:	ec45 4b10 	vmov	d0, r4, r5
 8007448:	4616      	mov	r6, r2
 800744a:	f7ff feb7 	bl	80071bc <__ulp>
 800744e:	ec51 0b10 	vmov	r0, r1, d0
 8007452:	b17e      	cbz	r6, 8007474 <sulp+0x36>
 8007454:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007458:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800745c:	2b00      	cmp	r3, #0
 800745e:	dd09      	ble.n	8007474 <sulp+0x36>
 8007460:	051b      	lsls	r3, r3, #20
 8007462:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007466:	2400      	movs	r4, #0
 8007468:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800746c:	4622      	mov	r2, r4
 800746e:	462b      	mov	r3, r5
 8007470:	f7f9 f8ca 	bl	8000608 <__aeabi_dmul>
 8007474:	bd70      	pop	{r4, r5, r6, pc}
	...

08007478 <_strtod_l>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	ed2d 8b02 	vpush	{d8}
 8007480:	b09b      	sub	sp, #108	; 0x6c
 8007482:	4604      	mov	r4, r0
 8007484:	9213      	str	r2, [sp, #76]	; 0x4c
 8007486:	2200      	movs	r2, #0
 8007488:	9216      	str	r2, [sp, #88]	; 0x58
 800748a:	460d      	mov	r5, r1
 800748c:	f04f 0800 	mov.w	r8, #0
 8007490:	f04f 0900 	mov.w	r9, #0
 8007494:	460a      	mov	r2, r1
 8007496:	9215      	str	r2, [sp, #84]	; 0x54
 8007498:	7811      	ldrb	r1, [r2, #0]
 800749a:	292b      	cmp	r1, #43	; 0x2b
 800749c:	d04c      	beq.n	8007538 <_strtod_l+0xc0>
 800749e:	d83a      	bhi.n	8007516 <_strtod_l+0x9e>
 80074a0:	290d      	cmp	r1, #13
 80074a2:	d834      	bhi.n	800750e <_strtod_l+0x96>
 80074a4:	2908      	cmp	r1, #8
 80074a6:	d834      	bhi.n	8007512 <_strtod_l+0x9a>
 80074a8:	2900      	cmp	r1, #0
 80074aa:	d03d      	beq.n	8007528 <_strtod_l+0xb0>
 80074ac:	2200      	movs	r2, #0
 80074ae:	920a      	str	r2, [sp, #40]	; 0x28
 80074b0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80074b2:	7832      	ldrb	r2, [r6, #0]
 80074b4:	2a30      	cmp	r2, #48	; 0x30
 80074b6:	f040 80b4 	bne.w	8007622 <_strtod_l+0x1aa>
 80074ba:	7872      	ldrb	r2, [r6, #1]
 80074bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80074c0:	2a58      	cmp	r2, #88	; 0x58
 80074c2:	d170      	bne.n	80075a6 <_strtod_l+0x12e>
 80074c4:	9302      	str	r3, [sp, #8]
 80074c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	ab16      	add	r3, sp, #88	; 0x58
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	4a8e      	ldr	r2, [pc, #568]	; (8007708 <_strtod_l+0x290>)
 80074d0:	ab17      	add	r3, sp, #92	; 0x5c
 80074d2:	a915      	add	r1, sp, #84	; 0x54
 80074d4:	4620      	mov	r0, r4
 80074d6:	f001 f93f 	bl	8008758 <__gethex>
 80074da:	f010 070f 	ands.w	r7, r0, #15
 80074de:	4605      	mov	r5, r0
 80074e0:	d005      	beq.n	80074ee <_strtod_l+0x76>
 80074e2:	2f06      	cmp	r7, #6
 80074e4:	d12a      	bne.n	800753c <_strtod_l+0xc4>
 80074e6:	3601      	adds	r6, #1
 80074e8:	2300      	movs	r3, #0
 80074ea:	9615      	str	r6, [sp, #84]	; 0x54
 80074ec:	930a      	str	r3, [sp, #40]	; 0x28
 80074ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f040 857f 	bne.w	8007ff4 <_strtod_l+0xb7c>
 80074f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074f8:	b1db      	cbz	r3, 8007532 <_strtod_l+0xba>
 80074fa:	4642      	mov	r2, r8
 80074fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007500:	ec43 2b10 	vmov	d0, r2, r3
 8007504:	b01b      	add	sp, #108	; 0x6c
 8007506:	ecbd 8b02 	vpop	{d8}
 800750a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750e:	2920      	cmp	r1, #32
 8007510:	d1cc      	bne.n	80074ac <_strtod_l+0x34>
 8007512:	3201      	adds	r2, #1
 8007514:	e7bf      	b.n	8007496 <_strtod_l+0x1e>
 8007516:	292d      	cmp	r1, #45	; 0x2d
 8007518:	d1c8      	bne.n	80074ac <_strtod_l+0x34>
 800751a:	2101      	movs	r1, #1
 800751c:	910a      	str	r1, [sp, #40]	; 0x28
 800751e:	1c51      	adds	r1, r2, #1
 8007520:	9115      	str	r1, [sp, #84]	; 0x54
 8007522:	7852      	ldrb	r2, [r2, #1]
 8007524:	2a00      	cmp	r2, #0
 8007526:	d1c3      	bne.n	80074b0 <_strtod_l+0x38>
 8007528:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800752a:	9515      	str	r5, [sp, #84]	; 0x54
 800752c:	2b00      	cmp	r3, #0
 800752e:	f040 855f 	bne.w	8007ff0 <_strtod_l+0xb78>
 8007532:	4642      	mov	r2, r8
 8007534:	464b      	mov	r3, r9
 8007536:	e7e3      	b.n	8007500 <_strtod_l+0x88>
 8007538:	2100      	movs	r1, #0
 800753a:	e7ef      	b.n	800751c <_strtod_l+0xa4>
 800753c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800753e:	b13a      	cbz	r2, 8007550 <_strtod_l+0xd8>
 8007540:	2135      	movs	r1, #53	; 0x35
 8007542:	a818      	add	r0, sp, #96	; 0x60
 8007544:	f7ff ff37 	bl	80073b6 <__copybits>
 8007548:	9916      	ldr	r1, [sp, #88]	; 0x58
 800754a:	4620      	mov	r0, r4
 800754c:	f7ff fb0a 	bl	8006b64 <_Bfree>
 8007550:	3f01      	subs	r7, #1
 8007552:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007554:	2f04      	cmp	r7, #4
 8007556:	d806      	bhi.n	8007566 <_strtod_l+0xee>
 8007558:	e8df f007 	tbb	[pc, r7]
 800755c:	201d0314 	.word	0x201d0314
 8007560:	14          	.byte	0x14
 8007561:	00          	.byte	0x00
 8007562:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007566:	05e9      	lsls	r1, r5, #23
 8007568:	bf48      	it	mi
 800756a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800756e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007572:	0d1b      	lsrs	r3, r3, #20
 8007574:	051b      	lsls	r3, r3, #20
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1b9      	bne.n	80074ee <_strtod_l+0x76>
 800757a:	f7fe fb03 	bl	8005b84 <__errno>
 800757e:	2322      	movs	r3, #34	; 0x22
 8007580:	6003      	str	r3, [r0, #0]
 8007582:	e7b4      	b.n	80074ee <_strtod_l+0x76>
 8007584:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007588:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800758c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007590:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007594:	e7e7      	b.n	8007566 <_strtod_l+0xee>
 8007596:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007710 <_strtod_l+0x298>
 800759a:	e7e4      	b.n	8007566 <_strtod_l+0xee>
 800759c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80075a0:	f04f 38ff 	mov.w	r8, #4294967295
 80075a4:	e7df      	b.n	8007566 <_strtod_l+0xee>
 80075a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	9215      	str	r2, [sp, #84]	; 0x54
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	2b30      	cmp	r3, #48	; 0x30
 80075b0:	d0f9      	beq.n	80075a6 <_strtod_l+0x12e>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d09b      	beq.n	80074ee <_strtod_l+0x76>
 80075b6:	2301      	movs	r3, #1
 80075b8:	f04f 0a00 	mov.w	sl, #0
 80075bc:	9304      	str	r3, [sp, #16]
 80075be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80075c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80075c6:	46d3      	mov	fp, sl
 80075c8:	220a      	movs	r2, #10
 80075ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 80075cc:	7806      	ldrb	r6, [r0, #0]
 80075ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80075d2:	b2d9      	uxtb	r1, r3
 80075d4:	2909      	cmp	r1, #9
 80075d6:	d926      	bls.n	8007626 <_strtod_l+0x1ae>
 80075d8:	494c      	ldr	r1, [pc, #304]	; (800770c <_strtod_l+0x294>)
 80075da:	2201      	movs	r2, #1
 80075dc:	f000 ffe6 	bl	80085ac <strncmp>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d030      	beq.n	8007646 <_strtod_l+0x1ce>
 80075e4:	2000      	movs	r0, #0
 80075e6:	4632      	mov	r2, r6
 80075e8:	9005      	str	r0, [sp, #20]
 80075ea:	465e      	mov	r6, fp
 80075ec:	4603      	mov	r3, r0
 80075ee:	2a65      	cmp	r2, #101	; 0x65
 80075f0:	d001      	beq.n	80075f6 <_strtod_l+0x17e>
 80075f2:	2a45      	cmp	r2, #69	; 0x45
 80075f4:	d113      	bne.n	800761e <_strtod_l+0x1a6>
 80075f6:	b91e      	cbnz	r6, 8007600 <_strtod_l+0x188>
 80075f8:	9a04      	ldr	r2, [sp, #16]
 80075fa:	4302      	orrs	r2, r0
 80075fc:	d094      	beq.n	8007528 <_strtod_l+0xb0>
 80075fe:	2600      	movs	r6, #0
 8007600:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007602:	1c6a      	adds	r2, r5, #1
 8007604:	9215      	str	r2, [sp, #84]	; 0x54
 8007606:	786a      	ldrb	r2, [r5, #1]
 8007608:	2a2b      	cmp	r2, #43	; 0x2b
 800760a:	d074      	beq.n	80076f6 <_strtod_l+0x27e>
 800760c:	2a2d      	cmp	r2, #45	; 0x2d
 800760e:	d078      	beq.n	8007702 <_strtod_l+0x28a>
 8007610:	f04f 0c00 	mov.w	ip, #0
 8007614:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007618:	2909      	cmp	r1, #9
 800761a:	d97f      	bls.n	800771c <_strtod_l+0x2a4>
 800761c:	9515      	str	r5, [sp, #84]	; 0x54
 800761e:	2700      	movs	r7, #0
 8007620:	e09e      	b.n	8007760 <_strtod_l+0x2e8>
 8007622:	2300      	movs	r3, #0
 8007624:	e7c8      	b.n	80075b8 <_strtod_l+0x140>
 8007626:	f1bb 0f08 	cmp.w	fp, #8
 800762a:	bfd8      	it	le
 800762c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800762e:	f100 0001 	add.w	r0, r0, #1
 8007632:	bfda      	itte	le
 8007634:	fb02 3301 	mlale	r3, r2, r1, r3
 8007638:	9309      	strle	r3, [sp, #36]	; 0x24
 800763a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800763e:	f10b 0b01 	add.w	fp, fp, #1
 8007642:	9015      	str	r0, [sp, #84]	; 0x54
 8007644:	e7c1      	b.n	80075ca <_strtod_l+0x152>
 8007646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	9215      	str	r2, [sp, #84]	; 0x54
 800764c:	785a      	ldrb	r2, [r3, #1]
 800764e:	f1bb 0f00 	cmp.w	fp, #0
 8007652:	d037      	beq.n	80076c4 <_strtod_l+0x24c>
 8007654:	9005      	str	r0, [sp, #20]
 8007656:	465e      	mov	r6, fp
 8007658:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800765c:	2b09      	cmp	r3, #9
 800765e:	d912      	bls.n	8007686 <_strtod_l+0x20e>
 8007660:	2301      	movs	r3, #1
 8007662:	e7c4      	b.n	80075ee <_strtod_l+0x176>
 8007664:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	9215      	str	r2, [sp, #84]	; 0x54
 800766a:	785a      	ldrb	r2, [r3, #1]
 800766c:	3001      	adds	r0, #1
 800766e:	2a30      	cmp	r2, #48	; 0x30
 8007670:	d0f8      	beq.n	8007664 <_strtod_l+0x1ec>
 8007672:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007676:	2b08      	cmp	r3, #8
 8007678:	f200 84c1 	bhi.w	8007ffe <_strtod_l+0xb86>
 800767c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800767e:	9005      	str	r0, [sp, #20]
 8007680:	2000      	movs	r0, #0
 8007682:	930b      	str	r3, [sp, #44]	; 0x2c
 8007684:	4606      	mov	r6, r0
 8007686:	3a30      	subs	r2, #48	; 0x30
 8007688:	f100 0301 	add.w	r3, r0, #1
 800768c:	d014      	beq.n	80076b8 <_strtod_l+0x240>
 800768e:	9905      	ldr	r1, [sp, #20]
 8007690:	4419      	add	r1, r3
 8007692:	9105      	str	r1, [sp, #20]
 8007694:	4633      	mov	r3, r6
 8007696:	eb00 0c06 	add.w	ip, r0, r6
 800769a:	210a      	movs	r1, #10
 800769c:	4563      	cmp	r3, ip
 800769e:	d113      	bne.n	80076c8 <_strtod_l+0x250>
 80076a0:	1833      	adds	r3, r6, r0
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	f106 0601 	add.w	r6, r6, #1
 80076a8:	4406      	add	r6, r0
 80076aa:	dc1a      	bgt.n	80076e2 <_strtod_l+0x26a>
 80076ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076ae:	230a      	movs	r3, #10
 80076b0:	fb03 2301 	mla	r3, r3, r1, r2
 80076b4:	9309      	str	r3, [sp, #36]	; 0x24
 80076b6:	2300      	movs	r3, #0
 80076b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80076ba:	1c51      	adds	r1, r2, #1
 80076bc:	9115      	str	r1, [sp, #84]	; 0x54
 80076be:	7852      	ldrb	r2, [r2, #1]
 80076c0:	4618      	mov	r0, r3
 80076c2:	e7c9      	b.n	8007658 <_strtod_l+0x1e0>
 80076c4:	4658      	mov	r0, fp
 80076c6:	e7d2      	b.n	800766e <_strtod_l+0x1f6>
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	f103 0301 	add.w	r3, r3, #1
 80076ce:	dc03      	bgt.n	80076d8 <_strtod_l+0x260>
 80076d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80076d2:	434f      	muls	r7, r1
 80076d4:	9709      	str	r7, [sp, #36]	; 0x24
 80076d6:	e7e1      	b.n	800769c <_strtod_l+0x224>
 80076d8:	2b10      	cmp	r3, #16
 80076da:	bfd8      	it	le
 80076dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80076e0:	e7dc      	b.n	800769c <_strtod_l+0x224>
 80076e2:	2e10      	cmp	r6, #16
 80076e4:	bfdc      	itt	le
 80076e6:	230a      	movle	r3, #10
 80076e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80076ec:	e7e3      	b.n	80076b6 <_strtod_l+0x23e>
 80076ee:	2300      	movs	r3, #0
 80076f0:	9305      	str	r3, [sp, #20]
 80076f2:	2301      	movs	r3, #1
 80076f4:	e780      	b.n	80075f8 <_strtod_l+0x180>
 80076f6:	f04f 0c00 	mov.w	ip, #0
 80076fa:	1caa      	adds	r2, r5, #2
 80076fc:	9215      	str	r2, [sp, #84]	; 0x54
 80076fe:	78aa      	ldrb	r2, [r5, #2]
 8007700:	e788      	b.n	8007614 <_strtod_l+0x19c>
 8007702:	f04f 0c01 	mov.w	ip, #1
 8007706:	e7f8      	b.n	80076fa <_strtod_l+0x282>
 8007708:	080096c8 	.word	0x080096c8
 800770c:	080096c4 	.word	0x080096c4
 8007710:	7ff00000 	.word	0x7ff00000
 8007714:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007716:	1c51      	adds	r1, r2, #1
 8007718:	9115      	str	r1, [sp, #84]	; 0x54
 800771a:	7852      	ldrb	r2, [r2, #1]
 800771c:	2a30      	cmp	r2, #48	; 0x30
 800771e:	d0f9      	beq.n	8007714 <_strtod_l+0x29c>
 8007720:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007724:	2908      	cmp	r1, #8
 8007726:	f63f af7a 	bhi.w	800761e <_strtod_l+0x1a6>
 800772a:	3a30      	subs	r2, #48	; 0x30
 800772c:	9208      	str	r2, [sp, #32]
 800772e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007730:	920c      	str	r2, [sp, #48]	; 0x30
 8007732:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007734:	1c57      	adds	r7, r2, #1
 8007736:	9715      	str	r7, [sp, #84]	; 0x54
 8007738:	7852      	ldrb	r2, [r2, #1]
 800773a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800773e:	f1be 0f09 	cmp.w	lr, #9
 8007742:	d938      	bls.n	80077b6 <_strtod_l+0x33e>
 8007744:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007746:	1a7f      	subs	r7, r7, r1
 8007748:	2f08      	cmp	r7, #8
 800774a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800774e:	dc03      	bgt.n	8007758 <_strtod_l+0x2e0>
 8007750:	9908      	ldr	r1, [sp, #32]
 8007752:	428f      	cmp	r7, r1
 8007754:	bfa8      	it	ge
 8007756:	460f      	movge	r7, r1
 8007758:	f1bc 0f00 	cmp.w	ip, #0
 800775c:	d000      	beq.n	8007760 <_strtod_l+0x2e8>
 800775e:	427f      	negs	r7, r7
 8007760:	2e00      	cmp	r6, #0
 8007762:	d14f      	bne.n	8007804 <_strtod_l+0x38c>
 8007764:	9904      	ldr	r1, [sp, #16]
 8007766:	4301      	orrs	r1, r0
 8007768:	f47f aec1 	bne.w	80074ee <_strtod_l+0x76>
 800776c:	2b00      	cmp	r3, #0
 800776e:	f47f aedb 	bne.w	8007528 <_strtod_l+0xb0>
 8007772:	2a69      	cmp	r2, #105	; 0x69
 8007774:	d029      	beq.n	80077ca <_strtod_l+0x352>
 8007776:	dc26      	bgt.n	80077c6 <_strtod_l+0x34e>
 8007778:	2a49      	cmp	r2, #73	; 0x49
 800777a:	d026      	beq.n	80077ca <_strtod_l+0x352>
 800777c:	2a4e      	cmp	r2, #78	; 0x4e
 800777e:	f47f aed3 	bne.w	8007528 <_strtod_l+0xb0>
 8007782:	499b      	ldr	r1, [pc, #620]	; (80079f0 <_strtod_l+0x578>)
 8007784:	a815      	add	r0, sp, #84	; 0x54
 8007786:	f001 fa27 	bl	8008bd8 <__match>
 800778a:	2800      	cmp	r0, #0
 800778c:	f43f aecc 	beq.w	8007528 <_strtod_l+0xb0>
 8007790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b28      	cmp	r3, #40	; 0x28
 8007796:	d12f      	bne.n	80077f8 <_strtod_l+0x380>
 8007798:	4996      	ldr	r1, [pc, #600]	; (80079f4 <_strtod_l+0x57c>)
 800779a:	aa18      	add	r2, sp, #96	; 0x60
 800779c:	a815      	add	r0, sp, #84	; 0x54
 800779e:	f001 fa2f 	bl	8008c00 <__hexnan>
 80077a2:	2805      	cmp	r0, #5
 80077a4:	d128      	bne.n	80077f8 <_strtod_l+0x380>
 80077a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80077b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80077b4:	e69b      	b.n	80074ee <_strtod_l+0x76>
 80077b6:	9f08      	ldr	r7, [sp, #32]
 80077b8:	210a      	movs	r1, #10
 80077ba:	fb01 2107 	mla	r1, r1, r7, r2
 80077be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80077c2:	9208      	str	r2, [sp, #32]
 80077c4:	e7b5      	b.n	8007732 <_strtod_l+0x2ba>
 80077c6:	2a6e      	cmp	r2, #110	; 0x6e
 80077c8:	e7d9      	b.n	800777e <_strtod_l+0x306>
 80077ca:	498b      	ldr	r1, [pc, #556]	; (80079f8 <_strtod_l+0x580>)
 80077cc:	a815      	add	r0, sp, #84	; 0x54
 80077ce:	f001 fa03 	bl	8008bd8 <__match>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	f43f aea8 	beq.w	8007528 <_strtod_l+0xb0>
 80077d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077da:	4988      	ldr	r1, [pc, #544]	; (80079fc <_strtod_l+0x584>)
 80077dc:	3b01      	subs	r3, #1
 80077de:	a815      	add	r0, sp, #84	; 0x54
 80077e0:	9315      	str	r3, [sp, #84]	; 0x54
 80077e2:	f001 f9f9 	bl	8008bd8 <__match>
 80077e6:	b910      	cbnz	r0, 80077ee <_strtod_l+0x376>
 80077e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ea:	3301      	adds	r3, #1
 80077ec:	9315      	str	r3, [sp, #84]	; 0x54
 80077ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007a0c <_strtod_l+0x594>
 80077f2:	f04f 0800 	mov.w	r8, #0
 80077f6:	e67a      	b.n	80074ee <_strtod_l+0x76>
 80077f8:	4881      	ldr	r0, [pc, #516]	; (8007a00 <_strtod_l+0x588>)
 80077fa:	f000 ff09 	bl	8008610 <nan>
 80077fe:	ec59 8b10 	vmov	r8, r9, d0
 8007802:	e674      	b.n	80074ee <_strtod_l+0x76>
 8007804:	9b05      	ldr	r3, [sp, #20]
 8007806:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007808:	1afb      	subs	r3, r7, r3
 800780a:	f1bb 0f00 	cmp.w	fp, #0
 800780e:	bf08      	it	eq
 8007810:	46b3      	moveq	fp, r6
 8007812:	2e10      	cmp	r6, #16
 8007814:	9308      	str	r3, [sp, #32]
 8007816:	4635      	mov	r5, r6
 8007818:	bfa8      	it	ge
 800781a:	2510      	movge	r5, #16
 800781c:	f7f8 fe7a 	bl	8000514 <__aeabi_ui2d>
 8007820:	2e09      	cmp	r6, #9
 8007822:	4680      	mov	r8, r0
 8007824:	4689      	mov	r9, r1
 8007826:	dd13      	ble.n	8007850 <_strtod_l+0x3d8>
 8007828:	4b76      	ldr	r3, [pc, #472]	; (8007a04 <_strtod_l+0x58c>)
 800782a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800782e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007832:	f7f8 fee9 	bl	8000608 <__aeabi_dmul>
 8007836:	4680      	mov	r8, r0
 8007838:	4650      	mov	r0, sl
 800783a:	4689      	mov	r9, r1
 800783c:	f7f8 fe6a 	bl	8000514 <__aeabi_ui2d>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4640      	mov	r0, r8
 8007846:	4649      	mov	r1, r9
 8007848:	f7f8 fd28 	bl	800029c <__adddf3>
 800784c:	4680      	mov	r8, r0
 800784e:	4689      	mov	r9, r1
 8007850:	2e0f      	cmp	r6, #15
 8007852:	dc38      	bgt.n	80078c6 <_strtod_l+0x44e>
 8007854:	9b08      	ldr	r3, [sp, #32]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f43f ae49 	beq.w	80074ee <_strtod_l+0x76>
 800785c:	dd24      	ble.n	80078a8 <_strtod_l+0x430>
 800785e:	2b16      	cmp	r3, #22
 8007860:	dc0b      	bgt.n	800787a <_strtod_l+0x402>
 8007862:	4968      	ldr	r1, [pc, #416]	; (8007a04 <_strtod_l+0x58c>)
 8007864:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800786c:	4642      	mov	r2, r8
 800786e:	464b      	mov	r3, r9
 8007870:	f7f8 feca 	bl	8000608 <__aeabi_dmul>
 8007874:	4680      	mov	r8, r0
 8007876:	4689      	mov	r9, r1
 8007878:	e639      	b.n	80074ee <_strtod_l+0x76>
 800787a:	9a08      	ldr	r2, [sp, #32]
 800787c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007880:	4293      	cmp	r3, r2
 8007882:	db20      	blt.n	80078c6 <_strtod_l+0x44e>
 8007884:	4c5f      	ldr	r4, [pc, #380]	; (8007a04 <_strtod_l+0x58c>)
 8007886:	f1c6 060f 	rsb	r6, r6, #15
 800788a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800788e:	4642      	mov	r2, r8
 8007890:	464b      	mov	r3, r9
 8007892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007896:	f7f8 feb7 	bl	8000608 <__aeabi_dmul>
 800789a:	9b08      	ldr	r3, [sp, #32]
 800789c:	1b9e      	subs	r6, r3, r6
 800789e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80078a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80078a6:	e7e3      	b.n	8007870 <_strtod_l+0x3f8>
 80078a8:	9b08      	ldr	r3, [sp, #32]
 80078aa:	3316      	adds	r3, #22
 80078ac:	db0b      	blt.n	80078c6 <_strtod_l+0x44e>
 80078ae:	9b05      	ldr	r3, [sp, #20]
 80078b0:	1bdf      	subs	r7, r3, r7
 80078b2:	4b54      	ldr	r3, [pc, #336]	; (8007a04 <_strtod_l+0x58c>)
 80078b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80078b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078bc:	4640      	mov	r0, r8
 80078be:	4649      	mov	r1, r9
 80078c0:	f7f8 ffcc 	bl	800085c <__aeabi_ddiv>
 80078c4:	e7d6      	b.n	8007874 <_strtod_l+0x3fc>
 80078c6:	9b08      	ldr	r3, [sp, #32]
 80078c8:	1b75      	subs	r5, r6, r5
 80078ca:	441d      	add	r5, r3
 80078cc:	2d00      	cmp	r5, #0
 80078ce:	dd70      	ble.n	80079b2 <_strtod_l+0x53a>
 80078d0:	f015 030f 	ands.w	r3, r5, #15
 80078d4:	d00a      	beq.n	80078ec <_strtod_l+0x474>
 80078d6:	494b      	ldr	r1, [pc, #300]	; (8007a04 <_strtod_l+0x58c>)
 80078d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078dc:	4642      	mov	r2, r8
 80078de:	464b      	mov	r3, r9
 80078e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078e4:	f7f8 fe90 	bl	8000608 <__aeabi_dmul>
 80078e8:	4680      	mov	r8, r0
 80078ea:	4689      	mov	r9, r1
 80078ec:	f035 050f 	bics.w	r5, r5, #15
 80078f0:	d04d      	beq.n	800798e <_strtod_l+0x516>
 80078f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80078f6:	dd22      	ble.n	800793e <_strtod_l+0x4c6>
 80078f8:	2500      	movs	r5, #0
 80078fa:	46ab      	mov	fp, r5
 80078fc:	9509      	str	r5, [sp, #36]	; 0x24
 80078fe:	9505      	str	r5, [sp, #20]
 8007900:	2322      	movs	r3, #34	; 0x22
 8007902:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007a0c <_strtod_l+0x594>
 8007906:	6023      	str	r3, [r4, #0]
 8007908:	f04f 0800 	mov.w	r8, #0
 800790c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790e:	2b00      	cmp	r3, #0
 8007910:	f43f aded 	beq.w	80074ee <_strtod_l+0x76>
 8007914:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007916:	4620      	mov	r0, r4
 8007918:	f7ff f924 	bl	8006b64 <_Bfree>
 800791c:	9905      	ldr	r1, [sp, #20]
 800791e:	4620      	mov	r0, r4
 8007920:	f7ff f920 	bl	8006b64 <_Bfree>
 8007924:	4659      	mov	r1, fp
 8007926:	4620      	mov	r0, r4
 8007928:	f7ff f91c 	bl	8006b64 <_Bfree>
 800792c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800792e:	4620      	mov	r0, r4
 8007930:	f7ff f918 	bl	8006b64 <_Bfree>
 8007934:	4629      	mov	r1, r5
 8007936:	4620      	mov	r0, r4
 8007938:	f7ff f914 	bl	8006b64 <_Bfree>
 800793c:	e5d7      	b.n	80074ee <_strtod_l+0x76>
 800793e:	4b32      	ldr	r3, [pc, #200]	; (8007a08 <_strtod_l+0x590>)
 8007940:	9304      	str	r3, [sp, #16]
 8007942:	2300      	movs	r3, #0
 8007944:	112d      	asrs	r5, r5, #4
 8007946:	4640      	mov	r0, r8
 8007948:	4649      	mov	r1, r9
 800794a:	469a      	mov	sl, r3
 800794c:	2d01      	cmp	r5, #1
 800794e:	dc21      	bgt.n	8007994 <_strtod_l+0x51c>
 8007950:	b10b      	cbz	r3, 8007956 <_strtod_l+0x4de>
 8007952:	4680      	mov	r8, r0
 8007954:	4689      	mov	r9, r1
 8007956:	492c      	ldr	r1, [pc, #176]	; (8007a08 <_strtod_l+0x590>)
 8007958:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800795c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007960:	4642      	mov	r2, r8
 8007962:	464b      	mov	r3, r9
 8007964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007968:	f7f8 fe4e 	bl	8000608 <__aeabi_dmul>
 800796c:	4b27      	ldr	r3, [pc, #156]	; (8007a0c <_strtod_l+0x594>)
 800796e:	460a      	mov	r2, r1
 8007970:	400b      	ands	r3, r1
 8007972:	4927      	ldr	r1, [pc, #156]	; (8007a10 <_strtod_l+0x598>)
 8007974:	428b      	cmp	r3, r1
 8007976:	4680      	mov	r8, r0
 8007978:	d8be      	bhi.n	80078f8 <_strtod_l+0x480>
 800797a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800797e:	428b      	cmp	r3, r1
 8007980:	bf86      	itte	hi
 8007982:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007a14 <_strtod_l+0x59c>
 8007986:	f04f 38ff 	movhi.w	r8, #4294967295
 800798a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800798e:	2300      	movs	r3, #0
 8007990:	9304      	str	r3, [sp, #16]
 8007992:	e07b      	b.n	8007a8c <_strtod_l+0x614>
 8007994:	07ea      	lsls	r2, r5, #31
 8007996:	d505      	bpl.n	80079a4 <_strtod_l+0x52c>
 8007998:	9b04      	ldr	r3, [sp, #16]
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f7f8 fe33 	bl	8000608 <__aeabi_dmul>
 80079a2:	2301      	movs	r3, #1
 80079a4:	9a04      	ldr	r2, [sp, #16]
 80079a6:	3208      	adds	r2, #8
 80079a8:	f10a 0a01 	add.w	sl, sl, #1
 80079ac:	106d      	asrs	r5, r5, #1
 80079ae:	9204      	str	r2, [sp, #16]
 80079b0:	e7cc      	b.n	800794c <_strtod_l+0x4d4>
 80079b2:	d0ec      	beq.n	800798e <_strtod_l+0x516>
 80079b4:	426d      	negs	r5, r5
 80079b6:	f015 020f 	ands.w	r2, r5, #15
 80079ba:	d00a      	beq.n	80079d2 <_strtod_l+0x55a>
 80079bc:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <_strtod_l+0x58c>)
 80079be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079c2:	4640      	mov	r0, r8
 80079c4:	4649      	mov	r1, r9
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	f7f8 ff47 	bl	800085c <__aeabi_ddiv>
 80079ce:	4680      	mov	r8, r0
 80079d0:	4689      	mov	r9, r1
 80079d2:	112d      	asrs	r5, r5, #4
 80079d4:	d0db      	beq.n	800798e <_strtod_l+0x516>
 80079d6:	2d1f      	cmp	r5, #31
 80079d8:	dd1e      	ble.n	8007a18 <_strtod_l+0x5a0>
 80079da:	2500      	movs	r5, #0
 80079dc:	46ab      	mov	fp, r5
 80079de:	9509      	str	r5, [sp, #36]	; 0x24
 80079e0:	9505      	str	r5, [sp, #20]
 80079e2:	2322      	movs	r3, #34	; 0x22
 80079e4:	f04f 0800 	mov.w	r8, #0
 80079e8:	f04f 0900 	mov.w	r9, #0
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	e78d      	b.n	800790c <_strtod_l+0x494>
 80079f0:	080094b5 	.word	0x080094b5
 80079f4:	080096dc 	.word	0x080096dc
 80079f8:	080094ad 	.word	0x080094ad
 80079fc:	080094e4 	.word	0x080094e4
 8007a00:	0800986d 	.word	0x0800986d
 8007a04:	080095f0 	.word	0x080095f0
 8007a08:	080095c8 	.word	0x080095c8
 8007a0c:	7ff00000 	.word	0x7ff00000
 8007a10:	7ca00000 	.word	0x7ca00000
 8007a14:	7fefffff 	.word	0x7fefffff
 8007a18:	f015 0310 	ands.w	r3, r5, #16
 8007a1c:	bf18      	it	ne
 8007a1e:	236a      	movne	r3, #106	; 0x6a
 8007a20:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007dc4 <_strtod_l+0x94c>
 8007a24:	9304      	str	r3, [sp, #16]
 8007a26:	4640      	mov	r0, r8
 8007a28:	4649      	mov	r1, r9
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	07ea      	lsls	r2, r5, #31
 8007a2e:	d504      	bpl.n	8007a3a <_strtod_l+0x5c2>
 8007a30:	e9da 2300 	ldrd	r2, r3, [sl]
 8007a34:	f7f8 fde8 	bl	8000608 <__aeabi_dmul>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	106d      	asrs	r5, r5, #1
 8007a3c:	f10a 0a08 	add.w	sl, sl, #8
 8007a40:	d1f4      	bne.n	8007a2c <_strtod_l+0x5b4>
 8007a42:	b10b      	cbz	r3, 8007a48 <_strtod_l+0x5d0>
 8007a44:	4680      	mov	r8, r0
 8007a46:	4689      	mov	r9, r1
 8007a48:	9b04      	ldr	r3, [sp, #16]
 8007a4a:	b1bb      	cbz	r3, 8007a7c <_strtod_l+0x604>
 8007a4c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007a50:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	4649      	mov	r1, r9
 8007a58:	dd10      	ble.n	8007a7c <_strtod_l+0x604>
 8007a5a:	2b1f      	cmp	r3, #31
 8007a5c:	f340 811e 	ble.w	8007c9c <_strtod_l+0x824>
 8007a60:	2b34      	cmp	r3, #52	; 0x34
 8007a62:	bfde      	ittt	le
 8007a64:	f04f 33ff 	movle.w	r3, #4294967295
 8007a68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007a6c:	4093      	lslle	r3, r2
 8007a6e:	f04f 0800 	mov.w	r8, #0
 8007a72:	bfcc      	ite	gt
 8007a74:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007a78:	ea03 0901 	andle.w	r9, r3, r1
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2300      	movs	r3, #0
 8007a80:	4640      	mov	r0, r8
 8007a82:	4649      	mov	r1, r9
 8007a84:	f7f9 f828 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d1a6      	bne.n	80079da <_strtod_l+0x562>
 8007a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a92:	4633      	mov	r3, r6
 8007a94:	465a      	mov	r2, fp
 8007a96:	4620      	mov	r0, r4
 8007a98:	f7ff f8cc 	bl	8006c34 <__s2b>
 8007a9c:	9009      	str	r0, [sp, #36]	; 0x24
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f43f af2a 	beq.w	80078f8 <_strtod_l+0x480>
 8007aa4:	9a08      	ldr	r2, [sp, #32]
 8007aa6:	9b05      	ldr	r3, [sp, #20]
 8007aa8:	2a00      	cmp	r2, #0
 8007aaa:	eba3 0307 	sub.w	r3, r3, r7
 8007aae:	bfa8      	it	ge
 8007ab0:	2300      	movge	r3, #0
 8007ab2:	930c      	str	r3, [sp, #48]	; 0x30
 8007ab4:	2500      	movs	r5, #0
 8007ab6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007aba:	9312      	str	r3, [sp, #72]	; 0x48
 8007abc:	46ab      	mov	fp, r5
 8007abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	6859      	ldr	r1, [r3, #4]
 8007ac4:	f7ff f80e 	bl	8006ae4 <_Balloc>
 8007ac8:	9005      	str	r0, [sp, #20]
 8007aca:	2800      	cmp	r0, #0
 8007acc:	f43f af18 	beq.w	8007900 <_strtod_l+0x488>
 8007ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	3202      	adds	r2, #2
 8007ad6:	f103 010c 	add.w	r1, r3, #12
 8007ada:	0092      	lsls	r2, r2, #2
 8007adc:	300c      	adds	r0, #12
 8007ade:	f000 fd87 	bl	80085f0 <memcpy>
 8007ae2:	ec49 8b10 	vmov	d0, r8, r9
 8007ae6:	aa18      	add	r2, sp, #96	; 0x60
 8007ae8:	a917      	add	r1, sp, #92	; 0x5c
 8007aea:	4620      	mov	r0, r4
 8007aec:	f7ff fbd6 	bl	800729c <__d2b>
 8007af0:	ec49 8b18 	vmov	d8, r8, r9
 8007af4:	9016      	str	r0, [sp, #88]	; 0x58
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f43f af02 	beq.w	8007900 <_strtod_l+0x488>
 8007afc:	2101      	movs	r1, #1
 8007afe:	4620      	mov	r0, r4
 8007b00:	f7ff f930 	bl	8006d64 <__i2b>
 8007b04:	4683      	mov	fp, r0
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f43f aefa 	beq.w	8007900 <_strtod_l+0x488>
 8007b0c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007b0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b10:	2e00      	cmp	r6, #0
 8007b12:	bfab      	itete	ge
 8007b14:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007b16:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007b18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007b1a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007b1e:	bfac      	ite	ge
 8007b20:	eb06 0a03 	addge.w	sl, r6, r3
 8007b24:	1b9f      	sublt	r7, r3, r6
 8007b26:	9b04      	ldr	r3, [sp, #16]
 8007b28:	1af6      	subs	r6, r6, r3
 8007b2a:	4416      	add	r6, r2
 8007b2c:	4ba0      	ldr	r3, [pc, #640]	; (8007db0 <_strtod_l+0x938>)
 8007b2e:	3e01      	subs	r6, #1
 8007b30:	429e      	cmp	r6, r3
 8007b32:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b36:	f280 80c4 	bge.w	8007cc2 <_strtod_l+0x84a>
 8007b3a:	1b9b      	subs	r3, r3, r6
 8007b3c:	2b1f      	cmp	r3, #31
 8007b3e:	eba2 0203 	sub.w	r2, r2, r3
 8007b42:	f04f 0101 	mov.w	r1, #1
 8007b46:	f300 80b0 	bgt.w	8007caa <_strtod_l+0x832>
 8007b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b4e:	930e      	str	r3, [sp, #56]	; 0x38
 8007b50:	2300      	movs	r3, #0
 8007b52:	930d      	str	r3, [sp, #52]	; 0x34
 8007b54:	eb0a 0602 	add.w	r6, sl, r2
 8007b58:	9b04      	ldr	r3, [sp, #16]
 8007b5a:	45b2      	cmp	sl, r6
 8007b5c:	4417      	add	r7, r2
 8007b5e:	441f      	add	r7, r3
 8007b60:	4653      	mov	r3, sl
 8007b62:	bfa8      	it	ge
 8007b64:	4633      	movge	r3, r6
 8007b66:	42bb      	cmp	r3, r7
 8007b68:	bfa8      	it	ge
 8007b6a:	463b      	movge	r3, r7
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	bfc2      	ittt	gt
 8007b70:	1af6      	subgt	r6, r6, r3
 8007b72:	1aff      	subgt	r7, r7, r3
 8007b74:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	dd17      	ble.n	8007bae <_strtod_l+0x736>
 8007b7e:	4659      	mov	r1, fp
 8007b80:	461a      	mov	r2, r3
 8007b82:	4620      	mov	r0, r4
 8007b84:	f7ff f9ae 	bl	8006ee4 <__pow5mult>
 8007b88:	4683      	mov	fp, r0
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	f43f aeb8 	beq.w	8007900 <_strtod_l+0x488>
 8007b90:	4601      	mov	r1, r0
 8007b92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7ff f8fb 	bl	8006d90 <__multiply>
 8007b9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	f43f aeaf 	beq.w	8007900 <_strtod_l+0x488>
 8007ba2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f7fe ffdd 	bl	8006b64 <_Bfree>
 8007baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bac:	9316      	str	r3, [sp, #88]	; 0x58
 8007bae:	2e00      	cmp	r6, #0
 8007bb0:	f300 808c 	bgt.w	8007ccc <_strtod_l+0x854>
 8007bb4:	9b08      	ldr	r3, [sp, #32]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	dd08      	ble.n	8007bcc <_strtod_l+0x754>
 8007bba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bbc:	9905      	ldr	r1, [sp, #20]
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f7ff f990 	bl	8006ee4 <__pow5mult>
 8007bc4:	9005      	str	r0, [sp, #20]
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	f43f ae9a 	beq.w	8007900 <_strtod_l+0x488>
 8007bcc:	2f00      	cmp	r7, #0
 8007bce:	dd08      	ble.n	8007be2 <_strtod_l+0x76a>
 8007bd0:	9905      	ldr	r1, [sp, #20]
 8007bd2:	463a      	mov	r2, r7
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f7ff f9df 	bl	8006f98 <__lshift>
 8007bda:	9005      	str	r0, [sp, #20]
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	f43f ae8f 	beq.w	8007900 <_strtod_l+0x488>
 8007be2:	f1ba 0f00 	cmp.w	sl, #0
 8007be6:	dd08      	ble.n	8007bfa <_strtod_l+0x782>
 8007be8:	4659      	mov	r1, fp
 8007bea:	4652      	mov	r2, sl
 8007bec:	4620      	mov	r0, r4
 8007bee:	f7ff f9d3 	bl	8006f98 <__lshift>
 8007bf2:	4683      	mov	fp, r0
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f43f ae83 	beq.w	8007900 <_strtod_l+0x488>
 8007bfa:	9a05      	ldr	r2, [sp, #20]
 8007bfc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f7ff fa52 	bl	80070a8 <__mdiff>
 8007c04:	4605      	mov	r5, r0
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f43f ae7a 	beq.w	8007900 <_strtod_l+0x488>
 8007c0c:	68c3      	ldr	r3, [r0, #12]
 8007c0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c10:	2300      	movs	r3, #0
 8007c12:	60c3      	str	r3, [r0, #12]
 8007c14:	4659      	mov	r1, fp
 8007c16:	f7ff fa2b 	bl	8007070 <__mcmp>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	da60      	bge.n	8007ce0 <_strtod_l+0x868>
 8007c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c20:	ea53 0308 	orrs.w	r3, r3, r8
 8007c24:	f040 8084 	bne.w	8007d30 <_strtod_l+0x8b8>
 8007c28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d17f      	bne.n	8007d30 <_strtod_l+0x8b8>
 8007c30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c34:	0d1b      	lsrs	r3, r3, #20
 8007c36:	051b      	lsls	r3, r3, #20
 8007c38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c3c:	d978      	bls.n	8007d30 <_strtod_l+0x8b8>
 8007c3e:	696b      	ldr	r3, [r5, #20]
 8007c40:	b913      	cbnz	r3, 8007c48 <_strtod_l+0x7d0>
 8007c42:	692b      	ldr	r3, [r5, #16]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	dd73      	ble.n	8007d30 <_strtod_l+0x8b8>
 8007c48:	4629      	mov	r1, r5
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f7ff f9a3 	bl	8006f98 <__lshift>
 8007c52:	4659      	mov	r1, fp
 8007c54:	4605      	mov	r5, r0
 8007c56:	f7ff fa0b 	bl	8007070 <__mcmp>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	dd68      	ble.n	8007d30 <_strtod_l+0x8b8>
 8007c5e:	9904      	ldr	r1, [sp, #16]
 8007c60:	4a54      	ldr	r2, [pc, #336]	; (8007db4 <_strtod_l+0x93c>)
 8007c62:	464b      	mov	r3, r9
 8007c64:	2900      	cmp	r1, #0
 8007c66:	f000 8084 	beq.w	8007d72 <_strtod_l+0x8fa>
 8007c6a:	ea02 0109 	and.w	r1, r2, r9
 8007c6e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c72:	dc7e      	bgt.n	8007d72 <_strtod_l+0x8fa>
 8007c74:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c78:	f77f aeb3 	ble.w	80079e2 <_strtod_l+0x56a>
 8007c7c:	4b4e      	ldr	r3, [pc, #312]	; (8007db8 <_strtod_l+0x940>)
 8007c7e:	4640      	mov	r0, r8
 8007c80:	4649      	mov	r1, r9
 8007c82:	2200      	movs	r2, #0
 8007c84:	f7f8 fcc0 	bl	8000608 <__aeabi_dmul>
 8007c88:	4b4a      	ldr	r3, [pc, #296]	; (8007db4 <_strtod_l+0x93c>)
 8007c8a:	400b      	ands	r3, r1
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	4689      	mov	r9, r1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f47f ae3f 	bne.w	8007914 <_strtod_l+0x49c>
 8007c96:	2322      	movs	r3, #34	; 0x22
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	e63b      	b.n	8007914 <_strtod_l+0x49c>
 8007c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca4:	ea03 0808 	and.w	r8, r3, r8
 8007ca8:	e6e8      	b.n	8007a7c <_strtod_l+0x604>
 8007caa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007cae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007cb2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007cb6:	36e2      	adds	r6, #226	; 0xe2
 8007cb8:	fa01 f306 	lsl.w	r3, r1, r6
 8007cbc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007cc0:	e748      	b.n	8007b54 <_strtod_l+0x6dc>
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007cca:	e743      	b.n	8007b54 <_strtod_l+0x6dc>
 8007ccc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007cce:	4632      	mov	r2, r6
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f7ff f961 	bl	8006f98 <__lshift>
 8007cd6:	9016      	str	r0, [sp, #88]	; 0x58
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	f47f af6b 	bne.w	8007bb4 <_strtod_l+0x73c>
 8007cde:	e60f      	b.n	8007900 <_strtod_l+0x488>
 8007ce0:	46ca      	mov	sl, r9
 8007ce2:	d171      	bne.n	8007dc8 <_strtod_l+0x950>
 8007ce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ce6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cea:	b352      	cbz	r2, 8007d42 <_strtod_l+0x8ca>
 8007cec:	4a33      	ldr	r2, [pc, #204]	; (8007dbc <_strtod_l+0x944>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d12a      	bne.n	8007d48 <_strtod_l+0x8d0>
 8007cf2:	9b04      	ldr	r3, [sp, #16]
 8007cf4:	4641      	mov	r1, r8
 8007cf6:	b1fb      	cbz	r3, 8007d38 <_strtod_l+0x8c0>
 8007cf8:	4b2e      	ldr	r3, [pc, #184]	; (8007db4 <_strtod_l+0x93c>)
 8007cfa:	ea09 0303 	and.w	r3, r9, r3
 8007cfe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d02:	f04f 32ff 	mov.w	r2, #4294967295
 8007d06:	d81a      	bhi.n	8007d3e <_strtod_l+0x8c6>
 8007d08:	0d1b      	lsrs	r3, r3, #20
 8007d0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d12:	4299      	cmp	r1, r3
 8007d14:	d118      	bne.n	8007d48 <_strtod_l+0x8d0>
 8007d16:	4b2a      	ldr	r3, [pc, #168]	; (8007dc0 <_strtod_l+0x948>)
 8007d18:	459a      	cmp	sl, r3
 8007d1a:	d102      	bne.n	8007d22 <_strtod_l+0x8aa>
 8007d1c:	3101      	adds	r1, #1
 8007d1e:	f43f adef 	beq.w	8007900 <_strtod_l+0x488>
 8007d22:	4b24      	ldr	r3, [pc, #144]	; (8007db4 <_strtod_l+0x93c>)
 8007d24:	ea0a 0303 	and.w	r3, sl, r3
 8007d28:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007d2c:	f04f 0800 	mov.w	r8, #0
 8007d30:	9b04      	ldr	r3, [sp, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1a2      	bne.n	8007c7c <_strtod_l+0x804>
 8007d36:	e5ed      	b.n	8007914 <_strtod_l+0x49c>
 8007d38:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3c:	e7e9      	b.n	8007d12 <_strtod_l+0x89a>
 8007d3e:	4613      	mov	r3, r2
 8007d40:	e7e7      	b.n	8007d12 <_strtod_l+0x89a>
 8007d42:	ea53 0308 	orrs.w	r3, r3, r8
 8007d46:	d08a      	beq.n	8007c5e <_strtod_l+0x7e6>
 8007d48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d4a:	b1e3      	cbz	r3, 8007d86 <_strtod_l+0x90e>
 8007d4c:	ea13 0f0a 	tst.w	r3, sl
 8007d50:	d0ee      	beq.n	8007d30 <_strtod_l+0x8b8>
 8007d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d54:	9a04      	ldr	r2, [sp, #16]
 8007d56:	4640      	mov	r0, r8
 8007d58:	4649      	mov	r1, r9
 8007d5a:	b1c3      	cbz	r3, 8007d8e <_strtod_l+0x916>
 8007d5c:	f7ff fb6f 	bl	800743e <sulp>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	ec51 0b18 	vmov	r0, r1, d8
 8007d68:	f7f8 fa98 	bl	800029c <__adddf3>
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	4689      	mov	r9, r1
 8007d70:	e7de      	b.n	8007d30 <_strtod_l+0x8b8>
 8007d72:	4013      	ands	r3, r2
 8007d74:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007d78:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007d7c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007d80:	f04f 38ff 	mov.w	r8, #4294967295
 8007d84:	e7d4      	b.n	8007d30 <_strtod_l+0x8b8>
 8007d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d88:	ea13 0f08 	tst.w	r3, r8
 8007d8c:	e7e0      	b.n	8007d50 <_strtod_l+0x8d8>
 8007d8e:	f7ff fb56 	bl	800743e <sulp>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	ec51 0b18 	vmov	r0, r1, d8
 8007d9a:	f7f8 fa7d 	bl	8000298 <__aeabi_dsub>
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2300      	movs	r3, #0
 8007da2:	4680      	mov	r8, r0
 8007da4:	4689      	mov	r9, r1
 8007da6:	f7f8 fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d0c0      	beq.n	8007d30 <_strtod_l+0x8b8>
 8007dae:	e618      	b.n	80079e2 <_strtod_l+0x56a>
 8007db0:	fffffc02 	.word	0xfffffc02
 8007db4:	7ff00000 	.word	0x7ff00000
 8007db8:	39500000 	.word	0x39500000
 8007dbc:	000fffff 	.word	0x000fffff
 8007dc0:	7fefffff 	.word	0x7fefffff
 8007dc4:	080096f0 	.word	0x080096f0
 8007dc8:	4659      	mov	r1, fp
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f7ff fac0 	bl	8007350 <__ratio>
 8007dd0:	ec57 6b10 	vmov	r6, r7, d0
 8007dd4:	ee10 0a10 	vmov	r0, s0
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dde:	4639      	mov	r1, r7
 8007de0:	f7f8 fe8e 	bl	8000b00 <__aeabi_dcmple>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d071      	beq.n	8007ecc <_strtod_l+0xa54>
 8007de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d17c      	bne.n	8007ee8 <_strtod_l+0xa70>
 8007dee:	f1b8 0f00 	cmp.w	r8, #0
 8007df2:	d15a      	bne.n	8007eaa <_strtod_l+0xa32>
 8007df4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d15d      	bne.n	8007eb8 <_strtod_l+0xa40>
 8007dfc:	4b90      	ldr	r3, [pc, #576]	; (8008040 <_strtod_l+0xbc8>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	4630      	mov	r0, r6
 8007e02:	4639      	mov	r1, r7
 8007e04:	f7f8 fe72 	bl	8000aec <__aeabi_dcmplt>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d15c      	bne.n	8007ec6 <_strtod_l+0xa4e>
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	4639      	mov	r1, r7
 8007e10:	4b8c      	ldr	r3, [pc, #560]	; (8008044 <_strtod_l+0xbcc>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	f7f8 fbf8 	bl	8000608 <__aeabi_dmul>
 8007e18:	4606      	mov	r6, r0
 8007e1a:	460f      	mov	r7, r1
 8007e1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007e20:	9606      	str	r6, [sp, #24]
 8007e22:	9307      	str	r3, [sp, #28]
 8007e24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007e2c:	4b86      	ldr	r3, [pc, #536]	; (8008048 <_strtod_l+0xbd0>)
 8007e2e:	ea0a 0303 	and.w	r3, sl, r3
 8007e32:	930d      	str	r3, [sp, #52]	; 0x34
 8007e34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e36:	4b85      	ldr	r3, [pc, #532]	; (800804c <_strtod_l+0xbd4>)
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	f040 8090 	bne.w	8007f5e <_strtod_l+0xae6>
 8007e3e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007e42:	ec49 8b10 	vmov	d0, r8, r9
 8007e46:	f7ff f9b9 	bl	80071bc <__ulp>
 8007e4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e4e:	ec51 0b10 	vmov	r0, r1, d0
 8007e52:	f7f8 fbd9 	bl	8000608 <__aeabi_dmul>
 8007e56:	4642      	mov	r2, r8
 8007e58:	464b      	mov	r3, r9
 8007e5a:	f7f8 fa1f 	bl	800029c <__adddf3>
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4979      	ldr	r1, [pc, #484]	; (8008048 <_strtod_l+0xbd0>)
 8007e62:	4a7b      	ldr	r2, [pc, #492]	; (8008050 <_strtod_l+0xbd8>)
 8007e64:	4019      	ands	r1, r3
 8007e66:	4291      	cmp	r1, r2
 8007e68:	4680      	mov	r8, r0
 8007e6a:	d944      	bls.n	8007ef6 <_strtod_l+0xa7e>
 8007e6c:	ee18 2a90 	vmov	r2, s17
 8007e70:	4b78      	ldr	r3, [pc, #480]	; (8008054 <_strtod_l+0xbdc>)
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d104      	bne.n	8007e80 <_strtod_l+0xa08>
 8007e76:	ee18 3a10 	vmov	r3, s16
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	f43f ad40 	beq.w	8007900 <_strtod_l+0x488>
 8007e80:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008054 <_strtod_l+0xbdc>
 8007e84:	f04f 38ff 	mov.w	r8, #4294967295
 8007e88:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f7fe fe6a 	bl	8006b64 <_Bfree>
 8007e90:	9905      	ldr	r1, [sp, #20]
 8007e92:	4620      	mov	r0, r4
 8007e94:	f7fe fe66 	bl	8006b64 <_Bfree>
 8007e98:	4659      	mov	r1, fp
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f7fe fe62 	bl	8006b64 <_Bfree>
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f7fe fe5e 	bl	8006b64 <_Bfree>
 8007ea8:	e609      	b.n	8007abe <_strtod_l+0x646>
 8007eaa:	f1b8 0f01 	cmp.w	r8, #1
 8007eae:	d103      	bne.n	8007eb8 <_strtod_l+0xa40>
 8007eb0:	f1b9 0f00 	cmp.w	r9, #0
 8007eb4:	f43f ad95 	beq.w	80079e2 <_strtod_l+0x56a>
 8007eb8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008010 <_strtod_l+0xb98>
 8007ebc:	4f60      	ldr	r7, [pc, #384]	; (8008040 <_strtod_l+0xbc8>)
 8007ebe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ec2:	2600      	movs	r6, #0
 8007ec4:	e7ae      	b.n	8007e24 <_strtod_l+0x9ac>
 8007ec6:	4f5f      	ldr	r7, [pc, #380]	; (8008044 <_strtod_l+0xbcc>)
 8007ec8:	2600      	movs	r6, #0
 8007eca:	e7a7      	b.n	8007e1c <_strtod_l+0x9a4>
 8007ecc:	4b5d      	ldr	r3, [pc, #372]	; (8008044 <_strtod_l+0xbcc>)
 8007ece:	4630      	mov	r0, r6
 8007ed0:	4639      	mov	r1, r7
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f7f8 fb98 	bl	8000608 <__aeabi_dmul>
 8007ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eda:	4606      	mov	r6, r0
 8007edc:	460f      	mov	r7, r1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d09c      	beq.n	8007e1c <_strtod_l+0x9a4>
 8007ee2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007ee6:	e79d      	b.n	8007e24 <_strtod_l+0x9ac>
 8007ee8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008018 <_strtod_l+0xba0>
 8007eec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ef0:	ec57 6b17 	vmov	r6, r7, d7
 8007ef4:	e796      	b.n	8007e24 <_strtod_l+0x9ac>
 8007ef6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007efa:	9b04      	ldr	r3, [sp, #16]
 8007efc:	46ca      	mov	sl, r9
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1c2      	bne.n	8007e88 <_strtod_l+0xa10>
 8007f02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f08:	0d1b      	lsrs	r3, r3, #20
 8007f0a:	051b      	lsls	r3, r3, #20
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d1bb      	bne.n	8007e88 <_strtod_l+0xa10>
 8007f10:	4630      	mov	r0, r6
 8007f12:	4639      	mov	r1, r7
 8007f14:	f7f8 fed8 	bl	8000cc8 <__aeabi_d2lz>
 8007f18:	f7f8 fb48 	bl	80005ac <__aeabi_l2d>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4630      	mov	r0, r6
 8007f22:	4639      	mov	r1, r7
 8007f24:	f7f8 f9b8 	bl	8000298 <__aeabi_dsub>
 8007f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f2e:	ea43 0308 	orr.w	r3, r3, r8
 8007f32:	4313      	orrs	r3, r2
 8007f34:	4606      	mov	r6, r0
 8007f36:	460f      	mov	r7, r1
 8007f38:	d054      	beq.n	8007fe4 <_strtod_l+0xb6c>
 8007f3a:	a339      	add	r3, pc, #228	; (adr r3, 8008020 <_strtod_l+0xba8>)
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f7f8 fdd4 	bl	8000aec <__aeabi_dcmplt>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f47f ace5 	bne.w	8007914 <_strtod_l+0x49c>
 8007f4a:	a337      	add	r3, pc, #220	; (adr r3, 8008028 <_strtod_l+0xbb0>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	4630      	mov	r0, r6
 8007f52:	4639      	mov	r1, r7
 8007f54:	f7f8 fde8 	bl	8000b28 <__aeabi_dcmpgt>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d095      	beq.n	8007e88 <_strtod_l+0xa10>
 8007f5c:	e4da      	b.n	8007914 <_strtod_l+0x49c>
 8007f5e:	9b04      	ldr	r3, [sp, #16]
 8007f60:	b333      	cbz	r3, 8007fb0 <_strtod_l+0xb38>
 8007f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f68:	d822      	bhi.n	8007fb0 <_strtod_l+0xb38>
 8007f6a:	a331      	add	r3, pc, #196	; (adr r3, 8008030 <_strtod_l+0xbb8>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	4630      	mov	r0, r6
 8007f72:	4639      	mov	r1, r7
 8007f74:	f7f8 fdc4 	bl	8000b00 <__aeabi_dcmple>
 8007f78:	b1a0      	cbz	r0, 8007fa4 <_strtod_l+0xb2c>
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f7f8 fe1b 	bl	8000bb8 <__aeabi_d2uiz>
 8007f82:	2801      	cmp	r0, #1
 8007f84:	bf38      	it	cc
 8007f86:	2001      	movcc	r0, #1
 8007f88:	f7f8 fac4 	bl	8000514 <__aeabi_ui2d>
 8007f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f8e:	4606      	mov	r6, r0
 8007f90:	460f      	mov	r7, r1
 8007f92:	bb23      	cbnz	r3, 8007fde <_strtod_l+0xb66>
 8007f94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f98:	9010      	str	r0, [sp, #64]	; 0x40
 8007f9a:	9311      	str	r3, [sp, #68]	; 0x44
 8007f9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fa0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fa8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007fac:	1a9b      	subs	r3, r3, r2
 8007fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fb0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8007fb8:	eef0 0a68 	vmov.f32	s1, s17
 8007fbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007fc0:	f7ff f8fc 	bl	80071bc <__ulp>
 8007fc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007fc8:	ec53 2b10 	vmov	r2, r3, d0
 8007fcc:	f7f8 fb1c 	bl	8000608 <__aeabi_dmul>
 8007fd0:	ec53 2b18 	vmov	r2, r3, d8
 8007fd4:	f7f8 f962 	bl	800029c <__adddf3>
 8007fd8:	4680      	mov	r8, r0
 8007fda:	4689      	mov	r9, r1
 8007fdc:	e78d      	b.n	8007efa <_strtod_l+0xa82>
 8007fde:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007fe2:	e7db      	b.n	8007f9c <_strtod_l+0xb24>
 8007fe4:	a314      	add	r3, pc, #80	; (adr r3, 8008038 <_strtod_l+0xbc0>)
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	f7f8 fd7f 	bl	8000aec <__aeabi_dcmplt>
 8007fee:	e7b3      	b.n	8007f58 <_strtod_l+0xae0>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	f7ff ba7c 	b.w	80074f6 <_strtod_l+0x7e>
 8007ffe:	2a65      	cmp	r2, #101	; 0x65
 8008000:	f43f ab75 	beq.w	80076ee <_strtod_l+0x276>
 8008004:	2a45      	cmp	r2, #69	; 0x45
 8008006:	f43f ab72 	beq.w	80076ee <_strtod_l+0x276>
 800800a:	2301      	movs	r3, #1
 800800c:	f7ff bbaa 	b.w	8007764 <_strtod_l+0x2ec>
 8008010:	00000000 	.word	0x00000000
 8008014:	bff00000 	.word	0xbff00000
 8008018:	00000000 	.word	0x00000000
 800801c:	3ff00000 	.word	0x3ff00000
 8008020:	94a03595 	.word	0x94a03595
 8008024:	3fdfffff 	.word	0x3fdfffff
 8008028:	35afe535 	.word	0x35afe535
 800802c:	3fe00000 	.word	0x3fe00000
 8008030:	ffc00000 	.word	0xffc00000
 8008034:	41dfffff 	.word	0x41dfffff
 8008038:	94a03595 	.word	0x94a03595
 800803c:	3fcfffff 	.word	0x3fcfffff
 8008040:	3ff00000 	.word	0x3ff00000
 8008044:	3fe00000 	.word	0x3fe00000
 8008048:	7ff00000 	.word	0x7ff00000
 800804c:	7fe00000 	.word	0x7fe00000
 8008050:	7c9fffff 	.word	0x7c9fffff
 8008054:	7fefffff 	.word	0x7fefffff

08008058 <_strtod_r>:
 8008058:	4b01      	ldr	r3, [pc, #4]	; (8008060 <_strtod_r+0x8>)
 800805a:	f7ff ba0d 	b.w	8007478 <_strtod_l>
 800805e:	bf00      	nop
 8008060:	20000068 	.word	0x20000068

08008064 <_strtol_l.constprop.0>:
 8008064:	2b01      	cmp	r3, #1
 8008066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800806a:	d001      	beq.n	8008070 <_strtol_l.constprop.0+0xc>
 800806c:	2b24      	cmp	r3, #36	; 0x24
 800806e:	d906      	bls.n	800807e <_strtol_l.constprop.0+0x1a>
 8008070:	f7fd fd88 	bl	8005b84 <__errno>
 8008074:	2316      	movs	r3, #22
 8008076:	6003      	str	r3, [r0, #0]
 8008078:	2000      	movs	r0, #0
 800807a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008164 <_strtol_l.constprop.0+0x100>
 8008082:	460d      	mov	r5, r1
 8008084:	462e      	mov	r6, r5
 8008086:	f815 4b01 	ldrb.w	r4, [r5], #1
 800808a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800808e:	f017 0708 	ands.w	r7, r7, #8
 8008092:	d1f7      	bne.n	8008084 <_strtol_l.constprop.0+0x20>
 8008094:	2c2d      	cmp	r4, #45	; 0x2d
 8008096:	d132      	bne.n	80080fe <_strtol_l.constprop.0+0x9a>
 8008098:	782c      	ldrb	r4, [r5, #0]
 800809a:	2701      	movs	r7, #1
 800809c:	1cb5      	adds	r5, r6, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d05b      	beq.n	800815a <_strtol_l.constprop.0+0xf6>
 80080a2:	2b10      	cmp	r3, #16
 80080a4:	d109      	bne.n	80080ba <_strtol_l.constprop.0+0x56>
 80080a6:	2c30      	cmp	r4, #48	; 0x30
 80080a8:	d107      	bne.n	80080ba <_strtol_l.constprop.0+0x56>
 80080aa:	782c      	ldrb	r4, [r5, #0]
 80080ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80080b0:	2c58      	cmp	r4, #88	; 0x58
 80080b2:	d14d      	bne.n	8008150 <_strtol_l.constprop.0+0xec>
 80080b4:	786c      	ldrb	r4, [r5, #1]
 80080b6:	2310      	movs	r3, #16
 80080b8:	3502      	adds	r5, #2
 80080ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80080be:	f108 38ff 	add.w	r8, r8, #4294967295
 80080c2:	f04f 0e00 	mov.w	lr, #0
 80080c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80080ca:	4676      	mov	r6, lr
 80080cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80080d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80080d4:	f1bc 0f09 	cmp.w	ip, #9
 80080d8:	d816      	bhi.n	8008108 <_strtol_l.constprop.0+0xa4>
 80080da:	4664      	mov	r4, ip
 80080dc:	42a3      	cmp	r3, r4
 80080de:	dd24      	ble.n	800812a <_strtol_l.constprop.0+0xc6>
 80080e0:	f1be 3fff 	cmp.w	lr, #4294967295
 80080e4:	d008      	beq.n	80080f8 <_strtol_l.constprop.0+0x94>
 80080e6:	45b1      	cmp	r9, r6
 80080e8:	d31c      	bcc.n	8008124 <_strtol_l.constprop.0+0xc0>
 80080ea:	d101      	bne.n	80080f0 <_strtol_l.constprop.0+0x8c>
 80080ec:	45a2      	cmp	sl, r4
 80080ee:	db19      	blt.n	8008124 <_strtol_l.constprop.0+0xc0>
 80080f0:	fb06 4603 	mla	r6, r6, r3, r4
 80080f4:	f04f 0e01 	mov.w	lr, #1
 80080f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080fc:	e7e8      	b.n	80080d0 <_strtol_l.constprop.0+0x6c>
 80080fe:	2c2b      	cmp	r4, #43	; 0x2b
 8008100:	bf04      	itt	eq
 8008102:	782c      	ldrbeq	r4, [r5, #0]
 8008104:	1cb5      	addeq	r5, r6, #2
 8008106:	e7ca      	b.n	800809e <_strtol_l.constprop.0+0x3a>
 8008108:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800810c:	f1bc 0f19 	cmp.w	ip, #25
 8008110:	d801      	bhi.n	8008116 <_strtol_l.constprop.0+0xb2>
 8008112:	3c37      	subs	r4, #55	; 0x37
 8008114:	e7e2      	b.n	80080dc <_strtol_l.constprop.0+0x78>
 8008116:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800811a:	f1bc 0f19 	cmp.w	ip, #25
 800811e:	d804      	bhi.n	800812a <_strtol_l.constprop.0+0xc6>
 8008120:	3c57      	subs	r4, #87	; 0x57
 8008122:	e7db      	b.n	80080dc <_strtol_l.constprop.0+0x78>
 8008124:	f04f 3eff 	mov.w	lr, #4294967295
 8008128:	e7e6      	b.n	80080f8 <_strtol_l.constprop.0+0x94>
 800812a:	f1be 3fff 	cmp.w	lr, #4294967295
 800812e:	d105      	bne.n	800813c <_strtol_l.constprop.0+0xd8>
 8008130:	2322      	movs	r3, #34	; 0x22
 8008132:	6003      	str	r3, [r0, #0]
 8008134:	4646      	mov	r6, r8
 8008136:	b942      	cbnz	r2, 800814a <_strtol_l.constprop.0+0xe6>
 8008138:	4630      	mov	r0, r6
 800813a:	e79e      	b.n	800807a <_strtol_l.constprop.0+0x16>
 800813c:	b107      	cbz	r7, 8008140 <_strtol_l.constprop.0+0xdc>
 800813e:	4276      	negs	r6, r6
 8008140:	2a00      	cmp	r2, #0
 8008142:	d0f9      	beq.n	8008138 <_strtol_l.constprop.0+0xd4>
 8008144:	f1be 0f00 	cmp.w	lr, #0
 8008148:	d000      	beq.n	800814c <_strtol_l.constprop.0+0xe8>
 800814a:	1e69      	subs	r1, r5, #1
 800814c:	6011      	str	r1, [r2, #0]
 800814e:	e7f3      	b.n	8008138 <_strtol_l.constprop.0+0xd4>
 8008150:	2430      	movs	r4, #48	; 0x30
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1b1      	bne.n	80080ba <_strtol_l.constprop.0+0x56>
 8008156:	2308      	movs	r3, #8
 8008158:	e7af      	b.n	80080ba <_strtol_l.constprop.0+0x56>
 800815a:	2c30      	cmp	r4, #48	; 0x30
 800815c:	d0a5      	beq.n	80080aa <_strtol_l.constprop.0+0x46>
 800815e:	230a      	movs	r3, #10
 8008160:	e7ab      	b.n	80080ba <_strtol_l.constprop.0+0x56>
 8008162:	bf00      	nop
 8008164:	08009719 	.word	0x08009719

08008168 <_strtol_r>:
 8008168:	f7ff bf7c 	b.w	8008064 <_strtol_l.constprop.0>

0800816c <__ssputs_r>:
 800816c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008170:	688e      	ldr	r6, [r1, #8]
 8008172:	461f      	mov	r7, r3
 8008174:	42be      	cmp	r6, r7
 8008176:	680b      	ldr	r3, [r1, #0]
 8008178:	4682      	mov	sl, r0
 800817a:	460c      	mov	r4, r1
 800817c:	4690      	mov	r8, r2
 800817e:	d82c      	bhi.n	80081da <__ssputs_r+0x6e>
 8008180:	898a      	ldrh	r2, [r1, #12]
 8008182:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008186:	d026      	beq.n	80081d6 <__ssputs_r+0x6a>
 8008188:	6965      	ldr	r5, [r4, #20]
 800818a:	6909      	ldr	r1, [r1, #16]
 800818c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008190:	eba3 0901 	sub.w	r9, r3, r1
 8008194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008198:	1c7b      	adds	r3, r7, #1
 800819a:	444b      	add	r3, r9
 800819c:	106d      	asrs	r5, r5, #1
 800819e:	429d      	cmp	r5, r3
 80081a0:	bf38      	it	cc
 80081a2:	461d      	movcc	r5, r3
 80081a4:	0553      	lsls	r3, r2, #21
 80081a6:	d527      	bpl.n	80081f8 <__ssputs_r+0x8c>
 80081a8:	4629      	mov	r1, r5
 80081aa:	f7fe fc0f 	bl	80069cc <_malloc_r>
 80081ae:	4606      	mov	r6, r0
 80081b0:	b360      	cbz	r0, 800820c <__ssputs_r+0xa0>
 80081b2:	6921      	ldr	r1, [r4, #16]
 80081b4:	464a      	mov	r2, r9
 80081b6:	f000 fa1b 	bl	80085f0 <memcpy>
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c4:	81a3      	strh	r3, [r4, #12]
 80081c6:	6126      	str	r6, [r4, #16]
 80081c8:	6165      	str	r5, [r4, #20]
 80081ca:	444e      	add	r6, r9
 80081cc:	eba5 0509 	sub.w	r5, r5, r9
 80081d0:	6026      	str	r6, [r4, #0]
 80081d2:	60a5      	str	r5, [r4, #8]
 80081d4:	463e      	mov	r6, r7
 80081d6:	42be      	cmp	r6, r7
 80081d8:	d900      	bls.n	80081dc <__ssputs_r+0x70>
 80081da:	463e      	mov	r6, r7
 80081dc:	6820      	ldr	r0, [r4, #0]
 80081de:	4632      	mov	r2, r6
 80081e0:	4641      	mov	r1, r8
 80081e2:	f000 f9c9 	bl	8008578 <memmove>
 80081e6:	68a3      	ldr	r3, [r4, #8]
 80081e8:	1b9b      	subs	r3, r3, r6
 80081ea:	60a3      	str	r3, [r4, #8]
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	4433      	add	r3, r6
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	2000      	movs	r0, #0
 80081f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f8:	462a      	mov	r2, r5
 80081fa:	f000 fdae 	bl	8008d5a <_realloc_r>
 80081fe:	4606      	mov	r6, r0
 8008200:	2800      	cmp	r0, #0
 8008202:	d1e0      	bne.n	80081c6 <__ssputs_r+0x5a>
 8008204:	6921      	ldr	r1, [r4, #16]
 8008206:	4650      	mov	r0, sl
 8008208:	f7fe fb6c 	bl	80068e4 <_free_r>
 800820c:	230c      	movs	r3, #12
 800820e:	f8ca 3000 	str.w	r3, [sl]
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008218:	81a3      	strh	r3, [r4, #12]
 800821a:	f04f 30ff 	mov.w	r0, #4294967295
 800821e:	e7e9      	b.n	80081f4 <__ssputs_r+0x88>

08008220 <_svfiprintf_r>:
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	4698      	mov	r8, r3
 8008226:	898b      	ldrh	r3, [r1, #12]
 8008228:	061b      	lsls	r3, r3, #24
 800822a:	b09d      	sub	sp, #116	; 0x74
 800822c:	4607      	mov	r7, r0
 800822e:	460d      	mov	r5, r1
 8008230:	4614      	mov	r4, r2
 8008232:	d50e      	bpl.n	8008252 <_svfiprintf_r+0x32>
 8008234:	690b      	ldr	r3, [r1, #16]
 8008236:	b963      	cbnz	r3, 8008252 <_svfiprintf_r+0x32>
 8008238:	2140      	movs	r1, #64	; 0x40
 800823a:	f7fe fbc7 	bl	80069cc <_malloc_r>
 800823e:	6028      	str	r0, [r5, #0]
 8008240:	6128      	str	r0, [r5, #16]
 8008242:	b920      	cbnz	r0, 800824e <_svfiprintf_r+0x2e>
 8008244:	230c      	movs	r3, #12
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	e0d0      	b.n	80083f0 <_svfiprintf_r+0x1d0>
 800824e:	2340      	movs	r3, #64	; 0x40
 8008250:	616b      	str	r3, [r5, #20]
 8008252:	2300      	movs	r3, #0
 8008254:	9309      	str	r3, [sp, #36]	; 0x24
 8008256:	2320      	movs	r3, #32
 8008258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800825c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008260:	2330      	movs	r3, #48	; 0x30
 8008262:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008408 <_svfiprintf_r+0x1e8>
 8008266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800826a:	f04f 0901 	mov.w	r9, #1
 800826e:	4623      	mov	r3, r4
 8008270:	469a      	mov	sl, r3
 8008272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008276:	b10a      	cbz	r2, 800827c <_svfiprintf_r+0x5c>
 8008278:	2a25      	cmp	r2, #37	; 0x25
 800827a:	d1f9      	bne.n	8008270 <_svfiprintf_r+0x50>
 800827c:	ebba 0b04 	subs.w	fp, sl, r4
 8008280:	d00b      	beq.n	800829a <_svfiprintf_r+0x7a>
 8008282:	465b      	mov	r3, fp
 8008284:	4622      	mov	r2, r4
 8008286:	4629      	mov	r1, r5
 8008288:	4638      	mov	r0, r7
 800828a:	f7ff ff6f 	bl	800816c <__ssputs_r>
 800828e:	3001      	adds	r0, #1
 8008290:	f000 80a9 	beq.w	80083e6 <_svfiprintf_r+0x1c6>
 8008294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008296:	445a      	add	r2, fp
 8008298:	9209      	str	r2, [sp, #36]	; 0x24
 800829a:	f89a 3000 	ldrb.w	r3, [sl]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 80a1 	beq.w	80083e6 <_svfiprintf_r+0x1c6>
 80082a4:	2300      	movs	r3, #0
 80082a6:	f04f 32ff 	mov.w	r2, #4294967295
 80082aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ae:	f10a 0a01 	add.w	sl, sl, #1
 80082b2:	9304      	str	r3, [sp, #16]
 80082b4:	9307      	str	r3, [sp, #28]
 80082b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082ba:	931a      	str	r3, [sp, #104]	; 0x68
 80082bc:	4654      	mov	r4, sl
 80082be:	2205      	movs	r2, #5
 80082c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082c4:	4850      	ldr	r0, [pc, #320]	; (8008408 <_svfiprintf_r+0x1e8>)
 80082c6:	f7f7 ff8b 	bl	80001e0 <memchr>
 80082ca:	9a04      	ldr	r2, [sp, #16]
 80082cc:	b9d8      	cbnz	r0, 8008306 <_svfiprintf_r+0xe6>
 80082ce:	06d0      	lsls	r0, r2, #27
 80082d0:	bf44      	itt	mi
 80082d2:	2320      	movmi	r3, #32
 80082d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082d8:	0711      	lsls	r1, r2, #28
 80082da:	bf44      	itt	mi
 80082dc:	232b      	movmi	r3, #43	; 0x2b
 80082de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082e2:	f89a 3000 	ldrb.w	r3, [sl]
 80082e6:	2b2a      	cmp	r3, #42	; 0x2a
 80082e8:	d015      	beq.n	8008316 <_svfiprintf_r+0xf6>
 80082ea:	9a07      	ldr	r2, [sp, #28]
 80082ec:	4654      	mov	r4, sl
 80082ee:	2000      	movs	r0, #0
 80082f0:	f04f 0c0a 	mov.w	ip, #10
 80082f4:	4621      	mov	r1, r4
 80082f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082fa:	3b30      	subs	r3, #48	; 0x30
 80082fc:	2b09      	cmp	r3, #9
 80082fe:	d94d      	bls.n	800839c <_svfiprintf_r+0x17c>
 8008300:	b1b0      	cbz	r0, 8008330 <_svfiprintf_r+0x110>
 8008302:	9207      	str	r2, [sp, #28]
 8008304:	e014      	b.n	8008330 <_svfiprintf_r+0x110>
 8008306:	eba0 0308 	sub.w	r3, r0, r8
 800830a:	fa09 f303 	lsl.w	r3, r9, r3
 800830e:	4313      	orrs	r3, r2
 8008310:	9304      	str	r3, [sp, #16]
 8008312:	46a2      	mov	sl, r4
 8008314:	e7d2      	b.n	80082bc <_svfiprintf_r+0x9c>
 8008316:	9b03      	ldr	r3, [sp, #12]
 8008318:	1d19      	adds	r1, r3, #4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	9103      	str	r1, [sp, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	bfbb      	ittet	lt
 8008322:	425b      	neglt	r3, r3
 8008324:	f042 0202 	orrlt.w	r2, r2, #2
 8008328:	9307      	strge	r3, [sp, #28]
 800832a:	9307      	strlt	r3, [sp, #28]
 800832c:	bfb8      	it	lt
 800832e:	9204      	strlt	r2, [sp, #16]
 8008330:	7823      	ldrb	r3, [r4, #0]
 8008332:	2b2e      	cmp	r3, #46	; 0x2e
 8008334:	d10c      	bne.n	8008350 <_svfiprintf_r+0x130>
 8008336:	7863      	ldrb	r3, [r4, #1]
 8008338:	2b2a      	cmp	r3, #42	; 0x2a
 800833a:	d134      	bne.n	80083a6 <_svfiprintf_r+0x186>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	1d1a      	adds	r2, r3, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	9203      	str	r2, [sp, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	bfb8      	it	lt
 8008348:	f04f 33ff 	movlt.w	r3, #4294967295
 800834c:	3402      	adds	r4, #2
 800834e:	9305      	str	r3, [sp, #20]
 8008350:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008418 <_svfiprintf_r+0x1f8>
 8008354:	7821      	ldrb	r1, [r4, #0]
 8008356:	2203      	movs	r2, #3
 8008358:	4650      	mov	r0, sl
 800835a:	f7f7 ff41 	bl	80001e0 <memchr>
 800835e:	b138      	cbz	r0, 8008370 <_svfiprintf_r+0x150>
 8008360:	9b04      	ldr	r3, [sp, #16]
 8008362:	eba0 000a 	sub.w	r0, r0, sl
 8008366:	2240      	movs	r2, #64	; 0x40
 8008368:	4082      	lsls	r2, r0
 800836a:	4313      	orrs	r3, r2
 800836c:	3401      	adds	r4, #1
 800836e:	9304      	str	r3, [sp, #16]
 8008370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008374:	4825      	ldr	r0, [pc, #148]	; (800840c <_svfiprintf_r+0x1ec>)
 8008376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800837a:	2206      	movs	r2, #6
 800837c:	f7f7 ff30 	bl	80001e0 <memchr>
 8008380:	2800      	cmp	r0, #0
 8008382:	d038      	beq.n	80083f6 <_svfiprintf_r+0x1d6>
 8008384:	4b22      	ldr	r3, [pc, #136]	; (8008410 <_svfiprintf_r+0x1f0>)
 8008386:	bb1b      	cbnz	r3, 80083d0 <_svfiprintf_r+0x1b0>
 8008388:	9b03      	ldr	r3, [sp, #12]
 800838a:	3307      	adds	r3, #7
 800838c:	f023 0307 	bic.w	r3, r3, #7
 8008390:	3308      	adds	r3, #8
 8008392:	9303      	str	r3, [sp, #12]
 8008394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008396:	4433      	add	r3, r6
 8008398:	9309      	str	r3, [sp, #36]	; 0x24
 800839a:	e768      	b.n	800826e <_svfiprintf_r+0x4e>
 800839c:	fb0c 3202 	mla	r2, ip, r2, r3
 80083a0:	460c      	mov	r4, r1
 80083a2:	2001      	movs	r0, #1
 80083a4:	e7a6      	b.n	80082f4 <_svfiprintf_r+0xd4>
 80083a6:	2300      	movs	r3, #0
 80083a8:	3401      	adds	r4, #1
 80083aa:	9305      	str	r3, [sp, #20]
 80083ac:	4619      	mov	r1, r3
 80083ae:	f04f 0c0a 	mov.w	ip, #10
 80083b2:	4620      	mov	r0, r4
 80083b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083b8:	3a30      	subs	r2, #48	; 0x30
 80083ba:	2a09      	cmp	r2, #9
 80083bc:	d903      	bls.n	80083c6 <_svfiprintf_r+0x1a6>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0c6      	beq.n	8008350 <_svfiprintf_r+0x130>
 80083c2:	9105      	str	r1, [sp, #20]
 80083c4:	e7c4      	b.n	8008350 <_svfiprintf_r+0x130>
 80083c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80083ca:	4604      	mov	r4, r0
 80083cc:	2301      	movs	r3, #1
 80083ce:	e7f0      	b.n	80083b2 <_svfiprintf_r+0x192>
 80083d0:	ab03      	add	r3, sp, #12
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	462a      	mov	r2, r5
 80083d6:	4b0f      	ldr	r3, [pc, #60]	; (8008414 <_svfiprintf_r+0x1f4>)
 80083d8:	a904      	add	r1, sp, #16
 80083da:	4638      	mov	r0, r7
 80083dc:	f7fc fc84 	bl	8004ce8 <_printf_float>
 80083e0:	1c42      	adds	r2, r0, #1
 80083e2:	4606      	mov	r6, r0
 80083e4:	d1d6      	bne.n	8008394 <_svfiprintf_r+0x174>
 80083e6:	89ab      	ldrh	r3, [r5, #12]
 80083e8:	065b      	lsls	r3, r3, #25
 80083ea:	f53f af2d 	bmi.w	8008248 <_svfiprintf_r+0x28>
 80083ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083f0:	b01d      	add	sp, #116	; 0x74
 80083f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f6:	ab03      	add	r3, sp, #12
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	462a      	mov	r2, r5
 80083fc:	4b05      	ldr	r3, [pc, #20]	; (8008414 <_svfiprintf_r+0x1f4>)
 80083fe:	a904      	add	r1, sp, #16
 8008400:	4638      	mov	r0, r7
 8008402:	f7fc ff15 	bl	8005230 <_printf_i>
 8008406:	e7eb      	b.n	80083e0 <_svfiprintf_r+0x1c0>
 8008408:	08009819 	.word	0x08009819
 800840c:	08009823 	.word	0x08009823
 8008410:	08004ce9 	.word	0x08004ce9
 8008414:	0800816d 	.word	0x0800816d
 8008418:	0800981f 	.word	0x0800981f

0800841c <__sflush_r>:
 800841c:	898a      	ldrh	r2, [r1, #12]
 800841e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008422:	4605      	mov	r5, r0
 8008424:	0710      	lsls	r0, r2, #28
 8008426:	460c      	mov	r4, r1
 8008428:	d458      	bmi.n	80084dc <__sflush_r+0xc0>
 800842a:	684b      	ldr	r3, [r1, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	dc05      	bgt.n	800843c <__sflush_r+0x20>
 8008430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008432:	2b00      	cmp	r3, #0
 8008434:	dc02      	bgt.n	800843c <__sflush_r+0x20>
 8008436:	2000      	movs	r0, #0
 8008438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800843c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800843e:	2e00      	cmp	r6, #0
 8008440:	d0f9      	beq.n	8008436 <__sflush_r+0x1a>
 8008442:	2300      	movs	r3, #0
 8008444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008448:	682f      	ldr	r7, [r5, #0]
 800844a:	6a21      	ldr	r1, [r4, #32]
 800844c:	602b      	str	r3, [r5, #0]
 800844e:	d032      	beq.n	80084b6 <__sflush_r+0x9a>
 8008450:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	075a      	lsls	r2, r3, #29
 8008456:	d505      	bpl.n	8008464 <__sflush_r+0x48>
 8008458:	6863      	ldr	r3, [r4, #4]
 800845a:	1ac0      	subs	r0, r0, r3
 800845c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800845e:	b10b      	cbz	r3, 8008464 <__sflush_r+0x48>
 8008460:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008462:	1ac0      	subs	r0, r0, r3
 8008464:	2300      	movs	r3, #0
 8008466:	4602      	mov	r2, r0
 8008468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800846a:	6a21      	ldr	r1, [r4, #32]
 800846c:	4628      	mov	r0, r5
 800846e:	47b0      	blx	r6
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	d106      	bne.n	8008484 <__sflush_r+0x68>
 8008476:	6829      	ldr	r1, [r5, #0]
 8008478:	291d      	cmp	r1, #29
 800847a:	d82b      	bhi.n	80084d4 <__sflush_r+0xb8>
 800847c:	4a29      	ldr	r2, [pc, #164]	; (8008524 <__sflush_r+0x108>)
 800847e:	410a      	asrs	r2, r1
 8008480:	07d6      	lsls	r6, r2, #31
 8008482:	d427      	bmi.n	80084d4 <__sflush_r+0xb8>
 8008484:	2200      	movs	r2, #0
 8008486:	6062      	str	r2, [r4, #4]
 8008488:	04d9      	lsls	r1, r3, #19
 800848a:	6922      	ldr	r2, [r4, #16]
 800848c:	6022      	str	r2, [r4, #0]
 800848e:	d504      	bpl.n	800849a <__sflush_r+0x7e>
 8008490:	1c42      	adds	r2, r0, #1
 8008492:	d101      	bne.n	8008498 <__sflush_r+0x7c>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b903      	cbnz	r3, 800849a <__sflush_r+0x7e>
 8008498:	6560      	str	r0, [r4, #84]	; 0x54
 800849a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800849c:	602f      	str	r7, [r5, #0]
 800849e:	2900      	cmp	r1, #0
 80084a0:	d0c9      	beq.n	8008436 <__sflush_r+0x1a>
 80084a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084a6:	4299      	cmp	r1, r3
 80084a8:	d002      	beq.n	80084b0 <__sflush_r+0x94>
 80084aa:	4628      	mov	r0, r5
 80084ac:	f7fe fa1a 	bl	80068e4 <_free_r>
 80084b0:	2000      	movs	r0, #0
 80084b2:	6360      	str	r0, [r4, #52]	; 0x34
 80084b4:	e7c0      	b.n	8008438 <__sflush_r+0x1c>
 80084b6:	2301      	movs	r3, #1
 80084b8:	4628      	mov	r0, r5
 80084ba:	47b0      	blx	r6
 80084bc:	1c41      	adds	r1, r0, #1
 80084be:	d1c8      	bne.n	8008452 <__sflush_r+0x36>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0c5      	beq.n	8008452 <__sflush_r+0x36>
 80084c6:	2b1d      	cmp	r3, #29
 80084c8:	d001      	beq.n	80084ce <__sflush_r+0xb2>
 80084ca:	2b16      	cmp	r3, #22
 80084cc:	d101      	bne.n	80084d2 <__sflush_r+0xb6>
 80084ce:	602f      	str	r7, [r5, #0]
 80084d0:	e7b1      	b.n	8008436 <__sflush_r+0x1a>
 80084d2:	89a3      	ldrh	r3, [r4, #12]
 80084d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	e7ad      	b.n	8008438 <__sflush_r+0x1c>
 80084dc:	690f      	ldr	r7, [r1, #16]
 80084de:	2f00      	cmp	r7, #0
 80084e0:	d0a9      	beq.n	8008436 <__sflush_r+0x1a>
 80084e2:	0793      	lsls	r3, r2, #30
 80084e4:	680e      	ldr	r6, [r1, #0]
 80084e6:	bf08      	it	eq
 80084e8:	694b      	ldreq	r3, [r1, #20]
 80084ea:	600f      	str	r7, [r1, #0]
 80084ec:	bf18      	it	ne
 80084ee:	2300      	movne	r3, #0
 80084f0:	eba6 0807 	sub.w	r8, r6, r7
 80084f4:	608b      	str	r3, [r1, #8]
 80084f6:	f1b8 0f00 	cmp.w	r8, #0
 80084fa:	dd9c      	ble.n	8008436 <__sflush_r+0x1a>
 80084fc:	6a21      	ldr	r1, [r4, #32]
 80084fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008500:	4643      	mov	r3, r8
 8008502:	463a      	mov	r2, r7
 8008504:	4628      	mov	r0, r5
 8008506:	47b0      	blx	r6
 8008508:	2800      	cmp	r0, #0
 800850a:	dc06      	bgt.n	800851a <__sflush_r+0xfe>
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	f04f 30ff 	mov.w	r0, #4294967295
 8008518:	e78e      	b.n	8008438 <__sflush_r+0x1c>
 800851a:	4407      	add	r7, r0
 800851c:	eba8 0800 	sub.w	r8, r8, r0
 8008520:	e7e9      	b.n	80084f6 <__sflush_r+0xda>
 8008522:	bf00      	nop
 8008524:	dfbffffe 	.word	0xdfbffffe

08008528 <_fflush_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	690b      	ldr	r3, [r1, #16]
 800852c:	4605      	mov	r5, r0
 800852e:	460c      	mov	r4, r1
 8008530:	b913      	cbnz	r3, 8008538 <_fflush_r+0x10>
 8008532:	2500      	movs	r5, #0
 8008534:	4628      	mov	r0, r5
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	b118      	cbz	r0, 8008542 <_fflush_r+0x1a>
 800853a:	6a03      	ldr	r3, [r0, #32]
 800853c:	b90b      	cbnz	r3, 8008542 <_fflush_r+0x1a>
 800853e:	f7fd fa35 	bl	80059ac <__sinit>
 8008542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0f3      	beq.n	8008532 <_fflush_r+0xa>
 800854a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800854c:	07d0      	lsls	r0, r2, #31
 800854e:	d404      	bmi.n	800855a <_fflush_r+0x32>
 8008550:	0599      	lsls	r1, r3, #22
 8008552:	d402      	bmi.n	800855a <_fflush_r+0x32>
 8008554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008556:	f7fd fb40 	bl	8005bda <__retarget_lock_acquire_recursive>
 800855a:	4628      	mov	r0, r5
 800855c:	4621      	mov	r1, r4
 800855e:	f7ff ff5d 	bl	800841c <__sflush_r>
 8008562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008564:	07da      	lsls	r2, r3, #31
 8008566:	4605      	mov	r5, r0
 8008568:	d4e4      	bmi.n	8008534 <_fflush_r+0xc>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	059b      	lsls	r3, r3, #22
 800856e:	d4e1      	bmi.n	8008534 <_fflush_r+0xc>
 8008570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008572:	f7fd fb33 	bl	8005bdc <__retarget_lock_release_recursive>
 8008576:	e7dd      	b.n	8008534 <_fflush_r+0xc>

08008578 <memmove>:
 8008578:	4288      	cmp	r0, r1
 800857a:	b510      	push	{r4, lr}
 800857c:	eb01 0402 	add.w	r4, r1, r2
 8008580:	d902      	bls.n	8008588 <memmove+0x10>
 8008582:	4284      	cmp	r4, r0
 8008584:	4623      	mov	r3, r4
 8008586:	d807      	bhi.n	8008598 <memmove+0x20>
 8008588:	1e43      	subs	r3, r0, #1
 800858a:	42a1      	cmp	r1, r4
 800858c:	d008      	beq.n	80085a0 <memmove+0x28>
 800858e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008592:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008596:	e7f8      	b.n	800858a <memmove+0x12>
 8008598:	4402      	add	r2, r0
 800859a:	4601      	mov	r1, r0
 800859c:	428a      	cmp	r2, r1
 800859e:	d100      	bne.n	80085a2 <memmove+0x2a>
 80085a0:	bd10      	pop	{r4, pc}
 80085a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085aa:	e7f7      	b.n	800859c <memmove+0x24>

080085ac <strncmp>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	b16a      	cbz	r2, 80085cc <strncmp+0x20>
 80085b0:	3901      	subs	r1, #1
 80085b2:	1884      	adds	r4, r0, r2
 80085b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80085bc:	429a      	cmp	r2, r3
 80085be:	d103      	bne.n	80085c8 <strncmp+0x1c>
 80085c0:	42a0      	cmp	r0, r4
 80085c2:	d001      	beq.n	80085c8 <strncmp+0x1c>
 80085c4:	2a00      	cmp	r2, #0
 80085c6:	d1f5      	bne.n	80085b4 <strncmp+0x8>
 80085c8:	1ad0      	subs	r0, r2, r3
 80085ca:	bd10      	pop	{r4, pc}
 80085cc:	4610      	mov	r0, r2
 80085ce:	e7fc      	b.n	80085ca <strncmp+0x1e>

080085d0 <_sbrk_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d06      	ldr	r5, [pc, #24]	; (80085ec <_sbrk_r+0x1c>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	f7f9 fbee 	bl	8001dbc <_sbrk>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_sbrk_r+0x1a>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_sbrk_r+0x1a>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	20000410 	.word	0x20000410

080085f0 <memcpy>:
 80085f0:	440a      	add	r2, r1
 80085f2:	4291      	cmp	r1, r2
 80085f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80085f8:	d100      	bne.n	80085fc <memcpy+0xc>
 80085fa:	4770      	bx	lr
 80085fc:	b510      	push	{r4, lr}
 80085fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008606:	4291      	cmp	r1, r2
 8008608:	d1f9      	bne.n	80085fe <memcpy+0xe>
 800860a:	bd10      	pop	{r4, pc}
 800860c:	0000      	movs	r0, r0
	...

08008610 <nan>:
 8008610:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008618 <nan+0x8>
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	00000000 	.word	0x00000000
 800861c:	7ff80000 	.word	0x7ff80000

08008620 <__assert_func>:
 8008620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008622:	4614      	mov	r4, r2
 8008624:	461a      	mov	r2, r3
 8008626:	4b09      	ldr	r3, [pc, #36]	; (800864c <__assert_func+0x2c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4605      	mov	r5, r0
 800862c:	68d8      	ldr	r0, [r3, #12]
 800862e:	b14c      	cbz	r4, 8008644 <__assert_func+0x24>
 8008630:	4b07      	ldr	r3, [pc, #28]	; (8008650 <__assert_func+0x30>)
 8008632:	9100      	str	r1, [sp, #0]
 8008634:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008638:	4906      	ldr	r1, [pc, #24]	; (8008654 <__assert_func+0x34>)
 800863a:	462b      	mov	r3, r5
 800863c:	f000 fbca 	bl	8008dd4 <fiprintf>
 8008640:	f000 fbda 	bl	8008df8 <abort>
 8008644:	4b04      	ldr	r3, [pc, #16]	; (8008658 <__assert_func+0x38>)
 8008646:	461c      	mov	r4, r3
 8008648:	e7f3      	b.n	8008632 <__assert_func+0x12>
 800864a:	bf00      	nop
 800864c:	20000064 	.word	0x20000064
 8008650:	08009832 	.word	0x08009832
 8008654:	0800983f 	.word	0x0800983f
 8008658:	0800986d 	.word	0x0800986d

0800865c <_calloc_r>:
 800865c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800865e:	fba1 2402 	umull	r2, r4, r1, r2
 8008662:	b94c      	cbnz	r4, 8008678 <_calloc_r+0x1c>
 8008664:	4611      	mov	r1, r2
 8008666:	9201      	str	r2, [sp, #4]
 8008668:	f7fe f9b0 	bl	80069cc <_malloc_r>
 800866c:	9a01      	ldr	r2, [sp, #4]
 800866e:	4605      	mov	r5, r0
 8008670:	b930      	cbnz	r0, 8008680 <_calloc_r+0x24>
 8008672:	4628      	mov	r0, r5
 8008674:	b003      	add	sp, #12
 8008676:	bd30      	pop	{r4, r5, pc}
 8008678:	220c      	movs	r2, #12
 800867a:	6002      	str	r2, [r0, #0]
 800867c:	2500      	movs	r5, #0
 800867e:	e7f8      	b.n	8008672 <_calloc_r+0x16>
 8008680:	4621      	mov	r1, r4
 8008682:	f7fd fa2c 	bl	8005ade <memset>
 8008686:	e7f4      	b.n	8008672 <_calloc_r+0x16>

08008688 <rshift>:
 8008688:	6903      	ldr	r3, [r0, #16]
 800868a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800868e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008692:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008696:	f100 0414 	add.w	r4, r0, #20
 800869a:	dd45      	ble.n	8008728 <rshift+0xa0>
 800869c:	f011 011f 	ands.w	r1, r1, #31
 80086a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80086a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80086a8:	d10c      	bne.n	80086c4 <rshift+0x3c>
 80086aa:	f100 0710 	add.w	r7, r0, #16
 80086ae:	4629      	mov	r1, r5
 80086b0:	42b1      	cmp	r1, r6
 80086b2:	d334      	bcc.n	800871e <rshift+0x96>
 80086b4:	1a9b      	subs	r3, r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	1eea      	subs	r2, r5, #3
 80086ba:	4296      	cmp	r6, r2
 80086bc:	bf38      	it	cc
 80086be:	2300      	movcc	r3, #0
 80086c0:	4423      	add	r3, r4
 80086c2:	e015      	b.n	80086f0 <rshift+0x68>
 80086c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80086c8:	f1c1 0820 	rsb	r8, r1, #32
 80086cc:	40cf      	lsrs	r7, r1
 80086ce:	f105 0e04 	add.w	lr, r5, #4
 80086d2:	46a1      	mov	r9, r4
 80086d4:	4576      	cmp	r6, lr
 80086d6:	46f4      	mov	ip, lr
 80086d8:	d815      	bhi.n	8008706 <rshift+0x7e>
 80086da:	1a9a      	subs	r2, r3, r2
 80086dc:	0092      	lsls	r2, r2, #2
 80086de:	3a04      	subs	r2, #4
 80086e0:	3501      	adds	r5, #1
 80086e2:	42ae      	cmp	r6, r5
 80086e4:	bf38      	it	cc
 80086e6:	2200      	movcc	r2, #0
 80086e8:	18a3      	adds	r3, r4, r2
 80086ea:	50a7      	str	r7, [r4, r2]
 80086ec:	b107      	cbz	r7, 80086f0 <rshift+0x68>
 80086ee:	3304      	adds	r3, #4
 80086f0:	1b1a      	subs	r2, r3, r4
 80086f2:	42a3      	cmp	r3, r4
 80086f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80086f8:	bf08      	it	eq
 80086fa:	2300      	moveq	r3, #0
 80086fc:	6102      	str	r2, [r0, #16]
 80086fe:	bf08      	it	eq
 8008700:	6143      	streq	r3, [r0, #20]
 8008702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008706:	f8dc c000 	ldr.w	ip, [ip]
 800870a:	fa0c fc08 	lsl.w	ip, ip, r8
 800870e:	ea4c 0707 	orr.w	r7, ip, r7
 8008712:	f849 7b04 	str.w	r7, [r9], #4
 8008716:	f85e 7b04 	ldr.w	r7, [lr], #4
 800871a:	40cf      	lsrs	r7, r1
 800871c:	e7da      	b.n	80086d4 <rshift+0x4c>
 800871e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008722:	f847 cf04 	str.w	ip, [r7, #4]!
 8008726:	e7c3      	b.n	80086b0 <rshift+0x28>
 8008728:	4623      	mov	r3, r4
 800872a:	e7e1      	b.n	80086f0 <rshift+0x68>

0800872c <__hexdig_fun>:
 800872c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008730:	2b09      	cmp	r3, #9
 8008732:	d802      	bhi.n	800873a <__hexdig_fun+0xe>
 8008734:	3820      	subs	r0, #32
 8008736:	b2c0      	uxtb	r0, r0
 8008738:	4770      	bx	lr
 800873a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800873e:	2b05      	cmp	r3, #5
 8008740:	d801      	bhi.n	8008746 <__hexdig_fun+0x1a>
 8008742:	3847      	subs	r0, #71	; 0x47
 8008744:	e7f7      	b.n	8008736 <__hexdig_fun+0xa>
 8008746:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800874a:	2b05      	cmp	r3, #5
 800874c:	d801      	bhi.n	8008752 <__hexdig_fun+0x26>
 800874e:	3827      	subs	r0, #39	; 0x27
 8008750:	e7f1      	b.n	8008736 <__hexdig_fun+0xa>
 8008752:	2000      	movs	r0, #0
 8008754:	4770      	bx	lr
	...

08008758 <__gethex>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	4617      	mov	r7, r2
 800875e:	680a      	ldr	r2, [r1, #0]
 8008760:	b085      	sub	sp, #20
 8008762:	f102 0b02 	add.w	fp, r2, #2
 8008766:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800876a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800876e:	4681      	mov	r9, r0
 8008770:	468a      	mov	sl, r1
 8008772:	9302      	str	r3, [sp, #8]
 8008774:	32fe      	adds	r2, #254	; 0xfe
 8008776:	eb02 030b 	add.w	r3, r2, fp
 800877a:	46d8      	mov	r8, fp
 800877c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	2830      	cmp	r0, #48	; 0x30
 8008784:	d0f7      	beq.n	8008776 <__gethex+0x1e>
 8008786:	f7ff ffd1 	bl	800872c <__hexdig_fun>
 800878a:	4604      	mov	r4, r0
 800878c:	2800      	cmp	r0, #0
 800878e:	d138      	bne.n	8008802 <__gethex+0xaa>
 8008790:	49a7      	ldr	r1, [pc, #668]	; (8008a30 <__gethex+0x2d8>)
 8008792:	2201      	movs	r2, #1
 8008794:	4640      	mov	r0, r8
 8008796:	f7ff ff09 	bl	80085ac <strncmp>
 800879a:	4606      	mov	r6, r0
 800879c:	2800      	cmp	r0, #0
 800879e:	d169      	bne.n	8008874 <__gethex+0x11c>
 80087a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80087a4:	465d      	mov	r5, fp
 80087a6:	f7ff ffc1 	bl	800872c <__hexdig_fun>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d064      	beq.n	8008878 <__gethex+0x120>
 80087ae:	465a      	mov	r2, fp
 80087b0:	7810      	ldrb	r0, [r2, #0]
 80087b2:	2830      	cmp	r0, #48	; 0x30
 80087b4:	4690      	mov	r8, r2
 80087b6:	f102 0201 	add.w	r2, r2, #1
 80087ba:	d0f9      	beq.n	80087b0 <__gethex+0x58>
 80087bc:	f7ff ffb6 	bl	800872c <__hexdig_fun>
 80087c0:	2301      	movs	r3, #1
 80087c2:	fab0 f480 	clz	r4, r0
 80087c6:	0964      	lsrs	r4, r4, #5
 80087c8:	465e      	mov	r6, fp
 80087ca:	9301      	str	r3, [sp, #4]
 80087cc:	4642      	mov	r2, r8
 80087ce:	4615      	mov	r5, r2
 80087d0:	3201      	adds	r2, #1
 80087d2:	7828      	ldrb	r0, [r5, #0]
 80087d4:	f7ff ffaa 	bl	800872c <__hexdig_fun>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d1f8      	bne.n	80087ce <__gethex+0x76>
 80087dc:	4994      	ldr	r1, [pc, #592]	; (8008a30 <__gethex+0x2d8>)
 80087de:	2201      	movs	r2, #1
 80087e0:	4628      	mov	r0, r5
 80087e2:	f7ff fee3 	bl	80085ac <strncmp>
 80087e6:	b978      	cbnz	r0, 8008808 <__gethex+0xb0>
 80087e8:	b946      	cbnz	r6, 80087fc <__gethex+0xa4>
 80087ea:	1c6e      	adds	r6, r5, #1
 80087ec:	4632      	mov	r2, r6
 80087ee:	4615      	mov	r5, r2
 80087f0:	3201      	adds	r2, #1
 80087f2:	7828      	ldrb	r0, [r5, #0]
 80087f4:	f7ff ff9a 	bl	800872c <__hexdig_fun>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d1f8      	bne.n	80087ee <__gethex+0x96>
 80087fc:	1b73      	subs	r3, r6, r5
 80087fe:	009e      	lsls	r6, r3, #2
 8008800:	e004      	b.n	800880c <__gethex+0xb4>
 8008802:	2400      	movs	r4, #0
 8008804:	4626      	mov	r6, r4
 8008806:	e7e1      	b.n	80087cc <__gethex+0x74>
 8008808:	2e00      	cmp	r6, #0
 800880a:	d1f7      	bne.n	80087fc <__gethex+0xa4>
 800880c:	782b      	ldrb	r3, [r5, #0]
 800880e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008812:	2b50      	cmp	r3, #80	; 0x50
 8008814:	d13d      	bne.n	8008892 <__gethex+0x13a>
 8008816:	786b      	ldrb	r3, [r5, #1]
 8008818:	2b2b      	cmp	r3, #43	; 0x2b
 800881a:	d02f      	beq.n	800887c <__gethex+0x124>
 800881c:	2b2d      	cmp	r3, #45	; 0x2d
 800881e:	d031      	beq.n	8008884 <__gethex+0x12c>
 8008820:	1c69      	adds	r1, r5, #1
 8008822:	f04f 0b00 	mov.w	fp, #0
 8008826:	7808      	ldrb	r0, [r1, #0]
 8008828:	f7ff ff80 	bl	800872c <__hexdig_fun>
 800882c:	1e42      	subs	r2, r0, #1
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	2a18      	cmp	r2, #24
 8008832:	d82e      	bhi.n	8008892 <__gethex+0x13a>
 8008834:	f1a0 0210 	sub.w	r2, r0, #16
 8008838:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800883c:	f7ff ff76 	bl	800872c <__hexdig_fun>
 8008840:	f100 3cff 	add.w	ip, r0, #4294967295
 8008844:	fa5f fc8c 	uxtb.w	ip, ip
 8008848:	f1bc 0f18 	cmp.w	ip, #24
 800884c:	d91d      	bls.n	800888a <__gethex+0x132>
 800884e:	f1bb 0f00 	cmp.w	fp, #0
 8008852:	d000      	beq.n	8008856 <__gethex+0xfe>
 8008854:	4252      	negs	r2, r2
 8008856:	4416      	add	r6, r2
 8008858:	f8ca 1000 	str.w	r1, [sl]
 800885c:	b1dc      	cbz	r4, 8008896 <__gethex+0x13e>
 800885e:	9b01      	ldr	r3, [sp, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	bf14      	ite	ne
 8008864:	f04f 0800 	movne.w	r8, #0
 8008868:	f04f 0806 	moveq.w	r8, #6
 800886c:	4640      	mov	r0, r8
 800886e:	b005      	add	sp, #20
 8008870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008874:	4645      	mov	r5, r8
 8008876:	4626      	mov	r6, r4
 8008878:	2401      	movs	r4, #1
 800887a:	e7c7      	b.n	800880c <__gethex+0xb4>
 800887c:	f04f 0b00 	mov.w	fp, #0
 8008880:	1ca9      	adds	r1, r5, #2
 8008882:	e7d0      	b.n	8008826 <__gethex+0xce>
 8008884:	f04f 0b01 	mov.w	fp, #1
 8008888:	e7fa      	b.n	8008880 <__gethex+0x128>
 800888a:	230a      	movs	r3, #10
 800888c:	fb03 0002 	mla	r0, r3, r2, r0
 8008890:	e7d0      	b.n	8008834 <__gethex+0xdc>
 8008892:	4629      	mov	r1, r5
 8008894:	e7e0      	b.n	8008858 <__gethex+0x100>
 8008896:	eba5 0308 	sub.w	r3, r5, r8
 800889a:	3b01      	subs	r3, #1
 800889c:	4621      	mov	r1, r4
 800889e:	2b07      	cmp	r3, #7
 80088a0:	dc0a      	bgt.n	80088b8 <__gethex+0x160>
 80088a2:	4648      	mov	r0, r9
 80088a4:	f7fe f91e 	bl	8006ae4 <_Balloc>
 80088a8:	4604      	mov	r4, r0
 80088aa:	b940      	cbnz	r0, 80088be <__gethex+0x166>
 80088ac:	4b61      	ldr	r3, [pc, #388]	; (8008a34 <__gethex+0x2dc>)
 80088ae:	4602      	mov	r2, r0
 80088b0:	21e4      	movs	r1, #228	; 0xe4
 80088b2:	4861      	ldr	r0, [pc, #388]	; (8008a38 <__gethex+0x2e0>)
 80088b4:	f7ff feb4 	bl	8008620 <__assert_func>
 80088b8:	3101      	adds	r1, #1
 80088ba:	105b      	asrs	r3, r3, #1
 80088bc:	e7ef      	b.n	800889e <__gethex+0x146>
 80088be:	f100 0a14 	add.w	sl, r0, #20
 80088c2:	2300      	movs	r3, #0
 80088c4:	495a      	ldr	r1, [pc, #360]	; (8008a30 <__gethex+0x2d8>)
 80088c6:	f8cd a004 	str.w	sl, [sp, #4]
 80088ca:	469b      	mov	fp, r3
 80088cc:	45a8      	cmp	r8, r5
 80088ce:	d342      	bcc.n	8008956 <__gethex+0x1fe>
 80088d0:	9801      	ldr	r0, [sp, #4]
 80088d2:	f840 bb04 	str.w	fp, [r0], #4
 80088d6:	eba0 000a 	sub.w	r0, r0, sl
 80088da:	1080      	asrs	r0, r0, #2
 80088dc:	6120      	str	r0, [r4, #16]
 80088de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80088e2:	4658      	mov	r0, fp
 80088e4:	f7fe f9f0 	bl	8006cc8 <__hi0bits>
 80088e8:	683d      	ldr	r5, [r7, #0]
 80088ea:	eba8 0000 	sub.w	r0, r8, r0
 80088ee:	42a8      	cmp	r0, r5
 80088f0:	dd59      	ble.n	80089a6 <__gethex+0x24e>
 80088f2:	eba0 0805 	sub.w	r8, r0, r5
 80088f6:	4641      	mov	r1, r8
 80088f8:	4620      	mov	r0, r4
 80088fa:	f7fe fd7f 	bl	80073fc <__any_on>
 80088fe:	4683      	mov	fp, r0
 8008900:	b1b8      	cbz	r0, 8008932 <__gethex+0x1da>
 8008902:	f108 33ff 	add.w	r3, r8, #4294967295
 8008906:	1159      	asrs	r1, r3, #5
 8008908:	f003 021f 	and.w	r2, r3, #31
 800890c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008910:	f04f 0b01 	mov.w	fp, #1
 8008914:	fa0b f202 	lsl.w	r2, fp, r2
 8008918:	420a      	tst	r2, r1
 800891a:	d00a      	beq.n	8008932 <__gethex+0x1da>
 800891c:	455b      	cmp	r3, fp
 800891e:	dd06      	ble.n	800892e <__gethex+0x1d6>
 8008920:	f1a8 0102 	sub.w	r1, r8, #2
 8008924:	4620      	mov	r0, r4
 8008926:	f7fe fd69 	bl	80073fc <__any_on>
 800892a:	2800      	cmp	r0, #0
 800892c:	d138      	bne.n	80089a0 <__gethex+0x248>
 800892e:	f04f 0b02 	mov.w	fp, #2
 8008932:	4641      	mov	r1, r8
 8008934:	4620      	mov	r0, r4
 8008936:	f7ff fea7 	bl	8008688 <rshift>
 800893a:	4446      	add	r6, r8
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	42b3      	cmp	r3, r6
 8008940:	da41      	bge.n	80089c6 <__gethex+0x26e>
 8008942:	4621      	mov	r1, r4
 8008944:	4648      	mov	r0, r9
 8008946:	f7fe f90d 	bl	8006b64 <_Bfree>
 800894a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800894c:	2300      	movs	r3, #0
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008954:	e78a      	b.n	800886c <__gethex+0x114>
 8008956:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800895a:	2a2e      	cmp	r2, #46	; 0x2e
 800895c:	d014      	beq.n	8008988 <__gethex+0x230>
 800895e:	2b20      	cmp	r3, #32
 8008960:	d106      	bne.n	8008970 <__gethex+0x218>
 8008962:	9b01      	ldr	r3, [sp, #4]
 8008964:	f843 bb04 	str.w	fp, [r3], #4
 8008968:	f04f 0b00 	mov.w	fp, #0
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	465b      	mov	r3, fp
 8008970:	7828      	ldrb	r0, [r5, #0]
 8008972:	9303      	str	r3, [sp, #12]
 8008974:	f7ff feda 	bl	800872c <__hexdig_fun>
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	f000 000f 	and.w	r0, r0, #15
 800897e:	4098      	lsls	r0, r3
 8008980:	ea4b 0b00 	orr.w	fp, fp, r0
 8008984:	3304      	adds	r3, #4
 8008986:	e7a1      	b.n	80088cc <__gethex+0x174>
 8008988:	45a8      	cmp	r8, r5
 800898a:	d8e8      	bhi.n	800895e <__gethex+0x206>
 800898c:	2201      	movs	r2, #1
 800898e:	4628      	mov	r0, r5
 8008990:	9303      	str	r3, [sp, #12]
 8008992:	f7ff fe0b 	bl	80085ac <strncmp>
 8008996:	4926      	ldr	r1, [pc, #152]	; (8008a30 <__gethex+0x2d8>)
 8008998:	9b03      	ldr	r3, [sp, #12]
 800899a:	2800      	cmp	r0, #0
 800899c:	d1df      	bne.n	800895e <__gethex+0x206>
 800899e:	e795      	b.n	80088cc <__gethex+0x174>
 80089a0:	f04f 0b03 	mov.w	fp, #3
 80089a4:	e7c5      	b.n	8008932 <__gethex+0x1da>
 80089a6:	da0b      	bge.n	80089c0 <__gethex+0x268>
 80089a8:	eba5 0800 	sub.w	r8, r5, r0
 80089ac:	4621      	mov	r1, r4
 80089ae:	4642      	mov	r2, r8
 80089b0:	4648      	mov	r0, r9
 80089b2:	f7fe faf1 	bl	8006f98 <__lshift>
 80089b6:	eba6 0608 	sub.w	r6, r6, r8
 80089ba:	4604      	mov	r4, r0
 80089bc:	f100 0a14 	add.w	sl, r0, #20
 80089c0:	f04f 0b00 	mov.w	fp, #0
 80089c4:	e7ba      	b.n	800893c <__gethex+0x1e4>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	42b3      	cmp	r3, r6
 80089ca:	dd73      	ble.n	8008ab4 <__gethex+0x35c>
 80089cc:	1b9e      	subs	r6, r3, r6
 80089ce:	42b5      	cmp	r5, r6
 80089d0:	dc34      	bgt.n	8008a3c <__gethex+0x2e4>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d023      	beq.n	8008a20 <__gethex+0x2c8>
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d025      	beq.n	8008a28 <__gethex+0x2d0>
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d115      	bne.n	8008a0c <__gethex+0x2b4>
 80089e0:	42b5      	cmp	r5, r6
 80089e2:	d113      	bne.n	8008a0c <__gethex+0x2b4>
 80089e4:	2d01      	cmp	r5, #1
 80089e6:	d10b      	bne.n	8008a00 <__gethex+0x2a8>
 80089e8:	9a02      	ldr	r2, [sp, #8]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	2301      	movs	r3, #1
 80089f0:	6123      	str	r3, [r4, #16]
 80089f2:	f8ca 3000 	str.w	r3, [sl]
 80089f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089f8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80089fc:	601c      	str	r4, [r3, #0]
 80089fe:	e735      	b.n	800886c <__gethex+0x114>
 8008a00:	1e69      	subs	r1, r5, #1
 8008a02:	4620      	mov	r0, r4
 8008a04:	f7fe fcfa 	bl	80073fc <__any_on>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d1ed      	bne.n	80089e8 <__gethex+0x290>
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4648      	mov	r0, r9
 8008a10:	f7fe f8a8 	bl	8006b64 <_Bfree>
 8008a14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a16:	2300      	movs	r3, #0
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008a1e:	e725      	b.n	800886c <__gethex+0x114>
 8008a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1f2      	bne.n	8008a0c <__gethex+0x2b4>
 8008a26:	e7df      	b.n	80089e8 <__gethex+0x290>
 8008a28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1dc      	bne.n	80089e8 <__gethex+0x290>
 8008a2e:	e7ed      	b.n	8008a0c <__gethex+0x2b4>
 8008a30:	080096c4 	.word	0x080096c4
 8008a34:	0800955d 	.word	0x0800955d
 8008a38:	0800986e 	.word	0x0800986e
 8008a3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008a40:	f1bb 0f00 	cmp.w	fp, #0
 8008a44:	d133      	bne.n	8008aae <__gethex+0x356>
 8008a46:	f1b8 0f00 	cmp.w	r8, #0
 8008a4a:	d004      	beq.n	8008a56 <__gethex+0x2fe>
 8008a4c:	4641      	mov	r1, r8
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f7fe fcd4 	bl	80073fc <__any_on>
 8008a54:	4683      	mov	fp, r0
 8008a56:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a60:	f008 081f 	and.w	r8, r8, #31
 8008a64:	fa03 f308 	lsl.w	r3, r3, r8
 8008a68:	4213      	tst	r3, r2
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	bf18      	it	ne
 8008a70:	f04b 0b02 	orrne.w	fp, fp, #2
 8008a74:	1bad      	subs	r5, r5, r6
 8008a76:	f7ff fe07 	bl	8008688 <rshift>
 8008a7a:	687e      	ldr	r6, [r7, #4]
 8008a7c:	f04f 0802 	mov.w	r8, #2
 8008a80:	f1bb 0f00 	cmp.w	fp, #0
 8008a84:	d04a      	beq.n	8008b1c <__gethex+0x3c4>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d016      	beq.n	8008aba <__gethex+0x362>
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d018      	beq.n	8008ac2 <__gethex+0x36a>
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d109      	bne.n	8008aa8 <__gethex+0x350>
 8008a94:	f01b 0f02 	tst.w	fp, #2
 8008a98:	d006      	beq.n	8008aa8 <__gethex+0x350>
 8008a9a:	f8da 3000 	ldr.w	r3, [sl]
 8008a9e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008aa2:	f01b 0f01 	tst.w	fp, #1
 8008aa6:	d10f      	bne.n	8008ac8 <__gethex+0x370>
 8008aa8:	f048 0810 	orr.w	r8, r8, #16
 8008aac:	e036      	b.n	8008b1c <__gethex+0x3c4>
 8008aae:	f04f 0b01 	mov.w	fp, #1
 8008ab2:	e7d0      	b.n	8008a56 <__gethex+0x2fe>
 8008ab4:	f04f 0801 	mov.w	r8, #1
 8008ab8:	e7e2      	b.n	8008a80 <__gethex+0x328>
 8008aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008abc:	f1c3 0301 	rsb	r3, r3, #1
 8008ac0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0ef      	beq.n	8008aa8 <__gethex+0x350>
 8008ac8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008acc:	f104 0214 	add.w	r2, r4, #20
 8008ad0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008ad4:	9301      	str	r3, [sp, #4]
 8008ad6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008ada:	2300      	movs	r3, #0
 8008adc:	4694      	mov	ip, r2
 8008ade:	f852 1b04 	ldr.w	r1, [r2], #4
 8008ae2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008ae6:	d01e      	beq.n	8008b26 <__gethex+0x3ce>
 8008ae8:	3101      	adds	r1, #1
 8008aea:	f8cc 1000 	str.w	r1, [ip]
 8008aee:	f1b8 0f02 	cmp.w	r8, #2
 8008af2:	f104 0214 	add.w	r2, r4, #20
 8008af6:	d13d      	bne.n	8008b74 <__gethex+0x41c>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	42ab      	cmp	r3, r5
 8008afe:	d10b      	bne.n	8008b18 <__gethex+0x3c0>
 8008b00:	1169      	asrs	r1, r5, #5
 8008b02:	2301      	movs	r3, #1
 8008b04:	f005 051f 	and.w	r5, r5, #31
 8008b08:	fa03 f505 	lsl.w	r5, r3, r5
 8008b0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b10:	421d      	tst	r5, r3
 8008b12:	bf18      	it	ne
 8008b14:	f04f 0801 	movne.w	r8, #1
 8008b18:	f048 0820 	orr.w	r8, r8, #32
 8008b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b1e:	601c      	str	r4, [r3, #0]
 8008b20:	9b02      	ldr	r3, [sp, #8]
 8008b22:	601e      	str	r6, [r3, #0]
 8008b24:	e6a2      	b.n	800886c <__gethex+0x114>
 8008b26:	4290      	cmp	r0, r2
 8008b28:	f842 3c04 	str.w	r3, [r2, #-4]
 8008b2c:	d8d6      	bhi.n	8008adc <__gethex+0x384>
 8008b2e:	68a2      	ldr	r2, [r4, #8]
 8008b30:	4593      	cmp	fp, r2
 8008b32:	db17      	blt.n	8008b64 <__gethex+0x40c>
 8008b34:	6861      	ldr	r1, [r4, #4]
 8008b36:	4648      	mov	r0, r9
 8008b38:	3101      	adds	r1, #1
 8008b3a:	f7fd ffd3 	bl	8006ae4 <_Balloc>
 8008b3e:	4682      	mov	sl, r0
 8008b40:	b918      	cbnz	r0, 8008b4a <__gethex+0x3f2>
 8008b42:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <__gethex+0x458>)
 8008b44:	4602      	mov	r2, r0
 8008b46:	2184      	movs	r1, #132	; 0x84
 8008b48:	e6b3      	b.n	80088b2 <__gethex+0x15a>
 8008b4a:	6922      	ldr	r2, [r4, #16]
 8008b4c:	3202      	adds	r2, #2
 8008b4e:	f104 010c 	add.w	r1, r4, #12
 8008b52:	0092      	lsls	r2, r2, #2
 8008b54:	300c      	adds	r0, #12
 8008b56:	f7ff fd4b 	bl	80085f0 <memcpy>
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4648      	mov	r0, r9
 8008b5e:	f7fe f801 	bl	8006b64 <_Bfree>
 8008b62:	4654      	mov	r4, sl
 8008b64:	6922      	ldr	r2, [r4, #16]
 8008b66:	1c51      	adds	r1, r2, #1
 8008b68:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008b6c:	6121      	str	r1, [r4, #16]
 8008b6e:	2101      	movs	r1, #1
 8008b70:	6151      	str	r1, [r2, #20]
 8008b72:	e7bc      	b.n	8008aee <__gethex+0x396>
 8008b74:	6921      	ldr	r1, [r4, #16]
 8008b76:	4559      	cmp	r1, fp
 8008b78:	dd0b      	ble.n	8008b92 <__gethex+0x43a>
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f7ff fd83 	bl	8008688 <rshift>
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	3601      	adds	r6, #1
 8008b86:	42b3      	cmp	r3, r6
 8008b88:	f6ff aedb 	blt.w	8008942 <__gethex+0x1ea>
 8008b8c:	f04f 0801 	mov.w	r8, #1
 8008b90:	e7c2      	b.n	8008b18 <__gethex+0x3c0>
 8008b92:	f015 051f 	ands.w	r5, r5, #31
 8008b96:	d0f9      	beq.n	8008b8c <__gethex+0x434>
 8008b98:	9b01      	ldr	r3, [sp, #4]
 8008b9a:	441a      	add	r2, r3
 8008b9c:	f1c5 0520 	rsb	r5, r5, #32
 8008ba0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008ba4:	f7fe f890 	bl	8006cc8 <__hi0bits>
 8008ba8:	42a8      	cmp	r0, r5
 8008baa:	dbe6      	blt.n	8008b7a <__gethex+0x422>
 8008bac:	e7ee      	b.n	8008b8c <__gethex+0x434>
 8008bae:	bf00      	nop
 8008bb0:	0800955d 	.word	0x0800955d

08008bb4 <L_shift>:
 8008bb4:	f1c2 0208 	rsb	r2, r2, #8
 8008bb8:	0092      	lsls	r2, r2, #2
 8008bba:	b570      	push	{r4, r5, r6, lr}
 8008bbc:	f1c2 0620 	rsb	r6, r2, #32
 8008bc0:	6843      	ldr	r3, [r0, #4]
 8008bc2:	6804      	ldr	r4, [r0, #0]
 8008bc4:	fa03 f506 	lsl.w	r5, r3, r6
 8008bc8:	432c      	orrs	r4, r5
 8008bca:	40d3      	lsrs	r3, r2
 8008bcc:	6004      	str	r4, [r0, #0]
 8008bce:	f840 3f04 	str.w	r3, [r0, #4]!
 8008bd2:	4288      	cmp	r0, r1
 8008bd4:	d3f4      	bcc.n	8008bc0 <L_shift+0xc>
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}

08008bd8 <__match>:
 8008bd8:	b530      	push	{r4, r5, lr}
 8008bda:	6803      	ldr	r3, [r0, #0]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008be2:	b914      	cbnz	r4, 8008bea <__match+0x12>
 8008be4:	6003      	str	r3, [r0, #0]
 8008be6:	2001      	movs	r0, #1
 8008be8:	bd30      	pop	{r4, r5, pc}
 8008bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008bf2:	2d19      	cmp	r5, #25
 8008bf4:	bf98      	it	ls
 8008bf6:	3220      	addls	r2, #32
 8008bf8:	42a2      	cmp	r2, r4
 8008bfa:	d0f0      	beq.n	8008bde <__match+0x6>
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	e7f3      	b.n	8008be8 <__match+0x10>

08008c00 <__hexnan>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	680b      	ldr	r3, [r1, #0]
 8008c06:	6801      	ldr	r1, [r0, #0]
 8008c08:	115e      	asrs	r6, r3, #5
 8008c0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c0e:	f013 031f 	ands.w	r3, r3, #31
 8008c12:	b087      	sub	sp, #28
 8008c14:	bf18      	it	ne
 8008c16:	3604      	addne	r6, #4
 8008c18:	2500      	movs	r5, #0
 8008c1a:	1f37      	subs	r7, r6, #4
 8008c1c:	4682      	mov	sl, r0
 8008c1e:	4690      	mov	r8, r2
 8008c20:	9301      	str	r3, [sp, #4]
 8008c22:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c26:	46b9      	mov	r9, r7
 8008c28:	463c      	mov	r4, r7
 8008c2a:	9502      	str	r5, [sp, #8]
 8008c2c:	46ab      	mov	fp, r5
 8008c2e:	784a      	ldrb	r2, [r1, #1]
 8008c30:	1c4b      	adds	r3, r1, #1
 8008c32:	9303      	str	r3, [sp, #12]
 8008c34:	b342      	cbz	r2, 8008c88 <__hexnan+0x88>
 8008c36:	4610      	mov	r0, r2
 8008c38:	9105      	str	r1, [sp, #20]
 8008c3a:	9204      	str	r2, [sp, #16]
 8008c3c:	f7ff fd76 	bl	800872c <__hexdig_fun>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d14f      	bne.n	8008ce4 <__hexnan+0xe4>
 8008c44:	9a04      	ldr	r2, [sp, #16]
 8008c46:	9905      	ldr	r1, [sp, #20]
 8008c48:	2a20      	cmp	r2, #32
 8008c4a:	d818      	bhi.n	8008c7e <__hexnan+0x7e>
 8008c4c:	9b02      	ldr	r3, [sp, #8]
 8008c4e:	459b      	cmp	fp, r3
 8008c50:	dd13      	ble.n	8008c7a <__hexnan+0x7a>
 8008c52:	454c      	cmp	r4, r9
 8008c54:	d206      	bcs.n	8008c64 <__hexnan+0x64>
 8008c56:	2d07      	cmp	r5, #7
 8008c58:	dc04      	bgt.n	8008c64 <__hexnan+0x64>
 8008c5a:	462a      	mov	r2, r5
 8008c5c:	4649      	mov	r1, r9
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f7ff ffa8 	bl	8008bb4 <L_shift>
 8008c64:	4544      	cmp	r4, r8
 8008c66:	d950      	bls.n	8008d0a <__hexnan+0x10a>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f1a4 0904 	sub.w	r9, r4, #4
 8008c6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c72:	f8cd b008 	str.w	fp, [sp, #8]
 8008c76:	464c      	mov	r4, r9
 8008c78:	461d      	mov	r5, r3
 8008c7a:	9903      	ldr	r1, [sp, #12]
 8008c7c:	e7d7      	b.n	8008c2e <__hexnan+0x2e>
 8008c7e:	2a29      	cmp	r2, #41	; 0x29
 8008c80:	d155      	bne.n	8008d2e <__hexnan+0x12e>
 8008c82:	3102      	adds	r1, #2
 8008c84:	f8ca 1000 	str.w	r1, [sl]
 8008c88:	f1bb 0f00 	cmp.w	fp, #0
 8008c8c:	d04f      	beq.n	8008d2e <__hexnan+0x12e>
 8008c8e:	454c      	cmp	r4, r9
 8008c90:	d206      	bcs.n	8008ca0 <__hexnan+0xa0>
 8008c92:	2d07      	cmp	r5, #7
 8008c94:	dc04      	bgt.n	8008ca0 <__hexnan+0xa0>
 8008c96:	462a      	mov	r2, r5
 8008c98:	4649      	mov	r1, r9
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f7ff ff8a 	bl	8008bb4 <L_shift>
 8008ca0:	4544      	cmp	r4, r8
 8008ca2:	d934      	bls.n	8008d0e <__hexnan+0x10e>
 8008ca4:	f1a8 0204 	sub.w	r2, r8, #4
 8008ca8:	4623      	mov	r3, r4
 8008caa:	f853 1b04 	ldr.w	r1, [r3], #4
 8008cae:	f842 1f04 	str.w	r1, [r2, #4]!
 8008cb2:	429f      	cmp	r7, r3
 8008cb4:	d2f9      	bcs.n	8008caa <__hexnan+0xaa>
 8008cb6:	1b3b      	subs	r3, r7, r4
 8008cb8:	f023 0303 	bic.w	r3, r3, #3
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	3e03      	subs	r6, #3
 8008cc0:	3401      	adds	r4, #1
 8008cc2:	42a6      	cmp	r6, r4
 8008cc4:	bf38      	it	cc
 8008cc6:	2304      	movcc	r3, #4
 8008cc8:	4443      	add	r3, r8
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f843 2b04 	str.w	r2, [r3], #4
 8008cd0:	429f      	cmp	r7, r3
 8008cd2:	d2fb      	bcs.n	8008ccc <__hexnan+0xcc>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	b91b      	cbnz	r3, 8008ce0 <__hexnan+0xe0>
 8008cd8:	4547      	cmp	r7, r8
 8008cda:	d126      	bne.n	8008d2a <__hexnan+0x12a>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	2005      	movs	r0, #5
 8008ce2:	e025      	b.n	8008d30 <__hexnan+0x130>
 8008ce4:	3501      	adds	r5, #1
 8008ce6:	2d08      	cmp	r5, #8
 8008ce8:	f10b 0b01 	add.w	fp, fp, #1
 8008cec:	dd06      	ble.n	8008cfc <__hexnan+0xfc>
 8008cee:	4544      	cmp	r4, r8
 8008cf0:	d9c3      	bls.n	8008c7a <__hexnan+0x7a>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f844 3c04 	str.w	r3, [r4, #-4]
 8008cf8:	2501      	movs	r5, #1
 8008cfa:	3c04      	subs	r4, #4
 8008cfc:	6822      	ldr	r2, [r4, #0]
 8008cfe:	f000 000f 	and.w	r0, r0, #15
 8008d02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008d06:	6020      	str	r0, [r4, #0]
 8008d08:	e7b7      	b.n	8008c7a <__hexnan+0x7a>
 8008d0a:	2508      	movs	r5, #8
 8008d0c:	e7b5      	b.n	8008c7a <__hexnan+0x7a>
 8008d0e:	9b01      	ldr	r3, [sp, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0df      	beq.n	8008cd4 <__hexnan+0xd4>
 8008d14:	f1c3 0320 	rsb	r3, r3, #32
 8008d18:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1c:	40da      	lsrs	r2, r3
 8008d1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008d22:	4013      	ands	r3, r2
 8008d24:	f846 3c04 	str.w	r3, [r6, #-4]
 8008d28:	e7d4      	b.n	8008cd4 <__hexnan+0xd4>
 8008d2a:	3f04      	subs	r7, #4
 8008d2c:	e7d2      	b.n	8008cd4 <__hexnan+0xd4>
 8008d2e:	2004      	movs	r0, #4
 8008d30:	b007      	add	sp, #28
 8008d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d36 <__ascii_mbtowc>:
 8008d36:	b082      	sub	sp, #8
 8008d38:	b901      	cbnz	r1, 8008d3c <__ascii_mbtowc+0x6>
 8008d3a:	a901      	add	r1, sp, #4
 8008d3c:	b142      	cbz	r2, 8008d50 <__ascii_mbtowc+0x1a>
 8008d3e:	b14b      	cbz	r3, 8008d54 <__ascii_mbtowc+0x1e>
 8008d40:	7813      	ldrb	r3, [r2, #0]
 8008d42:	600b      	str	r3, [r1, #0]
 8008d44:	7812      	ldrb	r2, [r2, #0]
 8008d46:	1e10      	subs	r0, r2, #0
 8008d48:	bf18      	it	ne
 8008d4a:	2001      	movne	r0, #1
 8008d4c:	b002      	add	sp, #8
 8008d4e:	4770      	bx	lr
 8008d50:	4610      	mov	r0, r2
 8008d52:	e7fb      	b.n	8008d4c <__ascii_mbtowc+0x16>
 8008d54:	f06f 0001 	mvn.w	r0, #1
 8008d58:	e7f8      	b.n	8008d4c <__ascii_mbtowc+0x16>

08008d5a <_realloc_r>:
 8008d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5e:	4680      	mov	r8, r0
 8008d60:	4614      	mov	r4, r2
 8008d62:	460e      	mov	r6, r1
 8008d64:	b921      	cbnz	r1, 8008d70 <_realloc_r+0x16>
 8008d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	f7fd be2e 	b.w	80069cc <_malloc_r>
 8008d70:	b92a      	cbnz	r2, 8008d7e <_realloc_r+0x24>
 8008d72:	f7fd fdb7 	bl	80068e4 <_free_r>
 8008d76:	4625      	mov	r5, r4
 8008d78:	4628      	mov	r0, r5
 8008d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d7e:	f000 f842 	bl	8008e06 <_malloc_usable_size_r>
 8008d82:	4284      	cmp	r4, r0
 8008d84:	4607      	mov	r7, r0
 8008d86:	d802      	bhi.n	8008d8e <_realloc_r+0x34>
 8008d88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d8c:	d812      	bhi.n	8008db4 <_realloc_r+0x5a>
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4640      	mov	r0, r8
 8008d92:	f7fd fe1b 	bl	80069cc <_malloc_r>
 8008d96:	4605      	mov	r5, r0
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d0ed      	beq.n	8008d78 <_realloc_r+0x1e>
 8008d9c:	42bc      	cmp	r4, r7
 8008d9e:	4622      	mov	r2, r4
 8008da0:	4631      	mov	r1, r6
 8008da2:	bf28      	it	cs
 8008da4:	463a      	movcs	r2, r7
 8008da6:	f7ff fc23 	bl	80085f0 <memcpy>
 8008daa:	4631      	mov	r1, r6
 8008dac:	4640      	mov	r0, r8
 8008dae:	f7fd fd99 	bl	80068e4 <_free_r>
 8008db2:	e7e1      	b.n	8008d78 <_realloc_r+0x1e>
 8008db4:	4635      	mov	r5, r6
 8008db6:	e7df      	b.n	8008d78 <_realloc_r+0x1e>

08008db8 <__ascii_wctomb>:
 8008db8:	b149      	cbz	r1, 8008dce <__ascii_wctomb+0x16>
 8008dba:	2aff      	cmp	r2, #255	; 0xff
 8008dbc:	bf85      	ittet	hi
 8008dbe:	238a      	movhi	r3, #138	; 0x8a
 8008dc0:	6003      	strhi	r3, [r0, #0]
 8008dc2:	700a      	strbls	r2, [r1, #0]
 8008dc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008dc8:	bf98      	it	ls
 8008dca:	2001      	movls	r0, #1
 8008dcc:	4770      	bx	lr
 8008dce:	4608      	mov	r0, r1
 8008dd0:	4770      	bx	lr
	...

08008dd4 <fiprintf>:
 8008dd4:	b40e      	push	{r1, r2, r3}
 8008dd6:	b503      	push	{r0, r1, lr}
 8008dd8:	4601      	mov	r1, r0
 8008dda:	ab03      	add	r3, sp, #12
 8008ddc:	4805      	ldr	r0, [pc, #20]	; (8008df4 <fiprintf+0x20>)
 8008dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de2:	6800      	ldr	r0, [r0, #0]
 8008de4:	9301      	str	r3, [sp, #4]
 8008de6:	f000 f83f 	bl	8008e68 <_vfiprintf_r>
 8008dea:	b002      	add	sp, #8
 8008dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008df0:	b003      	add	sp, #12
 8008df2:	4770      	bx	lr
 8008df4:	20000064 	.word	0x20000064

08008df8 <abort>:
 8008df8:	b508      	push	{r3, lr}
 8008dfa:	2006      	movs	r0, #6
 8008dfc:	f000 fa0c 	bl	8009218 <raise>
 8008e00:	2001      	movs	r0, #1
 8008e02:	f7f8 ff64 	bl	8001cce <_exit>

08008e06 <_malloc_usable_size_r>:
 8008e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e0a:	1f18      	subs	r0, r3, #4
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	bfbc      	itt	lt
 8008e10:	580b      	ldrlt	r3, [r1, r0]
 8008e12:	18c0      	addlt	r0, r0, r3
 8008e14:	4770      	bx	lr

08008e16 <__sfputc_r>:
 8008e16:	6893      	ldr	r3, [r2, #8]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	b410      	push	{r4}
 8008e1e:	6093      	str	r3, [r2, #8]
 8008e20:	da08      	bge.n	8008e34 <__sfputc_r+0x1e>
 8008e22:	6994      	ldr	r4, [r2, #24]
 8008e24:	42a3      	cmp	r3, r4
 8008e26:	db01      	blt.n	8008e2c <__sfputc_r+0x16>
 8008e28:	290a      	cmp	r1, #10
 8008e2a:	d103      	bne.n	8008e34 <__sfputc_r+0x1e>
 8008e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e30:	f000 b934 	b.w	800909c <__swbuf_r>
 8008e34:	6813      	ldr	r3, [r2, #0]
 8008e36:	1c58      	adds	r0, r3, #1
 8008e38:	6010      	str	r0, [r2, #0]
 8008e3a:	7019      	strb	r1, [r3, #0]
 8008e3c:	4608      	mov	r0, r1
 8008e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <__sfputs_r>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	4606      	mov	r6, r0
 8008e48:	460f      	mov	r7, r1
 8008e4a:	4614      	mov	r4, r2
 8008e4c:	18d5      	adds	r5, r2, r3
 8008e4e:	42ac      	cmp	r4, r5
 8008e50:	d101      	bne.n	8008e56 <__sfputs_r+0x12>
 8008e52:	2000      	movs	r0, #0
 8008e54:	e007      	b.n	8008e66 <__sfputs_r+0x22>
 8008e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5a:	463a      	mov	r2, r7
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	f7ff ffda 	bl	8008e16 <__sfputc_r>
 8008e62:	1c43      	adds	r3, r0, #1
 8008e64:	d1f3      	bne.n	8008e4e <__sfputs_r+0xa>
 8008e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e68 <_vfiprintf_r>:
 8008e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6c:	460d      	mov	r5, r1
 8008e6e:	b09d      	sub	sp, #116	; 0x74
 8008e70:	4614      	mov	r4, r2
 8008e72:	4698      	mov	r8, r3
 8008e74:	4606      	mov	r6, r0
 8008e76:	b118      	cbz	r0, 8008e80 <_vfiprintf_r+0x18>
 8008e78:	6a03      	ldr	r3, [r0, #32]
 8008e7a:	b90b      	cbnz	r3, 8008e80 <_vfiprintf_r+0x18>
 8008e7c:	f7fc fd96 	bl	80059ac <__sinit>
 8008e80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e82:	07d9      	lsls	r1, r3, #31
 8008e84:	d405      	bmi.n	8008e92 <_vfiprintf_r+0x2a>
 8008e86:	89ab      	ldrh	r3, [r5, #12]
 8008e88:	059a      	lsls	r2, r3, #22
 8008e8a:	d402      	bmi.n	8008e92 <_vfiprintf_r+0x2a>
 8008e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e8e:	f7fc fea4 	bl	8005bda <__retarget_lock_acquire_recursive>
 8008e92:	89ab      	ldrh	r3, [r5, #12]
 8008e94:	071b      	lsls	r3, r3, #28
 8008e96:	d501      	bpl.n	8008e9c <_vfiprintf_r+0x34>
 8008e98:	692b      	ldr	r3, [r5, #16]
 8008e9a:	b99b      	cbnz	r3, 8008ec4 <_vfiprintf_r+0x5c>
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f000 f93a 	bl	8009118 <__swsetup_r>
 8008ea4:	b170      	cbz	r0, 8008ec4 <_vfiprintf_r+0x5c>
 8008ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ea8:	07dc      	lsls	r4, r3, #31
 8008eaa:	d504      	bpl.n	8008eb6 <_vfiprintf_r+0x4e>
 8008eac:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb0:	b01d      	add	sp, #116	; 0x74
 8008eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb6:	89ab      	ldrh	r3, [r5, #12]
 8008eb8:	0598      	lsls	r0, r3, #22
 8008eba:	d4f7      	bmi.n	8008eac <_vfiprintf_r+0x44>
 8008ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ebe:	f7fc fe8d 	bl	8005bdc <__retarget_lock_release_recursive>
 8008ec2:	e7f3      	b.n	8008eac <_vfiprintf_r+0x44>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec8:	2320      	movs	r3, #32
 8008eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ece:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ed2:	2330      	movs	r3, #48	; 0x30
 8008ed4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009088 <_vfiprintf_r+0x220>
 8008ed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008edc:	f04f 0901 	mov.w	r9, #1
 8008ee0:	4623      	mov	r3, r4
 8008ee2:	469a      	mov	sl, r3
 8008ee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ee8:	b10a      	cbz	r2, 8008eee <_vfiprintf_r+0x86>
 8008eea:	2a25      	cmp	r2, #37	; 0x25
 8008eec:	d1f9      	bne.n	8008ee2 <_vfiprintf_r+0x7a>
 8008eee:	ebba 0b04 	subs.w	fp, sl, r4
 8008ef2:	d00b      	beq.n	8008f0c <_vfiprintf_r+0xa4>
 8008ef4:	465b      	mov	r3, fp
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	4629      	mov	r1, r5
 8008efa:	4630      	mov	r0, r6
 8008efc:	f7ff ffa2 	bl	8008e44 <__sfputs_r>
 8008f00:	3001      	adds	r0, #1
 8008f02:	f000 80a9 	beq.w	8009058 <_vfiprintf_r+0x1f0>
 8008f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f08:	445a      	add	r2, fp
 8008f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 80a1 	beq.w	8009058 <_vfiprintf_r+0x1f0>
 8008f16:	2300      	movs	r3, #0
 8008f18:	f04f 32ff 	mov.w	r2, #4294967295
 8008f1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f20:	f10a 0a01 	add.w	sl, sl, #1
 8008f24:	9304      	str	r3, [sp, #16]
 8008f26:	9307      	str	r3, [sp, #28]
 8008f28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8008f2e:	4654      	mov	r4, sl
 8008f30:	2205      	movs	r2, #5
 8008f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f36:	4854      	ldr	r0, [pc, #336]	; (8009088 <_vfiprintf_r+0x220>)
 8008f38:	f7f7 f952 	bl	80001e0 <memchr>
 8008f3c:	9a04      	ldr	r2, [sp, #16]
 8008f3e:	b9d8      	cbnz	r0, 8008f78 <_vfiprintf_r+0x110>
 8008f40:	06d1      	lsls	r1, r2, #27
 8008f42:	bf44      	itt	mi
 8008f44:	2320      	movmi	r3, #32
 8008f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f4a:	0713      	lsls	r3, r2, #28
 8008f4c:	bf44      	itt	mi
 8008f4e:	232b      	movmi	r3, #43	; 0x2b
 8008f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f54:	f89a 3000 	ldrb.w	r3, [sl]
 8008f58:	2b2a      	cmp	r3, #42	; 0x2a
 8008f5a:	d015      	beq.n	8008f88 <_vfiprintf_r+0x120>
 8008f5c:	9a07      	ldr	r2, [sp, #28]
 8008f5e:	4654      	mov	r4, sl
 8008f60:	2000      	movs	r0, #0
 8008f62:	f04f 0c0a 	mov.w	ip, #10
 8008f66:	4621      	mov	r1, r4
 8008f68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f6c:	3b30      	subs	r3, #48	; 0x30
 8008f6e:	2b09      	cmp	r3, #9
 8008f70:	d94d      	bls.n	800900e <_vfiprintf_r+0x1a6>
 8008f72:	b1b0      	cbz	r0, 8008fa2 <_vfiprintf_r+0x13a>
 8008f74:	9207      	str	r2, [sp, #28]
 8008f76:	e014      	b.n	8008fa2 <_vfiprintf_r+0x13a>
 8008f78:	eba0 0308 	sub.w	r3, r0, r8
 8008f7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f80:	4313      	orrs	r3, r2
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	46a2      	mov	sl, r4
 8008f86:	e7d2      	b.n	8008f2e <_vfiprintf_r+0xc6>
 8008f88:	9b03      	ldr	r3, [sp, #12]
 8008f8a:	1d19      	adds	r1, r3, #4
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	9103      	str	r1, [sp, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	bfbb      	ittet	lt
 8008f94:	425b      	neglt	r3, r3
 8008f96:	f042 0202 	orrlt.w	r2, r2, #2
 8008f9a:	9307      	strge	r3, [sp, #28]
 8008f9c:	9307      	strlt	r3, [sp, #28]
 8008f9e:	bfb8      	it	lt
 8008fa0:	9204      	strlt	r2, [sp, #16]
 8008fa2:	7823      	ldrb	r3, [r4, #0]
 8008fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8008fa6:	d10c      	bne.n	8008fc2 <_vfiprintf_r+0x15a>
 8008fa8:	7863      	ldrb	r3, [r4, #1]
 8008faa:	2b2a      	cmp	r3, #42	; 0x2a
 8008fac:	d134      	bne.n	8009018 <_vfiprintf_r+0x1b0>
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	1d1a      	adds	r2, r3, #4
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	9203      	str	r2, [sp, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	bfb8      	it	lt
 8008fba:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fbe:	3402      	adds	r4, #2
 8008fc0:	9305      	str	r3, [sp, #20]
 8008fc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009098 <_vfiprintf_r+0x230>
 8008fc6:	7821      	ldrb	r1, [r4, #0]
 8008fc8:	2203      	movs	r2, #3
 8008fca:	4650      	mov	r0, sl
 8008fcc:	f7f7 f908 	bl	80001e0 <memchr>
 8008fd0:	b138      	cbz	r0, 8008fe2 <_vfiprintf_r+0x17a>
 8008fd2:	9b04      	ldr	r3, [sp, #16]
 8008fd4:	eba0 000a 	sub.w	r0, r0, sl
 8008fd8:	2240      	movs	r2, #64	; 0x40
 8008fda:	4082      	lsls	r2, r0
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	3401      	adds	r4, #1
 8008fe0:	9304      	str	r3, [sp, #16]
 8008fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe6:	4829      	ldr	r0, [pc, #164]	; (800908c <_vfiprintf_r+0x224>)
 8008fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fec:	2206      	movs	r2, #6
 8008fee:	f7f7 f8f7 	bl	80001e0 <memchr>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d03f      	beq.n	8009076 <_vfiprintf_r+0x20e>
 8008ff6:	4b26      	ldr	r3, [pc, #152]	; (8009090 <_vfiprintf_r+0x228>)
 8008ff8:	bb1b      	cbnz	r3, 8009042 <_vfiprintf_r+0x1da>
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	3307      	adds	r3, #7
 8008ffe:	f023 0307 	bic.w	r3, r3, #7
 8009002:	3308      	adds	r3, #8
 8009004:	9303      	str	r3, [sp, #12]
 8009006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009008:	443b      	add	r3, r7
 800900a:	9309      	str	r3, [sp, #36]	; 0x24
 800900c:	e768      	b.n	8008ee0 <_vfiprintf_r+0x78>
 800900e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009012:	460c      	mov	r4, r1
 8009014:	2001      	movs	r0, #1
 8009016:	e7a6      	b.n	8008f66 <_vfiprintf_r+0xfe>
 8009018:	2300      	movs	r3, #0
 800901a:	3401      	adds	r4, #1
 800901c:	9305      	str	r3, [sp, #20]
 800901e:	4619      	mov	r1, r3
 8009020:	f04f 0c0a 	mov.w	ip, #10
 8009024:	4620      	mov	r0, r4
 8009026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800902a:	3a30      	subs	r2, #48	; 0x30
 800902c:	2a09      	cmp	r2, #9
 800902e:	d903      	bls.n	8009038 <_vfiprintf_r+0x1d0>
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0c6      	beq.n	8008fc2 <_vfiprintf_r+0x15a>
 8009034:	9105      	str	r1, [sp, #20]
 8009036:	e7c4      	b.n	8008fc2 <_vfiprintf_r+0x15a>
 8009038:	fb0c 2101 	mla	r1, ip, r1, r2
 800903c:	4604      	mov	r4, r0
 800903e:	2301      	movs	r3, #1
 8009040:	e7f0      	b.n	8009024 <_vfiprintf_r+0x1bc>
 8009042:	ab03      	add	r3, sp, #12
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	462a      	mov	r2, r5
 8009048:	4b12      	ldr	r3, [pc, #72]	; (8009094 <_vfiprintf_r+0x22c>)
 800904a:	a904      	add	r1, sp, #16
 800904c:	4630      	mov	r0, r6
 800904e:	f7fb fe4b 	bl	8004ce8 <_printf_float>
 8009052:	4607      	mov	r7, r0
 8009054:	1c78      	adds	r0, r7, #1
 8009056:	d1d6      	bne.n	8009006 <_vfiprintf_r+0x19e>
 8009058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800905a:	07d9      	lsls	r1, r3, #31
 800905c:	d405      	bmi.n	800906a <_vfiprintf_r+0x202>
 800905e:	89ab      	ldrh	r3, [r5, #12]
 8009060:	059a      	lsls	r2, r3, #22
 8009062:	d402      	bmi.n	800906a <_vfiprintf_r+0x202>
 8009064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009066:	f7fc fdb9 	bl	8005bdc <__retarget_lock_release_recursive>
 800906a:	89ab      	ldrh	r3, [r5, #12]
 800906c:	065b      	lsls	r3, r3, #25
 800906e:	f53f af1d 	bmi.w	8008eac <_vfiprintf_r+0x44>
 8009072:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009074:	e71c      	b.n	8008eb0 <_vfiprintf_r+0x48>
 8009076:	ab03      	add	r3, sp, #12
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	462a      	mov	r2, r5
 800907c:	4b05      	ldr	r3, [pc, #20]	; (8009094 <_vfiprintf_r+0x22c>)
 800907e:	a904      	add	r1, sp, #16
 8009080:	4630      	mov	r0, r6
 8009082:	f7fc f8d5 	bl	8005230 <_printf_i>
 8009086:	e7e4      	b.n	8009052 <_vfiprintf_r+0x1ea>
 8009088:	08009819 	.word	0x08009819
 800908c:	08009823 	.word	0x08009823
 8009090:	08004ce9 	.word	0x08004ce9
 8009094:	08008e45 	.word	0x08008e45
 8009098:	0800981f 	.word	0x0800981f

0800909c <__swbuf_r>:
 800909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909e:	460e      	mov	r6, r1
 80090a0:	4614      	mov	r4, r2
 80090a2:	4605      	mov	r5, r0
 80090a4:	b118      	cbz	r0, 80090ae <__swbuf_r+0x12>
 80090a6:	6a03      	ldr	r3, [r0, #32]
 80090a8:	b90b      	cbnz	r3, 80090ae <__swbuf_r+0x12>
 80090aa:	f7fc fc7f 	bl	80059ac <__sinit>
 80090ae:	69a3      	ldr	r3, [r4, #24]
 80090b0:	60a3      	str	r3, [r4, #8]
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	071a      	lsls	r2, r3, #28
 80090b6:	d525      	bpl.n	8009104 <__swbuf_r+0x68>
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	b31b      	cbz	r3, 8009104 <__swbuf_r+0x68>
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	6922      	ldr	r2, [r4, #16]
 80090c0:	1a98      	subs	r0, r3, r2
 80090c2:	6963      	ldr	r3, [r4, #20]
 80090c4:	b2f6      	uxtb	r6, r6
 80090c6:	4283      	cmp	r3, r0
 80090c8:	4637      	mov	r7, r6
 80090ca:	dc04      	bgt.n	80090d6 <__swbuf_r+0x3a>
 80090cc:	4621      	mov	r1, r4
 80090ce:	4628      	mov	r0, r5
 80090d0:	f7ff fa2a 	bl	8008528 <_fflush_r>
 80090d4:	b9e0      	cbnz	r0, 8009110 <__swbuf_r+0x74>
 80090d6:	68a3      	ldr	r3, [r4, #8]
 80090d8:	3b01      	subs	r3, #1
 80090da:	60a3      	str	r3, [r4, #8]
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	1c5a      	adds	r2, r3, #1
 80090e0:	6022      	str	r2, [r4, #0]
 80090e2:	701e      	strb	r6, [r3, #0]
 80090e4:	6962      	ldr	r2, [r4, #20]
 80090e6:	1c43      	adds	r3, r0, #1
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d004      	beq.n	80090f6 <__swbuf_r+0x5a>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	07db      	lsls	r3, r3, #31
 80090f0:	d506      	bpl.n	8009100 <__swbuf_r+0x64>
 80090f2:	2e0a      	cmp	r6, #10
 80090f4:	d104      	bne.n	8009100 <__swbuf_r+0x64>
 80090f6:	4621      	mov	r1, r4
 80090f8:	4628      	mov	r0, r5
 80090fa:	f7ff fa15 	bl	8008528 <_fflush_r>
 80090fe:	b938      	cbnz	r0, 8009110 <__swbuf_r+0x74>
 8009100:	4638      	mov	r0, r7
 8009102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009104:	4621      	mov	r1, r4
 8009106:	4628      	mov	r0, r5
 8009108:	f000 f806 	bl	8009118 <__swsetup_r>
 800910c:	2800      	cmp	r0, #0
 800910e:	d0d5      	beq.n	80090bc <__swbuf_r+0x20>
 8009110:	f04f 37ff 	mov.w	r7, #4294967295
 8009114:	e7f4      	b.n	8009100 <__swbuf_r+0x64>
	...

08009118 <__swsetup_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4b2a      	ldr	r3, [pc, #168]	; (80091c4 <__swsetup_r+0xac>)
 800911c:	4605      	mov	r5, r0
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	460c      	mov	r4, r1
 8009122:	b118      	cbz	r0, 800912c <__swsetup_r+0x14>
 8009124:	6a03      	ldr	r3, [r0, #32]
 8009126:	b90b      	cbnz	r3, 800912c <__swsetup_r+0x14>
 8009128:	f7fc fc40 	bl	80059ac <__sinit>
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009132:	0718      	lsls	r0, r3, #28
 8009134:	d422      	bmi.n	800917c <__swsetup_r+0x64>
 8009136:	06d9      	lsls	r1, r3, #27
 8009138:	d407      	bmi.n	800914a <__swsetup_r+0x32>
 800913a:	2309      	movs	r3, #9
 800913c:	602b      	str	r3, [r5, #0]
 800913e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	f04f 30ff 	mov.w	r0, #4294967295
 8009148:	e034      	b.n	80091b4 <__swsetup_r+0x9c>
 800914a:	0758      	lsls	r0, r3, #29
 800914c:	d512      	bpl.n	8009174 <__swsetup_r+0x5c>
 800914e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009150:	b141      	cbz	r1, 8009164 <__swsetup_r+0x4c>
 8009152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009156:	4299      	cmp	r1, r3
 8009158:	d002      	beq.n	8009160 <__swsetup_r+0x48>
 800915a:	4628      	mov	r0, r5
 800915c:	f7fd fbc2 	bl	80068e4 <_free_r>
 8009160:	2300      	movs	r3, #0
 8009162:	6363      	str	r3, [r4, #52]	; 0x34
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800916a:	81a3      	strh	r3, [r4, #12]
 800916c:	2300      	movs	r3, #0
 800916e:	6063      	str	r3, [r4, #4]
 8009170:	6923      	ldr	r3, [r4, #16]
 8009172:	6023      	str	r3, [r4, #0]
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	f043 0308 	orr.w	r3, r3, #8
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	6923      	ldr	r3, [r4, #16]
 800917e:	b94b      	cbnz	r3, 8009194 <__swsetup_r+0x7c>
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800918a:	d003      	beq.n	8009194 <__swsetup_r+0x7c>
 800918c:	4621      	mov	r1, r4
 800918e:	4628      	mov	r0, r5
 8009190:	f000 f884 	bl	800929c <__smakebuf_r>
 8009194:	89a0      	ldrh	r0, [r4, #12]
 8009196:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800919a:	f010 0301 	ands.w	r3, r0, #1
 800919e:	d00a      	beq.n	80091b6 <__swsetup_r+0x9e>
 80091a0:	2300      	movs	r3, #0
 80091a2:	60a3      	str	r3, [r4, #8]
 80091a4:	6963      	ldr	r3, [r4, #20]
 80091a6:	425b      	negs	r3, r3
 80091a8:	61a3      	str	r3, [r4, #24]
 80091aa:	6923      	ldr	r3, [r4, #16]
 80091ac:	b943      	cbnz	r3, 80091c0 <__swsetup_r+0xa8>
 80091ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091b2:	d1c4      	bne.n	800913e <__swsetup_r+0x26>
 80091b4:	bd38      	pop	{r3, r4, r5, pc}
 80091b6:	0781      	lsls	r1, r0, #30
 80091b8:	bf58      	it	pl
 80091ba:	6963      	ldrpl	r3, [r4, #20]
 80091bc:	60a3      	str	r3, [r4, #8]
 80091be:	e7f4      	b.n	80091aa <__swsetup_r+0x92>
 80091c0:	2000      	movs	r0, #0
 80091c2:	e7f7      	b.n	80091b4 <__swsetup_r+0x9c>
 80091c4:	20000064 	.word	0x20000064

080091c8 <_raise_r>:
 80091c8:	291f      	cmp	r1, #31
 80091ca:	b538      	push	{r3, r4, r5, lr}
 80091cc:	4604      	mov	r4, r0
 80091ce:	460d      	mov	r5, r1
 80091d0:	d904      	bls.n	80091dc <_raise_r+0x14>
 80091d2:	2316      	movs	r3, #22
 80091d4:	6003      	str	r3, [r0, #0]
 80091d6:	f04f 30ff 	mov.w	r0, #4294967295
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80091de:	b112      	cbz	r2, 80091e6 <_raise_r+0x1e>
 80091e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091e4:	b94b      	cbnz	r3, 80091fa <_raise_r+0x32>
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 f830 	bl	800924c <_getpid_r>
 80091ec:	462a      	mov	r2, r5
 80091ee:	4601      	mov	r1, r0
 80091f0:	4620      	mov	r0, r4
 80091f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091f6:	f000 b817 	b.w	8009228 <_kill_r>
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d00a      	beq.n	8009214 <_raise_r+0x4c>
 80091fe:	1c59      	adds	r1, r3, #1
 8009200:	d103      	bne.n	800920a <_raise_r+0x42>
 8009202:	2316      	movs	r3, #22
 8009204:	6003      	str	r3, [r0, #0]
 8009206:	2001      	movs	r0, #1
 8009208:	e7e7      	b.n	80091da <_raise_r+0x12>
 800920a:	2400      	movs	r4, #0
 800920c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009210:	4628      	mov	r0, r5
 8009212:	4798      	blx	r3
 8009214:	2000      	movs	r0, #0
 8009216:	e7e0      	b.n	80091da <_raise_r+0x12>

08009218 <raise>:
 8009218:	4b02      	ldr	r3, [pc, #8]	; (8009224 <raise+0xc>)
 800921a:	4601      	mov	r1, r0
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	f7ff bfd3 	b.w	80091c8 <_raise_r>
 8009222:	bf00      	nop
 8009224:	20000064 	.word	0x20000064

08009228 <_kill_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d07      	ldr	r5, [pc, #28]	; (8009248 <_kill_r+0x20>)
 800922c:	2300      	movs	r3, #0
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	4611      	mov	r1, r2
 8009234:	602b      	str	r3, [r5, #0]
 8009236:	f7f8 fd3a 	bl	8001cae <_kill>
 800923a:	1c43      	adds	r3, r0, #1
 800923c:	d102      	bne.n	8009244 <_kill_r+0x1c>
 800923e:	682b      	ldr	r3, [r5, #0]
 8009240:	b103      	cbz	r3, 8009244 <_kill_r+0x1c>
 8009242:	6023      	str	r3, [r4, #0]
 8009244:	bd38      	pop	{r3, r4, r5, pc}
 8009246:	bf00      	nop
 8009248:	20000410 	.word	0x20000410

0800924c <_getpid_r>:
 800924c:	f7f8 bd27 	b.w	8001c9e <_getpid>

08009250 <__swhatbuf_r>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	460c      	mov	r4, r1
 8009254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009258:	2900      	cmp	r1, #0
 800925a:	b096      	sub	sp, #88	; 0x58
 800925c:	4615      	mov	r5, r2
 800925e:	461e      	mov	r6, r3
 8009260:	da0d      	bge.n	800927e <__swhatbuf_r+0x2e>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009268:	f04f 0100 	mov.w	r1, #0
 800926c:	bf0c      	ite	eq
 800926e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009272:	2340      	movne	r3, #64	; 0x40
 8009274:	2000      	movs	r0, #0
 8009276:	6031      	str	r1, [r6, #0]
 8009278:	602b      	str	r3, [r5, #0]
 800927a:	b016      	add	sp, #88	; 0x58
 800927c:	bd70      	pop	{r4, r5, r6, pc}
 800927e:	466a      	mov	r2, sp
 8009280:	f000 f848 	bl	8009314 <_fstat_r>
 8009284:	2800      	cmp	r0, #0
 8009286:	dbec      	blt.n	8009262 <__swhatbuf_r+0x12>
 8009288:	9901      	ldr	r1, [sp, #4]
 800928a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800928e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009292:	4259      	negs	r1, r3
 8009294:	4159      	adcs	r1, r3
 8009296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929a:	e7eb      	b.n	8009274 <__swhatbuf_r+0x24>

0800929c <__smakebuf_r>:
 800929c:	898b      	ldrh	r3, [r1, #12]
 800929e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092a0:	079d      	lsls	r5, r3, #30
 80092a2:	4606      	mov	r6, r0
 80092a4:	460c      	mov	r4, r1
 80092a6:	d507      	bpl.n	80092b8 <__smakebuf_r+0x1c>
 80092a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	6123      	str	r3, [r4, #16]
 80092b0:	2301      	movs	r3, #1
 80092b2:	6163      	str	r3, [r4, #20]
 80092b4:	b002      	add	sp, #8
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	ab01      	add	r3, sp, #4
 80092ba:	466a      	mov	r2, sp
 80092bc:	f7ff ffc8 	bl	8009250 <__swhatbuf_r>
 80092c0:	9900      	ldr	r1, [sp, #0]
 80092c2:	4605      	mov	r5, r0
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7fd fb81 	bl	80069cc <_malloc_r>
 80092ca:	b948      	cbnz	r0, 80092e0 <__smakebuf_r+0x44>
 80092cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d0:	059a      	lsls	r2, r3, #22
 80092d2:	d4ef      	bmi.n	80092b4 <__smakebuf_r+0x18>
 80092d4:	f023 0303 	bic.w	r3, r3, #3
 80092d8:	f043 0302 	orr.w	r3, r3, #2
 80092dc:	81a3      	strh	r3, [r4, #12]
 80092de:	e7e3      	b.n	80092a8 <__smakebuf_r+0xc>
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	6020      	str	r0, [r4, #0]
 80092e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	9b00      	ldr	r3, [sp, #0]
 80092ec:	6163      	str	r3, [r4, #20]
 80092ee:	9b01      	ldr	r3, [sp, #4]
 80092f0:	6120      	str	r0, [r4, #16]
 80092f2:	b15b      	cbz	r3, 800930c <__smakebuf_r+0x70>
 80092f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092f8:	4630      	mov	r0, r6
 80092fa:	f000 f81d 	bl	8009338 <_isatty_r>
 80092fe:	b128      	cbz	r0, 800930c <__smakebuf_r+0x70>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	f023 0303 	bic.w	r3, r3, #3
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	81a3      	strh	r3, [r4, #12]
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	431d      	orrs	r5, r3
 8009310:	81a5      	strh	r5, [r4, #12]
 8009312:	e7cf      	b.n	80092b4 <__smakebuf_r+0x18>

08009314 <_fstat_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4d07      	ldr	r5, [pc, #28]	; (8009334 <_fstat_r+0x20>)
 8009318:	2300      	movs	r3, #0
 800931a:	4604      	mov	r4, r0
 800931c:	4608      	mov	r0, r1
 800931e:	4611      	mov	r1, r2
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	f7f8 fd23 	bl	8001d6c <_fstat>
 8009326:	1c43      	adds	r3, r0, #1
 8009328:	d102      	bne.n	8009330 <_fstat_r+0x1c>
 800932a:	682b      	ldr	r3, [r5, #0]
 800932c:	b103      	cbz	r3, 8009330 <_fstat_r+0x1c>
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	bd38      	pop	{r3, r4, r5, pc}
 8009332:	bf00      	nop
 8009334:	20000410 	.word	0x20000410

08009338 <_isatty_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d06      	ldr	r5, [pc, #24]	; (8009354 <_isatty_r+0x1c>)
 800933c:	2300      	movs	r3, #0
 800933e:	4604      	mov	r4, r0
 8009340:	4608      	mov	r0, r1
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	f7f8 fd22 	bl	8001d8c <_isatty>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_isatty_r+0x1a>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_isatty_r+0x1a>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	20000410 	.word	0x20000410

08009358 <_init>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	bf00      	nop
 800935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935e:	bc08      	pop	{r3}
 8009360:	469e      	mov	lr, r3
 8009362:	4770      	bx	lr

08009364 <_fini>:
 8009364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009366:	bf00      	nop
 8009368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936a:	bc08      	pop	{r3}
 800936c:	469e      	mov	lr, r3
 800936e:	4770      	bx	lr
