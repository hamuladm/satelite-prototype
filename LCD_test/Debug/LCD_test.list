
LCD_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800a250  0800a250  0001a250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a690  0800a690  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a690  0800a690  0001a690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a698  0800a698  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a698  0800a698  0001a698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a69c  0800a69c  0001a69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a6a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001d8  0800a878  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  0800a878  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b746  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002062  00000000  00000000  0002b991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  0002d9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000087a  00000000  00000000  0002e508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f1e  00000000  00000000  0002ed82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e010  00000000  00000000  00045ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089a6f  00000000  00000000  00053cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042b4  00000000  00000000  000dd720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000e19d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a238 	.word	0x0800a238

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800a238 	.word	0x0800a238

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f1 	b.w	800109c <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9a6 	b.w	800109c <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9e08      	ldr	r6, [sp, #32]
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	460f      	mov	r7, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4694      	mov	ip, r2
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0xe2>
 8000dea:	fab2 f382 	clz	r3, r2
 8000dee:	b143      	cbz	r3, 8000e02 <__udivmoddi4+0x2e>
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	f1c3 0220 	rsb	r2, r3, #32
 8000df8:	409f      	lsls	r7, r3
 8000dfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dfe:	4317      	orrs	r7, r2
 8000e00:	409c      	lsls	r4, r3
 8000e02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e06:	fa1f f58c 	uxth.w	r5, ip
 8000e0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e0e:	0c22      	lsrs	r2, r4, #16
 8000e10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e18:	fb01 f005 	mul.w	r0, r1, r5
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e20:	eb1c 0202 	adds.w	r2, ip, r2
 8000e24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e28:	f080 811c 	bcs.w	8001064 <__udivmoddi4+0x290>
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	f240 8119 	bls.w	8001064 <__udivmoddi4+0x290>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4462      	add	r2, ip
 8000e36:	1a12      	subs	r2, r2, r0
 8000e38:	b2a4      	uxth	r4, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e46:	fb00 f505 	mul.w	r5, r0, r5
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d90a      	bls.n	8000e64 <__udivmoddi4+0x90>
 8000e4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e56:	f080 8107 	bcs.w	8001068 <__udivmoddi4+0x294>
 8000e5a:	42a5      	cmp	r5, r4
 8000e5c:	f240 8104 	bls.w	8001068 <__udivmoddi4+0x294>
 8000e60:	4464      	add	r4, ip
 8000e62:	3802      	subs	r0, #2
 8000e64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11e      	cbz	r6, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40dc      	lsrs	r4, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	e9c6 4300 	strd	r4, r3, [r6]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0xbc>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	f000 80ed 	beq.w	800105e <__udivmoddi4+0x28a>
 8000e84:	2100      	movs	r1, #0
 8000e86:	e9c6 0500 	strd	r0, r5, [r6]
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	fab3 f183 	clz	r1, r3
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d149      	bne.n	8000f2c <__udivmoddi4+0x158>
 8000e98:	42ab      	cmp	r3, r5
 8000e9a:	d302      	bcc.n	8000ea2 <__udivmoddi4+0xce>
 8000e9c:	4282      	cmp	r2, r0
 8000e9e:	f200 80f8 	bhi.w	8001092 <__udivmoddi4+0x2be>
 8000ea2:	1a84      	subs	r4, r0, r2
 8000ea4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	4617      	mov	r7, r2
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d0e2      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000eb4:	e7df      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb6:	b902      	cbnz	r2, 8000eba <__udivmoddi4+0xe6>
 8000eb8:	deff      	udf	#255	; 0xff
 8000eba:	fab2 f382 	clz	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 8090 	bne.w	8000fe4 <__udivmoddi4+0x210>
 8000ec4:	1a8a      	subs	r2, r1, r2
 8000ec6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eca:	fa1f fe8c 	uxth.w	lr, ip
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ed4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ed8:	0c22      	lsrs	r2, r4, #16
 8000eda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ede:	fb0e f005 	mul.w	r0, lr, r5
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x124>
 8000ee6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eee:	d202      	bcs.n	8000ef6 <__udivmoddi4+0x122>
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	f200 80cb 	bhi.w	800108c <__udivmoddi4+0x2b8>
 8000ef6:	4645      	mov	r5, r8
 8000ef8:	1a12      	subs	r2, r2, r0
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f00:	fb07 2210 	mls	r2, r7, r0, r2
 8000f04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f08:	fb0e fe00 	mul.w	lr, lr, r0
 8000f0c:	45a6      	cmp	lr, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x14e>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f18:	d202      	bcs.n	8000f20 <__udivmoddi4+0x14c>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f200 80bb 	bhi.w	8001096 <__udivmoddi4+0x2c2>
 8000f20:	4610      	mov	r0, r2
 8000f22:	eba4 040e 	sub.w	r4, r4, lr
 8000f26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f2a:	e79f      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f2c:	f1c1 0720 	rsb	r7, r1, #32
 8000f30:	408b      	lsls	r3, r1
 8000f32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f42:	40fd      	lsrs	r5, r7
 8000f44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f48:	4323      	orrs	r3, r4
 8000f4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f4e:	fa1f fe8c 	uxth.w	lr, ip
 8000f52:	fb09 5518 	mls	r5, r9, r8, r5
 8000f56:	0c1c      	lsrs	r4, r3, #16
 8000f58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	fa02 f201 	lsl.w	r2, r2, r1
 8000f66:	fa00 f001 	lsl.w	r0, r0, r1
 8000f6a:	d90b      	bls.n	8000f84 <__udivmoddi4+0x1b0>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f74:	f080 8088 	bcs.w	8001088 <__udivmoddi4+0x2b4>
 8000f78:	42a5      	cmp	r5, r4
 8000f7a:	f240 8085 	bls.w	8001088 <__udivmoddi4+0x2b4>
 8000f7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f82:	4464      	add	r4, ip
 8000f84:	1b64      	subs	r4, r4, r5
 8000f86:	b29d      	uxth	r5, r3
 8000f88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f98:	45a6      	cmp	lr, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x1da>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fa4:	d26c      	bcs.n	8001080 <__udivmoddi4+0x2ac>
 8000fa6:	45a6      	cmp	lr, r4
 8000fa8:	d96a      	bls.n	8001080 <__udivmoddi4+0x2ac>
 8000faa:	3b02      	subs	r3, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fb6:	eba4 040e 	sub.w	r4, r4, lr
 8000fba:	42ac      	cmp	r4, r5
 8000fbc:	46c8      	mov	r8, r9
 8000fbe:	46ae      	mov	lr, r5
 8000fc0:	d356      	bcc.n	8001070 <__udivmoddi4+0x29c>
 8000fc2:	d053      	beq.n	800106c <__udivmoddi4+0x298>
 8000fc4:	b156      	cbz	r6, 8000fdc <__udivmoddi4+0x208>
 8000fc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fca:	eb64 040e 	sbc.w	r4, r4, lr
 8000fce:	fa04 f707 	lsl.w	r7, r4, r7
 8000fd2:	40ca      	lsrs	r2, r1
 8000fd4:	40cc      	lsrs	r4, r1
 8000fd6:	4317      	orrs	r7, r2
 8000fd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe4:	f1c3 0120 	rsb	r1, r3, #32
 8000fe8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ff0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ff4:	409d      	lsls	r5, r3
 8000ff6:	432a      	orrs	r2, r5
 8000ff8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ffc:	fa1f fe8c 	uxth.w	lr, ip
 8001000:	fbb1 f0f7 	udiv	r0, r1, r7
 8001004:	fb07 1510 	mls	r5, r7, r0, r1
 8001008:	0c11      	lsrs	r1, r2, #16
 800100a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800100e:	fb00 f50e 	mul.w	r5, r0, lr
 8001012:	428d      	cmp	r5, r1
 8001014:	fa04 f403 	lsl.w	r4, r4, r3
 8001018:	d908      	bls.n	800102c <__udivmoddi4+0x258>
 800101a:	eb1c 0101 	adds.w	r1, ip, r1
 800101e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001022:	d22f      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001024:	428d      	cmp	r5, r1
 8001026:	d92d      	bls.n	8001084 <__udivmoddi4+0x2b0>
 8001028:	3802      	subs	r0, #2
 800102a:	4461      	add	r1, ip
 800102c:	1b49      	subs	r1, r1, r5
 800102e:	b292      	uxth	r2, r2
 8001030:	fbb1 f5f7 	udiv	r5, r1, r7
 8001034:	fb07 1115 	mls	r1, r7, r5, r1
 8001038:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800103c:	fb05 f10e 	mul.w	r1, r5, lr
 8001040:	4291      	cmp	r1, r2
 8001042:	d908      	bls.n	8001056 <__udivmoddi4+0x282>
 8001044:	eb1c 0202 	adds.w	r2, ip, r2
 8001048:	f105 38ff 	add.w	r8, r5, #4294967295
 800104c:	d216      	bcs.n	800107c <__udivmoddi4+0x2a8>
 800104e:	4291      	cmp	r1, r2
 8001050:	d914      	bls.n	800107c <__udivmoddi4+0x2a8>
 8001052:	3d02      	subs	r5, #2
 8001054:	4462      	add	r2, ip
 8001056:	1a52      	subs	r2, r2, r1
 8001058:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800105c:	e738      	b.n	8000ed0 <__udivmoddi4+0xfc>
 800105e:	4631      	mov	r1, r6
 8001060:	4630      	mov	r0, r6
 8001062:	e708      	b.n	8000e76 <__udivmoddi4+0xa2>
 8001064:	4639      	mov	r1, r7
 8001066:	e6e6      	b.n	8000e36 <__udivmoddi4+0x62>
 8001068:	4610      	mov	r0, r2
 800106a:	e6fb      	b.n	8000e64 <__udivmoddi4+0x90>
 800106c:	4548      	cmp	r0, r9
 800106e:	d2a9      	bcs.n	8000fc4 <__udivmoddi4+0x1f0>
 8001070:	ebb9 0802 	subs.w	r8, r9, r2
 8001074:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001078:	3b01      	subs	r3, #1
 800107a:	e7a3      	b.n	8000fc4 <__udivmoddi4+0x1f0>
 800107c:	4645      	mov	r5, r8
 800107e:	e7ea      	b.n	8001056 <__udivmoddi4+0x282>
 8001080:	462b      	mov	r3, r5
 8001082:	e794      	b.n	8000fae <__udivmoddi4+0x1da>
 8001084:	4640      	mov	r0, r8
 8001086:	e7d1      	b.n	800102c <__udivmoddi4+0x258>
 8001088:	46d0      	mov	r8, sl
 800108a:	e77b      	b.n	8000f84 <__udivmoddi4+0x1b0>
 800108c:	3d02      	subs	r5, #2
 800108e:	4462      	add	r2, ip
 8001090:	e732      	b.n	8000ef8 <__udivmoddi4+0x124>
 8001092:	4608      	mov	r0, r1
 8001094:	e70a      	b.n	8000eac <__udivmoddi4+0xd8>
 8001096:	4464      	add	r4, ip
 8001098:	3802      	subs	r0, #2
 800109a:	e742      	b.n	8000f22 <__udivmoddi4+0x14e>

0800109c <__aeabi_idiv0>:
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	9302      	str	r3, [sp, #8]
 80010ac:	2319      	movs	r3, #25
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	463b      	mov	r3, r7
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	2288      	movs	r2, #136	; 0x88
 80010b8:	21ec      	movs	r1, #236	; 0xec
 80010ba:	4857      	ldr	r0, [pc, #348]	; (8001218 <TrimRead+0x178>)
 80010bc:	f002 fc16 	bl	80038ec <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010c0:	463b      	mov	r3, r7
 80010c2:	3319      	adds	r3, #25
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	9202      	str	r2, [sp, #8]
 80010ca:	2207      	movs	r2, #7
 80010cc:	9201      	str	r2, [sp, #4]
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	22e1      	movs	r2, #225	; 0xe1
 80010d4:	21ec      	movs	r1, #236	; 0xec
 80010d6:	4850      	ldr	r0, [pc, #320]	; (8001218 <TrimRead+0x178>)
 80010d8:	f002 fc08 	bl	80038ec <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	783b      	ldrb	r3, [r7, #0]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4b4b      	ldr	r3, [pc, #300]	; (800121c <TrimRead+0x17c>)
 80010ee:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	78bb      	ldrb	r3, [r7, #2]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b48      	ldr	r3, [pc, #288]	; (8001220 <TrimRead+0x180>)
 8001100:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	793b      	ldrb	r3, [r7, #4]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21a      	sxth	r2, r3
 8001110:	4b44      	ldr	r3, [pc, #272]	; (8001224 <TrimRead+0x184>)
 8001112:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	797b      	ldrb	r3, [r7, #5]
 800111c:	b21b      	sxth	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b21b      	sxth	r3, r3
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b40      	ldr	r3, [pc, #256]	; (8001228 <TrimRead+0x188>)
 8001126:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001128:	7a7b      	ldrb	r3, [r7, #9]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b21a      	sxth	r2, r3
 800112e:	79bb      	ldrb	r3, [r7, #6]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21a      	sxth	r2, r3
 8001136:	4b3d      	ldr	r3, [pc, #244]	; (800122c <TrimRead+0x18c>)
 8001138:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	7abb      	ldrb	r3, [r7, #10]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b39      	ldr	r3, [pc, #228]	; (8001230 <TrimRead+0x190>)
 800114a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800114c:	7b7b      	ldrb	r3, [r7, #13]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	7b3b      	ldrb	r3, [r7, #12]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b36      	ldr	r3, [pc, #216]	; (8001234 <TrimRead+0x194>)
 800115c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b21a      	sxth	r2, r3
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21a      	sxth	r2, r3
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <TrimRead+0x198>)
 800116e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001170:	7c7b      	ldrb	r3, [r7, #17]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	7c3b      	ldrb	r3, [r7, #16]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21a      	sxth	r2, r3
 800117e:	4b2f      	ldr	r3, [pc, #188]	; (800123c <TrimRead+0x19c>)
 8001180:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001182:	7cfb      	ldrb	r3, [r7, #19]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21a      	sxth	r2, r3
 8001188:	7cbb      	ldrb	r3, [r7, #18]
 800118a:	b21b      	sxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b21a      	sxth	r2, r3
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <TrimRead+0x1a0>)
 8001192:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001194:	7d7b      	ldrb	r3, [r7, #21]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	b21a      	sxth	r2, r3
 800119a:	7d3b      	ldrb	r3, [r7, #20]
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	4b28      	ldr	r3, [pc, #160]	; (8001244 <TrimRead+0x1a4>)
 80011a4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	7dbb      	ldrb	r3, [r7, #22]
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <TrimRead+0x1a8>)
 80011b6:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011b8:	7e3b      	ldrb	r3, [r7, #24]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <TrimRead+0x1ac>)
 80011be:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011c0:	7ebb      	ldrb	r3, [r7, #26]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	7e7b      	ldrb	r3, [r7, #25]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <TrimRead+0x1b0>)
 80011d0:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011d2:	7efb      	ldrb	r3, [r7, #27]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <TrimRead+0x1b4>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011da:	7f3b      	ldrb	r3, [r7, #28]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	b21a      	sxth	r2, r3
 80011e0:	7f7b      	ldrb	r3, [r7, #29]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <TrimRead+0x1b8>)
 80011f0:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80011f2:	7fbb      	ldrb	r3, [r7, #30]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	7f7b      	ldrb	r3, [r7, #29]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <TrimRead+0x1bc>)
 8001206:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001208:	7ffb      	ldrb	r3, [r7, #31]
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <TrimRead+0x1c0>)
 800120e:	801a      	strh	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200002d4 	.word	0x200002d4
 800121c:	20000204 	.word	0x20000204
 8001220:	2000020c 	.word	0x2000020c
 8001224:	2000020e 	.word	0x2000020e
 8001228:	20000206 	.word	0x20000206
 800122c:	20000210 	.word	0x20000210
 8001230:	20000212 	.word	0x20000212
 8001234:	20000214 	.word	0x20000214
 8001238:	20000216 	.word	0x20000216
 800123c:	20000218 	.word	0x20000218
 8001240:	2000021a 	.word	0x2000021a
 8001244:	2000021c 	.word	0x2000021c
 8001248:	2000021e 	.word	0x2000021e
 800124c:	20000208 	.word	0x20000208
 8001250:	20000220 	.word	0x20000220
 8001254:	2000020a 	.word	0x2000020a
 8001258:	20000222 	.word	0x20000222
 800125c:	20000224 	.word	0x20000224
 8001260:	20000226 	.word	0x20000226

08001264 <BMP280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BMP280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af04      	add	r7, sp, #16
 800126a:	4604      	mov	r4, r0
 800126c:	4608      	mov	r0, r1
 800126e:	4611      	mov	r1, r2
 8001270:	461a      	mov	r2, r3
 8001272:	4623      	mov	r3, r4
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	4603      	mov	r3, r0
 8001278:	71bb      	strb	r3, [r7, #6]
 800127a:	460b      	mov	r3, r1
 800127c:	717b      	strb	r3, [r7, #5]
 800127e:	4613      	mov	r3, r2
 8001280:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8001282:	f7ff ff0d 	bl	80010a0 <TrimRead>


	uint8_t datatowrite = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 800128e:	23b6      	movs	r3, #182	; 0xb6
 8001290:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	2301      	movs	r3, #1
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	f107 030f 	add.w	r3, r7, #15
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	22e0      	movs	r2, #224	; 0xe0
 80012a6:	21ec      	movs	r1, #236	; 0xec
 80012a8:	4858      	ldr	r0, [pc, #352]	; (800140c <BMP280_Config+0x1a8>)
 80012aa:	f002 fa25 	bl	80036f8 <HAL_I2C_Mem_Write>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <BMP280_Config+0x56>
	{
		return -1;
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	e0a3      	b.n	8001402 <BMP280_Config+0x19e>
	}

	HAL_Delay (100);
 80012ba:	2064      	movs	r0, #100	; 0x64
 80012bc:	f001 fda4 	bl	8002e08 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	f107 030f 	add.w	r3, r7, #15
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	22f2      	movs	r2, #242	; 0xf2
 80012d8:	21ec      	movs	r1, #236	; 0xec
 80012da:	484c      	ldr	r0, [pc, #304]	; (800140c <BMP280_Config+0x1a8>)
 80012dc:	f002 fa0c 	bl	80036f8 <HAL_I2C_Mem_Write>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <BMP280_Config+0x88>
	{
		return -2;
 80012e6:	f06f 0301 	mvn.w	r3, #1
 80012ea:	e08a      	b.n	8001402 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 80012ec:	2064      	movs	r0, #100	; 0x64
 80012ee:	f001 fd8b 	bl	8002e08 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	2301      	movs	r3, #1
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	f107 030e 	add.w	r3, r7, #14
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	22f2      	movs	r2, #242	; 0xf2
 8001306:	21ec      	movs	r1, #236	; 0xec
 8001308:	4840      	ldr	r0, [pc, #256]	; (800140c <BMP280_Config+0x1a8>)
 800130a:	f002 faef 	bl	80038ec <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800130e:	7bba      	ldrb	r2, [r7, #14]
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	429a      	cmp	r2, r3
 8001314:	d002      	beq.n	800131c <BMP280_Config+0xb8>
	{
		return -3;
 8001316:	f06f 0302 	mvn.w	r3, #2
 800131a:	e072      	b.n	8001402 <BMP280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800131c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	b25a      	sxtb	r2, r3
 8001324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	b25b      	sxtb	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b25b      	sxtb	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	2301      	movs	r3, #1
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	f107 030f 	add.w	r3, r7, #15
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	22f5      	movs	r2, #245	; 0xf5
 8001348:	21ec      	movs	r1, #236	; 0xec
 800134a:	4830      	ldr	r0, [pc, #192]	; (800140c <BMP280_Config+0x1a8>)
 800134c:	f002 f9d4 	bl	80036f8 <HAL_I2C_Mem_Write>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <BMP280_Config+0xf8>
	{
		return -4;
 8001356:	f06f 0303 	mvn.w	r3, #3
 800135a:	e052      	b.n	8001402 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 800135c:	2064      	movs	r0, #100	; 0x64
 800135e:	f001 fd53 	bl	8002e08 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2301      	movs	r3, #1
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	f107 030e 	add.w	r3, r7, #14
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	22f5      	movs	r2, #245	; 0xf5
 8001376:	21ec      	movs	r1, #236	; 0xec
 8001378:	4824      	ldr	r0, [pc, #144]	; (800140c <BMP280_Config+0x1a8>)
 800137a:	f002 fab7 	bl	80038ec <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800137e:	7bba      	ldrb	r2, [r7, #14]
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	429a      	cmp	r2, r3
 8001384:	d002      	beq.n	800138c <BMP280_Config+0x128>
	{
		return -5;
 8001386:	f06f 0304 	mvn.w	r3, #4
 800138a:	e03a      	b.n	8001402 <BMP280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	015b      	lsls	r3, r3, #5
 8001390:	b25a      	sxtb	r2, r3
 8001392:	79bb      	ldrb	r3, [r7, #6]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b25a      	sxtb	r2, r3
 800139c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	2301      	movs	r3, #1
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	f107 030f 	add.w	r3, r7, #15
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	22f4      	movs	r2, #244	; 0xf4
 80013bc:	21ec      	movs	r1, #236	; 0xec
 80013be:	4813      	ldr	r0, [pc, #76]	; (800140c <BMP280_Config+0x1a8>)
 80013c0:	f002 f99a 	bl	80036f8 <HAL_I2C_Mem_Write>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <BMP280_Config+0x16c>
	{
		return -6;
 80013ca:	f06f 0305 	mvn.w	r3, #5
 80013ce:	e018      	b.n	8001402 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 80013d0:	2064      	movs	r0, #100	; 0x64
 80013d2:	f001 fd19 	bl	8002e08 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2301      	movs	r3, #1
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	f107 030e 	add.w	r3, r7, #14
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	22f4      	movs	r2, #244	; 0xf4
 80013ea:	21ec      	movs	r1, #236	; 0xec
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <BMP280_Config+0x1a8>)
 80013ee:	f002 fa7d 	bl	80038ec <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013f2:	7bba      	ldrb	r2, [r7, #14]
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d002      	beq.n	8001400 <BMP280_Config+0x19c>
	{
		return -7;
 80013fa:	f06f 0306 	mvn.w	r3, #6
 80013fe:	e000      	b.n	8001402 <BMP280_Config+0x19e>
	}

	return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}
 800140a:	bf00      	nop
 800140c:	200002d4 	.word	0x200002d4

08001410 <BMPReadRaw>:


int BMPReadRaw(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af04      	add	r7, sp, #16
	uint8_t RawData[6];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c3, BMP280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	2301      	movs	r3, #1
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <BMPReadRaw+0x84>)
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2301      	movs	r3, #1
 8001426:	22d0      	movs	r2, #208	; 0xd0
 8001428:	21ec      	movs	r1, #236	; 0xec
 800142a:	481b      	ldr	r0, [pc, #108]	; (8001498 <BMPReadRaw+0x88>)
 800142c:	f002 fa5e 	bl	80038ec <HAL_I2C_Mem_Read>

	if (chipID == 0x58)
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <BMPReadRaw+0x84>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b58      	cmp	r3, #88	; 0x58
 8001436:	d127      	bne.n	8001488 <BMPReadRaw+0x78>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, PRESS_MSB_REG, 1, RawData, 6, HAL_MAX_DELAY);
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2306      	movs	r3, #6
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	463b      	mov	r3, r7
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2301      	movs	r3, #1
 8001448:	22f7      	movs	r2, #247	; 0xf7
 800144a:	21ec      	movs	r1, #236	; 0xec
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <BMPReadRaw+0x88>)
 800144e:	f002 fa4d 	bl	80038ec <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001452:	783b      	ldrb	r3, [r7, #0]
 8001454:	031a      	lsls	r2, r3, #12
 8001456:	787b      	ldrb	r3, [r7, #1]
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	4313      	orrs	r3, r2
 800145c:	78ba      	ldrb	r2, [r7, #2]
 800145e:	0912      	lsrs	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	4313      	orrs	r3, r2
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <BMPReadRaw+0x8c>)
 8001466:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	031a      	lsls	r2, r3, #12
 800146c:	793b      	ldrb	r3, [r7, #4]
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4313      	orrs	r3, r2
 8001472:	797a      	ldrb	r2, [r7, #5]
 8001474:	0912      	lsrs	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	4313      	orrs	r3, r2
 800147a:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <BMPReadRaw+0x90>)
 800147c:	6013      	str	r3, [r2, #0]
		hRaw = 0;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <BMPReadRaw+0x94>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

		return 0;
 8001484:	2300      	movs	r3, #0
 8001486:	e001      	b.n	800148c <BMPReadRaw+0x7c>
	}

	else return -1;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200001f4 	.word	0x200001f4
 8001498:	200002d4 	.word	0x200002d4
 800149c:	200001fc 	.word	0x200001fc
 80014a0:	200001f8 	.word	0x200001f8
 80014a4:	20000200 	.word	0x20000200

080014a8 <BMP280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BMP280_compensate_T_int32(int32_t adc_T)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	10da      	asrs	r2, r3, #3
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <BMP280_compensate_T_int32+0x74>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4a18      	ldr	r2, [pc, #96]	; (8001520 <BMP280_compensate_T_int32+0x78>)
 80014be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	12db      	asrs	r3, r3, #11
 80014c8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	111b      	asrs	r3, r3, #4
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <BMP280_compensate_T_int32+0x74>)
 80014d0:	8812      	ldrh	r2, [r2, #0]
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	1112      	asrs	r2, r2, #4
 80014d8:	4910      	ldr	r1, [pc, #64]	; (800151c <BMP280_compensate_T_int32+0x74>)
 80014da:	8809      	ldrh	r1, [r1, #0]
 80014dc:	1a52      	subs	r2, r2, r1
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	131b      	asrs	r3, r3, #12
 80014e4:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <BMP280_compensate_T_int32+0x7c>)
 80014e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	139b      	asrs	r3, r3, #14
 80014f0:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <BMP280_compensate_T_int32+0x80>)
 80014fa:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <BMP280_compensate_T_int32+0x80>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	3380      	adds	r3, #128	; 0x80
 8001508:	121b      	asrs	r3, r3, #8
 800150a:	60fb      	str	r3, [r7, #12]
	return T;
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	4618      	mov	r0, r3
 8001510:	371c      	adds	r7, #28
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000204 	.word	0x20000204
 8001520:	2000020c 	.word	0x2000020c
 8001524:	2000020e 	.word	0x2000020e
 8001528:	20000228 	.word	0x20000228

0800152c <BMP280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BMP280_compensate_P_int64(int32_t adc_P)
{
 800152c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001530:	b0ca      	sub	sp, #296	; 0x128
 8001532:	af00      	add	r7, sp, #0
 8001534:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001538:	4baf      	ldr	r3, [pc, #700]	; (80017f8 <BMP280_compensate_P_int64+0x2cc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	17da      	asrs	r2, r3, #31
 800153e:	461c      	mov	r4, r3
 8001540:	4615      	mov	r5, r2
 8001542:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001546:	f145 3bff 	adc.w	fp, r5, #4294967295
 800154a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800154e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001552:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001556:	fb03 f102 	mul.w	r1, r3, r2
 800155a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800155e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	18ca      	adds	r2, r1, r3
 8001568:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800156c:	fba3 8903 	umull	r8, r9, r3, r3
 8001570:	eb02 0309 	add.w	r3, r2, r9
 8001574:	4699      	mov	r9, r3
 8001576:	4ba1      	ldr	r3, [pc, #644]	; (80017fc <BMP280_compensate_P_int64+0x2d0>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	b21b      	sxth	r3, r3
 800157e:	17da      	asrs	r2, r3, #31
 8001580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001584:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001588:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800158c:	4603      	mov	r3, r0
 800158e:	fb03 f209 	mul.w	r2, r3, r9
 8001592:	460b      	mov	r3, r1
 8001594:	fb08 f303 	mul.w	r3, r8, r3
 8001598:	4413      	add	r3, r2
 800159a:	4602      	mov	r2, r0
 800159c:	fba8 1202 	umull	r1, r2, r8, r2
 80015a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015a4:	460a      	mov	r2, r1
 80015a6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015ae:	4413      	add	r3, r2
 80015b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015b4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015b8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015bc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015c0:	4b8f      	ldr	r3, [pc, #572]	; (8001800 <BMP280_compensate_P_int64+0x2d4>)
 80015c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	17da      	asrs	r2, r3, #31
 80015ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015ce:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80015da:	462a      	mov	r2, r5
 80015dc:	fb02 f203 	mul.w	r2, r2, r3
 80015e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015e4:	4621      	mov	r1, r4
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	441a      	add	r2, r3
 80015ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015f0:	4621      	mov	r1, r4
 80015f2:	fba3 1301 	umull	r1, r3, r3, r1
 80015f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015fa:	460b      	mov	r3, r1
 80015fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001604:	18d3      	adds	r3, r2, r3
 8001606:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800160a:	f04f 0000 	mov.w	r0, #0
 800160e:	f04f 0100 	mov.w	r1, #0
 8001612:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001616:	462b      	mov	r3, r5
 8001618:	0459      	lsls	r1, r3, #17
 800161a:	4623      	mov	r3, r4
 800161c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001620:	4623      	mov	r3, r4
 8001622:	0458      	lsls	r0, r3, #17
 8001624:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001628:	1814      	adds	r4, r2, r0
 800162a:	643c      	str	r4, [r7, #64]	; 0x40
 800162c:	414b      	adcs	r3, r1
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
 8001630:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001634:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001638:	4b72      	ldr	r3, [pc, #456]	; (8001804 <BMP280_compensate_P_int64+0x2d8>)
 800163a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163e:	b21b      	sxth	r3, r3
 8001640:	17da      	asrs	r2, r3, #31
 8001642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001646:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800164a:	f04f 0000 	mov.w	r0, #0
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001656:	00d9      	lsls	r1, r3, #3
 8001658:	2000      	movs	r0, #0
 800165a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800165e:	1814      	adds	r4, r2, r0
 8001660:	63bc      	str	r4, [r7, #56]	; 0x38
 8001662:	414b      	adcs	r3, r1
 8001664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001666:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800166a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800166e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001672:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001676:	fb03 f102 	mul.w	r1, r3, r2
 800167a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800167e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	18ca      	adds	r2, r1, r3
 8001688:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800168c:	fba3 1303 	umull	r1, r3, r3, r3
 8001690:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001694:	460b      	mov	r3, r1
 8001696:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800169a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800169e:	18d3      	adds	r3, r2, r3
 80016a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016a4:	4b58      	ldr	r3, [pc, #352]	; (8001808 <BMP280_compensate_P_int64+0x2dc>)
 80016a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	17da      	asrs	r2, r3, #31
 80016ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016b6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016ba:	462b      	mov	r3, r5
 80016bc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016c0:	4642      	mov	r2, r8
 80016c2:	fb02 f203 	mul.w	r2, r2, r3
 80016c6:	464b      	mov	r3, r9
 80016c8:	4621      	mov	r1, r4
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	4622      	mov	r2, r4
 80016d2:	4641      	mov	r1, r8
 80016d4:	fba2 1201 	umull	r1, r2, r2, r1
 80016d8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80016dc:	460a      	mov	r2, r1
 80016de:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80016e2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80016e6:	4413      	add	r3, r2
 80016e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016ec:	f04f 0000 	mov.w	r0, #0
 80016f0:	f04f 0100 	mov.w	r1, #0
 80016f4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80016f8:	4623      	mov	r3, r4
 80016fa:	0a18      	lsrs	r0, r3, #8
 80016fc:	462b      	mov	r3, r5
 80016fe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001702:	462b      	mov	r3, r5
 8001704:	1219      	asrs	r1, r3, #8
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <BMP280_compensate_P_int64+0x2e0>)
 8001708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170c:	b21b      	sxth	r3, r3
 800170e:	17da      	asrs	r2, r3, #31
 8001710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001714:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001718:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800171c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001720:	464a      	mov	r2, r9
 8001722:	fb02 f203 	mul.w	r2, r2, r3
 8001726:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800172a:	4644      	mov	r4, r8
 800172c:	fb04 f303 	mul.w	r3, r4, r3
 8001730:	441a      	add	r2, r3
 8001732:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001736:	4644      	mov	r4, r8
 8001738:	fba3 4304 	umull	r4, r3, r3, r4
 800173c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001740:	4623      	mov	r3, r4
 8001742:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001746:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800174a:	18d3      	adds	r3, r2, r3
 800174c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800175c:	464c      	mov	r4, r9
 800175e:	0323      	lsls	r3, r4, #12
 8001760:	4644      	mov	r4, r8
 8001762:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001766:	4644      	mov	r4, r8
 8001768:	0322      	lsls	r2, r4, #12
 800176a:	1884      	adds	r4, r0, r2
 800176c:	633c      	str	r4, [r7, #48]	; 0x30
 800176e:	eb41 0303 	adc.w	r3, r1, r3
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
 8001774:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001778:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800177c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001780:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001784:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001788:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800178c:	4b20      	ldr	r3, [pc, #128]	; (8001810 <BMP280_compensate_P_int64+0x2e4>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	b29b      	uxth	r3, r3
 8001792:	2200      	movs	r2, #0
 8001794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001798:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800179c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017a0:	462b      	mov	r3, r5
 80017a2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017a6:	4642      	mov	r2, r8
 80017a8:	fb02 f203 	mul.w	r2, r2, r3
 80017ac:	464b      	mov	r3, r9
 80017ae:	4621      	mov	r1, r4
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	4622      	mov	r2, r4
 80017b8:	4641      	mov	r1, r8
 80017ba:	fba2 1201 	umull	r1, r2, r2, r1
 80017be:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017c2:	460a      	mov	r2, r1
 80017c4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017c8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017cc:	4413      	add	r3, r2
 80017ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017de:	4629      	mov	r1, r5
 80017e0:	104a      	asrs	r2, r1, #1
 80017e2:	4629      	mov	r1, r5
 80017e4:	17cb      	asrs	r3, r1, #31
 80017e6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80017ea:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017ee:	4313      	orrs	r3, r2
 80017f0:	d110      	bne.n	8001814 <BMP280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 80017f2:	2300      	movs	r3, #0
 80017f4:	e154      	b.n	8001aa0 <BMP280_compensate_P_int64+0x574>
 80017f6:	bf00      	nop
 80017f8:	20000228 	.word	0x20000228
 80017fc:	20000218 	.word	0x20000218
 8001800:	20000216 	.word	0x20000216
 8001804:	20000214 	.word	0x20000214
 8001808:	20000212 	.word	0x20000212
 800180c:	20000210 	.word	0x20000210
 8001810:	20000206 	.word	0x20000206
	}
	p = 1048576-adc_P;
 8001814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001818:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800181c:	17da      	asrs	r2, r3, #31
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001820:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001822:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001826:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800182a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800182e:	105b      	asrs	r3, r3, #1
 8001830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001834:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001838:	07db      	lsls	r3, r3, #31
 800183a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800183e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001842:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001846:	4621      	mov	r1, r4
 8001848:	1a89      	subs	r1, r1, r2
 800184a:	67b9      	str	r1, [r7, #120]	; 0x78
 800184c:	4629      	mov	r1, r5
 800184e:	eb61 0303 	sbc.w	r3, r1, r3
 8001852:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001854:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001858:	4622      	mov	r2, r4
 800185a:	462b      	mov	r3, r5
 800185c:	1891      	adds	r1, r2, r2
 800185e:	6239      	str	r1, [r7, #32]
 8001860:	415b      	adcs	r3, r3
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
 8001864:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001868:	4621      	mov	r1, r4
 800186a:	1851      	adds	r1, r2, r1
 800186c:	61b9      	str	r1, [r7, #24]
 800186e:	4629      	mov	r1, r5
 8001870:	414b      	adcs	r3, r1
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001880:	4649      	mov	r1, r9
 8001882:	018b      	lsls	r3, r1, #6
 8001884:	4641      	mov	r1, r8
 8001886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800188a:	4641      	mov	r1, r8
 800188c:	018a      	lsls	r2, r1, #6
 800188e:	4641      	mov	r1, r8
 8001890:	1889      	adds	r1, r1, r2
 8001892:	6139      	str	r1, [r7, #16]
 8001894:	4649      	mov	r1, r9
 8001896:	eb43 0101 	adc.w	r1, r3, r1
 800189a:	6179      	str	r1, [r7, #20]
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018a8:	4649      	mov	r1, r9
 80018aa:	008b      	lsls	r3, r1, #2
 80018ac:	4641      	mov	r1, r8
 80018ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018b2:	4641      	mov	r1, r8
 80018b4:	008a      	lsls	r2, r1, #2
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	4622      	mov	r2, r4
 80018be:	189b      	adds	r3, r3, r2
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	460b      	mov	r3, r1
 80018c4:	462a      	mov	r2, r5
 80018c6:	eb42 0303 	adc.w	r3, r2, r3
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018d8:	4649      	mov	r1, r9
 80018da:	008b      	lsls	r3, r1, #2
 80018dc:	4641      	mov	r1, r8
 80018de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018e2:	4641      	mov	r1, r8
 80018e4:	008a      	lsls	r2, r1, #2
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	4622      	mov	r2, r4
 80018ee:	189b      	adds	r3, r3, r2
 80018f0:	673b      	str	r3, [r7, #112]	; 0x70
 80018f2:	462b      	mov	r3, r5
 80018f4:	460a      	mov	r2, r1
 80018f6:	eb42 0303 	adc.w	r3, r2, r3
 80018fa:	677b      	str	r3, [r7, #116]	; 0x74
 80018fc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001900:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001904:	f7ff f9c8 	bl	8000c98 <__aeabi_ldivmod>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001910:	4b66      	ldr	r3, [pc, #408]	; (8001aac <BMP280_compensate_P_int64+0x580>)
 8001912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001916:	b21b      	sxth	r3, r3
 8001918:	17da      	asrs	r2, r3, #31
 800191a:	66bb      	str	r3, [r7, #104]	; 0x68
 800191c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800191e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001922:	f04f 0000 	mov.w	r0, #0
 8001926:	f04f 0100 	mov.w	r1, #0
 800192a:	0b50      	lsrs	r0, r2, #13
 800192c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001930:	1359      	asrs	r1, r3, #13
 8001932:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001936:	462b      	mov	r3, r5
 8001938:	fb00 f203 	mul.w	r2, r0, r3
 800193c:	4623      	mov	r3, r4
 800193e:	fb03 f301 	mul.w	r3, r3, r1
 8001942:	4413      	add	r3, r2
 8001944:	4622      	mov	r2, r4
 8001946:	fba2 1200 	umull	r1, r2, r2, r0
 800194a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800194e:	460a      	mov	r2, r1
 8001950:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001954:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001958:	4413      	add	r3, r2
 800195a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800195e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	0b50      	lsrs	r0, r2, #13
 800196c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001970:	1359      	asrs	r1, r3, #13
 8001972:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001976:	462b      	mov	r3, r5
 8001978:	fb00 f203 	mul.w	r2, r0, r3
 800197c:	4623      	mov	r3, r4
 800197e:	fb03 f301 	mul.w	r3, r3, r1
 8001982:	4413      	add	r3, r2
 8001984:	4622      	mov	r2, r4
 8001986:	fba2 1200 	umull	r1, r2, r2, r0
 800198a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800198e:	460a      	mov	r2, r1
 8001990:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001994:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001998:	4413      	add	r3, r2
 800199a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019aa:	4621      	mov	r1, r4
 80019ac:	0e4a      	lsrs	r2, r1, #25
 80019ae:	4629      	mov	r1, r5
 80019b0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019b4:	4629      	mov	r1, r5
 80019b6:	164b      	asrs	r3, r1, #25
 80019b8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019bc:	4b3c      	ldr	r3, [pc, #240]	; (8001ab0 <BMP280_compensate_P_int64+0x584>)
 80019be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	17da      	asrs	r2, r3, #31
 80019c6:	663b      	str	r3, [r7, #96]	; 0x60
 80019c8:	667a      	str	r2, [r7, #100]	; 0x64
 80019ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019d2:	462a      	mov	r2, r5
 80019d4:	fb02 f203 	mul.w	r2, r2, r3
 80019d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019dc:	4621      	mov	r1, r4
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80019e8:	4621      	mov	r1, r4
 80019ea:	fba2 1201 	umull	r1, r2, r2, r1
 80019ee:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80019f2:	460a      	mov	r2, r1
 80019f4:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80019f8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80019fc:	4413      	add	r3, r2
 80019fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a0e:	4621      	mov	r1, r4
 8001a10:	0cca      	lsrs	r2, r1, #19
 8001a12:	4629      	mov	r1, r5
 8001a14:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a18:	4629      	mov	r1, r5
 8001a1a:	14cb      	asrs	r3, r1, #19
 8001a1c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a20:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a24:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a28:	1884      	adds	r4, r0, r2
 8001a2a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a2c:	eb41 0303 	adc.w	r3, r1, r3
 8001a30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a32:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a36:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	1889      	adds	r1, r1, r2
 8001a3e:	6539      	str	r1, [r7, #80]	; 0x50
 8001a40:	4629      	mov	r1, r5
 8001a42:	eb43 0101 	adc.w	r1, r3, r1
 8001a46:	6579      	str	r1, [r7, #84]	; 0x54
 8001a48:	f04f 0000 	mov.w	r0, #0
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a54:	4623      	mov	r3, r4
 8001a56:	0a18      	lsrs	r0, r3, #8
 8001a58:	462b      	mov	r3, r5
 8001a5a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a5e:	462b      	mov	r3, r5
 8001a60:	1219      	asrs	r1, r3, #8
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <BMP280_compensate_P_int64+0x588>)
 8001a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	17da      	asrs	r2, r3, #31
 8001a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a7c:	464c      	mov	r4, r9
 8001a7e:	0123      	lsls	r3, r4, #4
 8001a80:	4644      	mov	r4, r8
 8001a82:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a86:	4644      	mov	r4, r8
 8001a88:	0122      	lsls	r2, r4, #4
 8001a8a:	1884      	adds	r4, r0, r2
 8001a8c:	603c      	str	r4, [r7, #0]
 8001a8e:	eb41 0303 	adc.w	r3, r1, r3
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a98:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001a9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aac:	2000021e 	.word	0x2000021e
 8001ab0:	2000021c 	.word	0x2000021c
 8001ab4:	2000021a 	.word	0x2000021a

08001ab8 <BMP280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t BMP280_compensate_H_int32(int32_t adc_H)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <BMP280_compensate_H_int32+0xbc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001ac8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	039a      	lsls	r2, r3, #14
 8001ace:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <BMP280_compensate_H_int32+0xc0>)
 8001ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad4:	051b      	lsls	r3, r3, #20
 8001ad6:	1ad2      	subs	r2, r2, r3
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <BMP280_compensate_H_int32+0xc4>)
 8001ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001ae8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001aec:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001aee:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <BMP280_compensate_H_int32+0xc8>)
 8001af0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001af4:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001afc:	1292      	asrs	r2, r2, #10
 8001afe:	4921      	ldr	r1, [pc, #132]	; (8001b84 <BMP280_compensate_H_int32+0xcc>)
 8001b00:	8809      	ldrh	r1, [r1, #0]
 8001b02:	4608      	mov	r0, r1
 8001b04:	68f9      	ldr	r1, [r7, #12]
 8001b06:	fb00 f101 	mul.w	r1, r0, r1
 8001b0a:	12c9      	asrs	r1, r1, #11
 8001b0c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b10:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b14:	1292      	asrs	r2, r2, #10
 8001b16:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b1a:	491b      	ldr	r1, [pc, #108]	; (8001b88 <BMP280_compensate_H_int32+0xd0>)
 8001b1c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b20:	fb01 f202 	mul.w	r2, r1, r2
 8001b24:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b28:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	13db      	asrs	r3, r3, #15
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	13d2      	asrs	r2, r2, #15
 8001b38:	fb02 f303 	mul.w	r3, r2, r3
 8001b3c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <BMP280_compensate_H_int32+0xd4>)
 8001b40:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b42:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b46:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b54:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b5c:	bfa8      	it	ge
 8001b5e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b62:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	131b      	asrs	r3, r3, #12
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	20000228 	.word	0x20000228
 8001b78:	20000222 	.word	0x20000222
 8001b7c:	20000224 	.word	0x20000224
 8001b80:	20000226 	.word	0x20000226
 8001b84:	2000020a 	.word	0x2000020a
 8001b88:	20000220 	.word	0x20000220
 8001b8c:	20000208 	.word	0x20000208

08001b90 <BMP280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BMP280_Measure (void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	if (BMPReadRaw() == 0)
 8001b94:	f7ff fc3c 	bl	8001410 <BMPReadRaw>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d163      	bne.n	8001c66 <BMP280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <BMP280_Measure+0xf4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ba6:	d104      	bne.n	8001bb2 <BMP280_Measure+0x22>
 8001ba8:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <BMP280_Measure+0xf8>)
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e016      	b.n	8001be0 <BMP280_Measure+0x50>
		  else
		  {
			  Temperature = (BMP280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <BMP280_Measure+0xf4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fc76 	bl	80014a8 <BMP280_compensate_T_int32>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fcb8 	bl	8000534 <__aeabi_i2d>
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <BMP280_Measure+0xfc>)
 8001bca:	f7fe fe47 	bl	800085c <__aeabi_ddiv>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7ff f80f 	bl	8000bf8 <__aeabi_d2f>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a2a      	ldr	r2, [pc, #168]	; (8001c88 <BMP280_Measure+0xf8>)
 8001bde:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <BMP280_Measure+0x100>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001be8:	d104      	bne.n	8001bf4 <BMP280_Measure+0x64>
 8001bea:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <BMP280_Measure+0x104>)
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e016      	b.n	8001c22 <BMP280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BMP280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001bf4:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <BMP280_Measure+0x100>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fc97 	bl	800152c <BMP280_compensate_P_int64>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc87 	bl	8000514 <__aeabi_ui2d>
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <BMP280_Measure+0x108>)
 8001c0c:	f7fe fe26 	bl	800085c <__aeabi_ddiv>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe ffee 	bl	8000bf8 <__aeabi_d2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <BMP280_Measure+0x104>)
 8001c20:	6013      	str	r3, [r2, #0]
			  Pressure = (BMP280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <BMP280_Measure+0x10c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c2a:	d104      	bne.n	8001c36 <BMP280_Measure+0xa6>
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <BMP280_Measure+0x110>)
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001c34:	e023      	b.n	8001c7e <BMP280_Measure+0xee>
			  Humidity = (BMP280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <BMP280_Measure+0x10c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff3c 	bl	8001ab8 <BMP280_compensate_H_int32>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc66 	bl	8000514 <__aeabi_ui2d>
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <BMP280_Measure+0x114>)
 8001c4e:	f7fe fe05 	bl	800085c <__aeabi_ddiv>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ffcd 	bl	8000bf8 <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <BMP280_Measure+0x110>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	e00b      	b.n	8001c7e <BMP280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <BMP280_Measure+0x110>)
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <BMP280_Measure+0x110>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <BMP280_Measure+0x104>)
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <BMP280_Measure+0x104>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a03      	ldr	r2, [pc, #12]	; (8001c88 <BMP280_Measure+0xf8>)
 8001c7c:	6013      	str	r3, [r2, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200001f8 	.word	0x200001f8
 8001c88:	200003b0 	.word	0x200003b0
 8001c8c:	40590000 	.word	0x40590000
 8001c90:	200001fc 	.word	0x200001fc
 8001c94:	200003b4 	.word	0x200003b4
 8001c98:	40700000 	.word	0x40700000
 8001c9c:	20000200 	.word	0x20000200
 8001ca0:	200003b8 	.word	0x200003b8
 8001ca4:	40900000 	.word	0x40900000

08001ca8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001ca8:	b4b0      	push	{r4, r5, r7}
 8001caa:	b08f      	sub	sp, #60	; 0x3c
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001cb0:	f240 13b1 	movw	r3, #433	; 0x1b1
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001cb6:	2307      	movs	r3, #7
 8001cb8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8001cbc:	2307      	movs	r3, #7
 8001cbe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8001cc8:	23ff      	movs	r3, #255	; 0xff
 8001cca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8001cce:	2364      	movs	r3, #100	; 0x64
 8001cd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	461d      	mov	r5, r3
 8001cdc:	f107 040c 	add.w	r4, r7, #12
 8001ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001cec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	373c      	adds	r7, #60	; 0x3c
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bcb0      	pop	{r4, r5, r7}
 8001cf8:	4770      	bx	lr

08001cfa <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001d04:	2101      	movs	r1, #1
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f99f 	bl	800204a <LoRa_read>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001d10:	7bbb      	ldrb	r3, [r7, #14]
 8001d12:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d107      	bne.n	8001d2a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001d1a:	7bbb      	ldrb	r3, [r7, #14]
 8001d1c:	f023 0307 	bic.w	r3, r3, #7
 8001d20:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
 8001d28:	e03e      	b.n	8001da8 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d10c      	bne.n	8001d4a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001d30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d34:	f023 0307 	bic.w	r3, r3, #7
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	61da      	str	r2, [r3, #28]
 8001d48:	e02e      	b.n	8001da8 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d10c      	bne.n	8001d6a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001d50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d54:	f023 0307 	bic.w	r3, r3, #7
 8001d58:	b25b      	sxtb	r3, r3
 8001d5a:	f043 0303 	orr.w	r3, r3, #3
 8001d5e:	b25b      	sxtb	r3, r3
 8001d60:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2203      	movs	r2, #3
 8001d66:	61da      	str	r2, [r3, #28]
 8001d68:	e01e      	b.n	8001da8 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d10c      	bne.n	8001d8a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001d70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d74:	f023 0307 	bic.w	r3, r3, #7
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	f043 0305 	orr.w	r3, r3, #5
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2205      	movs	r2, #5
 8001d86:	61da      	str	r2, [r3, #28]
 8001d88:	e00e      	b.n	8001da8 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b06      	cmp	r3, #6
 8001d8e:	d10b      	bne.n	8001da8 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001d90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d94:	f023 0307 	bic.w	r3, r3, #7
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	f043 0306 	orr.w	r3, r3, #6
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2206      	movs	r2, #6
 8001da6:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	461a      	mov	r2, r3
 8001dac:	2101      	movs	r1, #1
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f965 	bl	800207e <LoRa_write>
	//HAL_Delay(10);
}
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	889b      	ldrh	r3, [r3, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f001 faf2 	bl	80033c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6998      	ldr	r0, [r3, #24]
 8001de0:	88fa      	ldrh	r2, [r7, #6]
 8001de2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	f003 f80f 	bl	8004e0a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001dec:	bf00      	nop
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 fcf6 	bl	80057e4 <HAL_SPI_GetState>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d1f7      	bne.n	8001dee <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6998      	ldr	r0, [r3, #24]
 8001e02:	8b3a      	ldrh	r2, [r7, #24]
 8001e04:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e08:	6839      	ldr	r1, [r7, #0]
 8001e0a:	f003 f93a 	bl	8005082 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001e0e:	bf00      	nop
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 fce5 	bl	80057e4 <HAL_SPI_GetState>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d1f7      	bne.n	8001e10 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	889b      	ldrh	r3, [r3, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f001 fac8 	bl	80033c0 <HAL_GPIO_WritePin>
}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	4613      	mov	r3, r2
 8001e46:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	889b      	ldrh	r3, [r3, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	f001 fab4 	bl	80033c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6998      	ldr	r0, [r3, #24]
 8001e5c:	88fa      	ldrh	r2, [r7, #6]
 8001e5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	f002 ffd1 	bl	8004e0a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001e68:	bf00      	nop
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fcb8 	bl	80057e4 <HAL_SPI_GetState>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d1f7      	bne.n	8001e6a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6998      	ldr	r0, [r3, #24]
 8001e7e:	8b3a      	ldrh	r2, [r7, #24]
 8001e80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e84:	6839      	ldr	r1, [r7, #0]
 8001e86:	f002 ffc0 	bl	8004e0a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001e8a:	bf00      	nop
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fca7 	bl	80057e4 <HAL_SPI_GetState>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d1f7      	bne.n	8001e8c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	889b      	ldrh	r3, [r3, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f001 fa8a 	bl	80033c0 <HAL_GPIO_WritePin>
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	04db      	lsls	r3, r3, #19
 8001ec2:	115b      	asrs	r3, r3, #5
 8001ec4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	0c1b      	lsrs	r3, r3, #16
 8001eca:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001ecc:	7afb      	ldrb	r3, [r7, #11]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2106      	movs	r1, #6
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8d3 	bl	800207e <LoRa_write>
	HAL_Delay(5);
 8001ed8:	2005      	movs	r0, #5
 8001eda:	f000 ff95 	bl	8002e08 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2107      	movs	r1, #7
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8c7 	bl	800207e <LoRa_write>
	HAL_Delay(5);
 8001ef0:	2005      	movs	r0, #5
 8001ef2:	f000 ff89 	bl	8002e08 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001efa:	7afb      	ldrb	r3, [r7, #11]
 8001efc:	461a      	mov	r2, r3
 8001efe:	2108      	movs	r1, #8
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8bc 	bl	800207e <LoRa_write>
	HAL_Delay(5);
 8001f06:	2005      	movs	r0, #5
 8001f08:	f000 ff7e 	bl	8002e08 <HAL_Delay>
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b0c      	cmp	r3, #12
 8001f22:	dd01      	ble.n	8001f28 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001f24:	230c      	movs	r3, #12
 8001f26:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	dc01      	bgt.n	8001f32 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001f2e:	2307      	movs	r3, #7
 8001f30:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001f32:	211e      	movs	r1, #30
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f888 	bl	800204a <LoRa_read>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001f3e:	200a      	movs	r0, #10
 8001f40:	f000 ff62 	bl	8002e08 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001f58:	7bbb      	ldrb	r3, [r7, #14]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	211e      	movs	r1, #30
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f88d 	bl	800207e <LoRa_write>
	HAL_Delay(10);
 8001f64:	200a      	movs	r0, #10
 8001f66:	f000 ff4f 	bl	8002e08 <HAL_Delay>
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	461a      	mov	r2, r3
 8001f82:	2109      	movs	r1, #9
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f87a 	bl	800207e <LoRa_write>
	HAL_Delay(10);
 8001f8a:	200a      	movs	r0, #10
 8001f8c:	f000 ff3c 	bl	8002e08 <HAL_Delay>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b2c      	cmp	r3, #44	; 0x2c
 8001fac:	d801      	bhi.n	8001fb2 <LoRa_setOCP+0x1a>
		current = 45;
 8001fae:	232d      	movs	r3, #45	; 0x2d
 8001fb0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	2bf0      	cmp	r3, #240	; 0xf0
 8001fb6:	d901      	bls.n	8001fbc <LoRa_setOCP+0x24>
		current = 240;
 8001fb8:	23f0      	movs	r3, #240	; 0xf0
 8001fba:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	2b78      	cmp	r3, #120	; 0x78
 8001fc0:	d809      	bhi.n	8001fd6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	3b2d      	subs	r3, #45	; 0x2d
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <LoRa_setOCP+0x78>)
 8001fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8001fcc:	1052      	asrs	r2, r2, #1
 8001fce:	17db      	asrs	r3, r3, #31
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e00b      	b.n	8001fee <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	2bf0      	cmp	r3, #240	; 0xf0
 8001fda:	d808      	bhi.n	8001fee <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	331e      	adds	r3, #30
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <LoRa_setOCP+0x78>)
 8001fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8001fe6:	1092      	asrs	r2, r2, #2
 8001fe8:	17db      	asrs	r3, r3, #31
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	3320      	adds	r3, #32
 8001ff2:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	210b      	movs	r1, #11
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f83f 	bl	800207e <LoRa_write>
	HAL_Delay(10);
 8002000:	200a      	movs	r0, #10
 8002002:	f000 ff01 	bl	8002e08 <HAL_Delay>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	66666667 	.word	0x66666667

08002014 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800201c:	211e      	movs	r1, #30
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f813 	bl	800204a <LoRa_read>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	f043 0307 	orr.w	r3, r3, #7
 800202e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8002030:	7bbb      	ldrb	r3, [r7, #14]
 8002032:	461a      	mov	r2, r3
 8002034:	211e      	movs	r1, #30
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f821 	bl	800207e <LoRa_write>
	HAL_Delay(10);
 800203c:	200a      	movs	r0, #10
 800203e:	f000 fee3 	bl	8002e08 <HAL_Delay>
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af02      	add	r7, sp, #8
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800205c:	b2db      	uxtb	r3, r3
 800205e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8002060:	f107 030f 	add.w	r3, r7, #15
 8002064:	f107 010e 	add.w	r1, r7, #14
 8002068:	2201      	movs	r2, #1
 800206a:	9200      	str	r2, [sp, #0]
 800206c:	2201      	movs	r2, #1
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fea4 	bl	8001dbc <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af02      	add	r7, sp, #8
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	70fb      	strb	r3, [r7, #3]
 800208a:	4613      	mov	r3, r2
 800208c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002094:	b2db      	uxtb	r3, r3
 8002096:	73bb      	strb	r3, [r7, #14]
	data = value;
 8002098:	78bb      	ldrb	r3, [r7, #2]
 800209a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800209c:	f107 030f 	add.w	r3, r7, #15
 80020a0:	f107 010e 	add.w	r1, r7, #14
 80020a4:	2201      	movs	r2, #1
 80020a6:	9200      	str	r2, [sp, #0]
 80020a8:	2201      	movs	r2, #1
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fec4 	bl	8001e38 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	461a      	mov	r2, r3
 80020c4:	460b      	mov	r3, r1
 80020c6:	72fb      	strb	r3, [r7, #11]
 80020c8:	4613      	mov	r3, r2
 80020ca:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	889b      	ldrh	r3, [r3, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	4619      	mov	r1, r3
 80020e2:	f001 f96d 	bl	80033c0 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6998      	ldr	r0, [r3, #24]
 80020ea:	f107 0117 	add.w	r1, r7, #23
 80020ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020f2:	2201      	movs	r2, #1
 80020f4:	f002 fe89 	bl	8004e0a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80020f8:	bf00      	nop
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 fb70 	bl	80057e4 <HAL_SPI_GetState>
 8002104:	4603      	mov	r3, r0
 8002106:	2b01      	cmp	r3, #1
 8002108:	d1f7      	bne.n	80020fa <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6998      	ldr	r0, [r3, #24]
 800210e:	7abb      	ldrb	r3, [r7, #10]
 8002110:	b29a      	uxth	r2, r3
 8002112:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	f002 fe77 	bl	8004e0a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800211c:	bf00      	nop
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	4618      	mov	r0, r3
 8002124:	f003 fb5e 	bl	80057e4 <HAL_SPI_GetState>
 8002128:	4603      	mov	r3, r0
 800212a:	2b01      	cmp	r3, #1
 800212c:	d1f7      	bne.n	800211e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	889b      	ldrh	r3, [r3, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	4619      	mov	r1, r3
 800213a:	f001 f941 	bl	80033c0 <HAL_GPIO_WritePin>
}
 800213e:	bf00      	nop
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]

	return 1;
 800214e:	2301      	movs	r3, #1
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	4611      	mov	r1, r2
 8002168:	461a      	mov	r2, r3
 800216a:	460b      	mov	r3, r1
 800216c:	71fb      	strb	r3, [r7, #7]
 800216e:	4613      	mov	r3, r2
 8002170:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002178:	2101      	movs	r1, #1
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7ff fdbd 	bl	8001cfa <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8002180:	210e      	movs	r1, #14
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f7ff ff61 	bl	800204a <LoRa_read>
 8002188:	4603      	mov	r3, r0
 800218a:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800218c:	7cfb      	ldrb	r3, [r7, #19]
 800218e:	461a      	mov	r2, r3
 8002190:	210d      	movs	r1, #13
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7ff ff73 	bl	800207e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	461a      	mov	r2, r3
 800219c:	2122      	movs	r1, #34	; 0x22
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7ff ff6d 	bl	800207e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	2100      	movs	r1, #0
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7ff ff84 	bl	80020b8 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80021b0:	2103      	movs	r1, #3
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f7ff fda1 	bl	8001cfa <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80021b8:	2112      	movs	r1, #18
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f7ff ff45 	bl	800204a <LoRa_read>
 80021c0:	4603      	mov	r3, r0
 80021c2:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80021ce:	22ff      	movs	r2, #255	; 0xff
 80021d0:	2112      	movs	r1, #18
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f7ff ff53 	bl	800207e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80021d8:	6979      	ldr	r1, [r7, #20]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f7ff fd8d 	bl	8001cfa <LoRa_gotoMode>
			return 1;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e014      	b.n	800220e <LoRa_transmit+0xb2>
		}
		else{
			if(--timeout==0){
 80021e4:	88bb      	ldrh	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	80bb      	strh	r3, [r7, #4]
 80021ea:	88bb      	ldrh	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <LoRa_transmit+0xaa>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80021f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f4:	4808      	ldr	r0, [pc, #32]	; (8002218 <LoRa_transmit+0xbc>)
 80021f6:	f001 f8fc 	bl	80033f2 <HAL_GPIO_TogglePin>
				LoRa_gotoMode(_LoRa, mode);
 80021fa:	6979      	ldr	r1, [r7, #20]
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f7ff fd7c 	bl	8001cfa <LoRa_gotoMode>
				return 0;
 8002202:	2300      	movs	r3, #0
 8002204:	e003      	b.n	800220e <LoRa_transmit+0xb2>
			}
		}
		HAL_Delay(1);
 8002206:	2001      	movs	r0, #1
 8002208:	f000 fdfe 	bl	8002e08 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800220c:	e7d4      	b.n	80021b8 <LoRa_transmit+0x5c>
	}
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40020c00 	.word	0x40020c00

0800221c <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff8e 	bl	8002146 <LoRa_isvalid>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 8093 	beq.w	8002358 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8002232:	2100      	movs	r1, #0
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff fd60 	bl	8001cfa <LoRa_gotoMode>
			HAL_Delay(10);
 800223a:	200a      	movs	r0, #10
 800223c:	f000 fde4 	bl	8002e08 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8002240:	2101      	movs	r1, #1
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ff01 	bl	800204a <LoRa_read>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800224c:	200a      	movs	r0, #10
 800224e:	f000 fddb 	bl	8002e08 <HAL_Delay>
			data = read | 0x80;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002258:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800225a:	7bbb      	ldrb	r3, [r7, #14]
 800225c:	461a      	mov	r2, r3
 800225e:	2101      	movs	r1, #1
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff0c 	bl	800207e <LoRa_write>
			HAL_Delay(100);
 8002266:	2064      	movs	r0, #100	; 0x64
 8002268:	f000 fdce 	bl	8002e08 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4619      	mov	r1, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fe1e 	bl	8001eb4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800227e:	4619      	mov	r1, r3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fe76 	bl	8001f72 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800228c:	4619      	mov	r1, r3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fe82 	bl	8001f98 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8002294:	2223      	movs	r2, #35	; 0x23
 8002296:	210c      	movs	r1, #12
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff fef0 	bl	800207e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff feb8 	bl	8002014 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff fe31 	bl	8001f14 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80022b2:	22ff      	movs	r2, #255	; 0xff
 80022b4:	211f      	movs	r1, #31
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fee1 	bl	800207e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80022d8:	7bbb      	ldrb	r3, [r7, #14]
 80022da:	461a      	mov	r2, r3
 80022dc:	211d      	movs	r1, #29
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff fecd 	bl	800207e <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	2120      	movs	r1, #32
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fec3 	bl	800207e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	2121      	movs	r1, #33	; 0x21
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff febb 	bl	800207e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8002308:	2140      	movs	r1, #64	; 0x40
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fe9d 	bl	800204a <LoRa_read>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800231a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800231c:	7bbb      	ldrb	r3, [r7, #14]
 800231e:	461a      	mov	r2, r3
 8002320:	2140      	movs	r1, #64	; 0x40
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff feab 	bl	800207e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002328:	2101      	movs	r1, #1
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff fce5 	bl	8001cfa <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8002336:	200a      	movs	r0, #10
 8002338:	f000 fd66 	bl	8002e08 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800233c:	2142      	movs	r1, #66	; 0x42
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff fe83 	bl	800204a <LoRa_read>
 8002344:	4603      	mov	r3, r0
 8002346:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	2b12      	cmp	r3, #18
 800234c:	d101      	bne.n	8002352 <LoRa_init+0x136>
				return LORA_OK;
 800234e:	23c8      	movs	r3, #200	; 0xc8
 8002350:	e004      	b.n	800235c <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8002352:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8002356:	e001      	b.n	800235c <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8002358:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002364:	b5b0      	push	{r4, r5, r7, lr}
 8002366:	b092      	sub	sp, #72	; 0x48
 8002368:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800236a:	f000 fcdb 	bl	8002d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800236e:	f000 f879 	bl	8002464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002372:	f000 f99f 	bl	80026b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002376:	f000 f8dd 	bl	8002534 <MX_I2C1_Init>
  MX_I2C2_Init();
 800237a:	f000 f909 	bl	8002590 <MX_I2C2_Init>
  MX_I2C3_Init();
 800237e:	f000 f935 	bl	80025ec <MX_I2C3_Init>
  MX_SPI1_Init();
 8002382:	f000 f961 	bl	8002648 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  myLora = newLoRa();
 8002386:	4c30      	ldr	r4, [pc, #192]	; (8002448 <main+0xe4>)
 8002388:	f107 0308 	add.w	r3, r7, #8
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fc8b 	bl	8001ca8 <newLoRa>
 8002392:	4625      	mov	r5, r4
 8002394:	f107 0408 	add.w	r4, r7, #8
 8002398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80023a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myLora.CS_port         = NSS_GPIO_Port;
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <main+0xe4>)
 80023aa:	4a28      	ldr	r2, [pc, #160]	; (800244c <main+0xe8>)
 80023ac:	601a      	str	r2, [r3, #0]
  myLora.CS_pin          = NSS_Pin;
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <main+0xe4>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	809a      	strh	r2, [r3, #4]
  myLora.reset_port      = RESET_GPIO_Port;
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <main+0xe4>)
 80023b6:	4a25      	ldr	r2, [pc, #148]	; (800244c <main+0xe8>)
 80023b8:	609a      	str	r2, [r3, #8]
  myLora.reset_pin       = RESET_Pin;
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <main+0xe4>)
 80023bc:	2202      	movs	r2, #2
 80023be:	819a      	strh	r2, [r3, #12]
  myLora.DIO0_port       = DIO0_GPIO_Port;
 80023c0:	4b21      	ldr	r3, [pc, #132]	; (8002448 <main+0xe4>)
 80023c2:	4a22      	ldr	r2, [pc, #136]	; (800244c <main+0xe8>)
 80023c4:	611a      	str	r2, [r3, #16]
  myLora.DIO0_pin        = DIO0_Pin;
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <main+0xe4>)
 80023c8:	2204      	movs	r2, #4
 80023ca:	829a      	strh	r2, [r3, #20]
  myLora.hSPIx           = &hspi1;
 80023cc:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <main+0xe4>)
 80023ce:	4a20      	ldr	r2, [pc, #128]	; (8002450 <main+0xec>)
 80023d0:	619a      	str	r2, [r3, #24]

    if (LoRa_init(&myLora) == LORA_OK) {
 80023d2:	481d      	ldr	r0, [pc, #116]	; (8002448 <main+0xe4>)
 80023d4:	f7ff ff22 	bl	800221c <LoRa_init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2bc8      	cmp	r3, #200	; 0xc8
 80023dc:	d103      	bne.n	80023e6 <main+0x82>
    	LoRa_status = 1;
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <main+0xf0>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e004      	b.n	80023f0 <main+0x8c>
    } else {
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80023e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ea:	481b      	ldr	r0, [pc, #108]	; (8002458 <main+0xf4>)
 80023ec:	f001 f801 	bl	80033f2 <HAL_GPIO_TogglePin>
    }
    //  MCP9808_HandleTypeDef mcp9808 = mcp9808_init();
//  lcd_init();
  int ret = BMP280_Config(OSRS_16, OSRS_16, OSRS_OFF, MODE_NORMAL, T_SB_1000, IIR_16);
 80023f0:	2304      	movs	r3, #4
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	2305      	movs	r3, #5
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2303      	movs	r3, #3
 80023fa:	2200      	movs	r2, #0
 80023fc:	2105      	movs	r1, #5
 80023fe:	2005      	movs	r0, #5
 8002400:	f7fe ff30 	bl	8001264 <BMP280_Config>
 8002404:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (LoRa_status) {
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <main+0xf0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0fb      	beq.n	8002406 <main+0xa2>
	  	HAL_Delay(1000);
 800240e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002412:	f000 fcf9 	bl	8002e08 <HAL_Delay>

		BMP280_Measure();
 8002416:	f7ff fbbb 	bl	8001b90 <BMP280_Measure>
//		HAL_Delay(500);
//		char info[255] = "";

//	    sprintf(msgstr, "%f Pa", (float) Pressure);
//	    sprintf(info, "%f C", (float) Temperature);
		data = (uint8_t) Temperature;
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <main+0xf8>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002424:	edc7 7a01 	vstr	s15, [r7, #4]
 8002428:	793b      	ldrb	r3, [r7, #4]
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <main+0xfc>)
 800242e:	701a      	strb	r2, [r3, #0]
	  	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002434:	4808      	ldr	r0, [pc, #32]	; (8002458 <main+0xf4>)
 8002436:	f000 ffdc 	bl	80033f2 <HAL_GPIO_TogglePin>
	  	LoRa_transmit(&myLora, &data, 1, 100);
 800243a:	2364      	movs	r3, #100	; 0x64
 800243c:	2201      	movs	r2, #1
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <main+0xfc>)
 8002440:	4801      	ldr	r0, [pc, #4]	; (8002448 <main+0xe4>)
 8002442:	f7ff fe8b 	bl	800215c <LoRa_transmit>
	  if (LoRa_status) {
 8002446:	e7de      	b.n	8002406 <main+0xa2>
 8002448:	20000384 	.word	0x20000384
 800244c:	40020400 	.word	0x40020400
 8002450:	20000328 	.word	0x20000328
 8002454:	20000380 	.word	0x20000380
 8002458:	40020c00 	.word	0x40020c00
 800245c:	200003b0 	.word	0x200003b0
 8002460:	20000000 	.word	0x20000000

08002464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b094      	sub	sp, #80	; 0x50
 8002468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800246a:	f107 0320 	add.w	r3, r7, #32
 800246e:	2230      	movs	r2, #48	; 0x30
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f004 faa3 	bl	80069be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <SystemClock_Config+0xc8>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	4a26      	ldr	r2, [pc, #152]	; (800252c <SystemClock_Config+0xc8>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002496:	6413      	str	r3, [r2, #64]	; 0x40
 8002498:	4b24      	ldr	r3, [pc, #144]	; (800252c <SystemClock_Config+0xc8>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <SystemClock_Config+0xcc>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a20      	ldr	r2, [pc, #128]	; (8002530 <SystemClock_Config+0xcc>)
 80024ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <SystemClock_Config+0xcc>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024c0:	2301      	movs	r3, #1
 80024c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ca:	2302      	movs	r3, #2
 80024cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024d4:	2304      	movs	r3, #4
 80024d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80024d8:	2348      	movs	r3, #72	; 0x48
 80024da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024dc:	2302      	movs	r3, #2
 80024de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024e0:	2304      	movs	r3, #4
 80024e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e4:	f107 0320 	add.w	r3, r7, #32
 80024e8:	4618      	mov	r0, r3
 80024ea:	f001 ff81 	bl	80043f0 <HAL_RCC_OscConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024f4:	f000 f976 	bl	80027e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f8:	230f      	movs	r3, #15
 80024fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024fc:	2302      	movs	r3, #2
 80024fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002508:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	2102      	movs	r1, #2
 8002514:	4618      	mov	r0, r3
 8002516:	f002 f9e3 	bl	80048e0 <HAL_RCC_ClockConfig>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002520:	f000 f960 	bl	80027e4 <Error_Handler>
  }
}
 8002524:	bf00      	nop
 8002526:	3750      	adds	r7, #80	; 0x50
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	40007000 	.word	0x40007000

08002534 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <MX_I2C1_Init+0x50>)
 800253a:	4a13      	ldr	r2, [pc, #76]	; (8002588 <MX_I2C1_Init+0x54>)
 800253c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <MX_I2C1_Init+0x50>)
 8002540:	4a12      	ldr	r2, [pc, #72]	; (800258c <MX_I2C1_Init+0x58>)
 8002542:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <MX_I2C1_Init+0x50>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <MX_I2C1_Init+0x50>)
 800254c:	2200      	movs	r2, #0
 800254e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <MX_I2C1_Init+0x50>)
 8002552:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002556:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002558:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <MX_I2C1_Init+0x50>)
 800255a:	2200      	movs	r2, #0
 800255c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <MX_I2C1_Init+0x50>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002564:	4b07      	ldr	r3, [pc, #28]	; (8002584 <MX_I2C1_Init+0x50>)
 8002566:	2200      	movs	r2, #0
 8002568:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <MX_I2C1_Init+0x50>)
 800256c:	2200      	movs	r2, #0
 800256e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002570:	4804      	ldr	r0, [pc, #16]	; (8002584 <MX_I2C1_Init+0x50>)
 8002572:	f000 ff7d 	bl	8003470 <HAL_I2C_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800257c:	f000 f932 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000022c 	.word	0x2000022c
 8002588:	40005400 	.word	0x40005400
 800258c:	000186a0 	.word	0x000186a0

08002590 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <MX_I2C2_Init+0x50>)
 8002596:	4a13      	ldr	r2, [pc, #76]	; (80025e4 <MX_I2C2_Init+0x54>)
 8002598:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <MX_I2C2_Init+0x50>)
 800259c:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <MX_I2C2_Init+0x58>)
 800259e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <MX_I2C2_Init+0x50>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <MX_I2C2_Init+0x50>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <MX_I2C2_Init+0x50>)
 80025ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <MX_I2C2_Init+0x50>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <MX_I2C2_Init+0x50>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <MX_I2C2_Init+0x50>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <MX_I2C2_Init+0x50>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80025cc:	4804      	ldr	r0, [pc, #16]	; (80025e0 <MX_I2C2_Init+0x50>)
 80025ce:	f000 ff4f 	bl	8003470 <HAL_I2C_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80025d8:	f000 f904 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000280 	.word	0x20000280
 80025e4:	40005800 	.word	0x40005800
 80025e8:	000186a0 	.word	0x000186a0

080025ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <MX_I2C3_Init+0x50>)
 80025f2:	4a13      	ldr	r2, [pc, #76]	; (8002640 <MX_I2C3_Init+0x54>)
 80025f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_I2C3_Init+0x50>)
 80025f8:	4a12      	ldr	r2, [pc, #72]	; (8002644 <MX_I2C3_Init+0x58>)
 80025fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <MX_I2C3_Init+0x50>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_I2C3_Init+0x50>)
 8002604:	2200      	movs	r2, #0
 8002606:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_I2C3_Init+0x50>)
 800260a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800260e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <MX_I2C3_Init+0x50>)
 8002612:	2200      	movs	r2, #0
 8002614:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_I2C3_Init+0x50>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <MX_I2C3_Init+0x50>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_I2C3_Init+0x50>)
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002628:	4804      	ldr	r0, [pc, #16]	; (800263c <MX_I2C3_Init+0x50>)
 800262a:	f000 ff21 	bl	8003470 <HAL_I2C_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002634:	f000 f8d6 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	200002d4 	.word	0x200002d4
 8002640:	40005c00 	.word	0x40005c00
 8002644:	000186a0 	.word	0x000186a0

08002648 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800264c:	4b17      	ldr	r3, [pc, #92]	; (80026ac <MX_SPI1_Init+0x64>)
 800264e:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <MX_SPI1_Init+0x68>)
 8002650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <MX_SPI1_Init+0x64>)
 8002654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800265a:	4b14      	ldr	r3, [pc, #80]	; (80026ac <MX_SPI1_Init+0x64>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <MX_SPI1_Init+0x64>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <MX_SPI1_Init+0x64>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <MX_SPI1_Init+0x64>)
 800266e:	2200      	movs	r2, #0
 8002670:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002672:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <MX_SPI1_Init+0x64>)
 8002674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002678:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <MX_SPI1_Init+0x64>)
 800267c:	2210      	movs	r2, #16
 800267e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <MX_SPI1_Init+0x64>)
 8002682:	2200      	movs	r2, #0
 8002684:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <MX_SPI1_Init+0x64>)
 8002688:	2200      	movs	r2, #0
 800268a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800268c:	4b07      	ldr	r3, [pc, #28]	; (80026ac <MX_SPI1_Init+0x64>)
 800268e:	2200      	movs	r2, #0
 8002690:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <MX_SPI1_Init+0x64>)
 8002694:	220a      	movs	r2, #10
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002698:	4804      	ldr	r0, [pc, #16]	; (80026ac <MX_SPI1_Init+0x64>)
 800269a:	f002 fb2d 	bl	8004cf8 <HAL_SPI_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026a4:	f000 f89e 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000328 	.word	0x20000328
 80026b0:	40013000 	.word	0x40013000

080026b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <MX_GPIO_Init+0x124>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a41      	ldr	r2, [pc, #260]	; (80027d8 <MX_GPIO_Init+0x124>)
 80026d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <MX_GPIO_Init+0x124>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <MX_GPIO_Init+0x124>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a3a      	ldr	r2, [pc, #232]	; (80027d8 <MX_GPIO_Init+0x124>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <MX_GPIO_Init+0x124>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <MX_GPIO_Init+0x124>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a33      	ldr	r2, [pc, #204]	; (80027d8 <MX_GPIO_Init+0x124>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <MX_GPIO_Init+0x124>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <MX_GPIO_Init+0x124>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a2c      	ldr	r2, [pc, #176]	; (80027d8 <MX_GPIO_Init+0x124>)
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <MX_GPIO_Init+0x124>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	603b      	str	r3, [r7, #0]
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <MX_GPIO_Init+0x124>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <MX_GPIO_Init+0x124>)
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <MX_GPIO_Init+0x124>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RESET_Pin, GPIO_PIN_SET);
 8002756:	2201      	movs	r2, #1
 8002758:	2103      	movs	r1, #3
 800275a:	4820      	ldr	r0, [pc, #128]	; (80027dc <MX_GPIO_Init+0x128>)
 800275c:	f000 fe30 	bl	80033c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002760:	2200      	movs	r2, #0
 8002762:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002766:	481e      	ldr	r0, [pc, #120]	; (80027e0 <MX_GPIO_Init+0x12c>)
 8002768:	f000 fe2a 	bl	80033c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NSS_Pin RESET_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RESET_Pin;
 800276c:	2303      	movs	r3, #3
 800276e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002770:	2301      	movs	r3, #1
 8002772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002778:	2300      	movs	r3, #0
 800277a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	4619      	mov	r1, r3
 8002782:	4816      	ldr	r0, [pc, #88]	; (80027dc <MX_GPIO_Init+0x128>)
 8002784:	f000 fc98 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8002788:	2304      	movs	r3, #4
 800278a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800278c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	480f      	ldr	r0, [pc, #60]	; (80027dc <MX_GPIO_Init+0x128>)
 800279e:	f000 fc8b 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80027a2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80027a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a8:	2301      	movs	r3, #1
 80027aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4619      	mov	r1, r3
 80027ba:	4809      	ldr	r0, [pc, #36]	; (80027e0 <MX_GPIO_Init+0x12c>)
 80027bc:	f000 fc7c 	bl	80030b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80027c0:	2200      	movs	r2, #0
 80027c2:	2100      	movs	r1, #0
 80027c4:	2008      	movs	r0, #8
 80027c6:	f000 fc1e 	bl	8003006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80027ca:	2008      	movs	r0, #8
 80027cc:	f000 fc37 	bl	800303e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027d0:	bf00      	nop
 80027d2:	3728      	adds	r7, #40	; 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020400 	.word	0x40020400
 80027e0:	40020c00 	.word	0x40020c00

080027e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e8:	b672      	cpsid	i
}
 80027ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ec:	e7fe      	b.n	80027ec <Error_Handler+0x8>
	...

080027f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_MspInit+0x4c>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a0f      	ldr	r2, [pc, #60]	; (800283c <HAL_MspInit+0x4c>)
 8002800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_MspInit+0x4c>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_MspInit+0x4c>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a08      	ldr	r2, [pc, #32]	; (800283c <HAL_MspInit+0x4c>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_MspInit+0x4c>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800

08002840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08e      	sub	sp, #56	; 0x38
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a63      	ldr	r2, [pc, #396]	; (80029ec <HAL_I2C_MspInit+0x1ac>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d12c      	bne.n	80028bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
 8002866:	4b62      	ldr	r3, [pc, #392]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a61      	ldr	r2, [pc, #388]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 800286c:	f043 0302 	orr.w	r3, r3, #2
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b5f      	ldr	r3, [pc, #380]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800287e:	23c0      	movs	r3, #192	; 0xc0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002882:	2312      	movs	r3, #18
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288a:	2303      	movs	r3, #3
 800288c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800288e:	2304      	movs	r3, #4
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002896:	4619      	mov	r1, r3
 8002898:	4856      	ldr	r0, [pc, #344]	; (80029f4 <HAL_I2C_MspInit+0x1b4>)
 800289a:	f000 fc0d 	bl	80030b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a52      	ldr	r2, [pc, #328]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 80028a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b50      	ldr	r3, [pc, #320]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80028ba:	e093      	b.n	80029e4 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a4d      	ldr	r2, [pc, #308]	; (80029f8 <HAL_I2C_MspInit+0x1b8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d13d      	bne.n	8002942 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a48      	ldr	r2, [pc, #288]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e8:	2312      	movs	r3, #18
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028f4:	2304      	movs	r3, #4
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fc:	4619      	mov	r1, r3
 80028fe:	483d      	ldr	r0, [pc, #244]	; (80029f4 <HAL_I2C_MspInit+0x1b4>)
 8002900:	f000 fbda 	bl	80030b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002904:	2308      	movs	r3, #8
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002908:	2312      	movs	r3, #18
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002910:	2303      	movs	r3, #3
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002914:	2309      	movs	r3, #9
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291c:	4619      	mov	r1, r3
 800291e:	4835      	ldr	r0, [pc, #212]	; (80029f4 <HAL_I2C_MspInit+0x1b4>)
 8002920:	f000 fbca 	bl	80030b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	4a30      	ldr	r2, [pc, #192]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 800292e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002932:	6413      	str	r3, [r2, #64]	; 0x40
 8002934:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697b      	ldr	r3, [r7, #20]
}
 8002940:	e050      	b.n	80029e4 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a2d      	ldr	r2, [pc, #180]	; (80029fc <HAL_I2C_MspInit+0x1bc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d14b      	bne.n	80029e4 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800294c:	2300      	movs	r3, #0
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	4a26      	ldr	r2, [pc, #152]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	6313      	str	r3, [r2, #48]	; 0x30
 800295c:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6313      	str	r3, [r2, #48]	; 0x30
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298a:	2312      	movs	r3, #18
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002996:	2304      	movs	r3, #4
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299e:	4619      	mov	r1, r3
 80029a0:	4817      	ldr	r0, [pc, #92]	; (8002a00 <HAL_I2C_MspInit+0x1c0>)
 80029a2:	f000 fb89 	bl	80030b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ac:	2312      	movs	r3, #18
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b4:	2303      	movs	r3, #3
 80029b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029b8:	2304      	movs	r3, #4
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c0:	4619      	mov	r1, r3
 80029c2:	4810      	ldr	r0, [pc, #64]	; (8002a04 <HAL_I2C_MspInit+0x1c4>)
 80029c4:	f000 fb78 	bl	80030b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 80029d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029d6:	6413      	str	r3, [r2, #64]	; 0x40
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_I2C_MspInit+0x1b0>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]
}
 80029e4:	bf00      	nop
 80029e6:	3738      	adds	r7, #56	; 0x38
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40005400 	.word	0x40005400
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40020400 	.word	0x40020400
 80029f8:	40005800 	.word	0x40005800
 80029fc:	40005c00 	.word	0x40005c00
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40020000 	.word	0x40020000

08002a08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <HAL_SPI_MspInit+0x94>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d133      	bne.n	8002a92 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_SPI_MspInit+0x98>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <HAL_SPI_MspInit+0x98>)
 8002a34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a38:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3a:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_SPI_MspInit+0x98>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_SPI_MspInit+0x98>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_SPI_MspInit+0x98>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_SPI_MspInit+0x98>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a62:	23e0      	movs	r3, #224	; 0xe0
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a72:	2305      	movs	r3, #5
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <HAL_SPI_MspInit+0x9c>)
 8002a7e:	f000 fb1b 	bl	80030b8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	2023      	movs	r0, #35	; 0x23
 8002a88:	f000 fabd 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a8c:	2023      	movs	r0, #35	; 0x23
 8002a8e:	f000 fad6 	bl	800303e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a92:	bf00      	nop
 8002a94:	3728      	adds	r7, #40	; 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40013000 	.word	0x40013000
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020000 	.word	0x40020000

08002aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <NMI_Handler+0x4>

08002aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <HardFault_Handler+0x4>

08002ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <MemManage_Handler+0x4>

08002aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002abe:	e7fe      	b.n	8002abe <BusFault_Handler+0x4>

08002ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac4:	e7fe      	b.n	8002ac4 <UsageFault_Handler+0x4>

08002ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af4:	f000 f968 	bl	8002dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}

08002afc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8002b00:	2004      	movs	r0, #4
 8002b02:	f000 fc91 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <SPI1_IRQHandler+0x10>)
 8002b12:	f002 fd69 	bl	80055e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000328 	.word	0x20000328

08002b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return 1;
 8002b24:	2301      	movs	r3, #1
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_kill>:

int _kill(int pid, int sig)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b3a:	f003 ff93 	bl	8006a64 <__errno>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2216      	movs	r2, #22
 8002b42:	601a      	str	r2, [r3, #0]
  return -1;
 8002b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <_exit>:

void _exit (int status)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b58:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ffe7 	bl	8002b30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b62:	e7fe      	b.n	8002b62 <_exit+0x12>

08002b64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	e00a      	b.n	8002b8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b76:	f3af 8000 	nop.w
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	60ba      	str	r2, [r7, #8]
 8002b82:	b2ca      	uxtb	r2, r1
 8002b84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	dbf0      	blt.n	8002b76 <_read+0x12>
  }

  return len;
 8002b94:	687b      	ldr	r3, [r7, #4]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	e009      	b.n	8002bc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	60ba      	str	r2, [r7, #8]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	dbf1      	blt.n	8002bb0 <_write+0x12>
  }
  return len;
 8002bcc:	687b      	ldr	r3, [r7, #4]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_close>:

int _close(int file)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bfe:	605a      	str	r2, [r3, #4]
  return 0;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <_isatty>:

int _isatty(int file)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c48:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <_sbrk+0x5c>)
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <_sbrk+0x60>)
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <_sbrk+0x64>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <_sbrk+0x64>)
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <_sbrk+0x68>)
 8002c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <_sbrk+0x64>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d207      	bcs.n	8002c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c70:	f003 fef8 	bl	8006a64 <__errno>
 8002c74:	4603      	mov	r3, r0
 8002c76:	220c      	movs	r2, #12
 8002c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	e009      	b.n	8002c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <_sbrk+0x64>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c86:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <_sbrk+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <_sbrk+0x64>)
 8002c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c92:	68fb      	ldr	r3, [r7, #12]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20020000 	.word	0x20020000
 8002ca0:	00000400 	.word	0x00000400
 8002ca4:	200003bc 	.word	0x200003bc
 8002ca8:	20000510 	.word	0x20000510

08002cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <SystemInit+0x20>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <SystemInit+0x20>)
 8002cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cd4:	480d      	ldr	r0, [pc, #52]	; (8002d0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cd6:	490e      	ldr	r1, [pc, #56]	; (8002d10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cd8:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cdc:	e002      	b.n	8002ce4 <LoopCopyDataInit>

08002cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ce2:	3304      	adds	r3, #4

08002ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce8:	d3f9      	bcc.n	8002cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cea:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cec:	4c0b      	ldr	r4, [pc, #44]	; (8002d1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf0:	e001      	b.n	8002cf6 <LoopFillZerobss>

08002cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf4:	3204      	adds	r2, #4

08002cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf8:	d3fb      	bcc.n	8002cf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cfa:	f7ff ffd7 	bl	8002cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cfe:	f003 feb7 	bl	8006a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d02:	f7ff fb2f 	bl	8002364 <main>
  bx  lr    
 8002d06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d10:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002d14:	0800a6a0 	.word	0x0800a6a0
  ldr r2, =_sbss
 8002d18:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002d1c:	20000510 	.word	0x20000510

08002d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d20:	e7fe      	b.n	8002d20 <ADC_IRQHandler>
	...

08002d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d28:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <HAL_Init+0x40>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <HAL_Init+0x40>)
 8002d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_Init+0x40>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_Init+0x40>)
 8002d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_Init+0x40>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <HAL_Init+0x40>)
 8002d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d4c:	2003      	movs	r0, #3
 8002d4e:	f000 f94f 	bl	8002ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d52:	200f      	movs	r0, #15
 8002d54:	f000 f808 	bl	8002d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d58:	f7ff fd4a 	bl	80027f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023c00 	.word	0x40023c00

08002d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_InitTick+0x54>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_InitTick+0x58>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f967 	bl	800305a <HAL_SYSTICK_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e00e      	b.n	8002db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b0f      	cmp	r3, #15
 8002d9a:	d80a      	bhi.n	8002db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	f04f 30ff 	mov.w	r0, #4294967295
 8002da4:	f000 f92f 	bl	8003006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da8:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <HAL_InitTick+0x5c>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e000      	b.n	8002db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000004 	.word	0x20000004
 8002dc0:	2000000c 	.word	0x2000000c
 8002dc4:	20000008 	.word	0x20000008

08002dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_IncTick+0x20>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_IncTick+0x24>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <HAL_IncTick+0x24>)
 8002dda:	6013      	str	r3, [r2, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	2000000c 	.word	0x2000000c
 8002dec:	200003c0 	.word	0x200003c0

08002df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return uwTick;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_GetTick+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	200003c0 	.word	0x200003c0

08002e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e10:	f7ff ffee 	bl	8002df0 <HAL_GetTick>
 8002e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d005      	beq.n	8002e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_Delay+0x44>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e2e:	bf00      	nop
 8002e30:	f7ff ffde 	bl	8002df0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d8f7      	bhi.n	8002e30 <HAL_Delay+0x28>
  {
  }
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2000000c 	.word	0x2000000c

08002e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e82:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60d3      	str	r3, [r2, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	f003 0307 	and.w	r3, r3, #7
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db0b      	blt.n	8002ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4907      	ldr	r1, [pc, #28]	; (8002eec <__NVIC_EnableIRQ+0x38>)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	; (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	; (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
         );
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fbc:	d301      	bcc.n	8002fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e00f      	b.n	8002fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <SysTick_Config+0x40>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fca:	210f      	movs	r1, #15
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	f7ff ff8e 	bl	8002ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <SysTick_Config+0x40>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <SysTick_Config+0x40>)
 8002fdc:	2207      	movs	r2, #7
 8002fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	e000e010 	.word	0xe000e010

08002ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff29 	bl	8002e50 <__NVIC_SetPriorityGrouping>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003018:	f7ff ff3e 	bl	8002e98 <__NVIC_GetPriorityGrouping>
 800301c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	6978      	ldr	r0, [r7, #20]
 8003024:	f7ff ff8e 	bl	8002f44 <NVIC_EncodePriority>
 8003028:	4602      	mov	r2, r0
 800302a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff5d 	bl	8002ef0 <__NVIC_SetPriority>
}
 8003036:	bf00      	nop
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff31 	bl	8002eb4 <__NVIC_EnableIRQ>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ffa2 	bl	8002fac <SysTick_Config>
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d004      	beq.n	8003090 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e00c      	b.n	80030aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2205      	movs	r2, #5
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e159      	b.n	8003388 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d4:	2201      	movs	r2, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	f040 8148 	bne.w	8003382 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d005      	beq.n	800310a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003106:	2b02      	cmp	r3, #2
 8003108:	d130      	bne.n	800316c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2203      	movs	r2, #3
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003140:	2201      	movs	r2, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 0201 	and.w	r2, r3, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b03      	cmp	r3, #3
 8003176:	d017      	beq.n	80031a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	2203      	movs	r2, #3
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d123      	bne.n	80031fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	08da      	lsrs	r2, r3, #3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3208      	adds	r2, #8
 80031bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	220f      	movs	r2, #15
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	08da      	lsrs	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3208      	adds	r2, #8
 80031f6:	69b9      	ldr	r1, [r7, #24]
 80031f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0203 	and.w	r2, r3, #3
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80a2 	beq.w	8003382 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	4b57      	ldr	r3, [pc, #348]	; (80033a0 <HAL_GPIO_Init+0x2e8>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	4a56      	ldr	r2, [pc, #344]	; (80033a0 <HAL_GPIO_Init+0x2e8>)
 8003248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800324c:	6453      	str	r3, [r2, #68]	; 0x44
 800324e:	4b54      	ldr	r3, [pc, #336]	; (80033a0 <HAL_GPIO_Init+0x2e8>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800325a:	4a52      	ldr	r2, [pc, #328]	; (80033a4 <HAL_GPIO_Init+0x2ec>)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	3302      	adds	r3, #2
 8003262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	220f      	movs	r2, #15
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a49      	ldr	r2, [pc, #292]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d019      	beq.n	80032ba <HAL_GPIO_Init+0x202>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a48      	ldr	r2, [pc, #288]	; (80033ac <HAL_GPIO_Init+0x2f4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_GPIO_Init+0x1fe>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a47      	ldr	r2, [pc, #284]	; (80033b0 <HAL_GPIO_Init+0x2f8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00d      	beq.n	80032b2 <HAL_GPIO_Init+0x1fa>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a46      	ldr	r2, [pc, #280]	; (80033b4 <HAL_GPIO_Init+0x2fc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <HAL_GPIO_Init+0x1f6>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a45      	ldr	r2, [pc, #276]	; (80033b8 <HAL_GPIO_Init+0x300>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d101      	bne.n	80032aa <HAL_GPIO_Init+0x1f2>
 80032a6:	2304      	movs	r3, #4
 80032a8:	e008      	b.n	80032bc <HAL_GPIO_Init+0x204>
 80032aa:	2307      	movs	r3, #7
 80032ac:	e006      	b.n	80032bc <HAL_GPIO_Init+0x204>
 80032ae:	2303      	movs	r3, #3
 80032b0:	e004      	b.n	80032bc <HAL_GPIO_Init+0x204>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e002      	b.n	80032bc <HAL_GPIO_Init+0x204>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_GPIO_Init+0x204>
 80032ba:	2300      	movs	r3, #0
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	f002 0203 	and.w	r2, r2, #3
 80032c2:	0092      	lsls	r2, r2, #2
 80032c4:	4093      	lsls	r3, r2
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032cc:	4935      	ldr	r1, [pc, #212]	; (80033a4 <HAL_GPIO_Init+0x2ec>)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	089b      	lsrs	r3, r3, #2
 80032d2:	3302      	adds	r3, #2
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032da:	4b38      	ldr	r3, [pc, #224]	; (80033bc <HAL_GPIO_Init+0x304>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032fe:	4a2f      	ldr	r2, [pc, #188]	; (80033bc <HAL_GPIO_Init+0x304>)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003304:	4b2d      	ldr	r3, [pc, #180]	; (80033bc <HAL_GPIO_Init+0x304>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003328:	4a24      	ldr	r2, [pc, #144]	; (80033bc <HAL_GPIO_Init+0x304>)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800332e:	4b23      	ldr	r3, [pc, #140]	; (80033bc <HAL_GPIO_Init+0x304>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003352:	4a1a      	ldr	r2, [pc, #104]	; (80033bc <HAL_GPIO_Init+0x304>)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003358:	4b18      	ldr	r3, [pc, #96]	; (80033bc <HAL_GPIO_Init+0x304>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800337c:	4a0f      	ldr	r2, [pc, #60]	; (80033bc <HAL_GPIO_Init+0x304>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3301      	adds	r3, #1
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	2b0f      	cmp	r3, #15
 800338c:	f67f aea2 	bls.w	80030d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	3724      	adds	r7, #36	; 0x24
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40013800 	.word	0x40013800
 80033a8:	40020000 	.word	0x40020000
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40020800 	.word	0x40020800
 80033b4:	40020c00 	.word	0x40020c00
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40013c00 	.word	0x40013c00

080033c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	807b      	strh	r3, [r7, #2]
 80033cc:	4613      	mov	r3, r2
 80033ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033d0:	787b      	ldrb	r3, [r7, #1]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033dc:	e003      	b.n	80033e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033de:	887b      	ldrh	r3, [r7, #2]
 80033e0:	041a      	lsls	r2, r3, #16
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	619a      	str	r2, [r3, #24]
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003404:	887a      	ldrh	r2, [r7, #2]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4013      	ands	r3, r2
 800340a:	041a      	lsls	r2, r3, #16
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	43d9      	mvns	r1, r3
 8003410:	887b      	ldrh	r3, [r7, #2]
 8003412:	400b      	ands	r3, r1
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	619a      	str	r2, [r3, #24]
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800343e:	4a05      	ldr	r2, [pc, #20]	; (8003454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f806 	bl	8003458 <HAL_GPIO_EXTI_Callback>
  }
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40013c00 	.word	0x40013c00

08003458 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e12b      	b.n	80036da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff f9d2 	bl	8002840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2224      	movs	r2, #36	; 0x24
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034d4:	f001 fbfc 	bl	8004cd0 <HAL_RCC_GetPCLK1Freq>
 80034d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4a81      	ldr	r2, [pc, #516]	; (80036e4 <HAL_I2C_Init+0x274>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d807      	bhi.n	80034f4 <HAL_I2C_Init+0x84>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a80      	ldr	r2, [pc, #512]	; (80036e8 <HAL_I2C_Init+0x278>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	bf94      	ite	ls
 80034ec:	2301      	movls	r3, #1
 80034ee:	2300      	movhi	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	e006      	b.n	8003502 <HAL_I2C_Init+0x92>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4a7d      	ldr	r2, [pc, #500]	; (80036ec <HAL_I2C_Init+0x27c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	bf94      	ite	ls
 80034fc:	2301      	movls	r3, #1
 80034fe:	2300      	movhi	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0e7      	b.n	80036da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a78      	ldr	r2, [pc, #480]	; (80036f0 <HAL_I2C_Init+0x280>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	0c9b      	lsrs	r3, r3, #18
 8003514:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4a6a      	ldr	r2, [pc, #424]	; (80036e4 <HAL_I2C_Init+0x274>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d802      	bhi.n	8003544 <HAL_I2C_Init+0xd4>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3301      	adds	r3, #1
 8003542:	e009      	b.n	8003558 <HAL_I2C_Init+0xe8>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	4a69      	ldr	r2, [pc, #420]	; (80036f4 <HAL_I2C_Init+0x284>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	099b      	lsrs	r3, r3, #6
 8003556:	3301      	adds	r3, #1
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	430b      	orrs	r3, r1
 800355e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800356a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	495c      	ldr	r1, [pc, #368]	; (80036e4 <HAL_I2C_Init+0x274>)
 8003574:	428b      	cmp	r3, r1
 8003576:	d819      	bhi.n	80035ac <HAL_I2C_Init+0x13c>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1e59      	subs	r1, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	fbb1 f3f3 	udiv	r3, r1, r3
 8003586:	1c59      	adds	r1, r3, #1
 8003588:	f640 73fc 	movw	r3, #4092	; 0xffc
 800358c:	400b      	ands	r3, r1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_I2C_Init+0x138>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1e59      	subs	r1, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a0:	3301      	adds	r3, #1
 80035a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a6:	e051      	b.n	800364c <HAL_I2C_Init+0x1dc>
 80035a8:	2304      	movs	r3, #4
 80035aa:	e04f      	b.n	800364c <HAL_I2C_Init+0x1dc>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d111      	bne.n	80035d8 <HAL_I2C_Init+0x168>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1e58      	subs	r0, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	440b      	add	r3, r1
 80035c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c6:	3301      	adds	r3, #1
 80035c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e012      	b.n	80035fe <HAL_I2C_Init+0x18e>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1e58      	subs	r0, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	0099      	lsls	r1, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ee:	3301      	adds	r3, #1
 80035f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf0c      	ite	eq
 80035f8:	2301      	moveq	r3, #1
 80035fa:	2300      	movne	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_I2C_Init+0x196>
 8003602:	2301      	movs	r3, #1
 8003604:	e022      	b.n	800364c <HAL_I2C_Init+0x1dc>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10e      	bne.n	800362c <HAL_I2C_Init+0x1bc>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1e58      	subs	r0, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6859      	ldr	r1, [r3, #4]
 8003616:	460b      	mov	r3, r1
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	440b      	add	r3, r1
 800361c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003620:	3301      	adds	r3, #1
 8003622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800362a:	e00f      	b.n	800364c <HAL_I2C_Init+0x1dc>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1e58      	subs	r0, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	0099      	lsls	r1, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003642:	3301      	adds	r3, #1
 8003644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003648:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	6809      	ldr	r1, [r1, #0]
 8003650:	4313      	orrs	r3, r2
 8003652:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69da      	ldr	r2, [r3, #28]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800367a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6911      	ldr	r1, [r2, #16]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68d2      	ldr	r2, [r2, #12]
 8003686:	4311      	orrs	r1, r2
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	430b      	orrs	r3, r1
 800368e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	000186a0 	.word	0x000186a0
 80036e8:	001e847f 	.word	0x001e847f
 80036ec:	003d08ff 	.word	0x003d08ff
 80036f0:	431bde83 	.word	0x431bde83
 80036f4:	10624dd3 	.word	0x10624dd3

080036f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	4608      	mov	r0, r1
 8003702:	4611      	mov	r1, r2
 8003704:	461a      	mov	r2, r3
 8003706:	4603      	mov	r3, r0
 8003708:	817b      	strh	r3, [r7, #10]
 800370a:	460b      	mov	r3, r1
 800370c:	813b      	strh	r3, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003712:	f7ff fb6d 	bl	8002df0 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b20      	cmp	r3, #32
 8003722:	f040 80d9 	bne.w	80038d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	2319      	movs	r3, #25
 800372c:	2201      	movs	r2, #1
 800372e:	496d      	ldr	r1, [pc, #436]	; (80038e4 <HAL_I2C_Mem_Write+0x1ec>)
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 fc7f 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
 800373e:	e0cc      	b.n	80038da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_I2C_Mem_Write+0x56>
 800374a:	2302      	movs	r3, #2
 800374c:	e0c5      	b.n	80038da <HAL_I2C_Mem_Write+0x1e2>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d007      	beq.n	8003774 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003782:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2221      	movs	r2, #33	; 0x21
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2240      	movs	r2, #64	; 0x40
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a3a      	ldr	r2, [r7, #32]
 800379e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4a4d      	ldr	r2, [pc, #308]	; (80038e8 <HAL_I2C_Mem_Write+0x1f0>)
 80037b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037b6:	88f8      	ldrh	r0, [r7, #6]
 80037b8:	893a      	ldrh	r2, [r7, #8]
 80037ba:	8979      	ldrh	r1, [r7, #10]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	4603      	mov	r3, r0
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fab6 	bl	8003d38 <I2C_RequestMemoryWrite>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d052      	beq.n	8003878 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e081      	b.n	80038da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fd00 	bl	80041e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d107      	bne.n	80037fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e06b      	b.n	80038da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	781a      	ldrb	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b04      	cmp	r3, #4
 800383e:	d11b      	bne.n	8003878 <HAL_I2C_Mem_Write+0x180>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	2b00      	cmp	r3, #0
 8003846:	d017      	beq.n	8003878 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1aa      	bne.n	80037d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fcec 	bl	8004262 <I2C_WaitOnBTFFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00d      	beq.n	80038ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	2b04      	cmp	r3, #4
 8003896:	d107      	bne.n	80038a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e016      	b.n	80038da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e000      	b.n	80038da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038d8:	2302      	movs	r3, #2
  }
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	00100002 	.word	0x00100002
 80038e8:	ffff0000 	.word	0xffff0000

080038ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08c      	sub	sp, #48	; 0x30
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	4608      	mov	r0, r1
 80038f6:	4611      	mov	r1, r2
 80038f8:	461a      	mov	r2, r3
 80038fa:	4603      	mov	r3, r0
 80038fc:	817b      	strh	r3, [r7, #10]
 80038fe:	460b      	mov	r3, r1
 8003900:	813b      	strh	r3, [r7, #8]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003906:	f7ff fa73 	bl	8002df0 <HAL_GetTick>
 800390a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b20      	cmp	r3, #32
 8003916:	f040 8208 	bne.w	8003d2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2319      	movs	r3, #25
 8003920:	2201      	movs	r2, #1
 8003922:	497b      	ldr	r1, [pc, #492]	; (8003b10 <HAL_I2C_Mem_Read+0x224>)
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fb85 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003930:	2302      	movs	r3, #2
 8003932:	e1fb      	b.n	8003d2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_I2C_Mem_Read+0x56>
 800393e:	2302      	movs	r3, #2
 8003940:	e1f4      	b.n	8003d2c <HAL_I2C_Mem_Read+0x440>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d007      	beq.n	8003968 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003976:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2222      	movs	r2, #34	; 0x22
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2240      	movs	r2, #64	; 0x40
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003998:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a5b      	ldr	r2, [pc, #364]	; (8003b14 <HAL_I2C_Mem_Read+0x228>)
 80039a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039aa:	88f8      	ldrh	r0, [r7, #6]
 80039ac:	893a      	ldrh	r2, [r7, #8]
 80039ae:	8979      	ldrh	r1, [r7, #10]
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	4603      	mov	r3, r0
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fa52 	bl	8003e64 <I2C_RequestMemoryRead>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e1b0      	b.n	8003d2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d113      	bne.n	80039fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d2:	2300      	movs	r3, #0
 80039d4:	623b      	str	r3, [r7, #32]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	623b      	str	r3, [r7, #32]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	623b      	str	r3, [r7, #32]
 80039e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e184      	b.n	8003d04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d11b      	bne.n	8003a3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	e164      	b.n	8003d04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d11b      	bne.n	8003a7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	e144      	b.n	8003d04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a90:	e138      	b.n	8003d04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	f200 80f1 	bhi.w	8003c7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d123      	bne.n	8003aec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fc1b 	bl	80042e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e139      	b.n	8003d2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aea:	e10b      	b.n	8003d04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d14e      	bne.n	8003b92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afa:	2200      	movs	r2, #0
 8003afc:	4906      	ldr	r1, [pc, #24]	; (8003b18 <HAL_I2C_Mem_Read+0x22c>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fa98 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e10e      	b.n	8003d2c <HAL_I2C_Mem_Read+0x440>
 8003b0e:	bf00      	nop
 8003b10:	00100002 	.word	0x00100002
 8003b14:	ffff0000 	.word	0xffff0000
 8003b18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b90:	e0b8      	b.n	8003d04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	2200      	movs	r2, #0
 8003b9a:	4966      	ldr	r1, [pc, #408]	; (8003d34 <HAL_I2C_Mem_Read+0x448>)
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fa49 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0bf      	b.n	8003d2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	494f      	ldr	r1, [pc, #316]	; (8003d34 <HAL_I2C_Mem_Read+0x448>)
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fa1b 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e091      	b.n	8003d2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c7c:	e042      	b.n	8003d04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fb2e 	bl	80042e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e04c      	b.n	8003d2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d118      	bne.n	8003d04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f47f aec2 	bne.w	8003a92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3728      	adds	r7, #40	; 0x28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	00010004 	.word	0x00010004

08003d38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4603      	mov	r3, r0
 8003d48:	817b      	strh	r3, [r7, #10]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	813b      	strh	r3, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f960 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00d      	beq.n	8003d96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d88:	d103      	bne.n	8003d92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e05f      	b.n	8003e56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d96:	897b      	ldrh	r3, [r7, #10]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003da4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	6a3a      	ldr	r2, [r7, #32]
 8003daa:	492d      	ldr	r1, [pc, #180]	; (8003e60 <I2C_RequestMemoryWrite+0x128>)
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f998 	bl	80040e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e04c      	b.n	8003e56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd4:	6a39      	ldr	r1, [r7, #32]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fa02 	bl	80041e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d107      	bne.n	8003dfa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e02b      	b.n	8003e56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d105      	bne.n	8003e10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e04:	893b      	ldrh	r3, [r7, #8]
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	611a      	str	r2, [r3, #16]
 8003e0e:	e021      	b.n	8003e54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e10:	893b      	ldrh	r3, [r7, #8]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e20:	6a39      	ldr	r1, [r7, #32]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f9dc 	bl	80041e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00d      	beq.n	8003e4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d107      	bne.n	8003e46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e005      	b.n	8003e56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e4a:	893b      	ldrh	r3, [r7, #8]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	00010002 	.word	0x00010002

08003e64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	461a      	mov	r2, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	817b      	strh	r3, [r7, #10]
 8003e76:	460b      	mov	r3, r1
 8003e78:	813b      	strh	r3, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f8c2 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec4:	d103      	bne.n	8003ece <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e0aa      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ed2:	897b      	ldrh	r3, [r7, #10]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ee0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	4952      	ldr	r1, [pc, #328]	; (8004030 <I2C_RequestMemoryRead+0x1cc>)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f8fa 	bl	80040e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e097      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f10:	6a39      	ldr	r1, [r7, #32]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f964 	bl	80041e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00d      	beq.n	8003f3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d107      	bne.n	8003f36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e076      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f40:	893b      	ldrh	r3, [r7, #8]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	611a      	str	r2, [r3, #16]
 8003f4a:	e021      	b.n	8003f90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f4c:	893b      	ldrh	r3, [r7, #8]
 8003f4e:	0a1b      	lsrs	r3, r3, #8
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5c:	6a39      	ldr	r1, [r7, #32]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f93e 	bl	80041e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d107      	bne.n	8003f82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e050      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f86:	893b      	ldrh	r3, [r7, #8]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	6a39      	ldr	r1, [r7, #32]
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f923 	bl	80041e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00d      	beq.n	8003fbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d107      	bne.n	8003fb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e035      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f82b 	bl	8004034 <I2C_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00d      	beq.n	8004000 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff2:	d103      	bne.n	8003ffc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e013      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004000:	897b      	ldrh	r3, [r7, #10]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	6a3a      	ldr	r2, [r7, #32]
 8004014:	4906      	ldr	r1, [pc, #24]	; (8004030 <I2C_RequestMemoryRead+0x1cc>)
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f863 	bl	80040e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	00010002 	.word	0x00010002

08004034 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004044:	e025      	b.n	8004092 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d021      	beq.n	8004092 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404e:	f7fe fecf 	bl	8002df0 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <I2C_WaitOnFlagUntilTimeout+0x30>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d116      	bne.n	8004092 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f043 0220 	orr.w	r2, r3, #32
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e023      	b.n	80040da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d10d      	bne.n	80040b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	43da      	mvns	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4013      	ands	r3, r2
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bf0c      	ite	eq
 80040ae:	2301      	moveq	r3, #1
 80040b0:	2300      	movne	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	e00c      	b.n	80040d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	43da      	mvns	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4013      	ands	r3, r2
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d0b6      	beq.n	8004046 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040f0:	e051      	b.n	8004196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004100:	d123      	bne.n	800414a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004110:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800411a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f043 0204 	orr.w	r2, r3, #4
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e046      	b.n	80041d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d021      	beq.n	8004196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004152:	f7fe fe4d 	bl	8002df0 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	429a      	cmp	r2, r3
 8004160:	d302      	bcc.n	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d116      	bne.n	8004196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f043 0220 	orr.w	r2, r3, #32
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e020      	b.n	80041d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d10c      	bne.n	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	43da      	mvns	r2, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4013      	ands	r3, r2
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e00b      	b.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	43da      	mvns	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf14      	ite	ne
 80041cc:	2301      	movne	r3, #1
 80041ce:	2300      	moveq	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d18d      	bne.n	80040f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ec:	e02d      	b.n	800424a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f8ce 	bl	8004390 <I2C_IsAcknowledgeFailed>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e02d      	b.n	800425a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d021      	beq.n	800424a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004206:	f7fe fdf3 	bl	8002df0 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	d302      	bcc.n	800421c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d116      	bne.n	800424a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f043 0220 	orr.w	r2, r3, #32
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e007      	b.n	800425a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004254:	2b80      	cmp	r3, #128	; 0x80
 8004256:	d1ca      	bne.n	80041ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800426e:	e02d      	b.n	80042cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f88d 	bl	8004390 <I2C_IsAcknowledgeFailed>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e02d      	b.n	80042dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d021      	beq.n	80042cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004288:	f7fe fdb2 	bl	8002df0 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	d302      	bcc.n	800429e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d116      	bne.n	80042cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	f043 0220 	orr.w	r2, r3, #32
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e007      	b.n	80042dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d1ca      	bne.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042f0:	e042      	b.n	8004378 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d119      	bne.n	8004334 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0210 	mvn.w	r2, #16
 8004308:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e029      	b.n	8004388 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004334:	f7fe fd5c 	bl	8002df0 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	429a      	cmp	r2, r3
 8004342:	d302      	bcc.n	800434a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d116      	bne.n	8004378 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	f043 0220 	orr.w	r2, r3, #32
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e007      	b.n	8004388 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004382:	2b40      	cmp	r3, #64	; 0x40
 8004384:	d1b5      	bne.n	80042f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a6:	d11b      	bne.n	80043e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	f043 0204 	orr.w	r2, r3, #4
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e267      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d075      	beq.n	80044fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800440e:	4b88      	ldr	r3, [pc, #544]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
 8004416:	2b04      	cmp	r3, #4
 8004418:	d00c      	beq.n	8004434 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441a:	4b85      	ldr	r3, [pc, #532]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004422:	2b08      	cmp	r3, #8
 8004424:	d112      	bne.n	800444c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004426:	4b82      	ldr	r3, [pc, #520]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004432:	d10b      	bne.n	800444c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	4b7e      	ldr	r3, [pc, #504]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d05b      	beq.n	80044f8 <HAL_RCC_OscConfig+0x108>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d157      	bne.n	80044f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e242      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d106      	bne.n	8004464 <HAL_RCC_OscConfig+0x74>
 8004456:	4b76      	ldr	r3, [pc, #472]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a75      	ldr	r2, [pc, #468]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e01d      	b.n	80044a0 <HAL_RCC_OscConfig+0xb0>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800446c:	d10c      	bne.n	8004488 <HAL_RCC_OscConfig+0x98>
 800446e:	4b70      	ldr	r3, [pc, #448]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6f      	ldr	r2, [pc, #444]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	4b6d      	ldr	r3, [pc, #436]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a6c      	ldr	r2, [pc, #432]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e00b      	b.n	80044a0 <HAL_RCC_OscConfig+0xb0>
 8004488:	4b69      	ldr	r3, [pc, #420]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a68      	ldr	r2, [pc, #416]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 800448e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	4b66      	ldr	r3, [pc, #408]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a65      	ldr	r2, [pc, #404]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 800449a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d013      	beq.n	80044d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fe fca2 	bl	8002df0 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fe fc9e 	bl	8002df0 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	; 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e207      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c2:	4b5b      	ldr	r3, [pc, #364]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0xc0>
 80044ce:	e014      	b.n	80044fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fe fc8e 	bl	8002df0 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fe fc8a 	bl	8002df0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e1f3      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ea:	4b51      	ldr	r3, [pc, #324]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0xe8>
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d063      	beq.n	80045ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004506:	4b4a      	ldr	r3, [pc, #296]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004512:	4b47      	ldr	r3, [pc, #284]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800451a:	2b08      	cmp	r3, #8
 800451c:	d11c      	bne.n	8004558 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800451e:	4b44      	ldr	r3, [pc, #272]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d116      	bne.n	8004558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452a:	4b41      	ldr	r3, [pc, #260]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_RCC_OscConfig+0x152>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d001      	beq.n	8004542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e1c7      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004542:	4b3b      	ldr	r3, [pc, #236]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4937      	ldr	r1, [pc, #220]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004556:	e03a      	b.n	80045ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d020      	beq.n	80045a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004560:	4b34      	ldr	r3, [pc, #208]	; (8004634 <HAL_RCC_OscConfig+0x244>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004566:	f7fe fc43 	bl	8002df0 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800456e:	f7fe fc3f 	bl	8002df0 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e1a8      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004580:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458c:	4b28      	ldr	r3, [pc, #160]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4925      	ldr	r1, [pc, #148]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 800459c:	4313      	orrs	r3, r2
 800459e:	600b      	str	r3, [r1, #0]
 80045a0:	e015      	b.n	80045ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a2:	4b24      	ldr	r3, [pc, #144]	; (8004634 <HAL_RCC_OscConfig+0x244>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fe fc22 	bl	8002df0 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b0:	f7fe fc1e 	bl	8002df0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e187      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c2:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d036      	beq.n	8004648 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d016      	beq.n	8004610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e2:	4b15      	ldr	r3, [pc, #84]	; (8004638 <HAL_RCC_OscConfig+0x248>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fe fc02 	bl	8002df0 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f0:	f7fe fbfe 	bl	8002df0 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e167      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <HAL_RCC_OscConfig+0x240>)
 8004604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x200>
 800460e:	e01b      	b.n	8004648 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004610:	4b09      	ldr	r3, [pc, #36]	; (8004638 <HAL_RCC_OscConfig+0x248>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004616:	f7fe fbeb 	bl	8002df0 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800461c:	e00e      	b.n	800463c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800461e:	f7fe fbe7 	bl	8002df0 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d907      	bls.n	800463c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e150      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
 8004630:	40023800 	.word	0x40023800
 8004634:	42470000 	.word	0x42470000
 8004638:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800463c:	4b88      	ldr	r3, [pc, #544]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 800463e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1ea      	bne.n	800461e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 8097 	beq.w	8004784 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465a:	4b81      	ldr	r3, [pc, #516]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	4b7d      	ldr	r3, [pc, #500]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	4a7c      	ldr	r2, [pc, #496]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004674:	6413      	str	r3, [r2, #64]	; 0x40
 8004676:	4b7a      	ldr	r3, [pc, #488]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004686:	4b77      	ldr	r3, [pc, #476]	; (8004864 <HAL_RCC_OscConfig+0x474>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d118      	bne.n	80046c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004692:	4b74      	ldr	r3, [pc, #464]	; (8004864 <HAL_RCC_OscConfig+0x474>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a73      	ldr	r2, [pc, #460]	; (8004864 <HAL_RCC_OscConfig+0x474>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469e:	f7fe fba7 	bl	8002df0 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a6:	f7fe fba3 	bl	8002df0 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e10c      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b8:	4b6a      	ldr	r3, [pc, #424]	; (8004864 <HAL_RCC_OscConfig+0x474>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <HAL_RCC_OscConfig+0x2ea>
 80046cc:	4b64      	ldr	r3, [pc, #400]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	4a63      	ldr	r2, [pc, #396]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6713      	str	r3, [r2, #112]	; 0x70
 80046d8:	e01c      	b.n	8004714 <HAL_RCC_OscConfig+0x324>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b05      	cmp	r3, #5
 80046e0:	d10c      	bne.n	80046fc <HAL_RCC_OscConfig+0x30c>
 80046e2:	4b5f      	ldr	r3, [pc, #380]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	4a5e      	ldr	r2, [pc, #376]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 80046e8:	f043 0304 	orr.w	r3, r3, #4
 80046ec:	6713      	str	r3, [r2, #112]	; 0x70
 80046ee:	4b5c      	ldr	r3, [pc, #368]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	4a5b      	ldr	r2, [pc, #364]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	6713      	str	r3, [r2, #112]	; 0x70
 80046fa:	e00b      	b.n	8004714 <HAL_RCC_OscConfig+0x324>
 80046fc:	4b58      	ldr	r3, [pc, #352]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4a57      	ldr	r2, [pc, #348]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 8004702:	f023 0301 	bic.w	r3, r3, #1
 8004706:	6713      	str	r3, [r2, #112]	; 0x70
 8004708:	4b55      	ldr	r3, [pc, #340]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	4a54      	ldr	r2, [pc, #336]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 800470e:	f023 0304 	bic.w	r3, r3, #4
 8004712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d015      	beq.n	8004748 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fe fb68 	bl	8002df0 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004722:	e00a      	b.n	800473a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004724:	f7fe fb64 	bl	8002df0 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e0cb      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473a:	4b49      	ldr	r3, [pc, #292]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0ee      	beq.n	8004724 <HAL_RCC_OscConfig+0x334>
 8004746:	e014      	b.n	8004772 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004748:	f7fe fb52 	bl	8002df0 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800474e:	e00a      	b.n	8004766 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004750:	f7fe fb4e 	bl	8002df0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	; 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e0b5      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004766:	4b3e      	ldr	r3, [pc, #248]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1ee      	bne.n	8004750 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004772:	7dfb      	ldrb	r3, [r7, #23]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d105      	bne.n	8004784 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004778:	4b39      	ldr	r3, [pc, #228]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	4a38      	ldr	r2, [pc, #224]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 800477e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004782:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80a1 	beq.w	80048d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800478e:	4b34      	ldr	r3, [pc, #208]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b08      	cmp	r3, #8
 8004798:	d05c      	beq.n	8004854 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d141      	bne.n	8004826 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a2:	4b31      	ldr	r3, [pc, #196]	; (8004868 <HAL_RCC_OscConfig+0x478>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fe fb22 	bl	8002df0 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b0:	f7fe fb1e 	bl	8002df0 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e087      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c2:	4b27      	ldr	r3, [pc, #156]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	019b      	lsls	r3, r3, #6
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	3b01      	subs	r3, #1
 80047e8:	041b      	lsls	r3, r3, #16
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	061b      	lsls	r3, r3, #24
 80047f2:	491b      	ldr	r1, [pc, #108]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_RCC_OscConfig+0x478>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fe:	f7fe faf7 	bl	8002df0 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004806:	f7fe faf3 	bl	8002df0 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e05c      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004818:	4b11      	ldr	r3, [pc, #68]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x416>
 8004824:	e054      	b.n	80048d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004826:	4b10      	ldr	r3, [pc, #64]	; (8004868 <HAL_RCC_OscConfig+0x478>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482c:	f7fe fae0 	bl	8002df0 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004834:	f7fe fadc 	bl	8002df0 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e045      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_RCC_OscConfig+0x470>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x444>
 8004852:	e03d      	b.n	80048d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d107      	bne.n	800486c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e038      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
 8004860:	40023800 	.word	0x40023800
 8004864:	40007000 	.word	0x40007000
 8004868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800486c:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_RCC_OscConfig+0x4ec>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d028      	beq.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004884:	429a      	cmp	r2, r3
 8004886:	d121      	bne.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d11a      	bne.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800489c:	4013      	ands	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d111      	bne.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	3b01      	subs	r3, #1
 80048b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d107      	bne.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40023800 	.word	0x40023800

080048e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0cc      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f4:	4b68      	ldr	r3, [pc, #416]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d90c      	bls.n	800491c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b65      	ldr	r3, [pc, #404]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b63      	ldr	r3, [pc, #396]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0b8      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004934:	4b59      	ldr	r3, [pc, #356]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	4a58      	ldr	r2, [pc, #352]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800493e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800494c:	4b53      	ldr	r3, [pc, #332]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4a52      	ldr	r2, [pc, #328]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004958:	4b50      	ldr	r3, [pc, #320]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	494d      	ldr	r1, [pc, #308]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d044      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d107      	bne.n	800498e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	4b47      	ldr	r3, [pc, #284]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d119      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e07f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d003      	beq.n	800499e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800499a:	2b03      	cmp	r3, #3
 800499c:	d107      	bne.n	80049ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499e:	4b3f      	ldr	r3, [pc, #252]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e06f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ae:	4b3b      	ldr	r3, [pc, #236]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e067      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049be:	4b37      	ldr	r3, [pc, #220]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f023 0203 	bic.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4934      	ldr	r1, [pc, #208]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049d0:	f7fe fa0e 	bl	8002df0 <HAL_GetTick>
 80049d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d8:	f7fe fa0a 	bl	8002df0 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e04f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ee:	4b2b      	ldr	r3, [pc, #172]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 020c 	and.w	r2, r3, #12
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1eb      	bne.n	80049d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a00:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d20c      	bcs.n	8004a28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	4b22      	ldr	r3, [pc, #136]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a16:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e032      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a34:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4916      	ldr	r1, [pc, #88]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	490e      	ldr	r1, [pc, #56]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a66:	f000 f821 	bl	8004aac <HAL_RCC_GetSysClockFreq>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	490a      	ldr	r1, [pc, #40]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a78:	5ccb      	ldrb	r3, [r1, r3]
 8004a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7e:	4a09      	ldr	r2, [pc, #36]	; (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a82:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe f96e 	bl	8002d68 <HAL_InitTick>

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40023c00 	.word	0x40023c00
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	0800a250 	.word	0x0800a250
 8004aa4:	20000004 	.word	0x20000004
 8004aa8:	20000008 	.word	0x20000008

08004aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab0:	b094      	sub	sp, #80	; 0x50
 8004ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab8:	2300      	movs	r3, #0
 8004aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004abc:	2300      	movs	r3, #0
 8004abe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac4:	4b79      	ldr	r3, [pc, #484]	; (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d00d      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x40>
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	f200 80e1 	bhi.w	8004c98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ade:	e0db      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae0:	4b73      	ldr	r3, [pc, #460]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ae2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ae4:	e0db      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ae6:	4b73      	ldr	r3, [pc, #460]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aea:	e0d8      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aec:	4b6f      	ldr	r3, [pc, #444]	; (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004af6:	4b6d      	ldr	r3, [pc, #436]	; (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d063      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b02:	4b6a      	ldr	r3, [pc, #424]	; (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	2200      	movs	r2, #0
 8004b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b14:	633b      	str	r3, [r7, #48]	; 0x30
 8004b16:	2300      	movs	r3, #0
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b1e:	4622      	mov	r2, r4
 8004b20:	462b      	mov	r3, r5
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f04f 0100 	mov.w	r1, #0
 8004b2a:	0159      	lsls	r1, r3, #5
 8004b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b30:	0150      	lsls	r0, r2, #5
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4621      	mov	r1, r4
 8004b38:	1a51      	subs	r1, r2, r1
 8004b3a:	6139      	str	r1, [r7, #16]
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b50:	4659      	mov	r1, fp
 8004b52:	018b      	lsls	r3, r1, #6
 8004b54:	4651      	mov	r1, sl
 8004b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b5a:	4651      	mov	r1, sl
 8004b5c:	018a      	lsls	r2, r1, #6
 8004b5e:	4651      	mov	r1, sl
 8004b60:	ebb2 0801 	subs.w	r8, r2, r1
 8004b64:	4659      	mov	r1, fp
 8004b66:	eb63 0901 	sbc.w	r9, r3, r1
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b7e:	4690      	mov	r8, r2
 8004b80:	4699      	mov	r9, r3
 8004b82:	4623      	mov	r3, r4
 8004b84:	eb18 0303 	adds.w	r3, r8, r3
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	462b      	mov	r3, r5
 8004b8c:	eb49 0303 	adc.w	r3, r9, r3
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	024b      	lsls	r3, r1, #9
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ba8:	4621      	mov	r1, r4
 8004baa:	024a      	lsls	r2, r1, #9
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bbc:	f7fc f8bc 	bl	8000d38 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc8:	e058      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bca:	4b38      	ldr	r3, [pc, #224]	; (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	099b      	lsrs	r3, r3, #6
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bda:	623b      	str	r3, [r7, #32]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
 8004be0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	f04f 0000 	mov.w	r0, #0
 8004bec:	f04f 0100 	mov.w	r1, #0
 8004bf0:	0159      	lsls	r1, r3, #5
 8004bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf6:	0150      	lsls	r0, r2, #5
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c02:	4649      	mov	r1, r9
 8004c04:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c1c:	ebb2 040a 	subs.w	r4, r2, sl
 8004c20:	eb63 050b 	sbc.w	r5, r3, fp
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	00eb      	lsls	r3, r5, #3
 8004c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c32:	00e2      	lsls	r2, r4, #3
 8004c34:	4614      	mov	r4, r2
 8004c36:	461d      	mov	r5, r3
 8004c38:	4643      	mov	r3, r8
 8004c3a:	18e3      	adds	r3, r4, r3
 8004c3c:	603b      	str	r3, [r7, #0]
 8004c3e:	464b      	mov	r3, r9
 8004c40:	eb45 0303 	adc.w	r3, r5, r3
 8004c44:	607b      	str	r3, [r7, #4]
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c52:	4629      	mov	r1, r5
 8004c54:	028b      	lsls	r3, r1, #10
 8004c56:	4621      	mov	r1, r4
 8004c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	028a      	lsls	r2, r1, #10
 8004c60:	4610      	mov	r0, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c66:	2200      	movs	r2, #0
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	61fa      	str	r2, [r7, #28]
 8004c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c70:	f7fc f862 	bl	8000d38 <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4613      	mov	r3, r2
 8004c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	0c1b      	lsrs	r3, r3, #16
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	3301      	adds	r3, #1
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c96:	e002      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3750      	adds	r7, #80	; 0x50
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004caa:	bf00      	nop
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	00f42400 	.word	0x00f42400
 8004cb4:	007a1200 	.word	0x007a1200

08004cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cbc:	4b03      	ldr	r3, [pc, #12]	; (8004ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000004 	.word	0x20000004

08004cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cd4:	f7ff fff0 	bl	8004cb8 <HAL_RCC_GetHCLKFreq>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	0a9b      	lsrs	r3, r3, #10
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	4903      	ldr	r1, [pc, #12]	; (8004cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ce6:	5ccb      	ldrb	r3, [r1, r3]
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	0800a260 	.word	0x0800a260

08004cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e07b      	b.n	8004e02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d108      	bne.n	8004d24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d1a:	d009      	beq.n	8004d30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	61da      	str	r2, [r3, #28]
 8004d22:	e005      	b.n	8004d30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fd fe5c 	bl	8002a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db4:	ea42 0103 	orr.w	r1, r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	0c1b      	lsrs	r3, r3, #16
 8004dce:	f003 0104 	and.w	r1, r3, #4
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	f003 0210 	and.w	r2, r3, #16
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69da      	ldr	r2, [r3, #28]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004df0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b088      	sub	sp, #32
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	603b      	str	r3, [r7, #0]
 8004e16:	4613      	mov	r3, r2
 8004e18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_SPI_Transmit+0x22>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e126      	b.n	800507a <HAL_SPI_Transmit+0x270>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e34:	f7fd ffdc 	bl	8002df0 <HAL_GetTick>
 8004e38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d002      	beq.n	8004e50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e4e:	e10b      	b.n	8005068 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <HAL_SPI_Transmit+0x52>
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e60:	e102      	b.n	8005068 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2203      	movs	r2, #3
 8004e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	88fa      	ldrh	r2, [r7, #6]
 8004e7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea8:	d10f      	bne.n	8004eca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ec8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d007      	beq.n	8004ee8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ee6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef0:	d14b      	bne.n	8004f8a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_SPI_Transmit+0xf6>
 8004efa:	8afb      	ldrh	r3, [r7, #22]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d13e      	bne.n	8004f7e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	881a      	ldrh	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	1c9a      	adds	r2, r3, #2
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f24:	e02b      	b.n	8004f7e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d112      	bne.n	8004f5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	881a      	ldrh	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	1c9a      	adds	r2, r3, #2
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f58:	e011      	b.n	8004f7e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f5a:	f7fd ff49 	bl	8002df0 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d803      	bhi.n	8004f72 <HAL_SPI_Transmit+0x168>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d102      	bne.n	8004f78 <HAL_SPI_Transmit+0x16e>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f7c:	e074      	b.n	8005068 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1ce      	bne.n	8004f26 <HAL_SPI_Transmit+0x11c>
 8004f88:	e04c      	b.n	8005024 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_SPI_Transmit+0x18e>
 8004f92:	8afb      	ldrh	r3, [r7, #22]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d140      	bne.n	800501a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	7812      	ldrb	r2, [r2, #0]
 8004fa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004fbe:	e02c      	b.n	800501a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d113      	bne.n	8004ff6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	7812      	ldrb	r2, [r2, #0]
 8004fda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ff4:	e011      	b.n	800501a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ff6:	f7fd fefb 	bl	8002df0 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d803      	bhi.n	800500e <HAL_SPI_Transmit+0x204>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500c:	d102      	bne.n	8005014 <HAL_SPI_Transmit+0x20a>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005018:	e026      	b.n	8005068 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1cd      	bne.n	8004fc0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	6839      	ldr	r1, [r7, #0]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fceb 	bl	8005a04 <SPI_EndRxTxTransaction>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005042:	2300      	movs	r3, #0
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e000      	b.n	8005068 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005066:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005078:	7ffb      	ldrb	r3, [r7, #31]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b088      	sub	sp, #32
 8005086:	af02      	add	r7, sp, #8
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	603b      	str	r3, [r7, #0]
 800508e:	4613      	mov	r3, r2
 8005090:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800509e:	d112      	bne.n	80050c6 <HAL_SPI_Receive+0x44>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10e      	bne.n	80050c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2204      	movs	r2, #4
 80050ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80050b0:	88fa      	ldrh	r2, [r7, #6]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	4613      	mov	r3, r2
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f8f1 	bl	80052a4 <HAL_SPI_TransmitReceive>
 80050c2:	4603      	mov	r3, r0
 80050c4:	e0ea      	b.n	800529c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_SPI_Receive+0x52>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e0e3      	b.n	800529c <HAL_SPI_Receive+0x21a>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050dc:	f7fd fe88 	bl	8002df0 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d002      	beq.n	80050f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
 80050f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050f2:	e0ca      	b.n	800528a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_SPI_Receive+0x7e>
 80050fa:	88fb      	ldrh	r3, [r7, #6]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005104:	e0c1      	b.n	800528a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2204      	movs	r2, #4
 800510a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	88fa      	ldrh	r2, [r7, #6]
 800511e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	88fa      	ldrh	r2, [r7, #6]
 8005124:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514c:	d10f      	bne.n	800516e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800516c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	d007      	beq.n	800518c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800518a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d162      	bne.n	800525a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005194:	e02e      	b.n	80051f4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d115      	bne.n	80051d0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f103 020c 	add.w	r2, r3, #12
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	7812      	ldrb	r2, [r2, #0]
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ce:	e011      	b.n	80051f4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051d0:	f7fd fe0e 	bl	8002df0 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d803      	bhi.n	80051e8 <HAL_SPI_Receive+0x166>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d102      	bne.n	80051ee <HAL_SPI_Receive+0x16c>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80051f2:	e04a      	b.n	800528a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1cb      	bne.n	8005196 <HAL_SPI_Receive+0x114>
 80051fe:	e031      	b.n	8005264 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b01      	cmp	r3, #1
 800520c:	d113      	bne.n	8005236 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	b292      	uxth	r2, r2
 800521a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	1c9a      	adds	r2, r3, #2
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005234:	e011      	b.n	800525a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005236:	f7fd fddb 	bl	8002df0 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d803      	bhi.n	800524e <HAL_SPI_Receive+0x1cc>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d102      	bne.n	8005254 <HAL_SPI_Receive+0x1d2>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d102      	bne.n	800525a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005258:	e017      	b.n	800528a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1cd      	bne.n	8005200 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fb65 	bl	8005938 <SPI_EndRxTransaction>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	75fb      	strb	r3, [r7, #23]
 8005286:	e000      	b.n	800528a <HAL_SPI_Receive+0x208>
  }

error :
 8005288:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800529a:	7dfb      	ldrb	r3, [r7, #23]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	; 0x30
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052b2:	2301      	movs	r3, #1
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_SPI_TransmitReceive+0x26>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e18a      	b.n	80055e0 <HAL_SPI_TransmitReceive+0x33c>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052d2:	f7fd fd8d 	bl	8002df0 <HAL_GetTick>
 80052d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80052e8:	887b      	ldrh	r3, [r7, #2]
 80052ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d00f      	beq.n	8005314 <HAL_SPI_TransmitReceive+0x70>
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052fa:	d107      	bne.n	800530c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <HAL_SPI_TransmitReceive+0x68>
 8005304:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005308:	2b04      	cmp	r3, #4
 800530a:	d003      	beq.n	8005314 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800530c:	2302      	movs	r3, #2
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005312:	e15b      	b.n	80055cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <HAL_SPI_TransmitReceive+0x82>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <HAL_SPI_TransmitReceive+0x82>
 8005320:	887b      	ldrh	r3, [r7, #2]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d103      	bne.n	800532e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800532c:	e14e      	b.n	80055cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b04      	cmp	r3, #4
 8005338:	d003      	beq.n	8005342 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2205      	movs	r2, #5
 800533e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	887a      	ldrh	r2, [r7, #2]
 8005352:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	887a      	ldrh	r2, [r7, #2]
 8005358:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	887a      	ldrh	r2, [r7, #2]
 8005364:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	887a      	ldrh	r2, [r7, #2]
 800536a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005382:	2b40      	cmp	r3, #64	; 0x40
 8005384:	d007      	beq.n	8005396 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005394:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800539e:	d178      	bne.n	8005492 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <HAL_SPI_TransmitReceive+0x10a>
 80053a8:	8b7b      	ldrh	r3, [r7, #26]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d166      	bne.n	800547c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	881a      	ldrh	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	1c9a      	adds	r2, r3, #2
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053d2:	e053      	b.n	800547c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d11b      	bne.n	800541a <HAL_SPI_TransmitReceive+0x176>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d016      	beq.n	800541a <HAL_SPI_TransmitReceive+0x176>
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d113      	bne.n	800541a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b01      	cmp	r3, #1
 8005426:	d119      	bne.n	800545c <HAL_SPI_TransmitReceive+0x1b8>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d014      	beq.n	800545c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	b292      	uxth	r2, r2
 800543e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005458:	2301      	movs	r3, #1
 800545a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800545c:	f7fd fcc8 	bl	8002df0 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005468:	429a      	cmp	r2, r3
 800546a:	d807      	bhi.n	800547c <HAL_SPI_TransmitReceive+0x1d8>
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d003      	beq.n	800547c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800547a:	e0a7      	b.n	80055cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1a6      	bne.n	80053d4 <HAL_SPI_TransmitReceive+0x130>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1a1      	bne.n	80053d4 <HAL_SPI_TransmitReceive+0x130>
 8005490:	e07c      	b.n	800558c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x1fc>
 800549a:	8b7b      	ldrh	r3, [r7, #26]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d16b      	bne.n	8005578 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	7812      	ldrb	r2, [r2, #0]
 80054ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c6:	e057      	b.n	8005578 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d11c      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x26c>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d017      	beq.n	8005510 <HAL_SPI_TransmitReceive+0x26c>
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d114      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b01      	cmp	r3, #1
 800551c:	d119      	bne.n	8005552 <HAL_SPI_TransmitReceive+0x2ae>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d014      	beq.n	8005552 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800554e:	2301      	movs	r3, #1
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005552:	f7fd fc4d 	bl	8002df0 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800555e:	429a      	cmp	r2, r3
 8005560:	d803      	bhi.n	800556a <HAL_SPI_TransmitReceive+0x2c6>
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005568:	d102      	bne.n	8005570 <HAL_SPI_TransmitReceive+0x2cc>
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	2b00      	cmp	r3, #0
 800556e:	d103      	bne.n	8005578 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005576:	e029      	b.n	80055cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1a2      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x224>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d19d      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800558c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 fa37 	bl	8005a04 <SPI_EndRxTxTransaction>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d006      	beq.n	80055aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80055a8:	e010      	b.n	80055cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10b      	bne.n	80055ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	e000      	b.n	80055cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80055ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3730      	adds	r7, #48	; 0x30
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10e      	bne.n	8005628 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d004      	beq.n	8005628 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4798      	blx	r3
    return;
 8005626:	e0ce      	b.n	80057c6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <HAL_SPI_IRQHandler+0x5e>
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005638:	2b00      	cmp	r3, #0
 800563a:	d004      	beq.n	8005646 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	4798      	blx	r3
    return;
 8005644:	e0bf      	b.n	80057c6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10a      	bne.n	8005666 <HAL_SPI_IRQHandler+0x7e>
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d105      	bne.n	8005666 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80b0 	beq.w	80057c6 <HAL_SPI_IRQHandler+0x1de>
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80aa 	beq.w	80057c6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005678:	2b00      	cmp	r3, #0
 800567a:	d023      	beq.n	80056c4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b03      	cmp	r3, #3
 8005686:	d011      	beq.n	80056ac <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568c:	f043 0204 	orr.w	r2, r3, #4
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	e00b      	b.n	80056c4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056ac:	2300      	movs	r3, #0
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	693b      	ldr	r3, [r7, #16]
        return;
 80056c2:	e080      	b.n	80057c6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d014      	beq.n	80056f8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d2:	f043 0201 	orr.w	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00c      	beq.n	800571c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005706:	f043 0208 	orr.w	r2, r3, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005720:	2b00      	cmp	r3, #0
 8005722:	d04f      	beq.n	80057c4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005732:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d104      	bne.n	8005750 <HAL_SPI_IRQHandler+0x168>
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d034      	beq.n	80057ba <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0203 	bic.w	r2, r2, #3
 800575e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d011      	beq.n	800578c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576c:	4a17      	ldr	r2, [pc, #92]	; (80057cc <HAL_SPI_IRQHandler+0x1e4>)
 800576e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005774:	4618      	mov	r0, r3
 8005776:	f7fd fc7c 	bl	8003072 <HAL_DMA_Abort_IT>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005784:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005790:	2b00      	cmp	r3, #0
 8005792:	d016      	beq.n	80057c2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005798:	4a0c      	ldr	r2, [pc, #48]	; (80057cc <HAL_SPI_IRQHandler+0x1e4>)
 800579a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fd fc66 	bl	8003072 <HAL_DMA_Abort_IT>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80057b8:	e003      	b.n	80057c2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f808 	bl	80057d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80057c0:	e000      	b.n	80057c4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80057c2:	bf00      	nop
    return;
 80057c4:	bf00      	nop
  }
}
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	08005801 	.word	0x08005801

080057d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057f2:	b2db      	uxtb	r3, r3
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f7ff ffd8 	bl	80057d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005820:	bf00      	nop
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	4613      	mov	r3, r2
 8005836:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005838:	f7fd fada 	bl	8002df0 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	4413      	add	r3, r2
 8005846:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005848:	f7fd fad2 	bl	8002df0 <HAL_GetTick>
 800584c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800584e:	4b39      	ldr	r3, [pc, #228]	; (8005934 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	015b      	lsls	r3, r3, #5
 8005854:	0d1b      	lsrs	r3, r3, #20
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	fb02 f303 	mul.w	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800585e:	e054      	b.n	800590a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d050      	beq.n	800590a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005868:	f7fd fac2 	bl	8002df0 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	429a      	cmp	r2, r3
 8005876:	d902      	bls.n	800587e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d13d      	bne.n	80058fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800588c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005896:	d111      	bne.n	80058bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a0:	d004      	beq.n	80058ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058aa:	d107      	bne.n	80058bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c4:	d10f      	bne.n	80058e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e017      	b.n	800592a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	3b01      	subs	r3, #1
 8005908:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4013      	ands	r3, r2
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	429a      	cmp	r2, r3
 8005918:	bf0c      	ite	eq
 800591a:	2301      	moveq	r3, #1
 800591c:	2300      	movne	r3, #0
 800591e:	b2db      	uxtb	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	429a      	cmp	r2, r3
 8005926:	d19b      	bne.n	8005860 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000004 	.word	0x20000004

08005938 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800594c:	d111      	bne.n	8005972 <SPI_EndRxTransaction+0x3a>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005956:	d004      	beq.n	8005962 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005960:	d107      	bne.n	8005972 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005970:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800597a:	d12a      	bne.n	80059d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005984:	d012      	beq.n	80059ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2200      	movs	r2, #0
 800598e:	2180      	movs	r1, #128	; 0x80
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff ff49 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d02d      	beq.n	80059f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a0:	f043 0220 	orr.w	r2, r3, #32
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e026      	b.n	80059fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	2101      	movs	r1, #1
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff ff36 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d01a      	beq.n	80059f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c6:	f043 0220 	orr.w	r2, r3, #32
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e013      	b.n	80059fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2200      	movs	r2, #0
 80059da:	2101      	movs	r1, #1
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f7ff ff23 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ec:	f043 0220 	orr.w	r2, r3, #32
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e000      	b.n	80059fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a10:	4b1b      	ldr	r3, [pc, #108]	; (8005a80 <SPI_EndRxTxTransaction+0x7c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1b      	ldr	r2, [pc, #108]	; (8005a84 <SPI_EndRxTxTransaction+0x80>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	0d5b      	lsrs	r3, r3, #21
 8005a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a20:	fb02 f303 	mul.w	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a2e:	d112      	bne.n	8005a56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2200      	movs	r2, #0
 8005a38:	2180      	movs	r1, #128	; 0x80
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f7ff fef4 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d016      	beq.n	8005a74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4a:	f043 0220 	orr.w	r2, r3, #32
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e00f      	b.n	8005a76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6c:	2b80      	cmp	r3, #128	; 0x80
 8005a6e:	d0f2      	beq.n	8005a56 <SPI_EndRxTxTransaction+0x52>
 8005a70:	e000      	b.n	8005a74 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a72:	bf00      	nop
  }

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000004 	.word	0x20000004
 8005a84:	165e9f81 	.word	0x165e9f81

08005a88 <__cvt>:
 8005a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8c:	ec55 4b10 	vmov	r4, r5, d0
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	460e      	mov	r6, r1
 8005a94:	4619      	mov	r1, r3
 8005a96:	462b      	mov	r3, r5
 8005a98:	bfbb      	ittet	lt
 8005a9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a9e:	461d      	movlt	r5, r3
 8005aa0:	2300      	movge	r3, #0
 8005aa2:	232d      	movlt	r3, #45	; 0x2d
 8005aa4:	700b      	strb	r3, [r1, #0]
 8005aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005aac:	4691      	mov	r9, r2
 8005aae:	f023 0820 	bic.w	r8, r3, #32
 8005ab2:	bfbc      	itt	lt
 8005ab4:	4622      	movlt	r2, r4
 8005ab6:	4614      	movlt	r4, r2
 8005ab8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005abc:	d005      	beq.n	8005aca <__cvt+0x42>
 8005abe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ac2:	d100      	bne.n	8005ac6 <__cvt+0x3e>
 8005ac4:	3601      	adds	r6, #1
 8005ac6:	2102      	movs	r1, #2
 8005ac8:	e000      	b.n	8005acc <__cvt+0x44>
 8005aca:	2103      	movs	r1, #3
 8005acc:	ab03      	add	r3, sp, #12
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	ab02      	add	r3, sp, #8
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	ec45 4b10 	vmov	d0, r4, r5
 8005ad8:	4653      	mov	r3, sl
 8005ada:	4632      	mov	r2, r6
 8005adc:	f001 f880 	bl	8006be0 <_dtoa_r>
 8005ae0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ae4:	4607      	mov	r7, r0
 8005ae6:	d102      	bne.n	8005aee <__cvt+0x66>
 8005ae8:	f019 0f01 	tst.w	r9, #1
 8005aec:	d022      	beq.n	8005b34 <__cvt+0xac>
 8005aee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005af2:	eb07 0906 	add.w	r9, r7, r6
 8005af6:	d110      	bne.n	8005b1a <__cvt+0x92>
 8005af8:	783b      	ldrb	r3, [r7, #0]
 8005afa:	2b30      	cmp	r3, #48	; 0x30
 8005afc:	d10a      	bne.n	8005b14 <__cvt+0x8c>
 8005afe:	2200      	movs	r2, #0
 8005b00:	2300      	movs	r3, #0
 8005b02:	4620      	mov	r0, r4
 8005b04:	4629      	mov	r1, r5
 8005b06:	f7fa ffe7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b0a:	b918      	cbnz	r0, 8005b14 <__cvt+0x8c>
 8005b0c:	f1c6 0601 	rsb	r6, r6, #1
 8005b10:	f8ca 6000 	str.w	r6, [sl]
 8005b14:	f8da 3000 	ldr.w	r3, [sl]
 8005b18:	4499      	add	r9, r3
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4620      	mov	r0, r4
 8005b20:	4629      	mov	r1, r5
 8005b22:	f7fa ffd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b26:	b108      	cbz	r0, 8005b2c <__cvt+0xa4>
 8005b28:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b2c:	2230      	movs	r2, #48	; 0x30
 8005b2e:	9b03      	ldr	r3, [sp, #12]
 8005b30:	454b      	cmp	r3, r9
 8005b32:	d307      	bcc.n	8005b44 <__cvt+0xbc>
 8005b34:	9b03      	ldr	r3, [sp, #12]
 8005b36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b38:	1bdb      	subs	r3, r3, r7
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	b004      	add	sp, #16
 8005b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b44:	1c59      	adds	r1, r3, #1
 8005b46:	9103      	str	r1, [sp, #12]
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	e7f0      	b.n	8005b2e <__cvt+0xa6>

08005b4c <__exponent>:
 8005b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2900      	cmp	r1, #0
 8005b52:	bfb8      	it	lt
 8005b54:	4249      	neglt	r1, r1
 8005b56:	f803 2b02 	strb.w	r2, [r3], #2
 8005b5a:	bfb4      	ite	lt
 8005b5c:	222d      	movlt	r2, #45	; 0x2d
 8005b5e:	222b      	movge	r2, #43	; 0x2b
 8005b60:	2909      	cmp	r1, #9
 8005b62:	7042      	strb	r2, [r0, #1]
 8005b64:	dd2a      	ble.n	8005bbc <__exponent+0x70>
 8005b66:	f10d 0207 	add.w	r2, sp, #7
 8005b6a:	4617      	mov	r7, r2
 8005b6c:	260a      	movs	r6, #10
 8005b6e:	4694      	mov	ip, r2
 8005b70:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b74:	fb06 1415 	mls	r4, r6, r5, r1
 8005b78:	3430      	adds	r4, #48	; 0x30
 8005b7a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005b7e:	460c      	mov	r4, r1
 8005b80:	2c63      	cmp	r4, #99	; 0x63
 8005b82:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b86:	4629      	mov	r1, r5
 8005b88:	dcf1      	bgt.n	8005b6e <__exponent+0x22>
 8005b8a:	3130      	adds	r1, #48	; 0x30
 8005b8c:	f1ac 0402 	sub.w	r4, ip, #2
 8005b90:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b94:	1c41      	adds	r1, r0, #1
 8005b96:	4622      	mov	r2, r4
 8005b98:	42ba      	cmp	r2, r7
 8005b9a:	d30a      	bcc.n	8005bb2 <__exponent+0x66>
 8005b9c:	f10d 0209 	add.w	r2, sp, #9
 8005ba0:	eba2 020c 	sub.w	r2, r2, ip
 8005ba4:	42bc      	cmp	r4, r7
 8005ba6:	bf88      	it	hi
 8005ba8:	2200      	movhi	r2, #0
 8005baa:	4413      	add	r3, r2
 8005bac:	1a18      	subs	r0, r3, r0
 8005bae:	b003      	add	sp, #12
 8005bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005bb6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005bba:	e7ed      	b.n	8005b98 <__exponent+0x4c>
 8005bbc:	2330      	movs	r3, #48	; 0x30
 8005bbe:	3130      	adds	r1, #48	; 0x30
 8005bc0:	7083      	strb	r3, [r0, #2]
 8005bc2:	70c1      	strb	r1, [r0, #3]
 8005bc4:	1d03      	adds	r3, r0, #4
 8005bc6:	e7f1      	b.n	8005bac <__exponent+0x60>

08005bc8 <_printf_float>:
 8005bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	ed2d 8b02 	vpush	{d8}
 8005bd0:	b08d      	sub	sp, #52	; 0x34
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005bd8:	4616      	mov	r6, r2
 8005bda:	461f      	mov	r7, r3
 8005bdc:	4605      	mov	r5, r0
 8005bde:	f000 fef7 	bl	80069d0 <_localeconv_r>
 8005be2:	f8d0 a000 	ldr.w	sl, [r0]
 8005be6:	4650      	mov	r0, sl
 8005be8:	f7fa fb4a 	bl	8000280 <strlen>
 8005bec:	2300      	movs	r3, #0
 8005bee:	930a      	str	r3, [sp, #40]	; 0x28
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	9305      	str	r3, [sp, #20]
 8005bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8005bf8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005bfc:	3307      	adds	r3, #7
 8005bfe:	f023 0307 	bic.w	r3, r3, #7
 8005c02:	f103 0208 	add.w	r2, r3, #8
 8005c06:	f8c8 2000 	str.w	r2, [r8]
 8005c0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c12:	9307      	str	r3, [sp, #28]
 8005c14:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c18:	ee08 0a10 	vmov	s16, r0
 8005c1c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005c20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c24:	4b9e      	ldr	r3, [pc, #632]	; (8005ea0 <_printf_float+0x2d8>)
 8005c26:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2a:	f7fa ff87 	bl	8000b3c <__aeabi_dcmpun>
 8005c2e:	bb88      	cbnz	r0, 8005c94 <_printf_float+0xcc>
 8005c30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c34:	4b9a      	ldr	r3, [pc, #616]	; (8005ea0 <_printf_float+0x2d8>)
 8005c36:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3a:	f7fa ff61 	bl	8000b00 <__aeabi_dcmple>
 8005c3e:	bb48      	cbnz	r0, 8005c94 <_printf_float+0xcc>
 8005c40:	2200      	movs	r2, #0
 8005c42:	2300      	movs	r3, #0
 8005c44:	4640      	mov	r0, r8
 8005c46:	4649      	mov	r1, r9
 8005c48:	f7fa ff50 	bl	8000aec <__aeabi_dcmplt>
 8005c4c:	b110      	cbz	r0, 8005c54 <_printf_float+0x8c>
 8005c4e:	232d      	movs	r3, #45	; 0x2d
 8005c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c54:	4a93      	ldr	r2, [pc, #588]	; (8005ea4 <_printf_float+0x2dc>)
 8005c56:	4b94      	ldr	r3, [pc, #592]	; (8005ea8 <_printf_float+0x2e0>)
 8005c58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c5c:	bf94      	ite	ls
 8005c5e:	4690      	movls	r8, r2
 8005c60:	4698      	movhi	r8, r3
 8005c62:	2303      	movs	r3, #3
 8005c64:	6123      	str	r3, [r4, #16]
 8005c66:	9b05      	ldr	r3, [sp, #20]
 8005c68:	f023 0304 	bic.w	r3, r3, #4
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	f04f 0900 	mov.w	r9, #0
 8005c72:	9700      	str	r7, [sp, #0]
 8005c74:	4633      	mov	r3, r6
 8005c76:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 f9da 	bl	8006034 <_printf_common>
 8005c80:	3001      	adds	r0, #1
 8005c82:	f040 8090 	bne.w	8005da6 <_printf_float+0x1de>
 8005c86:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8a:	b00d      	add	sp, #52	; 0x34
 8005c8c:	ecbd 8b02 	vpop	{d8}
 8005c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c94:	4642      	mov	r2, r8
 8005c96:	464b      	mov	r3, r9
 8005c98:	4640      	mov	r0, r8
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	f7fa ff4e 	bl	8000b3c <__aeabi_dcmpun>
 8005ca0:	b140      	cbz	r0, 8005cb4 <_printf_float+0xec>
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bfbc      	itt	lt
 8005ca8:	232d      	movlt	r3, #45	; 0x2d
 8005caa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005cae:	4a7f      	ldr	r2, [pc, #508]	; (8005eac <_printf_float+0x2e4>)
 8005cb0:	4b7f      	ldr	r3, [pc, #508]	; (8005eb0 <_printf_float+0x2e8>)
 8005cb2:	e7d1      	b.n	8005c58 <_printf_float+0x90>
 8005cb4:	6863      	ldr	r3, [r4, #4]
 8005cb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005cba:	9206      	str	r2, [sp, #24]
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	d13f      	bne.n	8005d40 <_printf_float+0x178>
 8005cc0:	2306      	movs	r3, #6
 8005cc2:	6063      	str	r3, [r4, #4]
 8005cc4:	9b05      	ldr	r3, [sp, #20]
 8005cc6:	6861      	ldr	r1, [r4, #4]
 8005cc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ccc:	2300      	movs	r3, #0
 8005cce:	9303      	str	r3, [sp, #12]
 8005cd0:	ab0a      	add	r3, sp, #40	; 0x28
 8005cd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005cd6:	ab09      	add	r3, sp, #36	; 0x24
 8005cd8:	ec49 8b10 	vmov	d0, r8, r9
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	6022      	str	r2, [r4, #0]
 8005ce0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f7ff fecf 	bl	8005a88 <__cvt>
 8005cea:	9b06      	ldr	r3, [sp, #24]
 8005cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cee:	2b47      	cmp	r3, #71	; 0x47
 8005cf0:	4680      	mov	r8, r0
 8005cf2:	d108      	bne.n	8005d06 <_printf_float+0x13e>
 8005cf4:	1cc8      	adds	r0, r1, #3
 8005cf6:	db02      	blt.n	8005cfe <_printf_float+0x136>
 8005cf8:	6863      	ldr	r3, [r4, #4]
 8005cfa:	4299      	cmp	r1, r3
 8005cfc:	dd41      	ble.n	8005d82 <_printf_float+0x1ba>
 8005cfe:	f1ab 0302 	sub.w	r3, fp, #2
 8005d02:	fa5f fb83 	uxtb.w	fp, r3
 8005d06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d0a:	d820      	bhi.n	8005d4e <_printf_float+0x186>
 8005d0c:	3901      	subs	r1, #1
 8005d0e:	465a      	mov	r2, fp
 8005d10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d14:	9109      	str	r1, [sp, #36]	; 0x24
 8005d16:	f7ff ff19 	bl	8005b4c <__exponent>
 8005d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d1c:	1813      	adds	r3, r2, r0
 8005d1e:	2a01      	cmp	r2, #1
 8005d20:	4681      	mov	r9, r0
 8005d22:	6123      	str	r3, [r4, #16]
 8005d24:	dc02      	bgt.n	8005d2c <_printf_float+0x164>
 8005d26:	6822      	ldr	r2, [r4, #0]
 8005d28:	07d2      	lsls	r2, r2, #31
 8005d2a:	d501      	bpl.n	8005d30 <_printf_float+0x168>
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	6123      	str	r3, [r4, #16]
 8005d30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d09c      	beq.n	8005c72 <_printf_float+0xaa>
 8005d38:	232d      	movs	r3, #45	; 0x2d
 8005d3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d3e:	e798      	b.n	8005c72 <_printf_float+0xaa>
 8005d40:	9a06      	ldr	r2, [sp, #24]
 8005d42:	2a47      	cmp	r2, #71	; 0x47
 8005d44:	d1be      	bne.n	8005cc4 <_printf_float+0xfc>
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1bc      	bne.n	8005cc4 <_printf_float+0xfc>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e7b9      	b.n	8005cc2 <_printf_float+0xfa>
 8005d4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d52:	d118      	bne.n	8005d86 <_printf_float+0x1be>
 8005d54:	2900      	cmp	r1, #0
 8005d56:	6863      	ldr	r3, [r4, #4]
 8005d58:	dd0b      	ble.n	8005d72 <_printf_float+0x1aa>
 8005d5a:	6121      	str	r1, [r4, #16]
 8005d5c:	b913      	cbnz	r3, 8005d64 <_printf_float+0x19c>
 8005d5e:	6822      	ldr	r2, [r4, #0]
 8005d60:	07d0      	lsls	r0, r2, #31
 8005d62:	d502      	bpl.n	8005d6a <_printf_float+0x1a2>
 8005d64:	3301      	adds	r3, #1
 8005d66:	440b      	add	r3, r1
 8005d68:	6123      	str	r3, [r4, #16]
 8005d6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d6c:	f04f 0900 	mov.w	r9, #0
 8005d70:	e7de      	b.n	8005d30 <_printf_float+0x168>
 8005d72:	b913      	cbnz	r3, 8005d7a <_printf_float+0x1b2>
 8005d74:	6822      	ldr	r2, [r4, #0]
 8005d76:	07d2      	lsls	r2, r2, #31
 8005d78:	d501      	bpl.n	8005d7e <_printf_float+0x1b6>
 8005d7a:	3302      	adds	r3, #2
 8005d7c:	e7f4      	b.n	8005d68 <_printf_float+0x1a0>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e7f2      	b.n	8005d68 <_printf_float+0x1a0>
 8005d82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d88:	4299      	cmp	r1, r3
 8005d8a:	db05      	blt.n	8005d98 <_printf_float+0x1d0>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	6121      	str	r1, [r4, #16]
 8005d90:	07d8      	lsls	r0, r3, #31
 8005d92:	d5ea      	bpl.n	8005d6a <_printf_float+0x1a2>
 8005d94:	1c4b      	adds	r3, r1, #1
 8005d96:	e7e7      	b.n	8005d68 <_printf_float+0x1a0>
 8005d98:	2900      	cmp	r1, #0
 8005d9a:	bfd4      	ite	le
 8005d9c:	f1c1 0202 	rsble	r2, r1, #2
 8005da0:	2201      	movgt	r2, #1
 8005da2:	4413      	add	r3, r2
 8005da4:	e7e0      	b.n	8005d68 <_printf_float+0x1a0>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	055a      	lsls	r2, r3, #21
 8005daa:	d407      	bmi.n	8005dbc <_printf_float+0x1f4>
 8005dac:	6923      	ldr	r3, [r4, #16]
 8005dae:	4642      	mov	r2, r8
 8005db0:	4631      	mov	r1, r6
 8005db2:	4628      	mov	r0, r5
 8005db4:	47b8      	blx	r7
 8005db6:	3001      	adds	r0, #1
 8005db8:	d12c      	bne.n	8005e14 <_printf_float+0x24c>
 8005dba:	e764      	b.n	8005c86 <_printf_float+0xbe>
 8005dbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dc0:	f240 80e0 	bls.w	8005f84 <_printf_float+0x3bc>
 8005dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f7fa fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d034      	beq.n	8005e3e <_printf_float+0x276>
 8005dd4:	4a37      	ldr	r2, [pc, #220]	; (8005eb4 <_printf_float+0x2ec>)
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4631      	mov	r1, r6
 8005dda:	4628      	mov	r0, r5
 8005ddc:	47b8      	blx	r7
 8005dde:	3001      	adds	r0, #1
 8005de0:	f43f af51 	beq.w	8005c86 <_printf_float+0xbe>
 8005de4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005de8:	429a      	cmp	r2, r3
 8005dea:	db02      	blt.n	8005df2 <_printf_float+0x22a>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	07d8      	lsls	r0, r3, #31
 8005df0:	d510      	bpl.n	8005e14 <_printf_float+0x24c>
 8005df2:	ee18 3a10 	vmov	r3, s16
 8005df6:	4652      	mov	r2, sl
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	f43f af41 	beq.w	8005c86 <_printf_float+0xbe>
 8005e04:	f04f 0800 	mov.w	r8, #0
 8005e08:	f104 091a 	add.w	r9, r4, #26
 8005e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	4543      	cmp	r3, r8
 8005e12:	dc09      	bgt.n	8005e28 <_printf_float+0x260>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	079b      	lsls	r3, r3, #30
 8005e18:	f100 8107 	bmi.w	800602a <_printf_float+0x462>
 8005e1c:	68e0      	ldr	r0, [r4, #12]
 8005e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e20:	4298      	cmp	r0, r3
 8005e22:	bfb8      	it	lt
 8005e24:	4618      	movlt	r0, r3
 8005e26:	e730      	b.n	8005c8a <_printf_float+0xc2>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	464a      	mov	r2, r9
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	4628      	mov	r0, r5
 8005e30:	47b8      	blx	r7
 8005e32:	3001      	adds	r0, #1
 8005e34:	f43f af27 	beq.w	8005c86 <_printf_float+0xbe>
 8005e38:	f108 0801 	add.w	r8, r8, #1
 8005e3c:	e7e6      	b.n	8005e0c <_printf_float+0x244>
 8005e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	dc39      	bgt.n	8005eb8 <_printf_float+0x2f0>
 8005e44:	4a1b      	ldr	r2, [pc, #108]	; (8005eb4 <_printf_float+0x2ec>)
 8005e46:	2301      	movs	r3, #1
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b8      	blx	r7
 8005e4e:	3001      	adds	r0, #1
 8005e50:	f43f af19 	beq.w	8005c86 <_printf_float+0xbe>
 8005e54:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	d102      	bne.n	8005e62 <_printf_float+0x29a>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	07d9      	lsls	r1, r3, #31
 8005e60:	d5d8      	bpl.n	8005e14 <_printf_float+0x24c>
 8005e62:	ee18 3a10 	vmov	r3, s16
 8005e66:	4652      	mov	r2, sl
 8005e68:	4631      	mov	r1, r6
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	47b8      	blx	r7
 8005e6e:	3001      	adds	r0, #1
 8005e70:	f43f af09 	beq.w	8005c86 <_printf_float+0xbe>
 8005e74:	f04f 0900 	mov.w	r9, #0
 8005e78:	f104 0a1a 	add.w	sl, r4, #26
 8005e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e7e:	425b      	negs	r3, r3
 8005e80:	454b      	cmp	r3, r9
 8005e82:	dc01      	bgt.n	8005e88 <_printf_float+0x2c0>
 8005e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e86:	e792      	b.n	8005dae <_printf_float+0x1e6>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	4652      	mov	r2, sl
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4628      	mov	r0, r5
 8005e90:	47b8      	blx	r7
 8005e92:	3001      	adds	r0, #1
 8005e94:	f43f aef7 	beq.w	8005c86 <_printf_float+0xbe>
 8005e98:	f109 0901 	add.w	r9, r9, #1
 8005e9c:	e7ee      	b.n	8005e7c <_printf_float+0x2b4>
 8005e9e:	bf00      	nop
 8005ea0:	7fefffff 	.word	0x7fefffff
 8005ea4:	0800a268 	.word	0x0800a268
 8005ea8:	0800a26c 	.word	0x0800a26c
 8005eac:	0800a270 	.word	0x0800a270
 8005eb0:	0800a274 	.word	0x0800a274
 8005eb4:	0800a278 	.word	0x0800a278
 8005eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	bfa8      	it	ge
 8005ec0:	461a      	movge	r2, r3
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	4691      	mov	r9, r2
 8005ec6:	dc37      	bgt.n	8005f38 <_printf_float+0x370>
 8005ec8:	f04f 0b00 	mov.w	fp, #0
 8005ecc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ed0:	f104 021a 	add.w	r2, r4, #26
 8005ed4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ed6:	9305      	str	r3, [sp, #20]
 8005ed8:	eba3 0309 	sub.w	r3, r3, r9
 8005edc:	455b      	cmp	r3, fp
 8005ede:	dc33      	bgt.n	8005f48 <_printf_float+0x380>
 8005ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	db3b      	blt.n	8005f60 <_printf_float+0x398>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	07da      	lsls	r2, r3, #31
 8005eec:	d438      	bmi.n	8005f60 <_printf_float+0x398>
 8005eee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005ef2:	eba2 0903 	sub.w	r9, r2, r3
 8005ef6:	9b05      	ldr	r3, [sp, #20]
 8005ef8:	1ad2      	subs	r2, r2, r3
 8005efa:	4591      	cmp	r9, r2
 8005efc:	bfa8      	it	ge
 8005efe:	4691      	movge	r9, r2
 8005f00:	f1b9 0f00 	cmp.w	r9, #0
 8005f04:	dc35      	bgt.n	8005f72 <_printf_float+0x3aa>
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f0e:	f104 0a1a 	add.w	sl, r4, #26
 8005f12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f16:	1a9b      	subs	r3, r3, r2
 8005f18:	eba3 0309 	sub.w	r3, r3, r9
 8005f1c:	4543      	cmp	r3, r8
 8005f1e:	f77f af79 	ble.w	8005e14 <_printf_float+0x24c>
 8005f22:	2301      	movs	r3, #1
 8005f24:	4652      	mov	r2, sl
 8005f26:	4631      	mov	r1, r6
 8005f28:	4628      	mov	r0, r5
 8005f2a:	47b8      	blx	r7
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f43f aeaa 	beq.w	8005c86 <_printf_float+0xbe>
 8005f32:	f108 0801 	add.w	r8, r8, #1
 8005f36:	e7ec      	b.n	8005f12 <_printf_float+0x34a>
 8005f38:	4613      	mov	r3, r2
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	4642      	mov	r2, r8
 8005f3e:	4628      	mov	r0, r5
 8005f40:	47b8      	blx	r7
 8005f42:	3001      	adds	r0, #1
 8005f44:	d1c0      	bne.n	8005ec8 <_printf_float+0x300>
 8005f46:	e69e      	b.n	8005c86 <_printf_float+0xbe>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	9205      	str	r2, [sp, #20]
 8005f50:	47b8      	blx	r7
 8005f52:	3001      	adds	r0, #1
 8005f54:	f43f ae97 	beq.w	8005c86 <_printf_float+0xbe>
 8005f58:	9a05      	ldr	r2, [sp, #20]
 8005f5a:	f10b 0b01 	add.w	fp, fp, #1
 8005f5e:	e7b9      	b.n	8005ed4 <_printf_float+0x30c>
 8005f60:	ee18 3a10 	vmov	r3, s16
 8005f64:	4652      	mov	r2, sl
 8005f66:	4631      	mov	r1, r6
 8005f68:	4628      	mov	r0, r5
 8005f6a:	47b8      	blx	r7
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d1be      	bne.n	8005eee <_printf_float+0x326>
 8005f70:	e689      	b.n	8005c86 <_printf_float+0xbe>
 8005f72:	9a05      	ldr	r2, [sp, #20]
 8005f74:	464b      	mov	r3, r9
 8005f76:	4442      	add	r2, r8
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	47b8      	blx	r7
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d1c1      	bne.n	8005f06 <_printf_float+0x33e>
 8005f82:	e680      	b.n	8005c86 <_printf_float+0xbe>
 8005f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f86:	2a01      	cmp	r2, #1
 8005f88:	dc01      	bgt.n	8005f8e <_printf_float+0x3c6>
 8005f8a:	07db      	lsls	r3, r3, #31
 8005f8c:	d53a      	bpl.n	8006004 <_printf_float+0x43c>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	4642      	mov	r2, r8
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b8      	blx	r7
 8005f98:	3001      	adds	r0, #1
 8005f9a:	f43f ae74 	beq.w	8005c86 <_printf_float+0xbe>
 8005f9e:	ee18 3a10 	vmov	r3, s16
 8005fa2:	4652      	mov	r2, sl
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	47b8      	blx	r7
 8005faa:	3001      	adds	r0, #1
 8005fac:	f43f ae6b 	beq.w	8005c86 <_printf_float+0xbe>
 8005fb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005fbc:	f7fa fd8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fc0:	b9d8      	cbnz	r0, 8005ffa <_printf_float+0x432>
 8005fc2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005fc6:	f108 0201 	add.w	r2, r8, #1
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d10e      	bne.n	8005ff2 <_printf_float+0x42a>
 8005fd4:	e657      	b.n	8005c86 <_printf_float+0xbe>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	4652      	mov	r2, sl
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4628      	mov	r0, r5
 8005fde:	47b8      	blx	r7
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	f43f ae50 	beq.w	8005c86 <_printf_float+0xbe>
 8005fe6:	f108 0801 	add.w	r8, r8, #1
 8005fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fec:	3b01      	subs	r3, #1
 8005fee:	4543      	cmp	r3, r8
 8005ff0:	dcf1      	bgt.n	8005fd6 <_printf_float+0x40e>
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ff8:	e6da      	b.n	8005db0 <_printf_float+0x1e8>
 8005ffa:	f04f 0800 	mov.w	r8, #0
 8005ffe:	f104 0a1a 	add.w	sl, r4, #26
 8006002:	e7f2      	b.n	8005fea <_printf_float+0x422>
 8006004:	2301      	movs	r3, #1
 8006006:	4642      	mov	r2, r8
 8006008:	e7df      	b.n	8005fca <_printf_float+0x402>
 800600a:	2301      	movs	r3, #1
 800600c:	464a      	mov	r2, r9
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	47b8      	blx	r7
 8006014:	3001      	adds	r0, #1
 8006016:	f43f ae36 	beq.w	8005c86 <_printf_float+0xbe>
 800601a:	f108 0801 	add.w	r8, r8, #1
 800601e:	68e3      	ldr	r3, [r4, #12]
 8006020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006022:	1a5b      	subs	r3, r3, r1
 8006024:	4543      	cmp	r3, r8
 8006026:	dcf0      	bgt.n	800600a <_printf_float+0x442>
 8006028:	e6f8      	b.n	8005e1c <_printf_float+0x254>
 800602a:	f04f 0800 	mov.w	r8, #0
 800602e:	f104 0919 	add.w	r9, r4, #25
 8006032:	e7f4      	b.n	800601e <_printf_float+0x456>

08006034 <_printf_common>:
 8006034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006038:	4616      	mov	r6, r2
 800603a:	4699      	mov	r9, r3
 800603c:	688a      	ldr	r2, [r1, #8]
 800603e:	690b      	ldr	r3, [r1, #16]
 8006040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006044:	4293      	cmp	r3, r2
 8006046:	bfb8      	it	lt
 8006048:	4613      	movlt	r3, r2
 800604a:	6033      	str	r3, [r6, #0]
 800604c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006050:	4607      	mov	r7, r0
 8006052:	460c      	mov	r4, r1
 8006054:	b10a      	cbz	r2, 800605a <_printf_common+0x26>
 8006056:	3301      	adds	r3, #1
 8006058:	6033      	str	r3, [r6, #0]
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	0699      	lsls	r1, r3, #26
 800605e:	bf42      	ittt	mi
 8006060:	6833      	ldrmi	r3, [r6, #0]
 8006062:	3302      	addmi	r3, #2
 8006064:	6033      	strmi	r3, [r6, #0]
 8006066:	6825      	ldr	r5, [r4, #0]
 8006068:	f015 0506 	ands.w	r5, r5, #6
 800606c:	d106      	bne.n	800607c <_printf_common+0x48>
 800606e:	f104 0a19 	add.w	sl, r4, #25
 8006072:	68e3      	ldr	r3, [r4, #12]
 8006074:	6832      	ldr	r2, [r6, #0]
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	42ab      	cmp	r3, r5
 800607a:	dc26      	bgt.n	80060ca <_printf_common+0x96>
 800607c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006080:	1e13      	subs	r3, r2, #0
 8006082:	6822      	ldr	r2, [r4, #0]
 8006084:	bf18      	it	ne
 8006086:	2301      	movne	r3, #1
 8006088:	0692      	lsls	r2, r2, #26
 800608a:	d42b      	bmi.n	80060e4 <_printf_common+0xb0>
 800608c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006090:	4649      	mov	r1, r9
 8006092:	4638      	mov	r0, r7
 8006094:	47c0      	blx	r8
 8006096:	3001      	adds	r0, #1
 8006098:	d01e      	beq.n	80060d8 <_printf_common+0xa4>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	6922      	ldr	r2, [r4, #16]
 800609e:	f003 0306 	and.w	r3, r3, #6
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	bf02      	ittt	eq
 80060a6:	68e5      	ldreq	r5, [r4, #12]
 80060a8:	6833      	ldreq	r3, [r6, #0]
 80060aa:	1aed      	subeq	r5, r5, r3
 80060ac:	68a3      	ldr	r3, [r4, #8]
 80060ae:	bf0c      	ite	eq
 80060b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060b4:	2500      	movne	r5, #0
 80060b6:	4293      	cmp	r3, r2
 80060b8:	bfc4      	itt	gt
 80060ba:	1a9b      	subgt	r3, r3, r2
 80060bc:	18ed      	addgt	r5, r5, r3
 80060be:	2600      	movs	r6, #0
 80060c0:	341a      	adds	r4, #26
 80060c2:	42b5      	cmp	r5, r6
 80060c4:	d11a      	bne.n	80060fc <_printf_common+0xc8>
 80060c6:	2000      	movs	r0, #0
 80060c8:	e008      	b.n	80060dc <_printf_common+0xa8>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4652      	mov	r2, sl
 80060ce:	4649      	mov	r1, r9
 80060d0:	4638      	mov	r0, r7
 80060d2:	47c0      	blx	r8
 80060d4:	3001      	adds	r0, #1
 80060d6:	d103      	bne.n	80060e0 <_printf_common+0xac>
 80060d8:	f04f 30ff 	mov.w	r0, #4294967295
 80060dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e0:	3501      	adds	r5, #1
 80060e2:	e7c6      	b.n	8006072 <_printf_common+0x3e>
 80060e4:	18e1      	adds	r1, r4, r3
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	2030      	movs	r0, #48	; 0x30
 80060ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060ee:	4422      	add	r2, r4
 80060f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060f8:	3302      	adds	r3, #2
 80060fa:	e7c7      	b.n	800608c <_printf_common+0x58>
 80060fc:	2301      	movs	r3, #1
 80060fe:	4622      	mov	r2, r4
 8006100:	4649      	mov	r1, r9
 8006102:	4638      	mov	r0, r7
 8006104:	47c0      	blx	r8
 8006106:	3001      	adds	r0, #1
 8006108:	d0e6      	beq.n	80060d8 <_printf_common+0xa4>
 800610a:	3601      	adds	r6, #1
 800610c:	e7d9      	b.n	80060c2 <_printf_common+0x8e>
	...

08006110 <_printf_i>:
 8006110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	7e0f      	ldrb	r7, [r1, #24]
 8006116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006118:	2f78      	cmp	r7, #120	; 0x78
 800611a:	4691      	mov	r9, r2
 800611c:	4680      	mov	r8, r0
 800611e:	460c      	mov	r4, r1
 8006120:	469a      	mov	sl, r3
 8006122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006126:	d807      	bhi.n	8006138 <_printf_i+0x28>
 8006128:	2f62      	cmp	r7, #98	; 0x62
 800612a:	d80a      	bhi.n	8006142 <_printf_i+0x32>
 800612c:	2f00      	cmp	r7, #0
 800612e:	f000 80d4 	beq.w	80062da <_printf_i+0x1ca>
 8006132:	2f58      	cmp	r7, #88	; 0x58
 8006134:	f000 80c0 	beq.w	80062b8 <_printf_i+0x1a8>
 8006138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800613c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006140:	e03a      	b.n	80061b8 <_printf_i+0xa8>
 8006142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006146:	2b15      	cmp	r3, #21
 8006148:	d8f6      	bhi.n	8006138 <_printf_i+0x28>
 800614a:	a101      	add	r1, pc, #4	; (adr r1, 8006150 <_printf_i+0x40>)
 800614c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006150:	080061a9 	.word	0x080061a9
 8006154:	080061bd 	.word	0x080061bd
 8006158:	08006139 	.word	0x08006139
 800615c:	08006139 	.word	0x08006139
 8006160:	08006139 	.word	0x08006139
 8006164:	08006139 	.word	0x08006139
 8006168:	080061bd 	.word	0x080061bd
 800616c:	08006139 	.word	0x08006139
 8006170:	08006139 	.word	0x08006139
 8006174:	08006139 	.word	0x08006139
 8006178:	08006139 	.word	0x08006139
 800617c:	080062c1 	.word	0x080062c1
 8006180:	080061e9 	.word	0x080061e9
 8006184:	0800627b 	.word	0x0800627b
 8006188:	08006139 	.word	0x08006139
 800618c:	08006139 	.word	0x08006139
 8006190:	080062e3 	.word	0x080062e3
 8006194:	08006139 	.word	0x08006139
 8006198:	080061e9 	.word	0x080061e9
 800619c:	08006139 	.word	0x08006139
 80061a0:	08006139 	.word	0x08006139
 80061a4:	08006283 	.word	0x08006283
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	602a      	str	r2, [r5, #0]
 80061b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061b8:	2301      	movs	r3, #1
 80061ba:	e09f      	b.n	80062fc <_printf_i+0x1ec>
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	682b      	ldr	r3, [r5, #0]
 80061c0:	0607      	lsls	r7, r0, #24
 80061c2:	f103 0104 	add.w	r1, r3, #4
 80061c6:	6029      	str	r1, [r5, #0]
 80061c8:	d501      	bpl.n	80061ce <_printf_i+0xbe>
 80061ca:	681e      	ldr	r6, [r3, #0]
 80061cc:	e003      	b.n	80061d6 <_printf_i+0xc6>
 80061ce:	0646      	lsls	r6, r0, #25
 80061d0:	d5fb      	bpl.n	80061ca <_printf_i+0xba>
 80061d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	da03      	bge.n	80061e2 <_printf_i+0xd2>
 80061da:	232d      	movs	r3, #45	; 0x2d
 80061dc:	4276      	negs	r6, r6
 80061de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061e2:	485a      	ldr	r0, [pc, #360]	; (800634c <_printf_i+0x23c>)
 80061e4:	230a      	movs	r3, #10
 80061e6:	e012      	b.n	800620e <_printf_i+0xfe>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	6820      	ldr	r0, [r4, #0]
 80061ec:	1d19      	adds	r1, r3, #4
 80061ee:	6029      	str	r1, [r5, #0]
 80061f0:	0605      	lsls	r5, r0, #24
 80061f2:	d501      	bpl.n	80061f8 <_printf_i+0xe8>
 80061f4:	681e      	ldr	r6, [r3, #0]
 80061f6:	e002      	b.n	80061fe <_printf_i+0xee>
 80061f8:	0641      	lsls	r1, r0, #25
 80061fa:	d5fb      	bpl.n	80061f4 <_printf_i+0xe4>
 80061fc:	881e      	ldrh	r6, [r3, #0]
 80061fe:	4853      	ldr	r0, [pc, #332]	; (800634c <_printf_i+0x23c>)
 8006200:	2f6f      	cmp	r7, #111	; 0x6f
 8006202:	bf0c      	ite	eq
 8006204:	2308      	moveq	r3, #8
 8006206:	230a      	movne	r3, #10
 8006208:	2100      	movs	r1, #0
 800620a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800620e:	6865      	ldr	r5, [r4, #4]
 8006210:	60a5      	str	r5, [r4, #8]
 8006212:	2d00      	cmp	r5, #0
 8006214:	bfa2      	ittt	ge
 8006216:	6821      	ldrge	r1, [r4, #0]
 8006218:	f021 0104 	bicge.w	r1, r1, #4
 800621c:	6021      	strge	r1, [r4, #0]
 800621e:	b90e      	cbnz	r6, 8006224 <_printf_i+0x114>
 8006220:	2d00      	cmp	r5, #0
 8006222:	d04b      	beq.n	80062bc <_printf_i+0x1ac>
 8006224:	4615      	mov	r5, r2
 8006226:	fbb6 f1f3 	udiv	r1, r6, r3
 800622a:	fb03 6711 	mls	r7, r3, r1, r6
 800622e:	5dc7      	ldrb	r7, [r0, r7]
 8006230:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006234:	4637      	mov	r7, r6
 8006236:	42bb      	cmp	r3, r7
 8006238:	460e      	mov	r6, r1
 800623a:	d9f4      	bls.n	8006226 <_printf_i+0x116>
 800623c:	2b08      	cmp	r3, #8
 800623e:	d10b      	bne.n	8006258 <_printf_i+0x148>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	07de      	lsls	r6, r3, #31
 8006244:	d508      	bpl.n	8006258 <_printf_i+0x148>
 8006246:	6923      	ldr	r3, [r4, #16]
 8006248:	6861      	ldr	r1, [r4, #4]
 800624a:	4299      	cmp	r1, r3
 800624c:	bfde      	ittt	le
 800624e:	2330      	movle	r3, #48	; 0x30
 8006250:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006254:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006258:	1b52      	subs	r2, r2, r5
 800625a:	6122      	str	r2, [r4, #16]
 800625c:	f8cd a000 	str.w	sl, [sp]
 8006260:	464b      	mov	r3, r9
 8006262:	aa03      	add	r2, sp, #12
 8006264:	4621      	mov	r1, r4
 8006266:	4640      	mov	r0, r8
 8006268:	f7ff fee4 	bl	8006034 <_printf_common>
 800626c:	3001      	adds	r0, #1
 800626e:	d14a      	bne.n	8006306 <_printf_i+0x1f6>
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	b004      	add	sp, #16
 8006276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	f043 0320 	orr.w	r3, r3, #32
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	4833      	ldr	r0, [pc, #204]	; (8006350 <_printf_i+0x240>)
 8006284:	2778      	movs	r7, #120	; 0x78
 8006286:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	6829      	ldr	r1, [r5, #0]
 800628e:	061f      	lsls	r7, r3, #24
 8006290:	f851 6b04 	ldr.w	r6, [r1], #4
 8006294:	d402      	bmi.n	800629c <_printf_i+0x18c>
 8006296:	065f      	lsls	r7, r3, #25
 8006298:	bf48      	it	mi
 800629a:	b2b6      	uxthmi	r6, r6
 800629c:	07df      	lsls	r7, r3, #31
 800629e:	bf48      	it	mi
 80062a0:	f043 0320 	orrmi.w	r3, r3, #32
 80062a4:	6029      	str	r1, [r5, #0]
 80062a6:	bf48      	it	mi
 80062a8:	6023      	strmi	r3, [r4, #0]
 80062aa:	b91e      	cbnz	r6, 80062b4 <_printf_i+0x1a4>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	f023 0320 	bic.w	r3, r3, #32
 80062b2:	6023      	str	r3, [r4, #0]
 80062b4:	2310      	movs	r3, #16
 80062b6:	e7a7      	b.n	8006208 <_printf_i+0xf8>
 80062b8:	4824      	ldr	r0, [pc, #144]	; (800634c <_printf_i+0x23c>)
 80062ba:	e7e4      	b.n	8006286 <_printf_i+0x176>
 80062bc:	4615      	mov	r5, r2
 80062be:	e7bd      	b.n	800623c <_printf_i+0x12c>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	6826      	ldr	r6, [r4, #0]
 80062c4:	6961      	ldr	r1, [r4, #20]
 80062c6:	1d18      	adds	r0, r3, #4
 80062c8:	6028      	str	r0, [r5, #0]
 80062ca:	0635      	lsls	r5, r6, #24
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	d501      	bpl.n	80062d4 <_printf_i+0x1c4>
 80062d0:	6019      	str	r1, [r3, #0]
 80062d2:	e002      	b.n	80062da <_printf_i+0x1ca>
 80062d4:	0670      	lsls	r0, r6, #25
 80062d6:	d5fb      	bpl.n	80062d0 <_printf_i+0x1c0>
 80062d8:	8019      	strh	r1, [r3, #0]
 80062da:	2300      	movs	r3, #0
 80062dc:	6123      	str	r3, [r4, #16]
 80062de:	4615      	mov	r5, r2
 80062e0:	e7bc      	b.n	800625c <_printf_i+0x14c>
 80062e2:	682b      	ldr	r3, [r5, #0]
 80062e4:	1d1a      	adds	r2, r3, #4
 80062e6:	602a      	str	r2, [r5, #0]
 80062e8:	681d      	ldr	r5, [r3, #0]
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	2100      	movs	r1, #0
 80062ee:	4628      	mov	r0, r5
 80062f0:	f7f9 ff76 	bl	80001e0 <memchr>
 80062f4:	b108      	cbz	r0, 80062fa <_printf_i+0x1ea>
 80062f6:	1b40      	subs	r0, r0, r5
 80062f8:	6060      	str	r0, [r4, #4]
 80062fa:	6863      	ldr	r3, [r4, #4]
 80062fc:	6123      	str	r3, [r4, #16]
 80062fe:	2300      	movs	r3, #0
 8006300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006304:	e7aa      	b.n	800625c <_printf_i+0x14c>
 8006306:	6923      	ldr	r3, [r4, #16]
 8006308:	462a      	mov	r2, r5
 800630a:	4649      	mov	r1, r9
 800630c:	4640      	mov	r0, r8
 800630e:	47d0      	blx	sl
 8006310:	3001      	adds	r0, #1
 8006312:	d0ad      	beq.n	8006270 <_printf_i+0x160>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	079b      	lsls	r3, r3, #30
 8006318:	d413      	bmi.n	8006342 <_printf_i+0x232>
 800631a:	68e0      	ldr	r0, [r4, #12]
 800631c:	9b03      	ldr	r3, [sp, #12]
 800631e:	4298      	cmp	r0, r3
 8006320:	bfb8      	it	lt
 8006322:	4618      	movlt	r0, r3
 8006324:	e7a6      	b.n	8006274 <_printf_i+0x164>
 8006326:	2301      	movs	r3, #1
 8006328:	4632      	mov	r2, r6
 800632a:	4649      	mov	r1, r9
 800632c:	4640      	mov	r0, r8
 800632e:	47d0      	blx	sl
 8006330:	3001      	adds	r0, #1
 8006332:	d09d      	beq.n	8006270 <_printf_i+0x160>
 8006334:	3501      	adds	r5, #1
 8006336:	68e3      	ldr	r3, [r4, #12]
 8006338:	9903      	ldr	r1, [sp, #12]
 800633a:	1a5b      	subs	r3, r3, r1
 800633c:	42ab      	cmp	r3, r5
 800633e:	dcf2      	bgt.n	8006326 <_printf_i+0x216>
 8006340:	e7eb      	b.n	800631a <_printf_i+0x20a>
 8006342:	2500      	movs	r5, #0
 8006344:	f104 0619 	add.w	r6, r4, #25
 8006348:	e7f5      	b.n	8006336 <_printf_i+0x226>
 800634a:	bf00      	nop
 800634c:	0800a27a 	.word	0x0800a27a
 8006350:	0800a28b 	.word	0x0800a28b

08006354 <_scanf_float>:
 8006354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006358:	b087      	sub	sp, #28
 800635a:	4617      	mov	r7, r2
 800635c:	9303      	str	r3, [sp, #12]
 800635e:	688b      	ldr	r3, [r1, #8]
 8006360:	1e5a      	subs	r2, r3, #1
 8006362:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006366:	bf83      	ittte	hi
 8006368:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800636c:	195b      	addhi	r3, r3, r5
 800636e:	9302      	strhi	r3, [sp, #8]
 8006370:	2300      	movls	r3, #0
 8006372:	bf86      	itte	hi
 8006374:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006378:	608b      	strhi	r3, [r1, #8]
 800637a:	9302      	strls	r3, [sp, #8]
 800637c:	680b      	ldr	r3, [r1, #0]
 800637e:	468b      	mov	fp, r1
 8006380:	2500      	movs	r5, #0
 8006382:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006386:	f84b 3b1c 	str.w	r3, [fp], #28
 800638a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800638e:	4680      	mov	r8, r0
 8006390:	460c      	mov	r4, r1
 8006392:	465e      	mov	r6, fp
 8006394:	46aa      	mov	sl, r5
 8006396:	46a9      	mov	r9, r5
 8006398:	9501      	str	r5, [sp, #4]
 800639a:	68a2      	ldr	r2, [r4, #8]
 800639c:	b152      	cbz	r2, 80063b4 <_scanf_float+0x60>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b4e      	cmp	r3, #78	; 0x4e
 80063a4:	d864      	bhi.n	8006470 <_scanf_float+0x11c>
 80063a6:	2b40      	cmp	r3, #64	; 0x40
 80063a8:	d83c      	bhi.n	8006424 <_scanf_float+0xd0>
 80063aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80063ae:	b2c8      	uxtb	r0, r1
 80063b0:	280e      	cmp	r0, #14
 80063b2:	d93a      	bls.n	800642a <_scanf_float+0xd6>
 80063b4:	f1b9 0f00 	cmp.w	r9, #0
 80063b8:	d003      	beq.n	80063c2 <_scanf_float+0x6e>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063c6:	f1ba 0f01 	cmp.w	sl, #1
 80063ca:	f200 8113 	bhi.w	80065f4 <_scanf_float+0x2a0>
 80063ce:	455e      	cmp	r6, fp
 80063d0:	f200 8105 	bhi.w	80065de <_scanf_float+0x28a>
 80063d4:	2501      	movs	r5, #1
 80063d6:	4628      	mov	r0, r5
 80063d8:	b007      	add	sp, #28
 80063da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80063e2:	2a0d      	cmp	r2, #13
 80063e4:	d8e6      	bhi.n	80063b4 <_scanf_float+0x60>
 80063e6:	a101      	add	r1, pc, #4	; (adr r1, 80063ec <_scanf_float+0x98>)
 80063e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80063ec:	0800652b 	.word	0x0800652b
 80063f0:	080063b5 	.word	0x080063b5
 80063f4:	080063b5 	.word	0x080063b5
 80063f8:	080063b5 	.word	0x080063b5
 80063fc:	0800658b 	.word	0x0800658b
 8006400:	08006563 	.word	0x08006563
 8006404:	080063b5 	.word	0x080063b5
 8006408:	080063b5 	.word	0x080063b5
 800640c:	08006539 	.word	0x08006539
 8006410:	080063b5 	.word	0x080063b5
 8006414:	080063b5 	.word	0x080063b5
 8006418:	080063b5 	.word	0x080063b5
 800641c:	080063b5 	.word	0x080063b5
 8006420:	080064f1 	.word	0x080064f1
 8006424:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006428:	e7db      	b.n	80063e2 <_scanf_float+0x8e>
 800642a:	290e      	cmp	r1, #14
 800642c:	d8c2      	bhi.n	80063b4 <_scanf_float+0x60>
 800642e:	a001      	add	r0, pc, #4	; (adr r0, 8006434 <_scanf_float+0xe0>)
 8006430:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006434:	080064e3 	.word	0x080064e3
 8006438:	080063b5 	.word	0x080063b5
 800643c:	080064e3 	.word	0x080064e3
 8006440:	08006577 	.word	0x08006577
 8006444:	080063b5 	.word	0x080063b5
 8006448:	08006491 	.word	0x08006491
 800644c:	080064cd 	.word	0x080064cd
 8006450:	080064cd 	.word	0x080064cd
 8006454:	080064cd 	.word	0x080064cd
 8006458:	080064cd 	.word	0x080064cd
 800645c:	080064cd 	.word	0x080064cd
 8006460:	080064cd 	.word	0x080064cd
 8006464:	080064cd 	.word	0x080064cd
 8006468:	080064cd 	.word	0x080064cd
 800646c:	080064cd 	.word	0x080064cd
 8006470:	2b6e      	cmp	r3, #110	; 0x6e
 8006472:	d809      	bhi.n	8006488 <_scanf_float+0x134>
 8006474:	2b60      	cmp	r3, #96	; 0x60
 8006476:	d8b2      	bhi.n	80063de <_scanf_float+0x8a>
 8006478:	2b54      	cmp	r3, #84	; 0x54
 800647a:	d077      	beq.n	800656c <_scanf_float+0x218>
 800647c:	2b59      	cmp	r3, #89	; 0x59
 800647e:	d199      	bne.n	80063b4 <_scanf_float+0x60>
 8006480:	2d07      	cmp	r5, #7
 8006482:	d197      	bne.n	80063b4 <_scanf_float+0x60>
 8006484:	2508      	movs	r5, #8
 8006486:	e029      	b.n	80064dc <_scanf_float+0x188>
 8006488:	2b74      	cmp	r3, #116	; 0x74
 800648a:	d06f      	beq.n	800656c <_scanf_float+0x218>
 800648c:	2b79      	cmp	r3, #121	; 0x79
 800648e:	e7f6      	b.n	800647e <_scanf_float+0x12a>
 8006490:	6821      	ldr	r1, [r4, #0]
 8006492:	05c8      	lsls	r0, r1, #23
 8006494:	d51a      	bpl.n	80064cc <_scanf_float+0x178>
 8006496:	9b02      	ldr	r3, [sp, #8]
 8006498:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800649c:	6021      	str	r1, [r4, #0]
 800649e:	f109 0901 	add.w	r9, r9, #1
 80064a2:	b11b      	cbz	r3, 80064ac <_scanf_float+0x158>
 80064a4:	3b01      	subs	r3, #1
 80064a6:	3201      	adds	r2, #1
 80064a8:	9302      	str	r3, [sp, #8]
 80064aa:	60a2      	str	r2, [r4, #8]
 80064ac:	68a3      	ldr	r3, [r4, #8]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	60a3      	str	r3, [r4, #8]
 80064b2:	6923      	ldr	r3, [r4, #16]
 80064b4:	3301      	adds	r3, #1
 80064b6:	6123      	str	r3, [r4, #16]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	607b      	str	r3, [r7, #4]
 80064c0:	f340 8084 	ble.w	80065cc <_scanf_float+0x278>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	3301      	adds	r3, #1
 80064c8:	603b      	str	r3, [r7, #0]
 80064ca:	e766      	b.n	800639a <_scanf_float+0x46>
 80064cc:	eb1a 0f05 	cmn.w	sl, r5
 80064d0:	f47f af70 	bne.w	80063b4 <_scanf_float+0x60>
 80064d4:	6822      	ldr	r2, [r4, #0]
 80064d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80064da:	6022      	str	r2, [r4, #0]
 80064dc:	f806 3b01 	strb.w	r3, [r6], #1
 80064e0:	e7e4      	b.n	80064ac <_scanf_float+0x158>
 80064e2:	6822      	ldr	r2, [r4, #0]
 80064e4:	0610      	lsls	r0, r2, #24
 80064e6:	f57f af65 	bpl.w	80063b4 <_scanf_float+0x60>
 80064ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ee:	e7f4      	b.n	80064da <_scanf_float+0x186>
 80064f0:	f1ba 0f00 	cmp.w	sl, #0
 80064f4:	d10e      	bne.n	8006514 <_scanf_float+0x1c0>
 80064f6:	f1b9 0f00 	cmp.w	r9, #0
 80064fa:	d10e      	bne.n	800651a <_scanf_float+0x1c6>
 80064fc:	6822      	ldr	r2, [r4, #0]
 80064fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006502:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006506:	d108      	bne.n	800651a <_scanf_float+0x1c6>
 8006508:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800650c:	6022      	str	r2, [r4, #0]
 800650e:	f04f 0a01 	mov.w	sl, #1
 8006512:	e7e3      	b.n	80064dc <_scanf_float+0x188>
 8006514:	f1ba 0f02 	cmp.w	sl, #2
 8006518:	d055      	beq.n	80065c6 <_scanf_float+0x272>
 800651a:	2d01      	cmp	r5, #1
 800651c:	d002      	beq.n	8006524 <_scanf_float+0x1d0>
 800651e:	2d04      	cmp	r5, #4
 8006520:	f47f af48 	bne.w	80063b4 <_scanf_float+0x60>
 8006524:	3501      	adds	r5, #1
 8006526:	b2ed      	uxtb	r5, r5
 8006528:	e7d8      	b.n	80064dc <_scanf_float+0x188>
 800652a:	f1ba 0f01 	cmp.w	sl, #1
 800652e:	f47f af41 	bne.w	80063b4 <_scanf_float+0x60>
 8006532:	f04f 0a02 	mov.w	sl, #2
 8006536:	e7d1      	b.n	80064dc <_scanf_float+0x188>
 8006538:	b97d      	cbnz	r5, 800655a <_scanf_float+0x206>
 800653a:	f1b9 0f00 	cmp.w	r9, #0
 800653e:	f47f af3c 	bne.w	80063ba <_scanf_float+0x66>
 8006542:	6822      	ldr	r2, [r4, #0]
 8006544:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006548:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800654c:	f47f af39 	bne.w	80063c2 <_scanf_float+0x6e>
 8006550:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006554:	6022      	str	r2, [r4, #0]
 8006556:	2501      	movs	r5, #1
 8006558:	e7c0      	b.n	80064dc <_scanf_float+0x188>
 800655a:	2d03      	cmp	r5, #3
 800655c:	d0e2      	beq.n	8006524 <_scanf_float+0x1d0>
 800655e:	2d05      	cmp	r5, #5
 8006560:	e7de      	b.n	8006520 <_scanf_float+0x1cc>
 8006562:	2d02      	cmp	r5, #2
 8006564:	f47f af26 	bne.w	80063b4 <_scanf_float+0x60>
 8006568:	2503      	movs	r5, #3
 800656a:	e7b7      	b.n	80064dc <_scanf_float+0x188>
 800656c:	2d06      	cmp	r5, #6
 800656e:	f47f af21 	bne.w	80063b4 <_scanf_float+0x60>
 8006572:	2507      	movs	r5, #7
 8006574:	e7b2      	b.n	80064dc <_scanf_float+0x188>
 8006576:	6822      	ldr	r2, [r4, #0]
 8006578:	0591      	lsls	r1, r2, #22
 800657a:	f57f af1b 	bpl.w	80063b4 <_scanf_float+0x60>
 800657e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006582:	6022      	str	r2, [r4, #0]
 8006584:	f8cd 9004 	str.w	r9, [sp, #4]
 8006588:	e7a8      	b.n	80064dc <_scanf_float+0x188>
 800658a:	6822      	ldr	r2, [r4, #0]
 800658c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006590:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006594:	d006      	beq.n	80065a4 <_scanf_float+0x250>
 8006596:	0550      	lsls	r0, r2, #21
 8006598:	f57f af0c 	bpl.w	80063b4 <_scanf_float+0x60>
 800659c:	f1b9 0f00 	cmp.w	r9, #0
 80065a0:	f43f af0f 	beq.w	80063c2 <_scanf_float+0x6e>
 80065a4:	0591      	lsls	r1, r2, #22
 80065a6:	bf58      	it	pl
 80065a8:	9901      	ldrpl	r1, [sp, #4]
 80065aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80065ae:	bf58      	it	pl
 80065b0:	eba9 0101 	subpl.w	r1, r9, r1
 80065b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80065b8:	bf58      	it	pl
 80065ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80065be:	6022      	str	r2, [r4, #0]
 80065c0:	f04f 0900 	mov.w	r9, #0
 80065c4:	e78a      	b.n	80064dc <_scanf_float+0x188>
 80065c6:	f04f 0a03 	mov.w	sl, #3
 80065ca:	e787      	b.n	80064dc <_scanf_float+0x188>
 80065cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065d0:	4639      	mov	r1, r7
 80065d2:	4640      	mov	r0, r8
 80065d4:	4798      	blx	r3
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f43f aedf 	beq.w	800639a <_scanf_float+0x46>
 80065dc:	e6ea      	b.n	80063b4 <_scanf_float+0x60>
 80065de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065e6:	463a      	mov	r2, r7
 80065e8:	4640      	mov	r0, r8
 80065ea:	4798      	blx	r3
 80065ec:	6923      	ldr	r3, [r4, #16]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	6123      	str	r3, [r4, #16]
 80065f2:	e6ec      	b.n	80063ce <_scanf_float+0x7a>
 80065f4:	1e6b      	subs	r3, r5, #1
 80065f6:	2b06      	cmp	r3, #6
 80065f8:	d825      	bhi.n	8006646 <_scanf_float+0x2f2>
 80065fa:	2d02      	cmp	r5, #2
 80065fc:	d836      	bhi.n	800666c <_scanf_float+0x318>
 80065fe:	455e      	cmp	r6, fp
 8006600:	f67f aee8 	bls.w	80063d4 <_scanf_float+0x80>
 8006604:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006608:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800660c:	463a      	mov	r2, r7
 800660e:	4640      	mov	r0, r8
 8006610:	4798      	blx	r3
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	3b01      	subs	r3, #1
 8006616:	6123      	str	r3, [r4, #16]
 8006618:	e7f1      	b.n	80065fe <_scanf_float+0x2aa>
 800661a:	9802      	ldr	r0, [sp, #8]
 800661c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006620:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006624:	9002      	str	r0, [sp, #8]
 8006626:	463a      	mov	r2, r7
 8006628:	4640      	mov	r0, r8
 800662a:	4798      	blx	r3
 800662c:	6923      	ldr	r3, [r4, #16]
 800662e:	3b01      	subs	r3, #1
 8006630:	6123      	str	r3, [r4, #16]
 8006632:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006636:	fa5f fa8a 	uxtb.w	sl, sl
 800663a:	f1ba 0f02 	cmp.w	sl, #2
 800663e:	d1ec      	bne.n	800661a <_scanf_float+0x2c6>
 8006640:	3d03      	subs	r5, #3
 8006642:	b2ed      	uxtb	r5, r5
 8006644:	1b76      	subs	r6, r6, r5
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	05da      	lsls	r2, r3, #23
 800664a:	d52f      	bpl.n	80066ac <_scanf_float+0x358>
 800664c:	055b      	lsls	r3, r3, #21
 800664e:	d510      	bpl.n	8006672 <_scanf_float+0x31e>
 8006650:	455e      	cmp	r6, fp
 8006652:	f67f aebf 	bls.w	80063d4 <_scanf_float+0x80>
 8006656:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800665a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800665e:	463a      	mov	r2, r7
 8006660:	4640      	mov	r0, r8
 8006662:	4798      	blx	r3
 8006664:	6923      	ldr	r3, [r4, #16]
 8006666:	3b01      	subs	r3, #1
 8006668:	6123      	str	r3, [r4, #16]
 800666a:	e7f1      	b.n	8006650 <_scanf_float+0x2fc>
 800666c:	46aa      	mov	sl, r5
 800666e:	9602      	str	r6, [sp, #8]
 8006670:	e7df      	b.n	8006632 <_scanf_float+0x2de>
 8006672:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	2965      	cmp	r1, #101	; 0x65
 800667a:	f103 33ff 	add.w	r3, r3, #4294967295
 800667e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006682:	6123      	str	r3, [r4, #16]
 8006684:	d00c      	beq.n	80066a0 <_scanf_float+0x34c>
 8006686:	2945      	cmp	r1, #69	; 0x45
 8006688:	d00a      	beq.n	80066a0 <_scanf_float+0x34c>
 800668a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800668e:	463a      	mov	r2, r7
 8006690:	4640      	mov	r0, r8
 8006692:	4798      	blx	r3
 8006694:	6923      	ldr	r3, [r4, #16]
 8006696:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800669a:	3b01      	subs	r3, #1
 800669c:	1eb5      	subs	r5, r6, #2
 800669e:	6123      	str	r3, [r4, #16]
 80066a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066a4:	463a      	mov	r2, r7
 80066a6:	4640      	mov	r0, r8
 80066a8:	4798      	blx	r3
 80066aa:	462e      	mov	r6, r5
 80066ac:	6825      	ldr	r5, [r4, #0]
 80066ae:	f015 0510 	ands.w	r5, r5, #16
 80066b2:	d158      	bne.n	8006766 <_scanf_float+0x412>
 80066b4:	7035      	strb	r5, [r6, #0]
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c0:	d11c      	bne.n	80066fc <_scanf_float+0x3a8>
 80066c2:	9b01      	ldr	r3, [sp, #4]
 80066c4:	454b      	cmp	r3, r9
 80066c6:	eba3 0209 	sub.w	r2, r3, r9
 80066ca:	d124      	bne.n	8006716 <_scanf_float+0x3c2>
 80066cc:	2200      	movs	r2, #0
 80066ce:	4659      	mov	r1, fp
 80066d0:	4640      	mov	r0, r8
 80066d2:	f002 fc31 	bl	8008f38 <_strtod_r>
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	6821      	ldr	r1, [r4, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f011 0f02 	tst.w	r1, #2
 80066e0:	ec57 6b10 	vmov	r6, r7, d0
 80066e4:	f103 0204 	add.w	r2, r3, #4
 80066e8:	d020      	beq.n	800672c <_scanf_float+0x3d8>
 80066ea:	9903      	ldr	r1, [sp, #12]
 80066ec:	600a      	str	r2, [r1, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	e9c3 6700 	strd	r6, r7, [r3]
 80066f4:	68e3      	ldr	r3, [r4, #12]
 80066f6:	3301      	adds	r3, #1
 80066f8:	60e3      	str	r3, [r4, #12]
 80066fa:	e66c      	b.n	80063d6 <_scanf_float+0x82>
 80066fc:	9b04      	ldr	r3, [sp, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0e4      	beq.n	80066cc <_scanf_float+0x378>
 8006702:	9905      	ldr	r1, [sp, #20]
 8006704:	230a      	movs	r3, #10
 8006706:	462a      	mov	r2, r5
 8006708:	3101      	adds	r1, #1
 800670a:	4640      	mov	r0, r8
 800670c:	f002 fc9c 	bl	8009048 <_strtol_r>
 8006710:	9b04      	ldr	r3, [sp, #16]
 8006712:	9e05      	ldr	r6, [sp, #20]
 8006714:	1ac2      	subs	r2, r0, r3
 8006716:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800671a:	429e      	cmp	r6, r3
 800671c:	bf28      	it	cs
 800671e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006722:	4912      	ldr	r1, [pc, #72]	; (800676c <_scanf_float+0x418>)
 8006724:	4630      	mov	r0, r6
 8006726:	f000 f8e7 	bl	80068f8 <siprintf>
 800672a:	e7cf      	b.n	80066cc <_scanf_float+0x378>
 800672c:	f011 0f04 	tst.w	r1, #4
 8006730:	9903      	ldr	r1, [sp, #12]
 8006732:	600a      	str	r2, [r1, #0]
 8006734:	d1db      	bne.n	80066ee <_scanf_float+0x39a>
 8006736:	f8d3 8000 	ldr.w	r8, [r3]
 800673a:	ee10 2a10 	vmov	r2, s0
 800673e:	ee10 0a10 	vmov	r0, s0
 8006742:	463b      	mov	r3, r7
 8006744:	4639      	mov	r1, r7
 8006746:	f7fa f9f9 	bl	8000b3c <__aeabi_dcmpun>
 800674a:	b128      	cbz	r0, 8006758 <_scanf_float+0x404>
 800674c:	4808      	ldr	r0, [pc, #32]	; (8006770 <_scanf_float+0x41c>)
 800674e:	f000 f9b7 	bl	8006ac0 <nanf>
 8006752:	ed88 0a00 	vstr	s0, [r8]
 8006756:	e7cd      	b.n	80066f4 <_scanf_float+0x3a0>
 8006758:	4630      	mov	r0, r6
 800675a:	4639      	mov	r1, r7
 800675c:	f7fa fa4c 	bl	8000bf8 <__aeabi_d2f>
 8006760:	f8c8 0000 	str.w	r0, [r8]
 8006764:	e7c6      	b.n	80066f4 <_scanf_float+0x3a0>
 8006766:	2500      	movs	r5, #0
 8006768:	e635      	b.n	80063d6 <_scanf_float+0x82>
 800676a:	bf00      	nop
 800676c:	0800a29c 	.word	0x0800a29c
 8006770:	0800a62d 	.word	0x0800a62d

08006774 <std>:
 8006774:	2300      	movs	r3, #0
 8006776:	b510      	push	{r4, lr}
 8006778:	4604      	mov	r4, r0
 800677a:	e9c0 3300 	strd	r3, r3, [r0]
 800677e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006782:	6083      	str	r3, [r0, #8]
 8006784:	8181      	strh	r1, [r0, #12]
 8006786:	6643      	str	r3, [r0, #100]	; 0x64
 8006788:	81c2      	strh	r2, [r0, #14]
 800678a:	6183      	str	r3, [r0, #24]
 800678c:	4619      	mov	r1, r3
 800678e:	2208      	movs	r2, #8
 8006790:	305c      	adds	r0, #92	; 0x5c
 8006792:	f000 f914 	bl	80069be <memset>
 8006796:	4b0d      	ldr	r3, [pc, #52]	; (80067cc <std+0x58>)
 8006798:	6263      	str	r3, [r4, #36]	; 0x24
 800679a:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <std+0x5c>)
 800679c:	62a3      	str	r3, [r4, #40]	; 0x28
 800679e:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <std+0x60>)
 80067a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067a2:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <std+0x64>)
 80067a4:	6323      	str	r3, [r4, #48]	; 0x30
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <std+0x68>)
 80067a8:	6224      	str	r4, [r4, #32]
 80067aa:	429c      	cmp	r4, r3
 80067ac:	d006      	beq.n	80067bc <std+0x48>
 80067ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80067b2:	4294      	cmp	r4, r2
 80067b4:	d002      	beq.n	80067bc <std+0x48>
 80067b6:	33d0      	adds	r3, #208	; 0xd0
 80067b8:	429c      	cmp	r4, r3
 80067ba:	d105      	bne.n	80067c8 <std+0x54>
 80067bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c4:	f000 b978 	b.w	8006ab8 <__retarget_lock_init_recursive>
 80067c8:	bd10      	pop	{r4, pc}
 80067ca:	bf00      	nop
 80067cc:	08006939 	.word	0x08006939
 80067d0:	0800695b 	.word	0x0800695b
 80067d4:	08006993 	.word	0x08006993
 80067d8:	080069b7 	.word	0x080069b7
 80067dc:	200003c4 	.word	0x200003c4

080067e0 <stdio_exit_handler>:
 80067e0:	4a02      	ldr	r2, [pc, #8]	; (80067ec <stdio_exit_handler+0xc>)
 80067e2:	4903      	ldr	r1, [pc, #12]	; (80067f0 <stdio_exit_handler+0x10>)
 80067e4:	4803      	ldr	r0, [pc, #12]	; (80067f4 <stdio_exit_handler+0x14>)
 80067e6:	f000 b869 	b.w	80068bc <_fwalk_sglue>
 80067ea:	bf00      	nop
 80067ec:	20000010 	.word	0x20000010
 80067f0:	08009409 	.word	0x08009409
 80067f4:	2000001c 	.word	0x2000001c

080067f8 <cleanup_stdio>:
 80067f8:	6841      	ldr	r1, [r0, #4]
 80067fa:	4b0c      	ldr	r3, [pc, #48]	; (800682c <cleanup_stdio+0x34>)
 80067fc:	4299      	cmp	r1, r3
 80067fe:	b510      	push	{r4, lr}
 8006800:	4604      	mov	r4, r0
 8006802:	d001      	beq.n	8006808 <cleanup_stdio+0x10>
 8006804:	f002 fe00 	bl	8009408 <_fflush_r>
 8006808:	68a1      	ldr	r1, [r4, #8]
 800680a:	4b09      	ldr	r3, [pc, #36]	; (8006830 <cleanup_stdio+0x38>)
 800680c:	4299      	cmp	r1, r3
 800680e:	d002      	beq.n	8006816 <cleanup_stdio+0x1e>
 8006810:	4620      	mov	r0, r4
 8006812:	f002 fdf9 	bl	8009408 <_fflush_r>
 8006816:	68e1      	ldr	r1, [r4, #12]
 8006818:	4b06      	ldr	r3, [pc, #24]	; (8006834 <cleanup_stdio+0x3c>)
 800681a:	4299      	cmp	r1, r3
 800681c:	d004      	beq.n	8006828 <cleanup_stdio+0x30>
 800681e:	4620      	mov	r0, r4
 8006820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006824:	f002 bdf0 	b.w	8009408 <_fflush_r>
 8006828:	bd10      	pop	{r4, pc}
 800682a:	bf00      	nop
 800682c:	200003c4 	.word	0x200003c4
 8006830:	2000042c 	.word	0x2000042c
 8006834:	20000494 	.word	0x20000494

08006838 <global_stdio_init.part.0>:
 8006838:	b510      	push	{r4, lr}
 800683a:	4b0b      	ldr	r3, [pc, #44]	; (8006868 <global_stdio_init.part.0+0x30>)
 800683c:	4c0b      	ldr	r4, [pc, #44]	; (800686c <global_stdio_init.part.0+0x34>)
 800683e:	4a0c      	ldr	r2, [pc, #48]	; (8006870 <global_stdio_init.part.0+0x38>)
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	4620      	mov	r0, r4
 8006844:	2200      	movs	r2, #0
 8006846:	2104      	movs	r1, #4
 8006848:	f7ff ff94 	bl	8006774 <std>
 800684c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006850:	2201      	movs	r2, #1
 8006852:	2109      	movs	r1, #9
 8006854:	f7ff ff8e 	bl	8006774 <std>
 8006858:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800685c:	2202      	movs	r2, #2
 800685e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006862:	2112      	movs	r1, #18
 8006864:	f7ff bf86 	b.w	8006774 <std>
 8006868:	200004fc 	.word	0x200004fc
 800686c:	200003c4 	.word	0x200003c4
 8006870:	080067e1 	.word	0x080067e1

08006874 <__sfp_lock_acquire>:
 8006874:	4801      	ldr	r0, [pc, #4]	; (800687c <__sfp_lock_acquire+0x8>)
 8006876:	f000 b920 	b.w	8006aba <__retarget_lock_acquire_recursive>
 800687a:	bf00      	nop
 800687c:	20000505 	.word	0x20000505

08006880 <__sfp_lock_release>:
 8006880:	4801      	ldr	r0, [pc, #4]	; (8006888 <__sfp_lock_release+0x8>)
 8006882:	f000 b91b 	b.w	8006abc <__retarget_lock_release_recursive>
 8006886:	bf00      	nop
 8006888:	20000505 	.word	0x20000505

0800688c <__sinit>:
 800688c:	b510      	push	{r4, lr}
 800688e:	4604      	mov	r4, r0
 8006890:	f7ff fff0 	bl	8006874 <__sfp_lock_acquire>
 8006894:	6a23      	ldr	r3, [r4, #32]
 8006896:	b11b      	cbz	r3, 80068a0 <__sinit+0x14>
 8006898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800689c:	f7ff bff0 	b.w	8006880 <__sfp_lock_release>
 80068a0:	4b04      	ldr	r3, [pc, #16]	; (80068b4 <__sinit+0x28>)
 80068a2:	6223      	str	r3, [r4, #32]
 80068a4:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <__sinit+0x2c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1f5      	bne.n	8006898 <__sinit+0xc>
 80068ac:	f7ff ffc4 	bl	8006838 <global_stdio_init.part.0>
 80068b0:	e7f2      	b.n	8006898 <__sinit+0xc>
 80068b2:	bf00      	nop
 80068b4:	080067f9 	.word	0x080067f9
 80068b8:	200004fc 	.word	0x200004fc

080068bc <_fwalk_sglue>:
 80068bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c0:	4607      	mov	r7, r0
 80068c2:	4688      	mov	r8, r1
 80068c4:	4614      	mov	r4, r2
 80068c6:	2600      	movs	r6, #0
 80068c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068cc:	f1b9 0901 	subs.w	r9, r9, #1
 80068d0:	d505      	bpl.n	80068de <_fwalk_sglue+0x22>
 80068d2:	6824      	ldr	r4, [r4, #0]
 80068d4:	2c00      	cmp	r4, #0
 80068d6:	d1f7      	bne.n	80068c8 <_fwalk_sglue+0xc>
 80068d8:	4630      	mov	r0, r6
 80068da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068de:	89ab      	ldrh	r3, [r5, #12]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d907      	bls.n	80068f4 <_fwalk_sglue+0x38>
 80068e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068e8:	3301      	adds	r3, #1
 80068ea:	d003      	beq.n	80068f4 <_fwalk_sglue+0x38>
 80068ec:	4629      	mov	r1, r5
 80068ee:	4638      	mov	r0, r7
 80068f0:	47c0      	blx	r8
 80068f2:	4306      	orrs	r6, r0
 80068f4:	3568      	adds	r5, #104	; 0x68
 80068f6:	e7e9      	b.n	80068cc <_fwalk_sglue+0x10>

080068f8 <siprintf>:
 80068f8:	b40e      	push	{r1, r2, r3}
 80068fa:	b500      	push	{lr}
 80068fc:	b09c      	sub	sp, #112	; 0x70
 80068fe:	ab1d      	add	r3, sp, #116	; 0x74
 8006900:	9002      	str	r0, [sp, #8]
 8006902:	9006      	str	r0, [sp, #24]
 8006904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006908:	4809      	ldr	r0, [pc, #36]	; (8006930 <siprintf+0x38>)
 800690a:	9107      	str	r1, [sp, #28]
 800690c:	9104      	str	r1, [sp, #16]
 800690e:	4909      	ldr	r1, [pc, #36]	; (8006934 <siprintf+0x3c>)
 8006910:	f853 2b04 	ldr.w	r2, [r3], #4
 8006914:	9105      	str	r1, [sp, #20]
 8006916:	6800      	ldr	r0, [r0, #0]
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	a902      	add	r1, sp, #8
 800691c:	f002 fbf0 	bl	8009100 <_svfiprintf_r>
 8006920:	9b02      	ldr	r3, [sp, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	b01c      	add	sp, #112	; 0x70
 8006928:	f85d eb04 	ldr.w	lr, [sp], #4
 800692c:	b003      	add	sp, #12
 800692e:	4770      	bx	lr
 8006930:	20000068 	.word	0x20000068
 8006934:	ffff0208 	.word	0xffff0208

08006938 <__sread>:
 8006938:	b510      	push	{r4, lr}
 800693a:	460c      	mov	r4, r1
 800693c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006940:	f000 f86c 	bl	8006a1c <_read_r>
 8006944:	2800      	cmp	r0, #0
 8006946:	bfab      	itete	ge
 8006948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800694a:	89a3      	ldrhlt	r3, [r4, #12]
 800694c:	181b      	addge	r3, r3, r0
 800694e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006952:	bfac      	ite	ge
 8006954:	6563      	strge	r3, [r4, #84]	; 0x54
 8006956:	81a3      	strhlt	r3, [r4, #12]
 8006958:	bd10      	pop	{r4, pc}

0800695a <__swrite>:
 800695a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800695e:	461f      	mov	r7, r3
 8006960:	898b      	ldrh	r3, [r1, #12]
 8006962:	05db      	lsls	r3, r3, #23
 8006964:	4605      	mov	r5, r0
 8006966:	460c      	mov	r4, r1
 8006968:	4616      	mov	r6, r2
 800696a:	d505      	bpl.n	8006978 <__swrite+0x1e>
 800696c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006970:	2302      	movs	r3, #2
 8006972:	2200      	movs	r2, #0
 8006974:	f000 f840 	bl	80069f8 <_lseek_r>
 8006978:	89a3      	ldrh	r3, [r4, #12]
 800697a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800697e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006982:	81a3      	strh	r3, [r4, #12]
 8006984:	4632      	mov	r2, r6
 8006986:	463b      	mov	r3, r7
 8006988:	4628      	mov	r0, r5
 800698a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800698e:	f000 b857 	b.w	8006a40 <_write_r>

08006992 <__sseek>:
 8006992:	b510      	push	{r4, lr}
 8006994:	460c      	mov	r4, r1
 8006996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800699a:	f000 f82d 	bl	80069f8 <_lseek_r>
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	bf15      	itete	ne
 80069a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80069a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069ae:	81a3      	strheq	r3, [r4, #12]
 80069b0:	bf18      	it	ne
 80069b2:	81a3      	strhne	r3, [r4, #12]
 80069b4:	bd10      	pop	{r4, pc}

080069b6 <__sclose>:
 80069b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ba:	f000 b80d 	b.w	80069d8 <_close_r>

080069be <memset>:
 80069be:	4402      	add	r2, r0
 80069c0:	4603      	mov	r3, r0
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d100      	bne.n	80069c8 <memset+0xa>
 80069c6:	4770      	bx	lr
 80069c8:	f803 1b01 	strb.w	r1, [r3], #1
 80069cc:	e7f9      	b.n	80069c2 <memset+0x4>
	...

080069d0 <_localeconv_r>:
 80069d0:	4800      	ldr	r0, [pc, #0]	; (80069d4 <_localeconv_r+0x4>)
 80069d2:	4770      	bx	lr
 80069d4:	2000015c 	.word	0x2000015c

080069d8 <_close_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4d06      	ldr	r5, [pc, #24]	; (80069f4 <_close_r+0x1c>)
 80069dc:	2300      	movs	r3, #0
 80069de:	4604      	mov	r4, r0
 80069e0:	4608      	mov	r0, r1
 80069e2:	602b      	str	r3, [r5, #0]
 80069e4:	f7fc f8f7 	bl	8002bd6 <_close>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d102      	bne.n	80069f2 <_close_r+0x1a>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	b103      	cbz	r3, 80069f2 <_close_r+0x1a>
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	20000500 	.word	0x20000500

080069f8 <_lseek_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4d07      	ldr	r5, [pc, #28]	; (8006a18 <_lseek_r+0x20>)
 80069fc:	4604      	mov	r4, r0
 80069fe:	4608      	mov	r0, r1
 8006a00:	4611      	mov	r1, r2
 8006a02:	2200      	movs	r2, #0
 8006a04:	602a      	str	r2, [r5, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f7fc f90c 	bl	8002c24 <_lseek>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_lseek_r+0x1e>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_lseek_r+0x1e>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	20000500 	.word	0x20000500

08006a1c <_read_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d07      	ldr	r5, [pc, #28]	; (8006a3c <_read_r+0x20>)
 8006a20:	4604      	mov	r4, r0
 8006a22:	4608      	mov	r0, r1
 8006a24:	4611      	mov	r1, r2
 8006a26:	2200      	movs	r2, #0
 8006a28:	602a      	str	r2, [r5, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f7fc f89a 	bl	8002b64 <_read>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_read_r+0x1e>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_read_r+0x1e>
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	20000500 	.word	0x20000500

08006a40 <_write_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4d07      	ldr	r5, [pc, #28]	; (8006a60 <_write_r+0x20>)
 8006a44:	4604      	mov	r4, r0
 8006a46:	4608      	mov	r0, r1
 8006a48:	4611      	mov	r1, r2
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	602a      	str	r2, [r5, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f7fc f8a5 	bl	8002b9e <_write>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d102      	bne.n	8006a5e <_write_r+0x1e>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	b103      	cbz	r3, 8006a5e <_write_r+0x1e>
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	20000500 	.word	0x20000500

08006a64 <__errno>:
 8006a64:	4b01      	ldr	r3, [pc, #4]	; (8006a6c <__errno+0x8>)
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	20000068 	.word	0x20000068

08006a70 <__libc_init_array>:
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	4d0d      	ldr	r5, [pc, #52]	; (8006aa8 <__libc_init_array+0x38>)
 8006a74:	4c0d      	ldr	r4, [pc, #52]	; (8006aac <__libc_init_array+0x3c>)
 8006a76:	1b64      	subs	r4, r4, r5
 8006a78:	10a4      	asrs	r4, r4, #2
 8006a7a:	2600      	movs	r6, #0
 8006a7c:	42a6      	cmp	r6, r4
 8006a7e:	d109      	bne.n	8006a94 <__libc_init_array+0x24>
 8006a80:	4d0b      	ldr	r5, [pc, #44]	; (8006ab0 <__libc_init_array+0x40>)
 8006a82:	4c0c      	ldr	r4, [pc, #48]	; (8006ab4 <__libc_init_array+0x44>)
 8006a84:	f003 fbd8 	bl	800a238 <_init>
 8006a88:	1b64      	subs	r4, r4, r5
 8006a8a:	10a4      	asrs	r4, r4, #2
 8006a8c:	2600      	movs	r6, #0
 8006a8e:	42a6      	cmp	r6, r4
 8006a90:	d105      	bne.n	8006a9e <__libc_init_array+0x2e>
 8006a92:	bd70      	pop	{r4, r5, r6, pc}
 8006a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a98:	4798      	blx	r3
 8006a9a:	3601      	adds	r6, #1
 8006a9c:	e7ee      	b.n	8006a7c <__libc_init_array+0xc>
 8006a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa2:	4798      	blx	r3
 8006aa4:	3601      	adds	r6, #1
 8006aa6:	e7f2      	b.n	8006a8e <__libc_init_array+0x1e>
 8006aa8:	0800a698 	.word	0x0800a698
 8006aac:	0800a698 	.word	0x0800a698
 8006ab0:	0800a698 	.word	0x0800a698
 8006ab4:	0800a69c 	.word	0x0800a69c

08006ab8 <__retarget_lock_init_recursive>:
 8006ab8:	4770      	bx	lr

08006aba <__retarget_lock_acquire_recursive>:
 8006aba:	4770      	bx	lr

08006abc <__retarget_lock_release_recursive>:
 8006abc:	4770      	bx	lr
	...

08006ac0 <nanf>:
 8006ac0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006ac8 <nanf+0x8>
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	7fc00000 	.word	0x7fc00000

08006acc <quorem>:
 8006acc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad0:	6903      	ldr	r3, [r0, #16]
 8006ad2:	690c      	ldr	r4, [r1, #16]
 8006ad4:	42a3      	cmp	r3, r4
 8006ad6:	4607      	mov	r7, r0
 8006ad8:	db7e      	blt.n	8006bd8 <quorem+0x10c>
 8006ada:	3c01      	subs	r4, #1
 8006adc:	f101 0814 	add.w	r8, r1, #20
 8006ae0:	f100 0514 	add.w	r5, r0, #20
 8006ae4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ae8:	9301      	str	r3, [sp, #4]
 8006aea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006af2:	3301      	adds	r3, #1
 8006af4:	429a      	cmp	r2, r3
 8006af6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006afa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006afe:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b02:	d331      	bcc.n	8006b68 <quorem+0x9c>
 8006b04:	f04f 0e00 	mov.w	lr, #0
 8006b08:	4640      	mov	r0, r8
 8006b0a:	46ac      	mov	ip, r5
 8006b0c:	46f2      	mov	sl, lr
 8006b0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b12:	b293      	uxth	r3, r2
 8006b14:	fb06 e303 	mla	r3, r6, r3, lr
 8006b18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b1c:	0c1a      	lsrs	r2, r3, #16
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	ebaa 0303 	sub.w	r3, sl, r3
 8006b24:	f8dc a000 	ldr.w	sl, [ip]
 8006b28:	fa13 f38a 	uxtah	r3, r3, sl
 8006b2c:	fb06 220e 	mla	r2, r6, lr, r2
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	9b00      	ldr	r3, [sp, #0]
 8006b34:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b38:	b292      	uxth	r2, r2
 8006b3a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b42:	f8bd 3000 	ldrh.w	r3, [sp]
 8006b46:	4581      	cmp	r9, r0
 8006b48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b4c:	f84c 3b04 	str.w	r3, [ip], #4
 8006b50:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b54:	d2db      	bcs.n	8006b0e <quorem+0x42>
 8006b56:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b5a:	b92b      	cbnz	r3, 8006b68 <quorem+0x9c>
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	3b04      	subs	r3, #4
 8006b60:	429d      	cmp	r5, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	d32c      	bcc.n	8006bc0 <quorem+0xf4>
 8006b66:	613c      	str	r4, [r7, #16]
 8006b68:	4638      	mov	r0, r7
 8006b6a:	f001 f9f1 	bl	8007f50 <__mcmp>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	db22      	blt.n	8006bb8 <quorem+0xec>
 8006b72:	3601      	adds	r6, #1
 8006b74:	4629      	mov	r1, r5
 8006b76:	2000      	movs	r0, #0
 8006b78:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b7c:	f8d1 c000 	ldr.w	ip, [r1]
 8006b80:	b293      	uxth	r3, r2
 8006b82:	1ac3      	subs	r3, r0, r3
 8006b84:	0c12      	lsrs	r2, r2, #16
 8006b86:	fa13 f38c 	uxtah	r3, r3, ip
 8006b8a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006b8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b98:	45c1      	cmp	r9, r8
 8006b9a:	f841 3b04 	str.w	r3, [r1], #4
 8006b9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ba2:	d2e9      	bcs.n	8006b78 <quorem+0xac>
 8006ba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ba8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bac:	b922      	cbnz	r2, 8006bb8 <quorem+0xec>
 8006bae:	3b04      	subs	r3, #4
 8006bb0:	429d      	cmp	r5, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	d30a      	bcc.n	8006bcc <quorem+0x100>
 8006bb6:	613c      	str	r4, [r7, #16]
 8006bb8:	4630      	mov	r0, r6
 8006bba:	b003      	add	sp, #12
 8006bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	3b04      	subs	r3, #4
 8006bc4:	2a00      	cmp	r2, #0
 8006bc6:	d1ce      	bne.n	8006b66 <quorem+0x9a>
 8006bc8:	3c01      	subs	r4, #1
 8006bca:	e7c9      	b.n	8006b60 <quorem+0x94>
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	3b04      	subs	r3, #4
 8006bd0:	2a00      	cmp	r2, #0
 8006bd2:	d1f0      	bne.n	8006bb6 <quorem+0xea>
 8006bd4:	3c01      	subs	r4, #1
 8006bd6:	e7eb      	b.n	8006bb0 <quorem+0xe4>
 8006bd8:	2000      	movs	r0, #0
 8006bda:	e7ee      	b.n	8006bba <quorem+0xee>
 8006bdc:	0000      	movs	r0, r0
	...

08006be0 <_dtoa_r>:
 8006be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be4:	ed2d 8b04 	vpush	{d8-d9}
 8006be8:	69c5      	ldr	r5, [r0, #28]
 8006bea:	b093      	sub	sp, #76	; 0x4c
 8006bec:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006bf0:	ec57 6b10 	vmov	r6, r7, d0
 8006bf4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006bf8:	9107      	str	r1, [sp, #28]
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	920a      	str	r2, [sp, #40]	; 0x28
 8006bfe:	930d      	str	r3, [sp, #52]	; 0x34
 8006c00:	b975      	cbnz	r5, 8006c20 <_dtoa_r+0x40>
 8006c02:	2010      	movs	r0, #16
 8006c04:	f000 fe2a 	bl	800785c <malloc>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	61e0      	str	r0, [r4, #28]
 8006c0c:	b920      	cbnz	r0, 8006c18 <_dtoa_r+0x38>
 8006c0e:	4bae      	ldr	r3, [pc, #696]	; (8006ec8 <_dtoa_r+0x2e8>)
 8006c10:	21ef      	movs	r1, #239	; 0xef
 8006c12:	48ae      	ldr	r0, [pc, #696]	; (8006ecc <_dtoa_r+0x2ec>)
 8006c14:	f002 fc74 	bl	8009500 <__assert_func>
 8006c18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c1c:	6005      	str	r5, [r0, #0]
 8006c1e:	60c5      	str	r5, [r0, #12]
 8006c20:	69e3      	ldr	r3, [r4, #28]
 8006c22:	6819      	ldr	r1, [r3, #0]
 8006c24:	b151      	cbz	r1, 8006c3c <_dtoa_r+0x5c>
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	604a      	str	r2, [r1, #4]
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	4093      	lsls	r3, r2
 8006c2e:	608b      	str	r3, [r1, #8]
 8006c30:	4620      	mov	r0, r4
 8006c32:	f000 ff07 	bl	8007a44 <_Bfree>
 8006c36:	69e3      	ldr	r3, [r4, #28]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	1e3b      	subs	r3, r7, #0
 8006c3e:	bfbb      	ittet	lt
 8006c40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c44:	9303      	strlt	r3, [sp, #12]
 8006c46:	2300      	movge	r3, #0
 8006c48:	2201      	movlt	r2, #1
 8006c4a:	bfac      	ite	ge
 8006c4c:	f8c8 3000 	strge.w	r3, [r8]
 8006c50:	f8c8 2000 	strlt.w	r2, [r8]
 8006c54:	4b9e      	ldr	r3, [pc, #632]	; (8006ed0 <_dtoa_r+0x2f0>)
 8006c56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c5a:	ea33 0308 	bics.w	r3, r3, r8
 8006c5e:	d11b      	bne.n	8006c98 <_dtoa_r+0xb8>
 8006c60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c62:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c66:	6013      	str	r3, [r2, #0]
 8006c68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006c6c:	4333      	orrs	r3, r6
 8006c6e:	f000 8593 	beq.w	8007798 <_dtoa_r+0xbb8>
 8006c72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c74:	b963      	cbnz	r3, 8006c90 <_dtoa_r+0xb0>
 8006c76:	4b97      	ldr	r3, [pc, #604]	; (8006ed4 <_dtoa_r+0x2f4>)
 8006c78:	e027      	b.n	8006cca <_dtoa_r+0xea>
 8006c7a:	4b97      	ldr	r3, [pc, #604]	; (8006ed8 <_dtoa_r+0x2f8>)
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	3308      	adds	r3, #8
 8006c80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	9800      	ldr	r0, [sp, #0]
 8006c86:	b013      	add	sp, #76	; 0x4c
 8006c88:	ecbd 8b04 	vpop	{d8-d9}
 8006c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c90:	4b90      	ldr	r3, [pc, #576]	; (8006ed4 <_dtoa_r+0x2f4>)
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	3303      	adds	r3, #3
 8006c96:	e7f3      	b.n	8006c80 <_dtoa_r+0xa0>
 8006c98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	ec51 0b17 	vmov	r0, r1, d7
 8006ca2:	eeb0 8a47 	vmov.f32	s16, s14
 8006ca6:	eef0 8a67 	vmov.f32	s17, s15
 8006caa:	2300      	movs	r3, #0
 8006cac:	f7f9 ff14 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cb0:	4681      	mov	r9, r0
 8006cb2:	b160      	cbz	r0, 8006cce <_dtoa_r+0xee>
 8006cb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8568 	beq.w	8007792 <_dtoa_r+0xbb2>
 8006cc2:	4b86      	ldr	r3, [pc, #536]	; (8006edc <_dtoa_r+0x2fc>)
 8006cc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	e7da      	b.n	8006c84 <_dtoa_r+0xa4>
 8006cce:	aa10      	add	r2, sp, #64	; 0x40
 8006cd0:	a911      	add	r1, sp, #68	; 0x44
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	eeb0 0a48 	vmov.f32	s0, s16
 8006cd8:	eef0 0a68 	vmov.f32	s1, s17
 8006cdc:	f001 fa4e 	bl	800817c <__d2b>
 8006ce0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006ce4:	4682      	mov	sl, r0
 8006ce6:	2d00      	cmp	r5, #0
 8006ce8:	d07f      	beq.n	8006dea <_dtoa_r+0x20a>
 8006cea:	ee18 3a90 	vmov	r3, s17
 8006cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cf2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006cf6:	ec51 0b18 	vmov	r0, r1, d8
 8006cfa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006cfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006d02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006d06:	4619      	mov	r1, r3
 8006d08:	2200      	movs	r2, #0
 8006d0a:	4b75      	ldr	r3, [pc, #468]	; (8006ee0 <_dtoa_r+0x300>)
 8006d0c:	f7f9 fac4 	bl	8000298 <__aeabi_dsub>
 8006d10:	a367      	add	r3, pc, #412	; (adr r3, 8006eb0 <_dtoa_r+0x2d0>)
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	f7f9 fc77 	bl	8000608 <__aeabi_dmul>
 8006d1a:	a367      	add	r3, pc, #412	; (adr r3, 8006eb8 <_dtoa_r+0x2d8>)
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	f7f9 fabc 	bl	800029c <__adddf3>
 8006d24:	4606      	mov	r6, r0
 8006d26:	4628      	mov	r0, r5
 8006d28:	460f      	mov	r7, r1
 8006d2a:	f7f9 fc03 	bl	8000534 <__aeabi_i2d>
 8006d2e:	a364      	add	r3, pc, #400	; (adr r3, 8006ec0 <_dtoa_r+0x2e0>)
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f7f9 fc68 	bl	8000608 <__aeabi_dmul>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	4639      	mov	r1, r7
 8006d40:	f7f9 faac 	bl	800029c <__adddf3>
 8006d44:	4606      	mov	r6, r0
 8006d46:	460f      	mov	r7, r1
 8006d48:	f7f9 ff0e 	bl	8000b68 <__aeabi_d2iz>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	4683      	mov	fp, r0
 8006d50:	2300      	movs	r3, #0
 8006d52:	4630      	mov	r0, r6
 8006d54:	4639      	mov	r1, r7
 8006d56:	f7f9 fec9 	bl	8000aec <__aeabi_dcmplt>
 8006d5a:	b148      	cbz	r0, 8006d70 <_dtoa_r+0x190>
 8006d5c:	4658      	mov	r0, fp
 8006d5e:	f7f9 fbe9 	bl	8000534 <__aeabi_i2d>
 8006d62:	4632      	mov	r2, r6
 8006d64:	463b      	mov	r3, r7
 8006d66:	f7f9 feb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d6a:	b908      	cbnz	r0, 8006d70 <_dtoa_r+0x190>
 8006d6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d70:	f1bb 0f16 	cmp.w	fp, #22
 8006d74:	d857      	bhi.n	8006e26 <_dtoa_r+0x246>
 8006d76:	4b5b      	ldr	r3, [pc, #364]	; (8006ee4 <_dtoa_r+0x304>)
 8006d78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	ec51 0b18 	vmov	r0, r1, d8
 8006d84:	f7f9 feb2 	bl	8000aec <__aeabi_dcmplt>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d04e      	beq.n	8006e2a <_dtoa_r+0x24a>
 8006d8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d90:	2300      	movs	r3, #0
 8006d92:	930c      	str	r3, [sp, #48]	; 0x30
 8006d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d96:	1b5b      	subs	r3, r3, r5
 8006d98:	1e5a      	subs	r2, r3, #1
 8006d9a:	bf45      	ittet	mi
 8006d9c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006da0:	9305      	strmi	r3, [sp, #20]
 8006da2:	2300      	movpl	r3, #0
 8006da4:	2300      	movmi	r3, #0
 8006da6:	9206      	str	r2, [sp, #24]
 8006da8:	bf54      	ite	pl
 8006daa:	9305      	strpl	r3, [sp, #20]
 8006dac:	9306      	strmi	r3, [sp, #24]
 8006dae:	f1bb 0f00 	cmp.w	fp, #0
 8006db2:	db3c      	blt.n	8006e2e <_dtoa_r+0x24e>
 8006db4:	9b06      	ldr	r3, [sp, #24]
 8006db6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006dba:	445b      	add	r3, fp
 8006dbc:	9306      	str	r3, [sp, #24]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	9308      	str	r3, [sp, #32]
 8006dc2:	9b07      	ldr	r3, [sp, #28]
 8006dc4:	2b09      	cmp	r3, #9
 8006dc6:	d868      	bhi.n	8006e9a <_dtoa_r+0x2ba>
 8006dc8:	2b05      	cmp	r3, #5
 8006dca:	bfc4      	itt	gt
 8006dcc:	3b04      	subgt	r3, #4
 8006dce:	9307      	strgt	r3, [sp, #28]
 8006dd0:	9b07      	ldr	r3, [sp, #28]
 8006dd2:	f1a3 0302 	sub.w	r3, r3, #2
 8006dd6:	bfcc      	ite	gt
 8006dd8:	2500      	movgt	r5, #0
 8006dda:	2501      	movle	r5, #1
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	f200 8085 	bhi.w	8006eec <_dtoa_r+0x30c>
 8006de2:	e8df f003 	tbb	[pc, r3]
 8006de6:	3b2e      	.short	0x3b2e
 8006de8:	5839      	.short	0x5839
 8006dea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006dee:	441d      	add	r5, r3
 8006df0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006df4:	2b20      	cmp	r3, #32
 8006df6:	bfc1      	itttt	gt
 8006df8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006dfc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006e00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006e04:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006e08:	bfd6      	itet	le
 8006e0a:	f1c3 0320 	rsble	r3, r3, #32
 8006e0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006e12:	fa06 f003 	lslle.w	r0, r6, r3
 8006e16:	f7f9 fb7d 	bl	8000514 <__aeabi_ui2d>
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006e20:	3d01      	subs	r5, #1
 8006e22:	920e      	str	r2, [sp, #56]	; 0x38
 8006e24:	e76f      	b.n	8006d06 <_dtoa_r+0x126>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e7b3      	b.n	8006d92 <_dtoa_r+0x1b2>
 8006e2a:	900c      	str	r0, [sp, #48]	; 0x30
 8006e2c:	e7b2      	b.n	8006d94 <_dtoa_r+0x1b4>
 8006e2e:	9b05      	ldr	r3, [sp, #20]
 8006e30:	eba3 030b 	sub.w	r3, r3, fp
 8006e34:	9305      	str	r3, [sp, #20]
 8006e36:	f1cb 0300 	rsb	r3, fp, #0
 8006e3a:	9308      	str	r3, [sp, #32]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e40:	e7bf      	b.n	8006dc2 <_dtoa_r+0x1e2>
 8006e42:	2300      	movs	r3, #0
 8006e44:	9309      	str	r3, [sp, #36]	; 0x24
 8006e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	dc52      	bgt.n	8006ef2 <_dtoa_r+0x312>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	9304      	str	r3, [sp, #16]
 8006e52:	461a      	mov	r2, r3
 8006e54:	920a      	str	r2, [sp, #40]	; 0x28
 8006e56:	e00b      	b.n	8006e70 <_dtoa_r+0x290>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e7f3      	b.n	8006e44 <_dtoa_r+0x264>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e62:	445b      	add	r3, fp
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	3301      	adds	r3, #1
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	9304      	str	r3, [sp, #16]
 8006e6c:	bfb8      	it	lt
 8006e6e:	2301      	movlt	r3, #1
 8006e70:	69e0      	ldr	r0, [r4, #28]
 8006e72:	2100      	movs	r1, #0
 8006e74:	2204      	movs	r2, #4
 8006e76:	f102 0614 	add.w	r6, r2, #20
 8006e7a:	429e      	cmp	r6, r3
 8006e7c:	d93d      	bls.n	8006efa <_dtoa_r+0x31a>
 8006e7e:	6041      	str	r1, [r0, #4]
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 fd9f 	bl	80079c4 <_Balloc>
 8006e86:	9000      	str	r0, [sp, #0]
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d139      	bne.n	8006f00 <_dtoa_r+0x320>
 8006e8c:	4b16      	ldr	r3, [pc, #88]	; (8006ee8 <_dtoa_r+0x308>)
 8006e8e:	4602      	mov	r2, r0
 8006e90:	f240 11af 	movw	r1, #431	; 0x1af
 8006e94:	e6bd      	b.n	8006c12 <_dtoa_r+0x32>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e7e1      	b.n	8006e5e <_dtoa_r+0x27e>
 8006e9a:	2501      	movs	r5, #1
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9307      	str	r3, [sp, #28]
 8006ea0:	9509      	str	r5, [sp, #36]	; 0x24
 8006ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	9304      	str	r3, [sp, #16]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2312      	movs	r3, #18
 8006eae:	e7d1      	b.n	8006e54 <_dtoa_r+0x274>
 8006eb0:	636f4361 	.word	0x636f4361
 8006eb4:	3fd287a7 	.word	0x3fd287a7
 8006eb8:	8b60c8b3 	.word	0x8b60c8b3
 8006ebc:	3fc68a28 	.word	0x3fc68a28
 8006ec0:	509f79fb 	.word	0x509f79fb
 8006ec4:	3fd34413 	.word	0x3fd34413
 8006ec8:	0800a2ae 	.word	0x0800a2ae
 8006ecc:	0800a2c5 	.word	0x0800a2c5
 8006ed0:	7ff00000 	.word	0x7ff00000
 8006ed4:	0800a2aa 	.word	0x0800a2aa
 8006ed8:	0800a2a1 	.word	0x0800a2a1
 8006edc:	0800a279 	.word	0x0800a279
 8006ee0:	3ff80000 	.word	0x3ff80000
 8006ee4:	0800a3b0 	.word	0x0800a3b0
 8006ee8:	0800a31d 	.word	0x0800a31d
 8006eec:	2301      	movs	r3, #1
 8006eee:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef0:	e7d7      	b.n	8006ea2 <_dtoa_r+0x2c2>
 8006ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	9304      	str	r3, [sp, #16]
 8006ef8:	e7ba      	b.n	8006e70 <_dtoa_r+0x290>
 8006efa:	3101      	adds	r1, #1
 8006efc:	0052      	lsls	r2, r2, #1
 8006efe:	e7ba      	b.n	8006e76 <_dtoa_r+0x296>
 8006f00:	69e3      	ldr	r3, [r4, #28]
 8006f02:	9a00      	ldr	r2, [sp, #0]
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	9b04      	ldr	r3, [sp, #16]
 8006f08:	2b0e      	cmp	r3, #14
 8006f0a:	f200 80a8 	bhi.w	800705e <_dtoa_r+0x47e>
 8006f0e:	2d00      	cmp	r5, #0
 8006f10:	f000 80a5 	beq.w	800705e <_dtoa_r+0x47e>
 8006f14:	f1bb 0f00 	cmp.w	fp, #0
 8006f18:	dd38      	ble.n	8006f8c <_dtoa_r+0x3ac>
 8006f1a:	4bc0      	ldr	r3, [pc, #768]	; (800721c <_dtoa_r+0x63c>)
 8006f1c:	f00b 020f 	and.w	r2, fp, #15
 8006f20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006f28:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006f2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006f30:	d019      	beq.n	8006f66 <_dtoa_r+0x386>
 8006f32:	4bbb      	ldr	r3, [pc, #748]	; (8007220 <_dtoa_r+0x640>)
 8006f34:	ec51 0b18 	vmov	r0, r1, d8
 8006f38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f3c:	f7f9 fc8e 	bl	800085c <__aeabi_ddiv>
 8006f40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f44:	f008 080f 	and.w	r8, r8, #15
 8006f48:	2503      	movs	r5, #3
 8006f4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007220 <_dtoa_r+0x640>
 8006f4e:	f1b8 0f00 	cmp.w	r8, #0
 8006f52:	d10a      	bne.n	8006f6a <_dtoa_r+0x38a>
 8006f54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f58:	4632      	mov	r2, r6
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	f7f9 fc7e 	bl	800085c <__aeabi_ddiv>
 8006f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f64:	e02b      	b.n	8006fbe <_dtoa_r+0x3de>
 8006f66:	2502      	movs	r5, #2
 8006f68:	e7ef      	b.n	8006f4a <_dtoa_r+0x36a>
 8006f6a:	f018 0f01 	tst.w	r8, #1
 8006f6e:	d008      	beq.n	8006f82 <_dtoa_r+0x3a2>
 8006f70:	4630      	mov	r0, r6
 8006f72:	4639      	mov	r1, r7
 8006f74:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006f78:	f7f9 fb46 	bl	8000608 <__aeabi_dmul>
 8006f7c:	3501      	adds	r5, #1
 8006f7e:	4606      	mov	r6, r0
 8006f80:	460f      	mov	r7, r1
 8006f82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f86:	f109 0908 	add.w	r9, r9, #8
 8006f8a:	e7e0      	b.n	8006f4e <_dtoa_r+0x36e>
 8006f8c:	f000 809f 	beq.w	80070ce <_dtoa_r+0x4ee>
 8006f90:	f1cb 0600 	rsb	r6, fp, #0
 8006f94:	4ba1      	ldr	r3, [pc, #644]	; (800721c <_dtoa_r+0x63c>)
 8006f96:	4fa2      	ldr	r7, [pc, #648]	; (8007220 <_dtoa_r+0x640>)
 8006f98:	f006 020f 	and.w	r2, r6, #15
 8006f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	ec51 0b18 	vmov	r0, r1, d8
 8006fa8:	f7f9 fb2e 	bl	8000608 <__aeabi_dmul>
 8006fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fb0:	1136      	asrs	r6, r6, #4
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	2502      	movs	r5, #2
 8006fb6:	2e00      	cmp	r6, #0
 8006fb8:	d17e      	bne.n	80070b8 <_dtoa_r+0x4d8>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1d0      	bne.n	8006f60 <_dtoa_r+0x380>
 8006fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8084 	beq.w	80070d2 <_dtoa_r+0x4f2>
 8006fca:	4b96      	ldr	r3, [pc, #600]	; (8007224 <_dtoa_r+0x644>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	4640      	mov	r0, r8
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	f7f9 fd8b 	bl	8000aec <__aeabi_dcmplt>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d07b      	beq.n	80070d2 <_dtoa_r+0x4f2>
 8006fda:	9b04      	ldr	r3, [sp, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d078      	beq.n	80070d2 <_dtoa_r+0x4f2>
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dd39      	ble.n	800705a <_dtoa_r+0x47a>
 8006fe6:	4b90      	ldr	r3, [pc, #576]	; (8007228 <_dtoa_r+0x648>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4640      	mov	r0, r8
 8006fec:	4649      	mov	r1, r9
 8006fee:	f7f9 fb0b 	bl	8000608 <__aeabi_dmul>
 8006ff2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ff6:	9e01      	ldr	r6, [sp, #4]
 8006ff8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007002:	4628      	mov	r0, r5
 8007004:	f7f9 fa96 	bl	8000534 <__aeabi_i2d>
 8007008:	4642      	mov	r2, r8
 800700a:	464b      	mov	r3, r9
 800700c:	f7f9 fafc 	bl	8000608 <__aeabi_dmul>
 8007010:	4b86      	ldr	r3, [pc, #536]	; (800722c <_dtoa_r+0x64c>)
 8007012:	2200      	movs	r2, #0
 8007014:	f7f9 f942 	bl	800029c <__adddf3>
 8007018:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800701c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007020:	9303      	str	r3, [sp, #12]
 8007022:	2e00      	cmp	r6, #0
 8007024:	d158      	bne.n	80070d8 <_dtoa_r+0x4f8>
 8007026:	4b82      	ldr	r3, [pc, #520]	; (8007230 <_dtoa_r+0x650>)
 8007028:	2200      	movs	r2, #0
 800702a:	4640      	mov	r0, r8
 800702c:	4649      	mov	r1, r9
 800702e:	f7f9 f933 	bl	8000298 <__aeabi_dsub>
 8007032:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007036:	4680      	mov	r8, r0
 8007038:	4689      	mov	r9, r1
 800703a:	f7f9 fd75 	bl	8000b28 <__aeabi_dcmpgt>
 800703e:	2800      	cmp	r0, #0
 8007040:	f040 8296 	bne.w	8007570 <_dtoa_r+0x990>
 8007044:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007048:	4640      	mov	r0, r8
 800704a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800704e:	4649      	mov	r1, r9
 8007050:	f7f9 fd4c 	bl	8000aec <__aeabi_dcmplt>
 8007054:	2800      	cmp	r0, #0
 8007056:	f040 8289 	bne.w	800756c <_dtoa_r+0x98c>
 800705a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800705e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007060:	2b00      	cmp	r3, #0
 8007062:	f2c0 814e 	blt.w	8007302 <_dtoa_r+0x722>
 8007066:	f1bb 0f0e 	cmp.w	fp, #14
 800706a:	f300 814a 	bgt.w	8007302 <_dtoa_r+0x722>
 800706e:	4b6b      	ldr	r3, [pc, #428]	; (800721c <_dtoa_r+0x63c>)
 8007070:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007074:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800707a:	2b00      	cmp	r3, #0
 800707c:	f280 80dc 	bge.w	8007238 <_dtoa_r+0x658>
 8007080:	9b04      	ldr	r3, [sp, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f300 80d8 	bgt.w	8007238 <_dtoa_r+0x658>
 8007088:	f040 826f 	bne.w	800756a <_dtoa_r+0x98a>
 800708c:	4b68      	ldr	r3, [pc, #416]	; (8007230 <_dtoa_r+0x650>)
 800708e:	2200      	movs	r2, #0
 8007090:	4640      	mov	r0, r8
 8007092:	4649      	mov	r1, r9
 8007094:	f7f9 fab8 	bl	8000608 <__aeabi_dmul>
 8007098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800709c:	f7f9 fd3a 	bl	8000b14 <__aeabi_dcmpge>
 80070a0:	9e04      	ldr	r6, [sp, #16]
 80070a2:	4637      	mov	r7, r6
 80070a4:	2800      	cmp	r0, #0
 80070a6:	f040 8245 	bne.w	8007534 <_dtoa_r+0x954>
 80070aa:	9d00      	ldr	r5, [sp, #0]
 80070ac:	2331      	movs	r3, #49	; 0x31
 80070ae:	f805 3b01 	strb.w	r3, [r5], #1
 80070b2:	f10b 0b01 	add.w	fp, fp, #1
 80070b6:	e241      	b.n	800753c <_dtoa_r+0x95c>
 80070b8:	07f2      	lsls	r2, r6, #31
 80070ba:	d505      	bpl.n	80070c8 <_dtoa_r+0x4e8>
 80070bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070c0:	f7f9 faa2 	bl	8000608 <__aeabi_dmul>
 80070c4:	3501      	adds	r5, #1
 80070c6:	2301      	movs	r3, #1
 80070c8:	1076      	asrs	r6, r6, #1
 80070ca:	3708      	adds	r7, #8
 80070cc:	e773      	b.n	8006fb6 <_dtoa_r+0x3d6>
 80070ce:	2502      	movs	r5, #2
 80070d0:	e775      	b.n	8006fbe <_dtoa_r+0x3de>
 80070d2:	9e04      	ldr	r6, [sp, #16]
 80070d4:	465f      	mov	r7, fp
 80070d6:	e792      	b.n	8006ffe <_dtoa_r+0x41e>
 80070d8:	9900      	ldr	r1, [sp, #0]
 80070da:	4b50      	ldr	r3, [pc, #320]	; (800721c <_dtoa_r+0x63c>)
 80070dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070e0:	4431      	add	r1, r6
 80070e2:	9102      	str	r1, [sp, #8]
 80070e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070e6:	eeb0 9a47 	vmov.f32	s18, s14
 80070ea:	eef0 9a67 	vmov.f32	s19, s15
 80070ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070f6:	2900      	cmp	r1, #0
 80070f8:	d044      	beq.n	8007184 <_dtoa_r+0x5a4>
 80070fa:	494e      	ldr	r1, [pc, #312]	; (8007234 <_dtoa_r+0x654>)
 80070fc:	2000      	movs	r0, #0
 80070fe:	f7f9 fbad 	bl	800085c <__aeabi_ddiv>
 8007102:	ec53 2b19 	vmov	r2, r3, d9
 8007106:	f7f9 f8c7 	bl	8000298 <__aeabi_dsub>
 800710a:	9d00      	ldr	r5, [sp, #0]
 800710c:	ec41 0b19 	vmov	d9, r0, r1
 8007110:	4649      	mov	r1, r9
 8007112:	4640      	mov	r0, r8
 8007114:	f7f9 fd28 	bl	8000b68 <__aeabi_d2iz>
 8007118:	4606      	mov	r6, r0
 800711a:	f7f9 fa0b 	bl	8000534 <__aeabi_i2d>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4640      	mov	r0, r8
 8007124:	4649      	mov	r1, r9
 8007126:	f7f9 f8b7 	bl	8000298 <__aeabi_dsub>
 800712a:	3630      	adds	r6, #48	; 0x30
 800712c:	f805 6b01 	strb.w	r6, [r5], #1
 8007130:	ec53 2b19 	vmov	r2, r3, d9
 8007134:	4680      	mov	r8, r0
 8007136:	4689      	mov	r9, r1
 8007138:	f7f9 fcd8 	bl	8000aec <__aeabi_dcmplt>
 800713c:	2800      	cmp	r0, #0
 800713e:	d164      	bne.n	800720a <_dtoa_r+0x62a>
 8007140:	4642      	mov	r2, r8
 8007142:	464b      	mov	r3, r9
 8007144:	4937      	ldr	r1, [pc, #220]	; (8007224 <_dtoa_r+0x644>)
 8007146:	2000      	movs	r0, #0
 8007148:	f7f9 f8a6 	bl	8000298 <__aeabi_dsub>
 800714c:	ec53 2b19 	vmov	r2, r3, d9
 8007150:	f7f9 fccc 	bl	8000aec <__aeabi_dcmplt>
 8007154:	2800      	cmp	r0, #0
 8007156:	f040 80b6 	bne.w	80072c6 <_dtoa_r+0x6e6>
 800715a:	9b02      	ldr	r3, [sp, #8]
 800715c:	429d      	cmp	r5, r3
 800715e:	f43f af7c 	beq.w	800705a <_dtoa_r+0x47a>
 8007162:	4b31      	ldr	r3, [pc, #196]	; (8007228 <_dtoa_r+0x648>)
 8007164:	ec51 0b19 	vmov	r0, r1, d9
 8007168:	2200      	movs	r2, #0
 800716a:	f7f9 fa4d 	bl	8000608 <__aeabi_dmul>
 800716e:	4b2e      	ldr	r3, [pc, #184]	; (8007228 <_dtoa_r+0x648>)
 8007170:	ec41 0b19 	vmov	d9, r0, r1
 8007174:	2200      	movs	r2, #0
 8007176:	4640      	mov	r0, r8
 8007178:	4649      	mov	r1, r9
 800717a:	f7f9 fa45 	bl	8000608 <__aeabi_dmul>
 800717e:	4680      	mov	r8, r0
 8007180:	4689      	mov	r9, r1
 8007182:	e7c5      	b.n	8007110 <_dtoa_r+0x530>
 8007184:	ec51 0b17 	vmov	r0, r1, d7
 8007188:	f7f9 fa3e 	bl	8000608 <__aeabi_dmul>
 800718c:	9b02      	ldr	r3, [sp, #8]
 800718e:	9d00      	ldr	r5, [sp, #0]
 8007190:	930f      	str	r3, [sp, #60]	; 0x3c
 8007192:	ec41 0b19 	vmov	d9, r0, r1
 8007196:	4649      	mov	r1, r9
 8007198:	4640      	mov	r0, r8
 800719a:	f7f9 fce5 	bl	8000b68 <__aeabi_d2iz>
 800719e:	4606      	mov	r6, r0
 80071a0:	f7f9 f9c8 	bl	8000534 <__aeabi_i2d>
 80071a4:	3630      	adds	r6, #48	; 0x30
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	4640      	mov	r0, r8
 80071ac:	4649      	mov	r1, r9
 80071ae:	f7f9 f873 	bl	8000298 <__aeabi_dsub>
 80071b2:	f805 6b01 	strb.w	r6, [r5], #1
 80071b6:	9b02      	ldr	r3, [sp, #8]
 80071b8:	429d      	cmp	r5, r3
 80071ba:	4680      	mov	r8, r0
 80071bc:	4689      	mov	r9, r1
 80071be:	f04f 0200 	mov.w	r2, #0
 80071c2:	d124      	bne.n	800720e <_dtoa_r+0x62e>
 80071c4:	4b1b      	ldr	r3, [pc, #108]	; (8007234 <_dtoa_r+0x654>)
 80071c6:	ec51 0b19 	vmov	r0, r1, d9
 80071ca:	f7f9 f867 	bl	800029c <__adddf3>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	4640      	mov	r0, r8
 80071d4:	4649      	mov	r1, r9
 80071d6:	f7f9 fca7 	bl	8000b28 <__aeabi_dcmpgt>
 80071da:	2800      	cmp	r0, #0
 80071dc:	d173      	bne.n	80072c6 <_dtoa_r+0x6e6>
 80071de:	ec53 2b19 	vmov	r2, r3, d9
 80071e2:	4914      	ldr	r1, [pc, #80]	; (8007234 <_dtoa_r+0x654>)
 80071e4:	2000      	movs	r0, #0
 80071e6:	f7f9 f857 	bl	8000298 <__aeabi_dsub>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4640      	mov	r0, r8
 80071f0:	4649      	mov	r1, r9
 80071f2:	f7f9 fc7b 	bl	8000aec <__aeabi_dcmplt>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	f43f af2f 	beq.w	800705a <_dtoa_r+0x47a>
 80071fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80071fe:	1e6b      	subs	r3, r5, #1
 8007200:	930f      	str	r3, [sp, #60]	; 0x3c
 8007202:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007206:	2b30      	cmp	r3, #48	; 0x30
 8007208:	d0f8      	beq.n	80071fc <_dtoa_r+0x61c>
 800720a:	46bb      	mov	fp, r7
 800720c:	e04a      	b.n	80072a4 <_dtoa_r+0x6c4>
 800720e:	4b06      	ldr	r3, [pc, #24]	; (8007228 <_dtoa_r+0x648>)
 8007210:	f7f9 f9fa 	bl	8000608 <__aeabi_dmul>
 8007214:	4680      	mov	r8, r0
 8007216:	4689      	mov	r9, r1
 8007218:	e7bd      	b.n	8007196 <_dtoa_r+0x5b6>
 800721a:	bf00      	nop
 800721c:	0800a3b0 	.word	0x0800a3b0
 8007220:	0800a388 	.word	0x0800a388
 8007224:	3ff00000 	.word	0x3ff00000
 8007228:	40240000 	.word	0x40240000
 800722c:	401c0000 	.word	0x401c0000
 8007230:	40140000 	.word	0x40140000
 8007234:	3fe00000 	.word	0x3fe00000
 8007238:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800723c:	9d00      	ldr	r5, [sp, #0]
 800723e:	4642      	mov	r2, r8
 8007240:	464b      	mov	r3, r9
 8007242:	4630      	mov	r0, r6
 8007244:	4639      	mov	r1, r7
 8007246:	f7f9 fb09 	bl	800085c <__aeabi_ddiv>
 800724a:	f7f9 fc8d 	bl	8000b68 <__aeabi_d2iz>
 800724e:	9001      	str	r0, [sp, #4]
 8007250:	f7f9 f970 	bl	8000534 <__aeabi_i2d>
 8007254:	4642      	mov	r2, r8
 8007256:	464b      	mov	r3, r9
 8007258:	f7f9 f9d6 	bl	8000608 <__aeabi_dmul>
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	4630      	mov	r0, r6
 8007262:	4639      	mov	r1, r7
 8007264:	f7f9 f818 	bl	8000298 <__aeabi_dsub>
 8007268:	9e01      	ldr	r6, [sp, #4]
 800726a:	9f04      	ldr	r7, [sp, #16]
 800726c:	3630      	adds	r6, #48	; 0x30
 800726e:	f805 6b01 	strb.w	r6, [r5], #1
 8007272:	9e00      	ldr	r6, [sp, #0]
 8007274:	1bae      	subs	r6, r5, r6
 8007276:	42b7      	cmp	r7, r6
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	d134      	bne.n	80072e8 <_dtoa_r+0x708>
 800727e:	f7f9 f80d 	bl	800029c <__adddf3>
 8007282:	4642      	mov	r2, r8
 8007284:	464b      	mov	r3, r9
 8007286:	4606      	mov	r6, r0
 8007288:	460f      	mov	r7, r1
 800728a:	f7f9 fc4d 	bl	8000b28 <__aeabi_dcmpgt>
 800728e:	b9c8      	cbnz	r0, 80072c4 <_dtoa_r+0x6e4>
 8007290:	4642      	mov	r2, r8
 8007292:	464b      	mov	r3, r9
 8007294:	4630      	mov	r0, r6
 8007296:	4639      	mov	r1, r7
 8007298:	f7f9 fc1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800729c:	b110      	cbz	r0, 80072a4 <_dtoa_r+0x6c4>
 800729e:	9b01      	ldr	r3, [sp, #4]
 80072a0:	07db      	lsls	r3, r3, #31
 80072a2:	d40f      	bmi.n	80072c4 <_dtoa_r+0x6e4>
 80072a4:	4651      	mov	r1, sl
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 fbcc 	bl	8007a44 <_Bfree>
 80072ac:	2300      	movs	r3, #0
 80072ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072b0:	702b      	strb	r3, [r5, #0]
 80072b2:	f10b 0301 	add.w	r3, fp, #1
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f43f ace2 	beq.w	8006c84 <_dtoa_r+0xa4>
 80072c0:	601d      	str	r5, [r3, #0]
 80072c2:	e4df      	b.n	8006c84 <_dtoa_r+0xa4>
 80072c4:	465f      	mov	r7, fp
 80072c6:	462b      	mov	r3, r5
 80072c8:	461d      	mov	r5, r3
 80072ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072ce:	2a39      	cmp	r2, #57	; 0x39
 80072d0:	d106      	bne.n	80072e0 <_dtoa_r+0x700>
 80072d2:	9a00      	ldr	r2, [sp, #0]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d1f7      	bne.n	80072c8 <_dtoa_r+0x6e8>
 80072d8:	9900      	ldr	r1, [sp, #0]
 80072da:	2230      	movs	r2, #48	; 0x30
 80072dc:	3701      	adds	r7, #1
 80072de:	700a      	strb	r2, [r1, #0]
 80072e0:	781a      	ldrb	r2, [r3, #0]
 80072e2:	3201      	adds	r2, #1
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	e790      	b.n	800720a <_dtoa_r+0x62a>
 80072e8:	4ba3      	ldr	r3, [pc, #652]	; (8007578 <_dtoa_r+0x998>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	f7f9 f98c 	bl	8000608 <__aeabi_dmul>
 80072f0:	2200      	movs	r2, #0
 80072f2:	2300      	movs	r3, #0
 80072f4:	4606      	mov	r6, r0
 80072f6:	460f      	mov	r7, r1
 80072f8:	f7f9 fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d09e      	beq.n	800723e <_dtoa_r+0x65e>
 8007300:	e7d0      	b.n	80072a4 <_dtoa_r+0x6c4>
 8007302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007304:	2a00      	cmp	r2, #0
 8007306:	f000 80ca 	beq.w	800749e <_dtoa_r+0x8be>
 800730a:	9a07      	ldr	r2, [sp, #28]
 800730c:	2a01      	cmp	r2, #1
 800730e:	f300 80ad 	bgt.w	800746c <_dtoa_r+0x88c>
 8007312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007314:	2a00      	cmp	r2, #0
 8007316:	f000 80a5 	beq.w	8007464 <_dtoa_r+0x884>
 800731a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800731e:	9e08      	ldr	r6, [sp, #32]
 8007320:	9d05      	ldr	r5, [sp, #20]
 8007322:	9a05      	ldr	r2, [sp, #20]
 8007324:	441a      	add	r2, r3
 8007326:	9205      	str	r2, [sp, #20]
 8007328:	9a06      	ldr	r2, [sp, #24]
 800732a:	2101      	movs	r1, #1
 800732c:	441a      	add	r2, r3
 800732e:	4620      	mov	r0, r4
 8007330:	9206      	str	r2, [sp, #24]
 8007332:	f000 fc87 	bl	8007c44 <__i2b>
 8007336:	4607      	mov	r7, r0
 8007338:	b165      	cbz	r5, 8007354 <_dtoa_r+0x774>
 800733a:	9b06      	ldr	r3, [sp, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	dd09      	ble.n	8007354 <_dtoa_r+0x774>
 8007340:	42ab      	cmp	r3, r5
 8007342:	9a05      	ldr	r2, [sp, #20]
 8007344:	bfa8      	it	ge
 8007346:	462b      	movge	r3, r5
 8007348:	1ad2      	subs	r2, r2, r3
 800734a:	9205      	str	r2, [sp, #20]
 800734c:	9a06      	ldr	r2, [sp, #24]
 800734e:	1aed      	subs	r5, r5, r3
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	9306      	str	r3, [sp, #24]
 8007354:	9b08      	ldr	r3, [sp, #32]
 8007356:	b1f3      	cbz	r3, 8007396 <_dtoa_r+0x7b6>
 8007358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 80a3 	beq.w	80074a6 <_dtoa_r+0x8c6>
 8007360:	2e00      	cmp	r6, #0
 8007362:	dd10      	ble.n	8007386 <_dtoa_r+0x7a6>
 8007364:	4639      	mov	r1, r7
 8007366:	4632      	mov	r2, r6
 8007368:	4620      	mov	r0, r4
 800736a:	f000 fd2b 	bl	8007dc4 <__pow5mult>
 800736e:	4652      	mov	r2, sl
 8007370:	4601      	mov	r1, r0
 8007372:	4607      	mov	r7, r0
 8007374:	4620      	mov	r0, r4
 8007376:	f000 fc7b 	bl	8007c70 <__multiply>
 800737a:	4651      	mov	r1, sl
 800737c:	4680      	mov	r8, r0
 800737e:	4620      	mov	r0, r4
 8007380:	f000 fb60 	bl	8007a44 <_Bfree>
 8007384:	46c2      	mov	sl, r8
 8007386:	9b08      	ldr	r3, [sp, #32]
 8007388:	1b9a      	subs	r2, r3, r6
 800738a:	d004      	beq.n	8007396 <_dtoa_r+0x7b6>
 800738c:	4651      	mov	r1, sl
 800738e:	4620      	mov	r0, r4
 8007390:	f000 fd18 	bl	8007dc4 <__pow5mult>
 8007394:	4682      	mov	sl, r0
 8007396:	2101      	movs	r1, #1
 8007398:	4620      	mov	r0, r4
 800739a:	f000 fc53 	bl	8007c44 <__i2b>
 800739e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	4606      	mov	r6, r0
 80073a4:	f340 8081 	ble.w	80074aa <_dtoa_r+0x8ca>
 80073a8:	461a      	mov	r2, r3
 80073aa:	4601      	mov	r1, r0
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 fd09 	bl	8007dc4 <__pow5mult>
 80073b2:	9b07      	ldr	r3, [sp, #28]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	4606      	mov	r6, r0
 80073b8:	dd7a      	ble.n	80074b0 <_dtoa_r+0x8d0>
 80073ba:	f04f 0800 	mov.w	r8, #0
 80073be:	6933      	ldr	r3, [r6, #16]
 80073c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80073c4:	6918      	ldr	r0, [r3, #16]
 80073c6:	f000 fbef 	bl	8007ba8 <__hi0bits>
 80073ca:	f1c0 0020 	rsb	r0, r0, #32
 80073ce:	9b06      	ldr	r3, [sp, #24]
 80073d0:	4418      	add	r0, r3
 80073d2:	f010 001f 	ands.w	r0, r0, #31
 80073d6:	f000 8094 	beq.w	8007502 <_dtoa_r+0x922>
 80073da:	f1c0 0320 	rsb	r3, r0, #32
 80073de:	2b04      	cmp	r3, #4
 80073e0:	f340 8085 	ble.w	80074ee <_dtoa_r+0x90e>
 80073e4:	9b05      	ldr	r3, [sp, #20]
 80073e6:	f1c0 001c 	rsb	r0, r0, #28
 80073ea:	4403      	add	r3, r0
 80073ec:	9305      	str	r3, [sp, #20]
 80073ee:	9b06      	ldr	r3, [sp, #24]
 80073f0:	4403      	add	r3, r0
 80073f2:	4405      	add	r5, r0
 80073f4:	9306      	str	r3, [sp, #24]
 80073f6:	9b05      	ldr	r3, [sp, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	dd05      	ble.n	8007408 <_dtoa_r+0x828>
 80073fc:	4651      	mov	r1, sl
 80073fe:	461a      	mov	r2, r3
 8007400:	4620      	mov	r0, r4
 8007402:	f000 fd39 	bl	8007e78 <__lshift>
 8007406:	4682      	mov	sl, r0
 8007408:	9b06      	ldr	r3, [sp, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	dd05      	ble.n	800741a <_dtoa_r+0x83a>
 800740e:	4631      	mov	r1, r6
 8007410:	461a      	mov	r2, r3
 8007412:	4620      	mov	r0, r4
 8007414:	f000 fd30 	bl	8007e78 <__lshift>
 8007418:	4606      	mov	r6, r0
 800741a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800741c:	2b00      	cmp	r3, #0
 800741e:	d072      	beq.n	8007506 <_dtoa_r+0x926>
 8007420:	4631      	mov	r1, r6
 8007422:	4650      	mov	r0, sl
 8007424:	f000 fd94 	bl	8007f50 <__mcmp>
 8007428:	2800      	cmp	r0, #0
 800742a:	da6c      	bge.n	8007506 <_dtoa_r+0x926>
 800742c:	2300      	movs	r3, #0
 800742e:	4651      	mov	r1, sl
 8007430:	220a      	movs	r2, #10
 8007432:	4620      	mov	r0, r4
 8007434:	f000 fb28 	bl	8007a88 <__multadd>
 8007438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800743a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800743e:	4682      	mov	sl, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 81b0 	beq.w	80077a6 <_dtoa_r+0xbc6>
 8007446:	2300      	movs	r3, #0
 8007448:	4639      	mov	r1, r7
 800744a:	220a      	movs	r2, #10
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fb1b 	bl	8007a88 <__multadd>
 8007452:	9b01      	ldr	r3, [sp, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	4607      	mov	r7, r0
 8007458:	f300 8096 	bgt.w	8007588 <_dtoa_r+0x9a8>
 800745c:	9b07      	ldr	r3, [sp, #28]
 800745e:	2b02      	cmp	r3, #2
 8007460:	dc59      	bgt.n	8007516 <_dtoa_r+0x936>
 8007462:	e091      	b.n	8007588 <_dtoa_r+0x9a8>
 8007464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007466:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800746a:	e758      	b.n	800731e <_dtoa_r+0x73e>
 800746c:	9b04      	ldr	r3, [sp, #16]
 800746e:	1e5e      	subs	r6, r3, #1
 8007470:	9b08      	ldr	r3, [sp, #32]
 8007472:	42b3      	cmp	r3, r6
 8007474:	bfbf      	itttt	lt
 8007476:	9b08      	ldrlt	r3, [sp, #32]
 8007478:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800747a:	9608      	strlt	r6, [sp, #32]
 800747c:	1af3      	sublt	r3, r6, r3
 800747e:	bfb4      	ite	lt
 8007480:	18d2      	addlt	r2, r2, r3
 8007482:	1b9e      	subge	r6, r3, r6
 8007484:	9b04      	ldr	r3, [sp, #16]
 8007486:	bfbc      	itt	lt
 8007488:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800748a:	2600      	movlt	r6, #0
 800748c:	2b00      	cmp	r3, #0
 800748e:	bfb7      	itett	lt
 8007490:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007494:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007498:	1a9d      	sublt	r5, r3, r2
 800749a:	2300      	movlt	r3, #0
 800749c:	e741      	b.n	8007322 <_dtoa_r+0x742>
 800749e:	9e08      	ldr	r6, [sp, #32]
 80074a0:	9d05      	ldr	r5, [sp, #20]
 80074a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80074a4:	e748      	b.n	8007338 <_dtoa_r+0x758>
 80074a6:	9a08      	ldr	r2, [sp, #32]
 80074a8:	e770      	b.n	800738c <_dtoa_r+0x7ac>
 80074aa:	9b07      	ldr	r3, [sp, #28]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	dc19      	bgt.n	80074e4 <_dtoa_r+0x904>
 80074b0:	9b02      	ldr	r3, [sp, #8]
 80074b2:	b9bb      	cbnz	r3, 80074e4 <_dtoa_r+0x904>
 80074b4:	9b03      	ldr	r3, [sp, #12]
 80074b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074ba:	b99b      	cbnz	r3, 80074e4 <_dtoa_r+0x904>
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074c2:	0d1b      	lsrs	r3, r3, #20
 80074c4:	051b      	lsls	r3, r3, #20
 80074c6:	b183      	cbz	r3, 80074ea <_dtoa_r+0x90a>
 80074c8:	9b05      	ldr	r3, [sp, #20]
 80074ca:	3301      	adds	r3, #1
 80074cc:	9305      	str	r3, [sp, #20]
 80074ce:	9b06      	ldr	r3, [sp, #24]
 80074d0:	3301      	adds	r3, #1
 80074d2:	9306      	str	r3, [sp, #24]
 80074d4:	f04f 0801 	mov.w	r8, #1
 80074d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f47f af6f 	bne.w	80073be <_dtoa_r+0x7de>
 80074e0:	2001      	movs	r0, #1
 80074e2:	e774      	b.n	80073ce <_dtoa_r+0x7ee>
 80074e4:	f04f 0800 	mov.w	r8, #0
 80074e8:	e7f6      	b.n	80074d8 <_dtoa_r+0x8f8>
 80074ea:	4698      	mov	r8, r3
 80074ec:	e7f4      	b.n	80074d8 <_dtoa_r+0x8f8>
 80074ee:	d082      	beq.n	80073f6 <_dtoa_r+0x816>
 80074f0:	9a05      	ldr	r2, [sp, #20]
 80074f2:	331c      	adds	r3, #28
 80074f4:	441a      	add	r2, r3
 80074f6:	9205      	str	r2, [sp, #20]
 80074f8:	9a06      	ldr	r2, [sp, #24]
 80074fa:	441a      	add	r2, r3
 80074fc:	441d      	add	r5, r3
 80074fe:	9206      	str	r2, [sp, #24]
 8007500:	e779      	b.n	80073f6 <_dtoa_r+0x816>
 8007502:	4603      	mov	r3, r0
 8007504:	e7f4      	b.n	80074f0 <_dtoa_r+0x910>
 8007506:	9b04      	ldr	r3, [sp, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	dc37      	bgt.n	800757c <_dtoa_r+0x99c>
 800750c:	9b07      	ldr	r3, [sp, #28]
 800750e:	2b02      	cmp	r3, #2
 8007510:	dd34      	ble.n	800757c <_dtoa_r+0x99c>
 8007512:	9b04      	ldr	r3, [sp, #16]
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	9b01      	ldr	r3, [sp, #4]
 8007518:	b963      	cbnz	r3, 8007534 <_dtoa_r+0x954>
 800751a:	4631      	mov	r1, r6
 800751c:	2205      	movs	r2, #5
 800751e:	4620      	mov	r0, r4
 8007520:	f000 fab2 	bl	8007a88 <__multadd>
 8007524:	4601      	mov	r1, r0
 8007526:	4606      	mov	r6, r0
 8007528:	4650      	mov	r0, sl
 800752a:	f000 fd11 	bl	8007f50 <__mcmp>
 800752e:	2800      	cmp	r0, #0
 8007530:	f73f adbb 	bgt.w	80070aa <_dtoa_r+0x4ca>
 8007534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007536:	9d00      	ldr	r5, [sp, #0]
 8007538:	ea6f 0b03 	mvn.w	fp, r3
 800753c:	f04f 0800 	mov.w	r8, #0
 8007540:	4631      	mov	r1, r6
 8007542:	4620      	mov	r0, r4
 8007544:	f000 fa7e 	bl	8007a44 <_Bfree>
 8007548:	2f00      	cmp	r7, #0
 800754a:	f43f aeab 	beq.w	80072a4 <_dtoa_r+0x6c4>
 800754e:	f1b8 0f00 	cmp.w	r8, #0
 8007552:	d005      	beq.n	8007560 <_dtoa_r+0x980>
 8007554:	45b8      	cmp	r8, r7
 8007556:	d003      	beq.n	8007560 <_dtoa_r+0x980>
 8007558:	4641      	mov	r1, r8
 800755a:	4620      	mov	r0, r4
 800755c:	f000 fa72 	bl	8007a44 <_Bfree>
 8007560:	4639      	mov	r1, r7
 8007562:	4620      	mov	r0, r4
 8007564:	f000 fa6e 	bl	8007a44 <_Bfree>
 8007568:	e69c      	b.n	80072a4 <_dtoa_r+0x6c4>
 800756a:	2600      	movs	r6, #0
 800756c:	4637      	mov	r7, r6
 800756e:	e7e1      	b.n	8007534 <_dtoa_r+0x954>
 8007570:	46bb      	mov	fp, r7
 8007572:	4637      	mov	r7, r6
 8007574:	e599      	b.n	80070aa <_dtoa_r+0x4ca>
 8007576:	bf00      	nop
 8007578:	40240000 	.word	0x40240000
 800757c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 80c8 	beq.w	8007714 <_dtoa_r+0xb34>
 8007584:	9b04      	ldr	r3, [sp, #16]
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	2d00      	cmp	r5, #0
 800758a:	dd05      	ble.n	8007598 <_dtoa_r+0x9b8>
 800758c:	4639      	mov	r1, r7
 800758e:	462a      	mov	r2, r5
 8007590:	4620      	mov	r0, r4
 8007592:	f000 fc71 	bl	8007e78 <__lshift>
 8007596:	4607      	mov	r7, r0
 8007598:	f1b8 0f00 	cmp.w	r8, #0
 800759c:	d05b      	beq.n	8007656 <_dtoa_r+0xa76>
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	4620      	mov	r0, r4
 80075a2:	f000 fa0f 	bl	80079c4 <_Balloc>
 80075a6:	4605      	mov	r5, r0
 80075a8:	b928      	cbnz	r0, 80075b6 <_dtoa_r+0x9d6>
 80075aa:	4b83      	ldr	r3, [pc, #524]	; (80077b8 <_dtoa_r+0xbd8>)
 80075ac:	4602      	mov	r2, r0
 80075ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80075b2:	f7ff bb2e 	b.w	8006c12 <_dtoa_r+0x32>
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	3202      	adds	r2, #2
 80075ba:	0092      	lsls	r2, r2, #2
 80075bc:	f107 010c 	add.w	r1, r7, #12
 80075c0:	300c      	adds	r0, #12
 80075c2:	f001 ff85 	bl	80094d0 <memcpy>
 80075c6:	2201      	movs	r2, #1
 80075c8:	4629      	mov	r1, r5
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 fc54 	bl	8007e78 <__lshift>
 80075d0:	9b00      	ldr	r3, [sp, #0]
 80075d2:	3301      	adds	r3, #1
 80075d4:	9304      	str	r3, [sp, #16]
 80075d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075da:	4413      	add	r3, r2
 80075dc:	9308      	str	r3, [sp, #32]
 80075de:	9b02      	ldr	r3, [sp, #8]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	46b8      	mov	r8, r7
 80075e6:	9306      	str	r3, [sp, #24]
 80075e8:	4607      	mov	r7, r0
 80075ea:	9b04      	ldr	r3, [sp, #16]
 80075ec:	4631      	mov	r1, r6
 80075ee:	3b01      	subs	r3, #1
 80075f0:	4650      	mov	r0, sl
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	f7ff fa6a 	bl	8006acc <quorem>
 80075f8:	4641      	mov	r1, r8
 80075fa:	9002      	str	r0, [sp, #8]
 80075fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007600:	4650      	mov	r0, sl
 8007602:	f000 fca5 	bl	8007f50 <__mcmp>
 8007606:	463a      	mov	r2, r7
 8007608:	9005      	str	r0, [sp, #20]
 800760a:	4631      	mov	r1, r6
 800760c:	4620      	mov	r0, r4
 800760e:	f000 fcbb 	bl	8007f88 <__mdiff>
 8007612:	68c2      	ldr	r2, [r0, #12]
 8007614:	4605      	mov	r5, r0
 8007616:	bb02      	cbnz	r2, 800765a <_dtoa_r+0xa7a>
 8007618:	4601      	mov	r1, r0
 800761a:	4650      	mov	r0, sl
 800761c:	f000 fc98 	bl	8007f50 <__mcmp>
 8007620:	4602      	mov	r2, r0
 8007622:	4629      	mov	r1, r5
 8007624:	4620      	mov	r0, r4
 8007626:	9209      	str	r2, [sp, #36]	; 0x24
 8007628:	f000 fa0c 	bl	8007a44 <_Bfree>
 800762c:	9b07      	ldr	r3, [sp, #28]
 800762e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007630:	9d04      	ldr	r5, [sp, #16]
 8007632:	ea43 0102 	orr.w	r1, r3, r2
 8007636:	9b06      	ldr	r3, [sp, #24]
 8007638:	4319      	orrs	r1, r3
 800763a:	d110      	bne.n	800765e <_dtoa_r+0xa7e>
 800763c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007640:	d029      	beq.n	8007696 <_dtoa_r+0xab6>
 8007642:	9b05      	ldr	r3, [sp, #20]
 8007644:	2b00      	cmp	r3, #0
 8007646:	dd02      	ble.n	800764e <_dtoa_r+0xa6e>
 8007648:	9b02      	ldr	r3, [sp, #8]
 800764a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800764e:	9b01      	ldr	r3, [sp, #4]
 8007650:	f883 9000 	strb.w	r9, [r3]
 8007654:	e774      	b.n	8007540 <_dtoa_r+0x960>
 8007656:	4638      	mov	r0, r7
 8007658:	e7ba      	b.n	80075d0 <_dtoa_r+0x9f0>
 800765a:	2201      	movs	r2, #1
 800765c:	e7e1      	b.n	8007622 <_dtoa_r+0xa42>
 800765e:	9b05      	ldr	r3, [sp, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	db04      	blt.n	800766e <_dtoa_r+0xa8e>
 8007664:	9907      	ldr	r1, [sp, #28]
 8007666:	430b      	orrs	r3, r1
 8007668:	9906      	ldr	r1, [sp, #24]
 800766a:	430b      	orrs	r3, r1
 800766c:	d120      	bne.n	80076b0 <_dtoa_r+0xad0>
 800766e:	2a00      	cmp	r2, #0
 8007670:	dded      	ble.n	800764e <_dtoa_r+0xa6e>
 8007672:	4651      	mov	r1, sl
 8007674:	2201      	movs	r2, #1
 8007676:	4620      	mov	r0, r4
 8007678:	f000 fbfe 	bl	8007e78 <__lshift>
 800767c:	4631      	mov	r1, r6
 800767e:	4682      	mov	sl, r0
 8007680:	f000 fc66 	bl	8007f50 <__mcmp>
 8007684:	2800      	cmp	r0, #0
 8007686:	dc03      	bgt.n	8007690 <_dtoa_r+0xab0>
 8007688:	d1e1      	bne.n	800764e <_dtoa_r+0xa6e>
 800768a:	f019 0f01 	tst.w	r9, #1
 800768e:	d0de      	beq.n	800764e <_dtoa_r+0xa6e>
 8007690:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007694:	d1d8      	bne.n	8007648 <_dtoa_r+0xa68>
 8007696:	9a01      	ldr	r2, [sp, #4]
 8007698:	2339      	movs	r3, #57	; 0x39
 800769a:	7013      	strb	r3, [r2, #0]
 800769c:	462b      	mov	r3, r5
 800769e:	461d      	mov	r5, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80076a6:	2a39      	cmp	r2, #57	; 0x39
 80076a8:	d06c      	beq.n	8007784 <_dtoa_r+0xba4>
 80076aa:	3201      	adds	r2, #1
 80076ac:	701a      	strb	r2, [r3, #0]
 80076ae:	e747      	b.n	8007540 <_dtoa_r+0x960>
 80076b0:	2a00      	cmp	r2, #0
 80076b2:	dd07      	ble.n	80076c4 <_dtoa_r+0xae4>
 80076b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80076b8:	d0ed      	beq.n	8007696 <_dtoa_r+0xab6>
 80076ba:	9a01      	ldr	r2, [sp, #4]
 80076bc:	f109 0301 	add.w	r3, r9, #1
 80076c0:	7013      	strb	r3, [r2, #0]
 80076c2:	e73d      	b.n	8007540 <_dtoa_r+0x960>
 80076c4:	9b04      	ldr	r3, [sp, #16]
 80076c6:	9a08      	ldr	r2, [sp, #32]
 80076c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d043      	beq.n	8007758 <_dtoa_r+0xb78>
 80076d0:	4651      	mov	r1, sl
 80076d2:	2300      	movs	r3, #0
 80076d4:	220a      	movs	r2, #10
 80076d6:	4620      	mov	r0, r4
 80076d8:	f000 f9d6 	bl	8007a88 <__multadd>
 80076dc:	45b8      	cmp	r8, r7
 80076de:	4682      	mov	sl, r0
 80076e0:	f04f 0300 	mov.w	r3, #0
 80076e4:	f04f 020a 	mov.w	r2, #10
 80076e8:	4641      	mov	r1, r8
 80076ea:	4620      	mov	r0, r4
 80076ec:	d107      	bne.n	80076fe <_dtoa_r+0xb1e>
 80076ee:	f000 f9cb 	bl	8007a88 <__multadd>
 80076f2:	4680      	mov	r8, r0
 80076f4:	4607      	mov	r7, r0
 80076f6:	9b04      	ldr	r3, [sp, #16]
 80076f8:	3301      	adds	r3, #1
 80076fa:	9304      	str	r3, [sp, #16]
 80076fc:	e775      	b.n	80075ea <_dtoa_r+0xa0a>
 80076fe:	f000 f9c3 	bl	8007a88 <__multadd>
 8007702:	4639      	mov	r1, r7
 8007704:	4680      	mov	r8, r0
 8007706:	2300      	movs	r3, #0
 8007708:	220a      	movs	r2, #10
 800770a:	4620      	mov	r0, r4
 800770c:	f000 f9bc 	bl	8007a88 <__multadd>
 8007710:	4607      	mov	r7, r0
 8007712:	e7f0      	b.n	80076f6 <_dtoa_r+0xb16>
 8007714:	9b04      	ldr	r3, [sp, #16]
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	9d00      	ldr	r5, [sp, #0]
 800771a:	4631      	mov	r1, r6
 800771c:	4650      	mov	r0, sl
 800771e:	f7ff f9d5 	bl	8006acc <quorem>
 8007722:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007726:	9b00      	ldr	r3, [sp, #0]
 8007728:	f805 9b01 	strb.w	r9, [r5], #1
 800772c:	1aea      	subs	r2, r5, r3
 800772e:	9b01      	ldr	r3, [sp, #4]
 8007730:	4293      	cmp	r3, r2
 8007732:	dd07      	ble.n	8007744 <_dtoa_r+0xb64>
 8007734:	4651      	mov	r1, sl
 8007736:	2300      	movs	r3, #0
 8007738:	220a      	movs	r2, #10
 800773a:	4620      	mov	r0, r4
 800773c:	f000 f9a4 	bl	8007a88 <__multadd>
 8007740:	4682      	mov	sl, r0
 8007742:	e7ea      	b.n	800771a <_dtoa_r+0xb3a>
 8007744:	9b01      	ldr	r3, [sp, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	bfc8      	it	gt
 800774a:	461d      	movgt	r5, r3
 800774c:	9b00      	ldr	r3, [sp, #0]
 800774e:	bfd8      	it	le
 8007750:	2501      	movle	r5, #1
 8007752:	441d      	add	r5, r3
 8007754:	f04f 0800 	mov.w	r8, #0
 8007758:	4651      	mov	r1, sl
 800775a:	2201      	movs	r2, #1
 800775c:	4620      	mov	r0, r4
 800775e:	f000 fb8b 	bl	8007e78 <__lshift>
 8007762:	4631      	mov	r1, r6
 8007764:	4682      	mov	sl, r0
 8007766:	f000 fbf3 	bl	8007f50 <__mcmp>
 800776a:	2800      	cmp	r0, #0
 800776c:	dc96      	bgt.n	800769c <_dtoa_r+0xabc>
 800776e:	d102      	bne.n	8007776 <_dtoa_r+0xb96>
 8007770:	f019 0f01 	tst.w	r9, #1
 8007774:	d192      	bne.n	800769c <_dtoa_r+0xabc>
 8007776:	462b      	mov	r3, r5
 8007778:	461d      	mov	r5, r3
 800777a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800777e:	2a30      	cmp	r2, #48	; 0x30
 8007780:	d0fa      	beq.n	8007778 <_dtoa_r+0xb98>
 8007782:	e6dd      	b.n	8007540 <_dtoa_r+0x960>
 8007784:	9a00      	ldr	r2, [sp, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d189      	bne.n	800769e <_dtoa_r+0xabe>
 800778a:	f10b 0b01 	add.w	fp, fp, #1
 800778e:	2331      	movs	r3, #49	; 0x31
 8007790:	e796      	b.n	80076c0 <_dtoa_r+0xae0>
 8007792:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <_dtoa_r+0xbdc>)
 8007794:	f7ff ba99 	b.w	8006cca <_dtoa_r+0xea>
 8007798:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800779a:	2b00      	cmp	r3, #0
 800779c:	f47f aa6d 	bne.w	8006c7a <_dtoa_r+0x9a>
 80077a0:	4b07      	ldr	r3, [pc, #28]	; (80077c0 <_dtoa_r+0xbe0>)
 80077a2:	f7ff ba92 	b.w	8006cca <_dtoa_r+0xea>
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	dcb5      	bgt.n	8007718 <_dtoa_r+0xb38>
 80077ac:	9b07      	ldr	r3, [sp, #28]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	f73f aeb1 	bgt.w	8007516 <_dtoa_r+0x936>
 80077b4:	e7b0      	b.n	8007718 <_dtoa_r+0xb38>
 80077b6:	bf00      	nop
 80077b8:	0800a31d 	.word	0x0800a31d
 80077bc:	0800a278 	.word	0x0800a278
 80077c0:	0800a2a1 	.word	0x0800a2a1

080077c4 <_free_r>:
 80077c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077c6:	2900      	cmp	r1, #0
 80077c8:	d044      	beq.n	8007854 <_free_r+0x90>
 80077ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ce:	9001      	str	r0, [sp, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f1a1 0404 	sub.w	r4, r1, #4
 80077d6:	bfb8      	it	lt
 80077d8:	18e4      	addlt	r4, r4, r3
 80077da:	f000 f8e7 	bl	80079ac <__malloc_lock>
 80077de:	4a1e      	ldr	r2, [pc, #120]	; (8007858 <_free_r+0x94>)
 80077e0:	9801      	ldr	r0, [sp, #4]
 80077e2:	6813      	ldr	r3, [r2, #0]
 80077e4:	b933      	cbnz	r3, 80077f4 <_free_r+0x30>
 80077e6:	6063      	str	r3, [r4, #4]
 80077e8:	6014      	str	r4, [r2, #0]
 80077ea:	b003      	add	sp, #12
 80077ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077f0:	f000 b8e2 	b.w	80079b8 <__malloc_unlock>
 80077f4:	42a3      	cmp	r3, r4
 80077f6:	d908      	bls.n	800780a <_free_r+0x46>
 80077f8:	6825      	ldr	r5, [r4, #0]
 80077fa:	1961      	adds	r1, r4, r5
 80077fc:	428b      	cmp	r3, r1
 80077fe:	bf01      	itttt	eq
 8007800:	6819      	ldreq	r1, [r3, #0]
 8007802:	685b      	ldreq	r3, [r3, #4]
 8007804:	1949      	addeq	r1, r1, r5
 8007806:	6021      	streq	r1, [r4, #0]
 8007808:	e7ed      	b.n	80077e6 <_free_r+0x22>
 800780a:	461a      	mov	r2, r3
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	b10b      	cbz	r3, 8007814 <_free_r+0x50>
 8007810:	42a3      	cmp	r3, r4
 8007812:	d9fa      	bls.n	800780a <_free_r+0x46>
 8007814:	6811      	ldr	r1, [r2, #0]
 8007816:	1855      	adds	r5, r2, r1
 8007818:	42a5      	cmp	r5, r4
 800781a:	d10b      	bne.n	8007834 <_free_r+0x70>
 800781c:	6824      	ldr	r4, [r4, #0]
 800781e:	4421      	add	r1, r4
 8007820:	1854      	adds	r4, r2, r1
 8007822:	42a3      	cmp	r3, r4
 8007824:	6011      	str	r1, [r2, #0]
 8007826:	d1e0      	bne.n	80077ea <_free_r+0x26>
 8007828:	681c      	ldr	r4, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	6053      	str	r3, [r2, #4]
 800782e:	440c      	add	r4, r1
 8007830:	6014      	str	r4, [r2, #0]
 8007832:	e7da      	b.n	80077ea <_free_r+0x26>
 8007834:	d902      	bls.n	800783c <_free_r+0x78>
 8007836:	230c      	movs	r3, #12
 8007838:	6003      	str	r3, [r0, #0]
 800783a:	e7d6      	b.n	80077ea <_free_r+0x26>
 800783c:	6825      	ldr	r5, [r4, #0]
 800783e:	1961      	adds	r1, r4, r5
 8007840:	428b      	cmp	r3, r1
 8007842:	bf04      	itt	eq
 8007844:	6819      	ldreq	r1, [r3, #0]
 8007846:	685b      	ldreq	r3, [r3, #4]
 8007848:	6063      	str	r3, [r4, #4]
 800784a:	bf04      	itt	eq
 800784c:	1949      	addeq	r1, r1, r5
 800784e:	6021      	streq	r1, [r4, #0]
 8007850:	6054      	str	r4, [r2, #4]
 8007852:	e7ca      	b.n	80077ea <_free_r+0x26>
 8007854:	b003      	add	sp, #12
 8007856:	bd30      	pop	{r4, r5, pc}
 8007858:	20000508 	.word	0x20000508

0800785c <malloc>:
 800785c:	4b02      	ldr	r3, [pc, #8]	; (8007868 <malloc+0xc>)
 800785e:	4601      	mov	r1, r0
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	f000 b823 	b.w	80078ac <_malloc_r>
 8007866:	bf00      	nop
 8007868:	20000068 	.word	0x20000068

0800786c <sbrk_aligned>:
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	4e0e      	ldr	r6, [pc, #56]	; (80078a8 <sbrk_aligned+0x3c>)
 8007870:	460c      	mov	r4, r1
 8007872:	6831      	ldr	r1, [r6, #0]
 8007874:	4605      	mov	r5, r0
 8007876:	b911      	cbnz	r1, 800787e <sbrk_aligned+0x12>
 8007878:	f001 fe1a 	bl	80094b0 <_sbrk_r>
 800787c:	6030      	str	r0, [r6, #0]
 800787e:	4621      	mov	r1, r4
 8007880:	4628      	mov	r0, r5
 8007882:	f001 fe15 	bl	80094b0 <_sbrk_r>
 8007886:	1c43      	adds	r3, r0, #1
 8007888:	d00a      	beq.n	80078a0 <sbrk_aligned+0x34>
 800788a:	1cc4      	adds	r4, r0, #3
 800788c:	f024 0403 	bic.w	r4, r4, #3
 8007890:	42a0      	cmp	r0, r4
 8007892:	d007      	beq.n	80078a4 <sbrk_aligned+0x38>
 8007894:	1a21      	subs	r1, r4, r0
 8007896:	4628      	mov	r0, r5
 8007898:	f001 fe0a 	bl	80094b0 <_sbrk_r>
 800789c:	3001      	adds	r0, #1
 800789e:	d101      	bne.n	80078a4 <sbrk_aligned+0x38>
 80078a0:	f04f 34ff 	mov.w	r4, #4294967295
 80078a4:	4620      	mov	r0, r4
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	2000050c 	.word	0x2000050c

080078ac <_malloc_r>:
 80078ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b0:	1ccd      	adds	r5, r1, #3
 80078b2:	f025 0503 	bic.w	r5, r5, #3
 80078b6:	3508      	adds	r5, #8
 80078b8:	2d0c      	cmp	r5, #12
 80078ba:	bf38      	it	cc
 80078bc:	250c      	movcc	r5, #12
 80078be:	2d00      	cmp	r5, #0
 80078c0:	4607      	mov	r7, r0
 80078c2:	db01      	blt.n	80078c8 <_malloc_r+0x1c>
 80078c4:	42a9      	cmp	r1, r5
 80078c6:	d905      	bls.n	80078d4 <_malloc_r+0x28>
 80078c8:	230c      	movs	r3, #12
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	2600      	movs	r6, #0
 80078ce:	4630      	mov	r0, r6
 80078d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80079a8 <_malloc_r+0xfc>
 80078d8:	f000 f868 	bl	80079ac <__malloc_lock>
 80078dc:	f8d8 3000 	ldr.w	r3, [r8]
 80078e0:	461c      	mov	r4, r3
 80078e2:	bb5c      	cbnz	r4, 800793c <_malloc_r+0x90>
 80078e4:	4629      	mov	r1, r5
 80078e6:	4638      	mov	r0, r7
 80078e8:	f7ff ffc0 	bl	800786c <sbrk_aligned>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	4604      	mov	r4, r0
 80078f0:	d155      	bne.n	800799e <_malloc_r+0xf2>
 80078f2:	f8d8 4000 	ldr.w	r4, [r8]
 80078f6:	4626      	mov	r6, r4
 80078f8:	2e00      	cmp	r6, #0
 80078fa:	d145      	bne.n	8007988 <_malloc_r+0xdc>
 80078fc:	2c00      	cmp	r4, #0
 80078fe:	d048      	beq.n	8007992 <_malloc_r+0xe6>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	4631      	mov	r1, r6
 8007904:	4638      	mov	r0, r7
 8007906:	eb04 0903 	add.w	r9, r4, r3
 800790a:	f001 fdd1 	bl	80094b0 <_sbrk_r>
 800790e:	4581      	cmp	r9, r0
 8007910:	d13f      	bne.n	8007992 <_malloc_r+0xe6>
 8007912:	6821      	ldr	r1, [r4, #0]
 8007914:	1a6d      	subs	r5, r5, r1
 8007916:	4629      	mov	r1, r5
 8007918:	4638      	mov	r0, r7
 800791a:	f7ff ffa7 	bl	800786c <sbrk_aligned>
 800791e:	3001      	adds	r0, #1
 8007920:	d037      	beq.n	8007992 <_malloc_r+0xe6>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	442b      	add	r3, r5
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	f8d8 3000 	ldr.w	r3, [r8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d038      	beq.n	80079a2 <_malloc_r+0xf6>
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	42a2      	cmp	r2, r4
 8007934:	d12b      	bne.n	800798e <_malloc_r+0xe2>
 8007936:	2200      	movs	r2, #0
 8007938:	605a      	str	r2, [r3, #4]
 800793a:	e00f      	b.n	800795c <_malloc_r+0xb0>
 800793c:	6822      	ldr	r2, [r4, #0]
 800793e:	1b52      	subs	r2, r2, r5
 8007940:	d41f      	bmi.n	8007982 <_malloc_r+0xd6>
 8007942:	2a0b      	cmp	r2, #11
 8007944:	d917      	bls.n	8007976 <_malloc_r+0xca>
 8007946:	1961      	adds	r1, r4, r5
 8007948:	42a3      	cmp	r3, r4
 800794a:	6025      	str	r5, [r4, #0]
 800794c:	bf18      	it	ne
 800794e:	6059      	strne	r1, [r3, #4]
 8007950:	6863      	ldr	r3, [r4, #4]
 8007952:	bf08      	it	eq
 8007954:	f8c8 1000 	streq.w	r1, [r8]
 8007958:	5162      	str	r2, [r4, r5]
 800795a:	604b      	str	r3, [r1, #4]
 800795c:	4638      	mov	r0, r7
 800795e:	f104 060b 	add.w	r6, r4, #11
 8007962:	f000 f829 	bl	80079b8 <__malloc_unlock>
 8007966:	f026 0607 	bic.w	r6, r6, #7
 800796a:	1d23      	adds	r3, r4, #4
 800796c:	1af2      	subs	r2, r6, r3
 800796e:	d0ae      	beq.n	80078ce <_malloc_r+0x22>
 8007970:	1b9b      	subs	r3, r3, r6
 8007972:	50a3      	str	r3, [r4, r2]
 8007974:	e7ab      	b.n	80078ce <_malloc_r+0x22>
 8007976:	42a3      	cmp	r3, r4
 8007978:	6862      	ldr	r2, [r4, #4]
 800797a:	d1dd      	bne.n	8007938 <_malloc_r+0x8c>
 800797c:	f8c8 2000 	str.w	r2, [r8]
 8007980:	e7ec      	b.n	800795c <_malloc_r+0xb0>
 8007982:	4623      	mov	r3, r4
 8007984:	6864      	ldr	r4, [r4, #4]
 8007986:	e7ac      	b.n	80078e2 <_malloc_r+0x36>
 8007988:	4634      	mov	r4, r6
 800798a:	6876      	ldr	r6, [r6, #4]
 800798c:	e7b4      	b.n	80078f8 <_malloc_r+0x4c>
 800798e:	4613      	mov	r3, r2
 8007990:	e7cc      	b.n	800792c <_malloc_r+0x80>
 8007992:	230c      	movs	r3, #12
 8007994:	603b      	str	r3, [r7, #0]
 8007996:	4638      	mov	r0, r7
 8007998:	f000 f80e 	bl	80079b8 <__malloc_unlock>
 800799c:	e797      	b.n	80078ce <_malloc_r+0x22>
 800799e:	6025      	str	r5, [r4, #0]
 80079a0:	e7dc      	b.n	800795c <_malloc_r+0xb0>
 80079a2:	605b      	str	r3, [r3, #4]
 80079a4:	deff      	udf	#255	; 0xff
 80079a6:	bf00      	nop
 80079a8:	20000508 	.word	0x20000508

080079ac <__malloc_lock>:
 80079ac:	4801      	ldr	r0, [pc, #4]	; (80079b4 <__malloc_lock+0x8>)
 80079ae:	f7ff b884 	b.w	8006aba <__retarget_lock_acquire_recursive>
 80079b2:	bf00      	nop
 80079b4:	20000504 	.word	0x20000504

080079b8 <__malloc_unlock>:
 80079b8:	4801      	ldr	r0, [pc, #4]	; (80079c0 <__malloc_unlock+0x8>)
 80079ba:	f7ff b87f 	b.w	8006abc <__retarget_lock_release_recursive>
 80079be:	bf00      	nop
 80079c0:	20000504 	.word	0x20000504

080079c4 <_Balloc>:
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	69c6      	ldr	r6, [r0, #28]
 80079c8:	4604      	mov	r4, r0
 80079ca:	460d      	mov	r5, r1
 80079cc:	b976      	cbnz	r6, 80079ec <_Balloc+0x28>
 80079ce:	2010      	movs	r0, #16
 80079d0:	f7ff ff44 	bl	800785c <malloc>
 80079d4:	4602      	mov	r2, r0
 80079d6:	61e0      	str	r0, [r4, #28]
 80079d8:	b920      	cbnz	r0, 80079e4 <_Balloc+0x20>
 80079da:	4b18      	ldr	r3, [pc, #96]	; (8007a3c <_Balloc+0x78>)
 80079dc:	4818      	ldr	r0, [pc, #96]	; (8007a40 <_Balloc+0x7c>)
 80079de:	216b      	movs	r1, #107	; 0x6b
 80079e0:	f001 fd8e 	bl	8009500 <__assert_func>
 80079e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079e8:	6006      	str	r6, [r0, #0]
 80079ea:	60c6      	str	r6, [r0, #12]
 80079ec:	69e6      	ldr	r6, [r4, #28]
 80079ee:	68f3      	ldr	r3, [r6, #12]
 80079f0:	b183      	cbz	r3, 8007a14 <_Balloc+0x50>
 80079f2:	69e3      	ldr	r3, [r4, #28]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079fa:	b9b8      	cbnz	r0, 8007a2c <_Balloc+0x68>
 80079fc:	2101      	movs	r1, #1
 80079fe:	fa01 f605 	lsl.w	r6, r1, r5
 8007a02:	1d72      	adds	r2, r6, #5
 8007a04:	0092      	lsls	r2, r2, #2
 8007a06:	4620      	mov	r0, r4
 8007a08:	f001 fd98 	bl	800953c <_calloc_r>
 8007a0c:	b160      	cbz	r0, 8007a28 <_Balloc+0x64>
 8007a0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a12:	e00e      	b.n	8007a32 <_Balloc+0x6e>
 8007a14:	2221      	movs	r2, #33	; 0x21
 8007a16:	2104      	movs	r1, #4
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f001 fd8f 	bl	800953c <_calloc_r>
 8007a1e:	69e3      	ldr	r3, [r4, #28]
 8007a20:	60f0      	str	r0, [r6, #12]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e4      	bne.n	80079f2 <_Balloc+0x2e>
 8007a28:	2000      	movs	r0, #0
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
 8007a2c:	6802      	ldr	r2, [r0, #0]
 8007a2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a32:	2300      	movs	r3, #0
 8007a34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a38:	e7f7      	b.n	8007a2a <_Balloc+0x66>
 8007a3a:	bf00      	nop
 8007a3c:	0800a2ae 	.word	0x0800a2ae
 8007a40:	0800a32e 	.word	0x0800a32e

08007a44 <_Bfree>:
 8007a44:	b570      	push	{r4, r5, r6, lr}
 8007a46:	69c6      	ldr	r6, [r0, #28]
 8007a48:	4605      	mov	r5, r0
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	b976      	cbnz	r6, 8007a6c <_Bfree+0x28>
 8007a4e:	2010      	movs	r0, #16
 8007a50:	f7ff ff04 	bl	800785c <malloc>
 8007a54:	4602      	mov	r2, r0
 8007a56:	61e8      	str	r0, [r5, #28]
 8007a58:	b920      	cbnz	r0, 8007a64 <_Bfree+0x20>
 8007a5a:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <_Bfree+0x3c>)
 8007a5c:	4809      	ldr	r0, [pc, #36]	; (8007a84 <_Bfree+0x40>)
 8007a5e:	218f      	movs	r1, #143	; 0x8f
 8007a60:	f001 fd4e 	bl	8009500 <__assert_func>
 8007a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a68:	6006      	str	r6, [r0, #0]
 8007a6a:	60c6      	str	r6, [r0, #12]
 8007a6c:	b13c      	cbz	r4, 8007a7e <_Bfree+0x3a>
 8007a6e:	69eb      	ldr	r3, [r5, #28]
 8007a70:	6862      	ldr	r2, [r4, #4]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a78:	6021      	str	r1, [r4, #0]
 8007a7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
 8007a80:	0800a2ae 	.word	0x0800a2ae
 8007a84:	0800a32e 	.word	0x0800a32e

08007a88 <__multadd>:
 8007a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8c:	690d      	ldr	r5, [r1, #16]
 8007a8e:	4607      	mov	r7, r0
 8007a90:	460c      	mov	r4, r1
 8007a92:	461e      	mov	r6, r3
 8007a94:	f101 0c14 	add.w	ip, r1, #20
 8007a98:	2000      	movs	r0, #0
 8007a9a:	f8dc 3000 	ldr.w	r3, [ip]
 8007a9e:	b299      	uxth	r1, r3
 8007aa0:	fb02 6101 	mla	r1, r2, r1, r6
 8007aa4:	0c1e      	lsrs	r6, r3, #16
 8007aa6:	0c0b      	lsrs	r3, r1, #16
 8007aa8:	fb02 3306 	mla	r3, r2, r6, r3
 8007aac:	b289      	uxth	r1, r1
 8007aae:	3001      	adds	r0, #1
 8007ab0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ab4:	4285      	cmp	r5, r0
 8007ab6:	f84c 1b04 	str.w	r1, [ip], #4
 8007aba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007abe:	dcec      	bgt.n	8007a9a <__multadd+0x12>
 8007ac0:	b30e      	cbz	r6, 8007b06 <__multadd+0x7e>
 8007ac2:	68a3      	ldr	r3, [r4, #8]
 8007ac4:	42ab      	cmp	r3, r5
 8007ac6:	dc19      	bgt.n	8007afc <__multadd+0x74>
 8007ac8:	6861      	ldr	r1, [r4, #4]
 8007aca:	4638      	mov	r0, r7
 8007acc:	3101      	adds	r1, #1
 8007ace:	f7ff ff79 	bl	80079c4 <_Balloc>
 8007ad2:	4680      	mov	r8, r0
 8007ad4:	b928      	cbnz	r0, 8007ae2 <__multadd+0x5a>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	4b0c      	ldr	r3, [pc, #48]	; (8007b0c <__multadd+0x84>)
 8007ada:	480d      	ldr	r0, [pc, #52]	; (8007b10 <__multadd+0x88>)
 8007adc:	21ba      	movs	r1, #186	; 0xba
 8007ade:	f001 fd0f 	bl	8009500 <__assert_func>
 8007ae2:	6922      	ldr	r2, [r4, #16]
 8007ae4:	3202      	adds	r2, #2
 8007ae6:	f104 010c 	add.w	r1, r4, #12
 8007aea:	0092      	lsls	r2, r2, #2
 8007aec:	300c      	adds	r0, #12
 8007aee:	f001 fcef 	bl	80094d0 <memcpy>
 8007af2:	4621      	mov	r1, r4
 8007af4:	4638      	mov	r0, r7
 8007af6:	f7ff ffa5 	bl	8007a44 <_Bfree>
 8007afa:	4644      	mov	r4, r8
 8007afc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b00:	3501      	adds	r5, #1
 8007b02:	615e      	str	r6, [r3, #20]
 8007b04:	6125      	str	r5, [r4, #16]
 8007b06:	4620      	mov	r0, r4
 8007b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b0c:	0800a31d 	.word	0x0800a31d
 8007b10:	0800a32e 	.word	0x0800a32e

08007b14 <__s2b>:
 8007b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b18:	460c      	mov	r4, r1
 8007b1a:	4615      	mov	r5, r2
 8007b1c:	461f      	mov	r7, r3
 8007b1e:	2209      	movs	r2, #9
 8007b20:	3308      	adds	r3, #8
 8007b22:	4606      	mov	r6, r0
 8007b24:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b28:	2100      	movs	r1, #0
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	db09      	blt.n	8007b44 <__s2b+0x30>
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff ff47 	bl	80079c4 <_Balloc>
 8007b36:	b940      	cbnz	r0, 8007b4a <__s2b+0x36>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	4b19      	ldr	r3, [pc, #100]	; (8007ba0 <__s2b+0x8c>)
 8007b3c:	4819      	ldr	r0, [pc, #100]	; (8007ba4 <__s2b+0x90>)
 8007b3e:	21d3      	movs	r1, #211	; 0xd3
 8007b40:	f001 fcde 	bl	8009500 <__assert_func>
 8007b44:	0052      	lsls	r2, r2, #1
 8007b46:	3101      	adds	r1, #1
 8007b48:	e7f0      	b.n	8007b2c <__s2b+0x18>
 8007b4a:	9b08      	ldr	r3, [sp, #32]
 8007b4c:	6143      	str	r3, [r0, #20]
 8007b4e:	2d09      	cmp	r5, #9
 8007b50:	f04f 0301 	mov.w	r3, #1
 8007b54:	6103      	str	r3, [r0, #16]
 8007b56:	dd16      	ble.n	8007b86 <__s2b+0x72>
 8007b58:	f104 0909 	add.w	r9, r4, #9
 8007b5c:	46c8      	mov	r8, r9
 8007b5e:	442c      	add	r4, r5
 8007b60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007b64:	4601      	mov	r1, r0
 8007b66:	3b30      	subs	r3, #48	; 0x30
 8007b68:	220a      	movs	r2, #10
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f7ff ff8c 	bl	8007a88 <__multadd>
 8007b70:	45a0      	cmp	r8, r4
 8007b72:	d1f5      	bne.n	8007b60 <__s2b+0x4c>
 8007b74:	f1a5 0408 	sub.w	r4, r5, #8
 8007b78:	444c      	add	r4, r9
 8007b7a:	1b2d      	subs	r5, r5, r4
 8007b7c:	1963      	adds	r3, r4, r5
 8007b7e:	42bb      	cmp	r3, r7
 8007b80:	db04      	blt.n	8007b8c <__s2b+0x78>
 8007b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b86:	340a      	adds	r4, #10
 8007b88:	2509      	movs	r5, #9
 8007b8a:	e7f6      	b.n	8007b7a <__s2b+0x66>
 8007b8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b90:	4601      	mov	r1, r0
 8007b92:	3b30      	subs	r3, #48	; 0x30
 8007b94:	220a      	movs	r2, #10
 8007b96:	4630      	mov	r0, r6
 8007b98:	f7ff ff76 	bl	8007a88 <__multadd>
 8007b9c:	e7ee      	b.n	8007b7c <__s2b+0x68>
 8007b9e:	bf00      	nop
 8007ba0:	0800a31d 	.word	0x0800a31d
 8007ba4:	0800a32e 	.word	0x0800a32e

08007ba8 <__hi0bits>:
 8007ba8:	0c03      	lsrs	r3, r0, #16
 8007baa:	041b      	lsls	r3, r3, #16
 8007bac:	b9d3      	cbnz	r3, 8007be4 <__hi0bits+0x3c>
 8007bae:	0400      	lsls	r0, r0, #16
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007bb6:	bf04      	itt	eq
 8007bb8:	0200      	lsleq	r0, r0, #8
 8007bba:	3308      	addeq	r3, #8
 8007bbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007bc0:	bf04      	itt	eq
 8007bc2:	0100      	lsleq	r0, r0, #4
 8007bc4:	3304      	addeq	r3, #4
 8007bc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007bca:	bf04      	itt	eq
 8007bcc:	0080      	lsleq	r0, r0, #2
 8007bce:	3302      	addeq	r3, #2
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	db05      	blt.n	8007be0 <__hi0bits+0x38>
 8007bd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007bd8:	f103 0301 	add.w	r3, r3, #1
 8007bdc:	bf08      	it	eq
 8007bde:	2320      	moveq	r3, #32
 8007be0:	4618      	mov	r0, r3
 8007be2:	4770      	bx	lr
 8007be4:	2300      	movs	r3, #0
 8007be6:	e7e4      	b.n	8007bb2 <__hi0bits+0xa>

08007be8 <__lo0bits>:
 8007be8:	6803      	ldr	r3, [r0, #0]
 8007bea:	f013 0207 	ands.w	r2, r3, #7
 8007bee:	d00c      	beq.n	8007c0a <__lo0bits+0x22>
 8007bf0:	07d9      	lsls	r1, r3, #31
 8007bf2:	d422      	bmi.n	8007c3a <__lo0bits+0x52>
 8007bf4:	079a      	lsls	r2, r3, #30
 8007bf6:	bf49      	itett	mi
 8007bf8:	085b      	lsrmi	r3, r3, #1
 8007bfa:	089b      	lsrpl	r3, r3, #2
 8007bfc:	6003      	strmi	r3, [r0, #0]
 8007bfe:	2201      	movmi	r2, #1
 8007c00:	bf5c      	itt	pl
 8007c02:	6003      	strpl	r3, [r0, #0]
 8007c04:	2202      	movpl	r2, #2
 8007c06:	4610      	mov	r0, r2
 8007c08:	4770      	bx	lr
 8007c0a:	b299      	uxth	r1, r3
 8007c0c:	b909      	cbnz	r1, 8007c12 <__lo0bits+0x2a>
 8007c0e:	0c1b      	lsrs	r3, r3, #16
 8007c10:	2210      	movs	r2, #16
 8007c12:	b2d9      	uxtb	r1, r3
 8007c14:	b909      	cbnz	r1, 8007c1a <__lo0bits+0x32>
 8007c16:	3208      	adds	r2, #8
 8007c18:	0a1b      	lsrs	r3, r3, #8
 8007c1a:	0719      	lsls	r1, r3, #28
 8007c1c:	bf04      	itt	eq
 8007c1e:	091b      	lsreq	r3, r3, #4
 8007c20:	3204      	addeq	r2, #4
 8007c22:	0799      	lsls	r1, r3, #30
 8007c24:	bf04      	itt	eq
 8007c26:	089b      	lsreq	r3, r3, #2
 8007c28:	3202      	addeq	r2, #2
 8007c2a:	07d9      	lsls	r1, r3, #31
 8007c2c:	d403      	bmi.n	8007c36 <__lo0bits+0x4e>
 8007c2e:	085b      	lsrs	r3, r3, #1
 8007c30:	f102 0201 	add.w	r2, r2, #1
 8007c34:	d003      	beq.n	8007c3e <__lo0bits+0x56>
 8007c36:	6003      	str	r3, [r0, #0]
 8007c38:	e7e5      	b.n	8007c06 <__lo0bits+0x1e>
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	e7e3      	b.n	8007c06 <__lo0bits+0x1e>
 8007c3e:	2220      	movs	r2, #32
 8007c40:	e7e1      	b.n	8007c06 <__lo0bits+0x1e>
	...

08007c44 <__i2b>:
 8007c44:	b510      	push	{r4, lr}
 8007c46:	460c      	mov	r4, r1
 8007c48:	2101      	movs	r1, #1
 8007c4a:	f7ff febb 	bl	80079c4 <_Balloc>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	b928      	cbnz	r0, 8007c5e <__i2b+0x1a>
 8007c52:	4b05      	ldr	r3, [pc, #20]	; (8007c68 <__i2b+0x24>)
 8007c54:	4805      	ldr	r0, [pc, #20]	; (8007c6c <__i2b+0x28>)
 8007c56:	f240 1145 	movw	r1, #325	; 0x145
 8007c5a:	f001 fc51 	bl	8009500 <__assert_func>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	6144      	str	r4, [r0, #20]
 8007c62:	6103      	str	r3, [r0, #16]
 8007c64:	bd10      	pop	{r4, pc}
 8007c66:	bf00      	nop
 8007c68:	0800a31d 	.word	0x0800a31d
 8007c6c:	0800a32e 	.word	0x0800a32e

08007c70 <__multiply>:
 8007c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c74:	4691      	mov	r9, r2
 8007c76:	690a      	ldr	r2, [r1, #16]
 8007c78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	bfb8      	it	lt
 8007c80:	460b      	movlt	r3, r1
 8007c82:	460c      	mov	r4, r1
 8007c84:	bfbc      	itt	lt
 8007c86:	464c      	movlt	r4, r9
 8007c88:	4699      	movlt	r9, r3
 8007c8a:	6927      	ldr	r7, [r4, #16]
 8007c8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c90:	68a3      	ldr	r3, [r4, #8]
 8007c92:	6861      	ldr	r1, [r4, #4]
 8007c94:	eb07 060a 	add.w	r6, r7, sl
 8007c98:	42b3      	cmp	r3, r6
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	bfb8      	it	lt
 8007c9e:	3101      	addlt	r1, #1
 8007ca0:	f7ff fe90 	bl	80079c4 <_Balloc>
 8007ca4:	b930      	cbnz	r0, 8007cb4 <__multiply+0x44>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	4b44      	ldr	r3, [pc, #272]	; (8007dbc <__multiply+0x14c>)
 8007caa:	4845      	ldr	r0, [pc, #276]	; (8007dc0 <__multiply+0x150>)
 8007cac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007cb0:	f001 fc26 	bl	8009500 <__assert_func>
 8007cb4:	f100 0514 	add.w	r5, r0, #20
 8007cb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cbc:	462b      	mov	r3, r5
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	4543      	cmp	r3, r8
 8007cc2:	d321      	bcc.n	8007d08 <__multiply+0x98>
 8007cc4:	f104 0314 	add.w	r3, r4, #20
 8007cc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ccc:	f109 0314 	add.w	r3, r9, #20
 8007cd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007cd4:	9202      	str	r2, [sp, #8]
 8007cd6:	1b3a      	subs	r2, r7, r4
 8007cd8:	3a15      	subs	r2, #21
 8007cda:	f022 0203 	bic.w	r2, r2, #3
 8007cde:	3204      	adds	r2, #4
 8007ce0:	f104 0115 	add.w	r1, r4, #21
 8007ce4:	428f      	cmp	r7, r1
 8007ce6:	bf38      	it	cc
 8007ce8:	2204      	movcc	r2, #4
 8007cea:	9201      	str	r2, [sp, #4]
 8007cec:	9a02      	ldr	r2, [sp, #8]
 8007cee:	9303      	str	r3, [sp, #12]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d80c      	bhi.n	8007d0e <__multiply+0x9e>
 8007cf4:	2e00      	cmp	r6, #0
 8007cf6:	dd03      	ble.n	8007d00 <__multiply+0x90>
 8007cf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d05b      	beq.n	8007db8 <__multiply+0x148>
 8007d00:	6106      	str	r6, [r0, #16]
 8007d02:	b005      	add	sp, #20
 8007d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d08:	f843 2b04 	str.w	r2, [r3], #4
 8007d0c:	e7d8      	b.n	8007cc0 <__multiply+0x50>
 8007d0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d12:	f1ba 0f00 	cmp.w	sl, #0
 8007d16:	d024      	beq.n	8007d62 <__multiply+0xf2>
 8007d18:	f104 0e14 	add.w	lr, r4, #20
 8007d1c:	46a9      	mov	r9, r5
 8007d1e:	f04f 0c00 	mov.w	ip, #0
 8007d22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d26:	f8d9 1000 	ldr.w	r1, [r9]
 8007d2a:	fa1f fb82 	uxth.w	fp, r2
 8007d2e:	b289      	uxth	r1, r1
 8007d30:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d38:	f8d9 2000 	ldr.w	r2, [r9]
 8007d3c:	4461      	add	r1, ip
 8007d3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d42:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d4a:	b289      	uxth	r1, r1
 8007d4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d50:	4577      	cmp	r7, lr
 8007d52:	f849 1b04 	str.w	r1, [r9], #4
 8007d56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d5a:	d8e2      	bhi.n	8007d22 <__multiply+0xb2>
 8007d5c:	9a01      	ldr	r2, [sp, #4]
 8007d5e:	f845 c002 	str.w	ip, [r5, r2]
 8007d62:	9a03      	ldr	r2, [sp, #12]
 8007d64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	f1b9 0f00 	cmp.w	r9, #0
 8007d6e:	d021      	beq.n	8007db4 <__multiply+0x144>
 8007d70:	6829      	ldr	r1, [r5, #0]
 8007d72:	f104 0c14 	add.w	ip, r4, #20
 8007d76:	46ae      	mov	lr, r5
 8007d78:	f04f 0a00 	mov.w	sl, #0
 8007d7c:	f8bc b000 	ldrh.w	fp, [ip]
 8007d80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d84:	fb09 220b 	mla	r2, r9, fp, r2
 8007d88:	4452      	add	r2, sl
 8007d8a:	b289      	uxth	r1, r1
 8007d8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d90:	f84e 1b04 	str.w	r1, [lr], #4
 8007d94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007d98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d9c:	f8be 1000 	ldrh.w	r1, [lr]
 8007da0:	fb09 110a 	mla	r1, r9, sl, r1
 8007da4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007da8:	4567      	cmp	r7, ip
 8007daa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007dae:	d8e5      	bhi.n	8007d7c <__multiply+0x10c>
 8007db0:	9a01      	ldr	r2, [sp, #4]
 8007db2:	50a9      	str	r1, [r5, r2]
 8007db4:	3504      	adds	r5, #4
 8007db6:	e799      	b.n	8007cec <__multiply+0x7c>
 8007db8:	3e01      	subs	r6, #1
 8007dba:	e79b      	b.n	8007cf4 <__multiply+0x84>
 8007dbc:	0800a31d 	.word	0x0800a31d
 8007dc0:	0800a32e 	.word	0x0800a32e

08007dc4 <__pow5mult>:
 8007dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc8:	4615      	mov	r5, r2
 8007dca:	f012 0203 	ands.w	r2, r2, #3
 8007dce:	4606      	mov	r6, r0
 8007dd0:	460f      	mov	r7, r1
 8007dd2:	d007      	beq.n	8007de4 <__pow5mult+0x20>
 8007dd4:	4c25      	ldr	r4, [pc, #148]	; (8007e6c <__pow5mult+0xa8>)
 8007dd6:	3a01      	subs	r2, #1
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dde:	f7ff fe53 	bl	8007a88 <__multadd>
 8007de2:	4607      	mov	r7, r0
 8007de4:	10ad      	asrs	r5, r5, #2
 8007de6:	d03d      	beq.n	8007e64 <__pow5mult+0xa0>
 8007de8:	69f4      	ldr	r4, [r6, #28]
 8007dea:	b97c      	cbnz	r4, 8007e0c <__pow5mult+0x48>
 8007dec:	2010      	movs	r0, #16
 8007dee:	f7ff fd35 	bl	800785c <malloc>
 8007df2:	4602      	mov	r2, r0
 8007df4:	61f0      	str	r0, [r6, #28]
 8007df6:	b928      	cbnz	r0, 8007e04 <__pow5mult+0x40>
 8007df8:	4b1d      	ldr	r3, [pc, #116]	; (8007e70 <__pow5mult+0xac>)
 8007dfa:	481e      	ldr	r0, [pc, #120]	; (8007e74 <__pow5mult+0xb0>)
 8007dfc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007e00:	f001 fb7e 	bl	8009500 <__assert_func>
 8007e04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e08:	6004      	str	r4, [r0, #0]
 8007e0a:	60c4      	str	r4, [r0, #12]
 8007e0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007e10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e14:	b94c      	cbnz	r4, 8007e2a <__pow5mult+0x66>
 8007e16:	f240 2171 	movw	r1, #625	; 0x271
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f7ff ff12 	bl	8007c44 <__i2b>
 8007e20:	2300      	movs	r3, #0
 8007e22:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e26:	4604      	mov	r4, r0
 8007e28:	6003      	str	r3, [r0, #0]
 8007e2a:	f04f 0900 	mov.w	r9, #0
 8007e2e:	07eb      	lsls	r3, r5, #31
 8007e30:	d50a      	bpl.n	8007e48 <__pow5mult+0x84>
 8007e32:	4639      	mov	r1, r7
 8007e34:	4622      	mov	r2, r4
 8007e36:	4630      	mov	r0, r6
 8007e38:	f7ff ff1a 	bl	8007c70 <__multiply>
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	4680      	mov	r8, r0
 8007e40:	4630      	mov	r0, r6
 8007e42:	f7ff fdff 	bl	8007a44 <_Bfree>
 8007e46:	4647      	mov	r7, r8
 8007e48:	106d      	asrs	r5, r5, #1
 8007e4a:	d00b      	beq.n	8007e64 <__pow5mult+0xa0>
 8007e4c:	6820      	ldr	r0, [r4, #0]
 8007e4e:	b938      	cbnz	r0, 8007e60 <__pow5mult+0x9c>
 8007e50:	4622      	mov	r2, r4
 8007e52:	4621      	mov	r1, r4
 8007e54:	4630      	mov	r0, r6
 8007e56:	f7ff ff0b 	bl	8007c70 <__multiply>
 8007e5a:	6020      	str	r0, [r4, #0]
 8007e5c:	f8c0 9000 	str.w	r9, [r0]
 8007e60:	4604      	mov	r4, r0
 8007e62:	e7e4      	b.n	8007e2e <__pow5mult+0x6a>
 8007e64:	4638      	mov	r0, r7
 8007e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e6a:	bf00      	nop
 8007e6c:	0800a478 	.word	0x0800a478
 8007e70:	0800a2ae 	.word	0x0800a2ae
 8007e74:	0800a32e 	.word	0x0800a32e

08007e78 <__lshift>:
 8007e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	6849      	ldr	r1, [r1, #4]
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e86:	68a3      	ldr	r3, [r4, #8]
 8007e88:	4607      	mov	r7, r0
 8007e8a:	4691      	mov	r9, r2
 8007e8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e90:	f108 0601 	add.w	r6, r8, #1
 8007e94:	42b3      	cmp	r3, r6
 8007e96:	db0b      	blt.n	8007eb0 <__lshift+0x38>
 8007e98:	4638      	mov	r0, r7
 8007e9a:	f7ff fd93 	bl	80079c4 <_Balloc>
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	b948      	cbnz	r0, 8007eb6 <__lshift+0x3e>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	4b28      	ldr	r3, [pc, #160]	; (8007f48 <__lshift+0xd0>)
 8007ea6:	4829      	ldr	r0, [pc, #164]	; (8007f4c <__lshift+0xd4>)
 8007ea8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007eac:	f001 fb28 	bl	8009500 <__assert_func>
 8007eb0:	3101      	adds	r1, #1
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	e7ee      	b.n	8007e94 <__lshift+0x1c>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f100 0114 	add.w	r1, r0, #20
 8007ebc:	f100 0210 	add.w	r2, r0, #16
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	4553      	cmp	r3, sl
 8007ec4:	db33      	blt.n	8007f2e <__lshift+0xb6>
 8007ec6:	6920      	ldr	r0, [r4, #16]
 8007ec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ecc:	f104 0314 	add.w	r3, r4, #20
 8007ed0:	f019 091f 	ands.w	r9, r9, #31
 8007ed4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ed8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007edc:	d02b      	beq.n	8007f36 <__lshift+0xbe>
 8007ede:	f1c9 0e20 	rsb	lr, r9, #32
 8007ee2:	468a      	mov	sl, r1
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	fa00 f009 	lsl.w	r0, r0, r9
 8007eec:	4310      	orrs	r0, r2
 8007eee:	f84a 0b04 	str.w	r0, [sl], #4
 8007ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef6:	459c      	cmp	ip, r3
 8007ef8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007efc:	d8f3      	bhi.n	8007ee6 <__lshift+0x6e>
 8007efe:	ebac 0304 	sub.w	r3, ip, r4
 8007f02:	3b15      	subs	r3, #21
 8007f04:	f023 0303 	bic.w	r3, r3, #3
 8007f08:	3304      	adds	r3, #4
 8007f0a:	f104 0015 	add.w	r0, r4, #21
 8007f0e:	4584      	cmp	ip, r0
 8007f10:	bf38      	it	cc
 8007f12:	2304      	movcc	r3, #4
 8007f14:	50ca      	str	r2, [r1, r3]
 8007f16:	b10a      	cbz	r2, 8007f1c <__lshift+0xa4>
 8007f18:	f108 0602 	add.w	r6, r8, #2
 8007f1c:	3e01      	subs	r6, #1
 8007f1e:	4638      	mov	r0, r7
 8007f20:	612e      	str	r6, [r5, #16]
 8007f22:	4621      	mov	r1, r4
 8007f24:	f7ff fd8e 	bl	8007a44 <_Bfree>
 8007f28:	4628      	mov	r0, r5
 8007f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f32:	3301      	adds	r3, #1
 8007f34:	e7c5      	b.n	8007ec2 <__lshift+0x4a>
 8007f36:	3904      	subs	r1, #4
 8007f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f40:	459c      	cmp	ip, r3
 8007f42:	d8f9      	bhi.n	8007f38 <__lshift+0xc0>
 8007f44:	e7ea      	b.n	8007f1c <__lshift+0xa4>
 8007f46:	bf00      	nop
 8007f48:	0800a31d 	.word	0x0800a31d
 8007f4c:	0800a32e 	.word	0x0800a32e

08007f50 <__mcmp>:
 8007f50:	b530      	push	{r4, r5, lr}
 8007f52:	6902      	ldr	r2, [r0, #16]
 8007f54:	690c      	ldr	r4, [r1, #16]
 8007f56:	1b12      	subs	r2, r2, r4
 8007f58:	d10e      	bne.n	8007f78 <__mcmp+0x28>
 8007f5a:	f100 0314 	add.w	r3, r0, #20
 8007f5e:	3114      	adds	r1, #20
 8007f60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f70:	42a5      	cmp	r5, r4
 8007f72:	d003      	beq.n	8007f7c <__mcmp+0x2c>
 8007f74:	d305      	bcc.n	8007f82 <__mcmp+0x32>
 8007f76:	2201      	movs	r2, #1
 8007f78:	4610      	mov	r0, r2
 8007f7a:	bd30      	pop	{r4, r5, pc}
 8007f7c:	4283      	cmp	r3, r0
 8007f7e:	d3f3      	bcc.n	8007f68 <__mcmp+0x18>
 8007f80:	e7fa      	b.n	8007f78 <__mcmp+0x28>
 8007f82:	f04f 32ff 	mov.w	r2, #4294967295
 8007f86:	e7f7      	b.n	8007f78 <__mcmp+0x28>

08007f88 <__mdiff>:
 8007f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	4606      	mov	r6, r0
 8007f90:	4611      	mov	r1, r2
 8007f92:	4620      	mov	r0, r4
 8007f94:	4690      	mov	r8, r2
 8007f96:	f7ff ffdb 	bl	8007f50 <__mcmp>
 8007f9a:	1e05      	subs	r5, r0, #0
 8007f9c:	d110      	bne.n	8007fc0 <__mdiff+0x38>
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f7ff fd0f 	bl	80079c4 <_Balloc>
 8007fa6:	b930      	cbnz	r0, 8007fb6 <__mdiff+0x2e>
 8007fa8:	4b3a      	ldr	r3, [pc, #232]	; (8008094 <__mdiff+0x10c>)
 8007faa:	4602      	mov	r2, r0
 8007fac:	f240 2137 	movw	r1, #567	; 0x237
 8007fb0:	4839      	ldr	r0, [pc, #228]	; (8008098 <__mdiff+0x110>)
 8007fb2:	f001 faa5 	bl	8009500 <__assert_func>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc0:	bfa4      	itt	ge
 8007fc2:	4643      	movge	r3, r8
 8007fc4:	46a0      	movge	r8, r4
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fcc:	bfa6      	itte	ge
 8007fce:	461c      	movge	r4, r3
 8007fd0:	2500      	movge	r5, #0
 8007fd2:	2501      	movlt	r5, #1
 8007fd4:	f7ff fcf6 	bl	80079c4 <_Balloc>
 8007fd8:	b920      	cbnz	r0, 8007fe4 <__mdiff+0x5c>
 8007fda:	4b2e      	ldr	r3, [pc, #184]	; (8008094 <__mdiff+0x10c>)
 8007fdc:	4602      	mov	r2, r0
 8007fde:	f240 2145 	movw	r1, #581	; 0x245
 8007fe2:	e7e5      	b.n	8007fb0 <__mdiff+0x28>
 8007fe4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007fe8:	6926      	ldr	r6, [r4, #16]
 8007fea:	60c5      	str	r5, [r0, #12]
 8007fec:	f104 0914 	add.w	r9, r4, #20
 8007ff0:	f108 0514 	add.w	r5, r8, #20
 8007ff4:	f100 0e14 	add.w	lr, r0, #20
 8007ff8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ffc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008000:	f108 0210 	add.w	r2, r8, #16
 8008004:	46f2      	mov	sl, lr
 8008006:	2100      	movs	r1, #0
 8008008:	f859 3b04 	ldr.w	r3, [r9], #4
 800800c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008010:	fa11 f88b 	uxtah	r8, r1, fp
 8008014:	b299      	uxth	r1, r3
 8008016:	0c1b      	lsrs	r3, r3, #16
 8008018:	eba8 0801 	sub.w	r8, r8, r1
 800801c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008020:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008024:	fa1f f888 	uxth.w	r8, r8
 8008028:	1419      	asrs	r1, r3, #16
 800802a:	454e      	cmp	r6, r9
 800802c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008030:	f84a 3b04 	str.w	r3, [sl], #4
 8008034:	d8e8      	bhi.n	8008008 <__mdiff+0x80>
 8008036:	1b33      	subs	r3, r6, r4
 8008038:	3b15      	subs	r3, #21
 800803a:	f023 0303 	bic.w	r3, r3, #3
 800803e:	3304      	adds	r3, #4
 8008040:	3415      	adds	r4, #21
 8008042:	42a6      	cmp	r6, r4
 8008044:	bf38      	it	cc
 8008046:	2304      	movcc	r3, #4
 8008048:	441d      	add	r5, r3
 800804a:	4473      	add	r3, lr
 800804c:	469e      	mov	lr, r3
 800804e:	462e      	mov	r6, r5
 8008050:	4566      	cmp	r6, ip
 8008052:	d30e      	bcc.n	8008072 <__mdiff+0xea>
 8008054:	f10c 0203 	add.w	r2, ip, #3
 8008058:	1b52      	subs	r2, r2, r5
 800805a:	f022 0203 	bic.w	r2, r2, #3
 800805e:	3d03      	subs	r5, #3
 8008060:	45ac      	cmp	ip, r5
 8008062:	bf38      	it	cc
 8008064:	2200      	movcc	r2, #0
 8008066:	4413      	add	r3, r2
 8008068:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800806c:	b17a      	cbz	r2, 800808e <__mdiff+0x106>
 800806e:	6107      	str	r7, [r0, #16]
 8008070:	e7a4      	b.n	8007fbc <__mdiff+0x34>
 8008072:	f856 8b04 	ldr.w	r8, [r6], #4
 8008076:	fa11 f288 	uxtah	r2, r1, r8
 800807a:	1414      	asrs	r4, r2, #16
 800807c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008080:	b292      	uxth	r2, r2
 8008082:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008086:	f84e 2b04 	str.w	r2, [lr], #4
 800808a:	1421      	asrs	r1, r4, #16
 800808c:	e7e0      	b.n	8008050 <__mdiff+0xc8>
 800808e:	3f01      	subs	r7, #1
 8008090:	e7ea      	b.n	8008068 <__mdiff+0xe0>
 8008092:	bf00      	nop
 8008094:	0800a31d 	.word	0x0800a31d
 8008098:	0800a32e 	.word	0x0800a32e

0800809c <__ulp>:
 800809c:	b082      	sub	sp, #8
 800809e:	ed8d 0b00 	vstr	d0, [sp]
 80080a2:	9a01      	ldr	r2, [sp, #4]
 80080a4:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <__ulp+0x48>)
 80080a6:	4013      	ands	r3, r2
 80080a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	dc08      	bgt.n	80080c2 <__ulp+0x26>
 80080b0:	425b      	negs	r3, r3
 80080b2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80080b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80080ba:	da04      	bge.n	80080c6 <__ulp+0x2a>
 80080bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80080c0:	4113      	asrs	r3, r2
 80080c2:	2200      	movs	r2, #0
 80080c4:	e008      	b.n	80080d8 <__ulp+0x3c>
 80080c6:	f1a2 0314 	sub.w	r3, r2, #20
 80080ca:	2b1e      	cmp	r3, #30
 80080cc:	bfda      	itte	le
 80080ce:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80080d2:	40da      	lsrle	r2, r3
 80080d4:	2201      	movgt	r2, #1
 80080d6:	2300      	movs	r3, #0
 80080d8:	4619      	mov	r1, r3
 80080da:	4610      	mov	r0, r2
 80080dc:	ec41 0b10 	vmov	d0, r0, r1
 80080e0:	b002      	add	sp, #8
 80080e2:	4770      	bx	lr
 80080e4:	7ff00000 	.word	0x7ff00000

080080e8 <__b2d>:
 80080e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ec:	6906      	ldr	r6, [r0, #16]
 80080ee:	f100 0814 	add.w	r8, r0, #20
 80080f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80080f6:	1f37      	subs	r7, r6, #4
 80080f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80080fc:	4610      	mov	r0, r2
 80080fe:	f7ff fd53 	bl	8007ba8 <__hi0bits>
 8008102:	f1c0 0320 	rsb	r3, r0, #32
 8008106:	280a      	cmp	r0, #10
 8008108:	600b      	str	r3, [r1, #0]
 800810a:	491b      	ldr	r1, [pc, #108]	; (8008178 <__b2d+0x90>)
 800810c:	dc15      	bgt.n	800813a <__b2d+0x52>
 800810e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008112:	fa22 f30c 	lsr.w	r3, r2, ip
 8008116:	45b8      	cmp	r8, r7
 8008118:	ea43 0501 	orr.w	r5, r3, r1
 800811c:	bf34      	ite	cc
 800811e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008122:	2300      	movcs	r3, #0
 8008124:	3015      	adds	r0, #21
 8008126:	fa02 f000 	lsl.w	r0, r2, r0
 800812a:	fa23 f30c 	lsr.w	r3, r3, ip
 800812e:	4303      	orrs	r3, r0
 8008130:	461c      	mov	r4, r3
 8008132:	ec45 4b10 	vmov	d0, r4, r5
 8008136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813a:	45b8      	cmp	r8, r7
 800813c:	bf3a      	itte	cc
 800813e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008142:	f1a6 0708 	subcc.w	r7, r6, #8
 8008146:	2300      	movcs	r3, #0
 8008148:	380b      	subs	r0, #11
 800814a:	d012      	beq.n	8008172 <__b2d+0x8a>
 800814c:	f1c0 0120 	rsb	r1, r0, #32
 8008150:	fa23 f401 	lsr.w	r4, r3, r1
 8008154:	4082      	lsls	r2, r0
 8008156:	4322      	orrs	r2, r4
 8008158:	4547      	cmp	r7, r8
 800815a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800815e:	bf8c      	ite	hi
 8008160:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008164:	2200      	movls	r2, #0
 8008166:	4083      	lsls	r3, r0
 8008168:	40ca      	lsrs	r2, r1
 800816a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800816e:	4313      	orrs	r3, r2
 8008170:	e7de      	b.n	8008130 <__b2d+0x48>
 8008172:	ea42 0501 	orr.w	r5, r2, r1
 8008176:	e7db      	b.n	8008130 <__b2d+0x48>
 8008178:	3ff00000 	.word	0x3ff00000

0800817c <__d2b>:
 800817c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008180:	460f      	mov	r7, r1
 8008182:	2101      	movs	r1, #1
 8008184:	ec59 8b10 	vmov	r8, r9, d0
 8008188:	4616      	mov	r6, r2
 800818a:	f7ff fc1b 	bl	80079c4 <_Balloc>
 800818e:	4604      	mov	r4, r0
 8008190:	b930      	cbnz	r0, 80081a0 <__d2b+0x24>
 8008192:	4602      	mov	r2, r0
 8008194:	4b24      	ldr	r3, [pc, #144]	; (8008228 <__d2b+0xac>)
 8008196:	4825      	ldr	r0, [pc, #148]	; (800822c <__d2b+0xb0>)
 8008198:	f240 310f 	movw	r1, #783	; 0x30f
 800819c:	f001 f9b0 	bl	8009500 <__assert_func>
 80081a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80081a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081a8:	bb2d      	cbnz	r5, 80081f6 <__d2b+0x7a>
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	f1b8 0300 	subs.w	r3, r8, #0
 80081b0:	d026      	beq.n	8008200 <__d2b+0x84>
 80081b2:	4668      	mov	r0, sp
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	f7ff fd17 	bl	8007be8 <__lo0bits>
 80081ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80081be:	b1e8      	cbz	r0, 80081fc <__d2b+0x80>
 80081c0:	f1c0 0320 	rsb	r3, r0, #32
 80081c4:	fa02 f303 	lsl.w	r3, r2, r3
 80081c8:	430b      	orrs	r3, r1
 80081ca:	40c2      	lsrs	r2, r0
 80081cc:	6163      	str	r3, [r4, #20]
 80081ce:	9201      	str	r2, [sp, #4]
 80081d0:	9b01      	ldr	r3, [sp, #4]
 80081d2:	61a3      	str	r3, [r4, #24]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	bf14      	ite	ne
 80081d8:	2202      	movne	r2, #2
 80081da:	2201      	moveq	r2, #1
 80081dc:	6122      	str	r2, [r4, #16]
 80081de:	b1bd      	cbz	r5, 8008210 <__d2b+0x94>
 80081e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081e4:	4405      	add	r5, r0
 80081e6:	603d      	str	r5, [r7, #0]
 80081e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081ec:	6030      	str	r0, [r6, #0]
 80081ee:	4620      	mov	r0, r4
 80081f0:	b003      	add	sp, #12
 80081f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081fa:	e7d6      	b.n	80081aa <__d2b+0x2e>
 80081fc:	6161      	str	r1, [r4, #20]
 80081fe:	e7e7      	b.n	80081d0 <__d2b+0x54>
 8008200:	a801      	add	r0, sp, #4
 8008202:	f7ff fcf1 	bl	8007be8 <__lo0bits>
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	6163      	str	r3, [r4, #20]
 800820a:	3020      	adds	r0, #32
 800820c:	2201      	movs	r2, #1
 800820e:	e7e5      	b.n	80081dc <__d2b+0x60>
 8008210:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008214:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008218:	6038      	str	r0, [r7, #0]
 800821a:	6918      	ldr	r0, [r3, #16]
 800821c:	f7ff fcc4 	bl	8007ba8 <__hi0bits>
 8008220:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008224:	e7e2      	b.n	80081ec <__d2b+0x70>
 8008226:	bf00      	nop
 8008228:	0800a31d 	.word	0x0800a31d
 800822c:	0800a32e 	.word	0x0800a32e

08008230 <__ratio>:
 8008230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	4688      	mov	r8, r1
 8008236:	4669      	mov	r1, sp
 8008238:	4681      	mov	r9, r0
 800823a:	f7ff ff55 	bl	80080e8 <__b2d>
 800823e:	a901      	add	r1, sp, #4
 8008240:	4640      	mov	r0, r8
 8008242:	ec55 4b10 	vmov	r4, r5, d0
 8008246:	f7ff ff4f 	bl	80080e8 <__b2d>
 800824a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800824e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008252:	eba3 0c02 	sub.w	ip, r3, r2
 8008256:	e9dd 3200 	ldrd	r3, r2, [sp]
 800825a:	1a9b      	subs	r3, r3, r2
 800825c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008260:	ec51 0b10 	vmov	r0, r1, d0
 8008264:	2b00      	cmp	r3, #0
 8008266:	bfd6      	itet	le
 8008268:	460a      	movle	r2, r1
 800826a:	462a      	movgt	r2, r5
 800826c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008270:	468b      	mov	fp, r1
 8008272:	462f      	mov	r7, r5
 8008274:	bfd4      	ite	le
 8008276:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800827a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800827e:	4620      	mov	r0, r4
 8008280:	ee10 2a10 	vmov	r2, s0
 8008284:	465b      	mov	r3, fp
 8008286:	4639      	mov	r1, r7
 8008288:	f7f8 fae8 	bl	800085c <__aeabi_ddiv>
 800828c:	ec41 0b10 	vmov	d0, r0, r1
 8008290:	b003      	add	sp, #12
 8008292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008296 <__copybits>:
 8008296:	3901      	subs	r1, #1
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	1149      	asrs	r1, r1, #5
 800829c:	6914      	ldr	r4, [r2, #16]
 800829e:	3101      	adds	r1, #1
 80082a0:	f102 0314 	add.w	r3, r2, #20
 80082a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80082a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80082ac:	1f05      	subs	r5, r0, #4
 80082ae:	42a3      	cmp	r3, r4
 80082b0:	d30c      	bcc.n	80082cc <__copybits+0x36>
 80082b2:	1aa3      	subs	r3, r4, r2
 80082b4:	3b11      	subs	r3, #17
 80082b6:	f023 0303 	bic.w	r3, r3, #3
 80082ba:	3211      	adds	r2, #17
 80082bc:	42a2      	cmp	r2, r4
 80082be:	bf88      	it	hi
 80082c0:	2300      	movhi	r3, #0
 80082c2:	4418      	add	r0, r3
 80082c4:	2300      	movs	r3, #0
 80082c6:	4288      	cmp	r0, r1
 80082c8:	d305      	bcc.n	80082d6 <__copybits+0x40>
 80082ca:	bd70      	pop	{r4, r5, r6, pc}
 80082cc:	f853 6b04 	ldr.w	r6, [r3], #4
 80082d0:	f845 6f04 	str.w	r6, [r5, #4]!
 80082d4:	e7eb      	b.n	80082ae <__copybits+0x18>
 80082d6:	f840 3b04 	str.w	r3, [r0], #4
 80082da:	e7f4      	b.n	80082c6 <__copybits+0x30>

080082dc <__any_on>:
 80082dc:	f100 0214 	add.w	r2, r0, #20
 80082e0:	6900      	ldr	r0, [r0, #16]
 80082e2:	114b      	asrs	r3, r1, #5
 80082e4:	4298      	cmp	r0, r3
 80082e6:	b510      	push	{r4, lr}
 80082e8:	db11      	blt.n	800830e <__any_on+0x32>
 80082ea:	dd0a      	ble.n	8008302 <__any_on+0x26>
 80082ec:	f011 011f 	ands.w	r1, r1, #31
 80082f0:	d007      	beq.n	8008302 <__any_on+0x26>
 80082f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80082f6:	fa24 f001 	lsr.w	r0, r4, r1
 80082fa:	fa00 f101 	lsl.w	r1, r0, r1
 80082fe:	428c      	cmp	r4, r1
 8008300:	d10b      	bne.n	800831a <__any_on+0x3e>
 8008302:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008306:	4293      	cmp	r3, r2
 8008308:	d803      	bhi.n	8008312 <__any_on+0x36>
 800830a:	2000      	movs	r0, #0
 800830c:	bd10      	pop	{r4, pc}
 800830e:	4603      	mov	r3, r0
 8008310:	e7f7      	b.n	8008302 <__any_on+0x26>
 8008312:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008316:	2900      	cmp	r1, #0
 8008318:	d0f5      	beq.n	8008306 <__any_on+0x2a>
 800831a:	2001      	movs	r0, #1
 800831c:	e7f6      	b.n	800830c <__any_on+0x30>

0800831e <sulp>:
 800831e:	b570      	push	{r4, r5, r6, lr}
 8008320:	4604      	mov	r4, r0
 8008322:	460d      	mov	r5, r1
 8008324:	ec45 4b10 	vmov	d0, r4, r5
 8008328:	4616      	mov	r6, r2
 800832a:	f7ff feb7 	bl	800809c <__ulp>
 800832e:	ec51 0b10 	vmov	r0, r1, d0
 8008332:	b17e      	cbz	r6, 8008354 <sulp+0x36>
 8008334:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008338:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800833c:	2b00      	cmp	r3, #0
 800833e:	dd09      	ble.n	8008354 <sulp+0x36>
 8008340:	051b      	lsls	r3, r3, #20
 8008342:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008346:	2400      	movs	r4, #0
 8008348:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800834c:	4622      	mov	r2, r4
 800834e:	462b      	mov	r3, r5
 8008350:	f7f8 f95a 	bl	8000608 <__aeabi_dmul>
 8008354:	bd70      	pop	{r4, r5, r6, pc}
	...

08008358 <_strtod_l>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	ed2d 8b02 	vpush	{d8}
 8008360:	b09b      	sub	sp, #108	; 0x6c
 8008362:	4604      	mov	r4, r0
 8008364:	9213      	str	r2, [sp, #76]	; 0x4c
 8008366:	2200      	movs	r2, #0
 8008368:	9216      	str	r2, [sp, #88]	; 0x58
 800836a:	460d      	mov	r5, r1
 800836c:	f04f 0800 	mov.w	r8, #0
 8008370:	f04f 0900 	mov.w	r9, #0
 8008374:	460a      	mov	r2, r1
 8008376:	9215      	str	r2, [sp, #84]	; 0x54
 8008378:	7811      	ldrb	r1, [r2, #0]
 800837a:	292b      	cmp	r1, #43	; 0x2b
 800837c:	d04c      	beq.n	8008418 <_strtod_l+0xc0>
 800837e:	d83a      	bhi.n	80083f6 <_strtod_l+0x9e>
 8008380:	290d      	cmp	r1, #13
 8008382:	d834      	bhi.n	80083ee <_strtod_l+0x96>
 8008384:	2908      	cmp	r1, #8
 8008386:	d834      	bhi.n	80083f2 <_strtod_l+0x9a>
 8008388:	2900      	cmp	r1, #0
 800838a:	d03d      	beq.n	8008408 <_strtod_l+0xb0>
 800838c:	2200      	movs	r2, #0
 800838e:	920a      	str	r2, [sp, #40]	; 0x28
 8008390:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008392:	7832      	ldrb	r2, [r6, #0]
 8008394:	2a30      	cmp	r2, #48	; 0x30
 8008396:	f040 80b4 	bne.w	8008502 <_strtod_l+0x1aa>
 800839a:	7872      	ldrb	r2, [r6, #1]
 800839c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80083a0:	2a58      	cmp	r2, #88	; 0x58
 80083a2:	d170      	bne.n	8008486 <_strtod_l+0x12e>
 80083a4:	9302      	str	r3, [sp, #8]
 80083a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a8:	9301      	str	r3, [sp, #4]
 80083aa:	ab16      	add	r3, sp, #88	; 0x58
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	4a8e      	ldr	r2, [pc, #568]	; (80085e8 <_strtod_l+0x290>)
 80083b0:	ab17      	add	r3, sp, #92	; 0x5c
 80083b2:	a915      	add	r1, sp, #84	; 0x54
 80083b4:	4620      	mov	r0, r4
 80083b6:	f001 f93f 	bl	8009638 <__gethex>
 80083ba:	f010 070f 	ands.w	r7, r0, #15
 80083be:	4605      	mov	r5, r0
 80083c0:	d005      	beq.n	80083ce <_strtod_l+0x76>
 80083c2:	2f06      	cmp	r7, #6
 80083c4:	d12a      	bne.n	800841c <_strtod_l+0xc4>
 80083c6:	3601      	adds	r6, #1
 80083c8:	2300      	movs	r3, #0
 80083ca:	9615      	str	r6, [sp, #84]	; 0x54
 80083cc:	930a      	str	r3, [sp, #40]	; 0x28
 80083ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f040 857f 	bne.w	8008ed4 <_strtod_l+0xb7c>
 80083d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d8:	b1db      	cbz	r3, 8008412 <_strtod_l+0xba>
 80083da:	4642      	mov	r2, r8
 80083dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80083e0:	ec43 2b10 	vmov	d0, r2, r3
 80083e4:	b01b      	add	sp, #108	; 0x6c
 80083e6:	ecbd 8b02 	vpop	{d8}
 80083ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ee:	2920      	cmp	r1, #32
 80083f0:	d1cc      	bne.n	800838c <_strtod_l+0x34>
 80083f2:	3201      	adds	r2, #1
 80083f4:	e7bf      	b.n	8008376 <_strtod_l+0x1e>
 80083f6:	292d      	cmp	r1, #45	; 0x2d
 80083f8:	d1c8      	bne.n	800838c <_strtod_l+0x34>
 80083fa:	2101      	movs	r1, #1
 80083fc:	910a      	str	r1, [sp, #40]	; 0x28
 80083fe:	1c51      	adds	r1, r2, #1
 8008400:	9115      	str	r1, [sp, #84]	; 0x54
 8008402:	7852      	ldrb	r2, [r2, #1]
 8008404:	2a00      	cmp	r2, #0
 8008406:	d1c3      	bne.n	8008390 <_strtod_l+0x38>
 8008408:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800840a:	9515      	str	r5, [sp, #84]	; 0x54
 800840c:	2b00      	cmp	r3, #0
 800840e:	f040 855f 	bne.w	8008ed0 <_strtod_l+0xb78>
 8008412:	4642      	mov	r2, r8
 8008414:	464b      	mov	r3, r9
 8008416:	e7e3      	b.n	80083e0 <_strtod_l+0x88>
 8008418:	2100      	movs	r1, #0
 800841a:	e7ef      	b.n	80083fc <_strtod_l+0xa4>
 800841c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800841e:	b13a      	cbz	r2, 8008430 <_strtod_l+0xd8>
 8008420:	2135      	movs	r1, #53	; 0x35
 8008422:	a818      	add	r0, sp, #96	; 0x60
 8008424:	f7ff ff37 	bl	8008296 <__copybits>
 8008428:	9916      	ldr	r1, [sp, #88]	; 0x58
 800842a:	4620      	mov	r0, r4
 800842c:	f7ff fb0a 	bl	8007a44 <_Bfree>
 8008430:	3f01      	subs	r7, #1
 8008432:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008434:	2f04      	cmp	r7, #4
 8008436:	d806      	bhi.n	8008446 <_strtod_l+0xee>
 8008438:	e8df f007 	tbb	[pc, r7]
 800843c:	201d0314 	.word	0x201d0314
 8008440:	14          	.byte	0x14
 8008441:	00          	.byte	0x00
 8008442:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008446:	05e9      	lsls	r1, r5, #23
 8008448:	bf48      	it	mi
 800844a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800844e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008452:	0d1b      	lsrs	r3, r3, #20
 8008454:	051b      	lsls	r3, r3, #20
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1b9      	bne.n	80083ce <_strtod_l+0x76>
 800845a:	f7fe fb03 	bl	8006a64 <__errno>
 800845e:	2322      	movs	r3, #34	; 0x22
 8008460:	6003      	str	r3, [r0, #0]
 8008462:	e7b4      	b.n	80083ce <_strtod_l+0x76>
 8008464:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008468:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800846c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008470:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008474:	e7e7      	b.n	8008446 <_strtod_l+0xee>
 8008476:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80085f0 <_strtod_l+0x298>
 800847a:	e7e4      	b.n	8008446 <_strtod_l+0xee>
 800847c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008480:	f04f 38ff 	mov.w	r8, #4294967295
 8008484:	e7df      	b.n	8008446 <_strtod_l+0xee>
 8008486:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	9215      	str	r2, [sp, #84]	; 0x54
 800848c:	785b      	ldrb	r3, [r3, #1]
 800848e:	2b30      	cmp	r3, #48	; 0x30
 8008490:	d0f9      	beq.n	8008486 <_strtod_l+0x12e>
 8008492:	2b00      	cmp	r3, #0
 8008494:	d09b      	beq.n	80083ce <_strtod_l+0x76>
 8008496:	2301      	movs	r3, #1
 8008498:	f04f 0a00 	mov.w	sl, #0
 800849c:	9304      	str	r3, [sp, #16]
 800849e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80084a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80084a6:	46d3      	mov	fp, sl
 80084a8:	220a      	movs	r2, #10
 80084aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80084ac:	7806      	ldrb	r6, [r0, #0]
 80084ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80084b2:	b2d9      	uxtb	r1, r3
 80084b4:	2909      	cmp	r1, #9
 80084b6:	d926      	bls.n	8008506 <_strtod_l+0x1ae>
 80084b8:	494c      	ldr	r1, [pc, #304]	; (80085ec <_strtod_l+0x294>)
 80084ba:	2201      	movs	r2, #1
 80084bc:	f000 ffe6 	bl	800948c <strncmp>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d030      	beq.n	8008526 <_strtod_l+0x1ce>
 80084c4:	2000      	movs	r0, #0
 80084c6:	4632      	mov	r2, r6
 80084c8:	9005      	str	r0, [sp, #20]
 80084ca:	465e      	mov	r6, fp
 80084cc:	4603      	mov	r3, r0
 80084ce:	2a65      	cmp	r2, #101	; 0x65
 80084d0:	d001      	beq.n	80084d6 <_strtod_l+0x17e>
 80084d2:	2a45      	cmp	r2, #69	; 0x45
 80084d4:	d113      	bne.n	80084fe <_strtod_l+0x1a6>
 80084d6:	b91e      	cbnz	r6, 80084e0 <_strtod_l+0x188>
 80084d8:	9a04      	ldr	r2, [sp, #16]
 80084da:	4302      	orrs	r2, r0
 80084dc:	d094      	beq.n	8008408 <_strtod_l+0xb0>
 80084de:	2600      	movs	r6, #0
 80084e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80084e2:	1c6a      	adds	r2, r5, #1
 80084e4:	9215      	str	r2, [sp, #84]	; 0x54
 80084e6:	786a      	ldrb	r2, [r5, #1]
 80084e8:	2a2b      	cmp	r2, #43	; 0x2b
 80084ea:	d074      	beq.n	80085d6 <_strtod_l+0x27e>
 80084ec:	2a2d      	cmp	r2, #45	; 0x2d
 80084ee:	d078      	beq.n	80085e2 <_strtod_l+0x28a>
 80084f0:	f04f 0c00 	mov.w	ip, #0
 80084f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80084f8:	2909      	cmp	r1, #9
 80084fa:	d97f      	bls.n	80085fc <_strtod_l+0x2a4>
 80084fc:	9515      	str	r5, [sp, #84]	; 0x54
 80084fe:	2700      	movs	r7, #0
 8008500:	e09e      	b.n	8008640 <_strtod_l+0x2e8>
 8008502:	2300      	movs	r3, #0
 8008504:	e7c8      	b.n	8008498 <_strtod_l+0x140>
 8008506:	f1bb 0f08 	cmp.w	fp, #8
 800850a:	bfd8      	it	le
 800850c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800850e:	f100 0001 	add.w	r0, r0, #1
 8008512:	bfda      	itte	le
 8008514:	fb02 3301 	mlale	r3, r2, r1, r3
 8008518:	9309      	strle	r3, [sp, #36]	; 0x24
 800851a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800851e:	f10b 0b01 	add.w	fp, fp, #1
 8008522:	9015      	str	r0, [sp, #84]	; 0x54
 8008524:	e7c1      	b.n	80084aa <_strtod_l+0x152>
 8008526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	9215      	str	r2, [sp, #84]	; 0x54
 800852c:	785a      	ldrb	r2, [r3, #1]
 800852e:	f1bb 0f00 	cmp.w	fp, #0
 8008532:	d037      	beq.n	80085a4 <_strtod_l+0x24c>
 8008534:	9005      	str	r0, [sp, #20]
 8008536:	465e      	mov	r6, fp
 8008538:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800853c:	2b09      	cmp	r3, #9
 800853e:	d912      	bls.n	8008566 <_strtod_l+0x20e>
 8008540:	2301      	movs	r3, #1
 8008542:	e7c4      	b.n	80084ce <_strtod_l+0x176>
 8008544:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008546:	1c5a      	adds	r2, r3, #1
 8008548:	9215      	str	r2, [sp, #84]	; 0x54
 800854a:	785a      	ldrb	r2, [r3, #1]
 800854c:	3001      	adds	r0, #1
 800854e:	2a30      	cmp	r2, #48	; 0x30
 8008550:	d0f8      	beq.n	8008544 <_strtod_l+0x1ec>
 8008552:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008556:	2b08      	cmp	r3, #8
 8008558:	f200 84c1 	bhi.w	8008ede <_strtod_l+0xb86>
 800855c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800855e:	9005      	str	r0, [sp, #20]
 8008560:	2000      	movs	r0, #0
 8008562:	930b      	str	r3, [sp, #44]	; 0x2c
 8008564:	4606      	mov	r6, r0
 8008566:	3a30      	subs	r2, #48	; 0x30
 8008568:	f100 0301 	add.w	r3, r0, #1
 800856c:	d014      	beq.n	8008598 <_strtod_l+0x240>
 800856e:	9905      	ldr	r1, [sp, #20]
 8008570:	4419      	add	r1, r3
 8008572:	9105      	str	r1, [sp, #20]
 8008574:	4633      	mov	r3, r6
 8008576:	eb00 0c06 	add.w	ip, r0, r6
 800857a:	210a      	movs	r1, #10
 800857c:	4563      	cmp	r3, ip
 800857e:	d113      	bne.n	80085a8 <_strtod_l+0x250>
 8008580:	1833      	adds	r3, r6, r0
 8008582:	2b08      	cmp	r3, #8
 8008584:	f106 0601 	add.w	r6, r6, #1
 8008588:	4406      	add	r6, r0
 800858a:	dc1a      	bgt.n	80085c2 <_strtod_l+0x26a>
 800858c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800858e:	230a      	movs	r3, #10
 8008590:	fb03 2301 	mla	r3, r3, r1, r2
 8008594:	9309      	str	r3, [sp, #36]	; 0x24
 8008596:	2300      	movs	r3, #0
 8008598:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800859a:	1c51      	adds	r1, r2, #1
 800859c:	9115      	str	r1, [sp, #84]	; 0x54
 800859e:	7852      	ldrb	r2, [r2, #1]
 80085a0:	4618      	mov	r0, r3
 80085a2:	e7c9      	b.n	8008538 <_strtod_l+0x1e0>
 80085a4:	4658      	mov	r0, fp
 80085a6:	e7d2      	b.n	800854e <_strtod_l+0x1f6>
 80085a8:	2b08      	cmp	r3, #8
 80085aa:	f103 0301 	add.w	r3, r3, #1
 80085ae:	dc03      	bgt.n	80085b8 <_strtod_l+0x260>
 80085b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80085b2:	434f      	muls	r7, r1
 80085b4:	9709      	str	r7, [sp, #36]	; 0x24
 80085b6:	e7e1      	b.n	800857c <_strtod_l+0x224>
 80085b8:	2b10      	cmp	r3, #16
 80085ba:	bfd8      	it	le
 80085bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80085c0:	e7dc      	b.n	800857c <_strtod_l+0x224>
 80085c2:	2e10      	cmp	r6, #16
 80085c4:	bfdc      	itt	le
 80085c6:	230a      	movle	r3, #10
 80085c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80085cc:	e7e3      	b.n	8008596 <_strtod_l+0x23e>
 80085ce:	2300      	movs	r3, #0
 80085d0:	9305      	str	r3, [sp, #20]
 80085d2:	2301      	movs	r3, #1
 80085d4:	e780      	b.n	80084d8 <_strtod_l+0x180>
 80085d6:	f04f 0c00 	mov.w	ip, #0
 80085da:	1caa      	adds	r2, r5, #2
 80085dc:	9215      	str	r2, [sp, #84]	; 0x54
 80085de:	78aa      	ldrb	r2, [r5, #2]
 80085e0:	e788      	b.n	80084f4 <_strtod_l+0x19c>
 80085e2:	f04f 0c01 	mov.w	ip, #1
 80085e6:	e7f8      	b.n	80085da <_strtod_l+0x282>
 80085e8:	0800a488 	.word	0x0800a488
 80085ec:	0800a484 	.word	0x0800a484
 80085f0:	7ff00000 	.word	0x7ff00000
 80085f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085f6:	1c51      	adds	r1, r2, #1
 80085f8:	9115      	str	r1, [sp, #84]	; 0x54
 80085fa:	7852      	ldrb	r2, [r2, #1]
 80085fc:	2a30      	cmp	r2, #48	; 0x30
 80085fe:	d0f9      	beq.n	80085f4 <_strtod_l+0x29c>
 8008600:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008604:	2908      	cmp	r1, #8
 8008606:	f63f af7a 	bhi.w	80084fe <_strtod_l+0x1a6>
 800860a:	3a30      	subs	r2, #48	; 0x30
 800860c:	9208      	str	r2, [sp, #32]
 800860e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008610:	920c      	str	r2, [sp, #48]	; 0x30
 8008612:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008614:	1c57      	adds	r7, r2, #1
 8008616:	9715      	str	r7, [sp, #84]	; 0x54
 8008618:	7852      	ldrb	r2, [r2, #1]
 800861a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800861e:	f1be 0f09 	cmp.w	lr, #9
 8008622:	d938      	bls.n	8008696 <_strtod_l+0x33e>
 8008624:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008626:	1a7f      	subs	r7, r7, r1
 8008628:	2f08      	cmp	r7, #8
 800862a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800862e:	dc03      	bgt.n	8008638 <_strtod_l+0x2e0>
 8008630:	9908      	ldr	r1, [sp, #32]
 8008632:	428f      	cmp	r7, r1
 8008634:	bfa8      	it	ge
 8008636:	460f      	movge	r7, r1
 8008638:	f1bc 0f00 	cmp.w	ip, #0
 800863c:	d000      	beq.n	8008640 <_strtod_l+0x2e8>
 800863e:	427f      	negs	r7, r7
 8008640:	2e00      	cmp	r6, #0
 8008642:	d14f      	bne.n	80086e4 <_strtod_l+0x38c>
 8008644:	9904      	ldr	r1, [sp, #16]
 8008646:	4301      	orrs	r1, r0
 8008648:	f47f aec1 	bne.w	80083ce <_strtod_l+0x76>
 800864c:	2b00      	cmp	r3, #0
 800864e:	f47f aedb 	bne.w	8008408 <_strtod_l+0xb0>
 8008652:	2a69      	cmp	r2, #105	; 0x69
 8008654:	d029      	beq.n	80086aa <_strtod_l+0x352>
 8008656:	dc26      	bgt.n	80086a6 <_strtod_l+0x34e>
 8008658:	2a49      	cmp	r2, #73	; 0x49
 800865a:	d026      	beq.n	80086aa <_strtod_l+0x352>
 800865c:	2a4e      	cmp	r2, #78	; 0x4e
 800865e:	f47f aed3 	bne.w	8008408 <_strtod_l+0xb0>
 8008662:	499b      	ldr	r1, [pc, #620]	; (80088d0 <_strtod_l+0x578>)
 8008664:	a815      	add	r0, sp, #84	; 0x54
 8008666:	f001 fa27 	bl	8009ab8 <__match>
 800866a:	2800      	cmp	r0, #0
 800866c:	f43f aecc 	beq.w	8008408 <_strtod_l+0xb0>
 8008670:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b28      	cmp	r3, #40	; 0x28
 8008676:	d12f      	bne.n	80086d8 <_strtod_l+0x380>
 8008678:	4996      	ldr	r1, [pc, #600]	; (80088d4 <_strtod_l+0x57c>)
 800867a:	aa18      	add	r2, sp, #96	; 0x60
 800867c:	a815      	add	r0, sp, #84	; 0x54
 800867e:	f001 fa2f 	bl	8009ae0 <__hexnan>
 8008682:	2805      	cmp	r0, #5
 8008684:	d128      	bne.n	80086d8 <_strtod_l+0x380>
 8008686:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008688:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800868c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008690:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008694:	e69b      	b.n	80083ce <_strtod_l+0x76>
 8008696:	9f08      	ldr	r7, [sp, #32]
 8008698:	210a      	movs	r1, #10
 800869a:	fb01 2107 	mla	r1, r1, r7, r2
 800869e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80086a2:	9208      	str	r2, [sp, #32]
 80086a4:	e7b5      	b.n	8008612 <_strtod_l+0x2ba>
 80086a6:	2a6e      	cmp	r2, #110	; 0x6e
 80086a8:	e7d9      	b.n	800865e <_strtod_l+0x306>
 80086aa:	498b      	ldr	r1, [pc, #556]	; (80088d8 <_strtod_l+0x580>)
 80086ac:	a815      	add	r0, sp, #84	; 0x54
 80086ae:	f001 fa03 	bl	8009ab8 <__match>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	f43f aea8 	beq.w	8008408 <_strtod_l+0xb0>
 80086b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086ba:	4988      	ldr	r1, [pc, #544]	; (80088dc <_strtod_l+0x584>)
 80086bc:	3b01      	subs	r3, #1
 80086be:	a815      	add	r0, sp, #84	; 0x54
 80086c0:	9315      	str	r3, [sp, #84]	; 0x54
 80086c2:	f001 f9f9 	bl	8009ab8 <__match>
 80086c6:	b910      	cbnz	r0, 80086ce <_strtod_l+0x376>
 80086c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086ca:	3301      	adds	r3, #1
 80086cc:	9315      	str	r3, [sp, #84]	; 0x54
 80086ce:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80088ec <_strtod_l+0x594>
 80086d2:	f04f 0800 	mov.w	r8, #0
 80086d6:	e67a      	b.n	80083ce <_strtod_l+0x76>
 80086d8:	4881      	ldr	r0, [pc, #516]	; (80088e0 <_strtod_l+0x588>)
 80086da:	f000 ff09 	bl	80094f0 <nan>
 80086de:	ec59 8b10 	vmov	r8, r9, d0
 80086e2:	e674      	b.n	80083ce <_strtod_l+0x76>
 80086e4:	9b05      	ldr	r3, [sp, #20]
 80086e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086e8:	1afb      	subs	r3, r7, r3
 80086ea:	f1bb 0f00 	cmp.w	fp, #0
 80086ee:	bf08      	it	eq
 80086f0:	46b3      	moveq	fp, r6
 80086f2:	2e10      	cmp	r6, #16
 80086f4:	9308      	str	r3, [sp, #32]
 80086f6:	4635      	mov	r5, r6
 80086f8:	bfa8      	it	ge
 80086fa:	2510      	movge	r5, #16
 80086fc:	f7f7 ff0a 	bl	8000514 <__aeabi_ui2d>
 8008700:	2e09      	cmp	r6, #9
 8008702:	4680      	mov	r8, r0
 8008704:	4689      	mov	r9, r1
 8008706:	dd13      	ble.n	8008730 <_strtod_l+0x3d8>
 8008708:	4b76      	ldr	r3, [pc, #472]	; (80088e4 <_strtod_l+0x58c>)
 800870a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800870e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008712:	f7f7 ff79 	bl	8000608 <__aeabi_dmul>
 8008716:	4680      	mov	r8, r0
 8008718:	4650      	mov	r0, sl
 800871a:	4689      	mov	r9, r1
 800871c:	f7f7 fefa 	bl	8000514 <__aeabi_ui2d>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4640      	mov	r0, r8
 8008726:	4649      	mov	r1, r9
 8008728:	f7f7 fdb8 	bl	800029c <__adddf3>
 800872c:	4680      	mov	r8, r0
 800872e:	4689      	mov	r9, r1
 8008730:	2e0f      	cmp	r6, #15
 8008732:	dc38      	bgt.n	80087a6 <_strtod_l+0x44e>
 8008734:	9b08      	ldr	r3, [sp, #32]
 8008736:	2b00      	cmp	r3, #0
 8008738:	f43f ae49 	beq.w	80083ce <_strtod_l+0x76>
 800873c:	dd24      	ble.n	8008788 <_strtod_l+0x430>
 800873e:	2b16      	cmp	r3, #22
 8008740:	dc0b      	bgt.n	800875a <_strtod_l+0x402>
 8008742:	4968      	ldr	r1, [pc, #416]	; (80088e4 <_strtod_l+0x58c>)
 8008744:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800874c:	4642      	mov	r2, r8
 800874e:	464b      	mov	r3, r9
 8008750:	f7f7 ff5a 	bl	8000608 <__aeabi_dmul>
 8008754:	4680      	mov	r8, r0
 8008756:	4689      	mov	r9, r1
 8008758:	e639      	b.n	80083ce <_strtod_l+0x76>
 800875a:	9a08      	ldr	r2, [sp, #32]
 800875c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008760:	4293      	cmp	r3, r2
 8008762:	db20      	blt.n	80087a6 <_strtod_l+0x44e>
 8008764:	4c5f      	ldr	r4, [pc, #380]	; (80088e4 <_strtod_l+0x58c>)
 8008766:	f1c6 060f 	rsb	r6, r6, #15
 800876a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800876e:	4642      	mov	r2, r8
 8008770:	464b      	mov	r3, r9
 8008772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008776:	f7f7 ff47 	bl	8000608 <__aeabi_dmul>
 800877a:	9b08      	ldr	r3, [sp, #32]
 800877c:	1b9e      	subs	r6, r3, r6
 800877e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008782:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008786:	e7e3      	b.n	8008750 <_strtod_l+0x3f8>
 8008788:	9b08      	ldr	r3, [sp, #32]
 800878a:	3316      	adds	r3, #22
 800878c:	db0b      	blt.n	80087a6 <_strtod_l+0x44e>
 800878e:	9b05      	ldr	r3, [sp, #20]
 8008790:	1bdf      	subs	r7, r3, r7
 8008792:	4b54      	ldr	r3, [pc, #336]	; (80088e4 <_strtod_l+0x58c>)
 8008794:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800879c:	4640      	mov	r0, r8
 800879e:	4649      	mov	r1, r9
 80087a0:	f7f8 f85c 	bl	800085c <__aeabi_ddiv>
 80087a4:	e7d6      	b.n	8008754 <_strtod_l+0x3fc>
 80087a6:	9b08      	ldr	r3, [sp, #32]
 80087a8:	1b75      	subs	r5, r6, r5
 80087aa:	441d      	add	r5, r3
 80087ac:	2d00      	cmp	r5, #0
 80087ae:	dd70      	ble.n	8008892 <_strtod_l+0x53a>
 80087b0:	f015 030f 	ands.w	r3, r5, #15
 80087b4:	d00a      	beq.n	80087cc <_strtod_l+0x474>
 80087b6:	494b      	ldr	r1, [pc, #300]	; (80088e4 <_strtod_l+0x58c>)
 80087b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087bc:	4642      	mov	r2, r8
 80087be:	464b      	mov	r3, r9
 80087c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087c4:	f7f7 ff20 	bl	8000608 <__aeabi_dmul>
 80087c8:	4680      	mov	r8, r0
 80087ca:	4689      	mov	r9, r1
 80087cc:	f035 050f 	bics.w	r5, r5, #15
 80087d0:	d04d      	beq.n	800886e <_strtod_l+0x516>
 80087d2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80087d6:	dd22      	ble.n	800881e <_strtod_l+0x4c6>
 80087d8:	2500      	movs	r5, #0
 80087da:	46ab      	mov	fp, r5
 80087dc:	9509      	str	r5, [sp, #36]	; 0x24
 80087de:	9505      	str	r5, [sp, #20]
 80087e0:	2322      	movs	r3, #34	; 0x22
 80087e2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80088ec <_strtod_l+0x594>
 80087e6:	6023      	str	r3, [r4, #0]
 80087e8:	f04f 0800 	mov.w	r8, #0
 80087ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f43f aded 	beq.w	80083ce <_strtod_l+0x76>
 80087f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80087f6:	4620      	mov	r0, r4
 80087f8:	f7ff f924 	bl	8007a44 <_Bfree>
 80087fc:	9905      	ldr	r1, [sp, #20]
 80087fe:	4620      	mov	r0, r4
 8008800:	f7ff f920 	bl	8007a44 <_Bfree>
 8008804:	4659      	mov	r1, fp
 8008806:	4620      	mov	r0, r4
 8008808:	f7ff f91c 	bl	8007a44 <_Bfree>
 800880c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800880e:	4620      	mov	r0, r4
 8008810:	f7ff f918 	bl	8007a44 <_Bfree>
 8008814:	4629      	mov	r1, r5
 8008816:	4620      	mov	r0, r4
 8008818:	f7ff f914 	bl	8007a44 <_Bfree>
 800881c:	e5d7      	b.n	80083ce <_strtod_l+0x76>
 800881e:	4b32      	ldr	r3, [pc, #200]	; (80088e8 <_strtod_l+0x590>)
 8008820:	9304      	str	r3, [sp, #16]
 8008822:	2300      	movs	r3, #0
 8008824:	112d      	asrs	r5, r5, #4
 8008826:	4640      	mov	r0, r8
 8008828:	4649      	mov	r1, r9
 800882a:	469a      	mov	sl, r3
 800882c:	2d01      	cmp	r5, #1
 800882e:	dc21      	bgt.n	8008874 <_strtod_l+0x51c>
 8008830:	b10b      	cbz	r3, 8008836 <_strtod_l+0x4de>
 8008832:	4680      	mov	r8, r0
 8008834:	4689      	mov	r9, r1
 8008836:	492c      	ldr	r1, [pc, #176]	; (80088e8 <_strtod_l+0x590>)
 8008838:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800883c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008840:	4642      	mov	r2, r8
 8008842:	464b      	mov	r3, r9
 8008844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008848:	f7f7 fede 	bl	8000608 <__aeabi_dmul>
 800884c:	4b27      	ldr	r3, [pc, #156]	; (80088ec <_strtod_l+0x594>)
 800884e:	460a      	mov	r2, r1
 8008850:	400b      	ands	r3, r1
 8008852:	4927      	ldr	r1, [pc, #156]	; (80088f0 <_strtod_l+0x598>)
 8008854:	428b      	cmp	r3, r1
 8008856:	4680      	mov	r8, r0
 8008858:	d8be      	bhi.n	80087d8 <_strtod_l+0x480>
 800885a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800885e:	428b      	cmp	r3, r1
 8008860:	bf86      	itte	hi
 8008862:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80088f4 <_strtod_l+0x59c>
 8008866:	f04f 38ff 	movhi.w	r8, #4294967295
 800886a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800886e:	2300      	movs	r3, #0
 8008870:	9304      	str	r3, [sp, #16]
 8008872:	e07b      	b.n	800896c <_strtod_l+0x614>
 8008874:	07ea      	lsls	r2, r5, #31
 8008876:	d505      	bpl.n	8008884 <_strtod_l+0x52c>
 8008878:	9b04      	ldr	r3, [sp, #16]
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	f7f7 fec3 	bl	8000608 <__aeabi_dmul>
 8008882:	2301      	movs	r3, #1
 8008884:	9a04      	ldr	r2, [sp, #16]
 8008886:	3208      	adds	r2, #8
 8008888:	f10a 0a01 	add.w	sl, sl, #1
 800888c:	106d      	asrs	r5, r5, #1
 800888e:	9204      	str	r2, [sp, #16]
 8008890:	e7cc      	b.n	800882c <_strtod_l+0x4d4>
 8008892:	d0ec      	beq.n	800886e <_strtod_l+0x516>
 8008894:	426d      	negs	r5, r5
 8008896:	f015 020f 	ands.w	r2, r5, #15
 800889a:	d00a      	beq.n	80088b2 <_strtod_l+0x55a>
 800889c:	4b11      	ldr	r3, [pc, #68]	; (80088e4 <_strtod_l+0x58c>)
 800889e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088a2:	4640      	mov	r0, r8
 80088a4:	4649      	mov	r1, r9
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	f7f7 ffd7 	bl	800085c <__aeabi_ddiv>
 80088ae:	4680      	mov	r8, r0
 80088b0:	4689      	mov	r9, r1
 80088b2:	112d      	asrs	r5, r5, #4
 80088b4:	d0db      	beq.n	800886e <_strtod_l+0x516>
 80088b6:	2d1f      	cmp	r5, #31
 80088b8:	dd1e      	ble.n	80088f8 <_strtod_l+0x5a0>
 80088ba:	2500      	movs	r5, #0
 80088bc:	46ab      	mov	fp, r5
 80088be:	9509      	str	r5, [sp, #36]	; 0x24
 80088c0:	9505      	str	r5, [sp, #20]
 80088c2:	2322      	movs	r3, #34	; 0x22
 80088c4:	f04f 0800 	mov.w	r8, #0
 80088c8:	f04f 0900 	mov.w	r9, #0
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	e78d      	b.n	80087ec <_strtod_l+0x494>
 80088d0:	0800a275 	.word	0x0800a275
 80088d4:	0800a49c 	.word	0x0800a49c
 80088d8:	0800a26d 	.word	0x0800a26d
 80088dc:	0800a2a4 	.word	0x0800a2a4
 80088e0:	0800a62d 	.word	0x0800a62d
 80088e4:	0800a3b0 	.word	0x0800a3b0
 80088e8:	0800a388 	.word	0x0800a388
 80088ec:	7ff00000 	.word	0x7ff00000
 80088f0:	7ca00000 	.word	0x7ca00000
 80088f4:	7fefffff 	.word	0x7fefffff
 80088f8:	f015 0310 	ands.w	r3, r5, #16
 80088fc:	bf18      	it	ne
 80088fe:	236a      	movne	r3, #106	; 0x6a
 8008900:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008ca4 <_strtod_l+0x94c>
 8008904:	9304      	str	r3, [sp, #16]
 8008906:	4640      	mov	r0, r8
 8008908:	4649      	mov	r1, r9
 800890a:	2300      	movs	r3, #0
 800890c:	07ea      	lsls	r2, r5, #31
 800890e:	d504      	bpl.n	800891a <_strtod_l+0x5c2>
 8008910:	e9da 2300 	ldrd	r2, r3, [sl]
 8008914:	f7f7 fe78 	bl	8000608 <__aeabi_dmul>
 8008918:	2301      	movs	r3, #1
 800891a:	106d      	asrs	r5, r5, #1
 800891c:	f10a 0a08 	add.w	sl, sl, #8
 8008920:	d1f4      	bne.n	800890c <_strtod_l+0x5b4>
 8008922:	b10b      	cbz	r3, 8008928 <_strtod_l+0x5d0>
 8008924:	4680      	mov	r8, r0
 8008926:	4689      	mov	r9, r1
 8008928:	9b04      	ldr	r3, [sp, #16]
 800892a:	b1bb      	cbz	r3, 800895c <_strtod_l+0x604>
 800892c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008930:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008934:	2b00      	cmp	r3, #0
 8008936:	4649      	mov	r1, r9
 8008938:	dd10      	ble.n	800895c <_strtod_l+0x604>
 800893a:	2b1f      	cmp	r3, #31
 800893c:	f340 811e 	ble.w	8008b7c <_strtod_l+0x824>
 8008940:	2b34      	cmp	r3, #52	; 0x34
 8008942:	bfde      	ittt	le
 8008944:	f04f 33ff 	movle.w	r3, #4294967295
 8008948:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800894c:	4093      	lslle	r3, r2
 800894e:	f04f 0800 	mov.w	r8, #0
 8008952:	bfcc      	ite	gt
 8008954:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008958:	ea03 0901 	andle.w	r9, r3, r1
 800895c:	2200      	movs	r2, #0
 800895e:	2300      	movs	r3, #0
 8008960:	4640      	mov	r0, r8
 8008962:	4649      	mov	r1, r9
 8008964:	f7f8 f8b8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008968:	2800      	cmp	r0, #0
 800896a:	d1a6      	bne.n	80088ba <_strtod_l+0x562>
 800896c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008972:	4633      	mov	r3, r6
 8008974:	465a      	mov	r2, fp
 8008976:	4620      	mov	r0, r4
 8008978:	f7ff f8cc 	bl	8007b14 <__s2b>
 800897c:	9009      	str	r0, [sp, #36]	; 0x24
 800897e:	2800      	cmp	r0, #0
 8008980:	f43f af2a 	beq.w	80087d8 <_strtod_l+0x480>
 8008984:	9a08      	ldr	r2, [sp, #32]
 8008986:	9b05      	ldr	r3, [sp, #20]
 8008988:	2a00      	cmp	r2, #0
 800898a:	eba3 0307 	sub.w	r3, r3, r7
 800898e:	bfa8      	it	ge
 8008990:	2300      	movge	r3, #0
 8008992:	930c      	str	r3, [sp, #48]	; 0x30
 8008994:	2500      	movs	r5, #0
 8008996:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800899a:	9312      	str	r3, [sp, #72]	; 0x48
 800899c:	46ab      	mov	fp, r5
 800899e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a0:	4620      	mov	r0, r4
 80089a2:	6859      	ldr	r1, [r3, #4]
 80089a4:	f7ff f80e 	bl	80079c4 <_Balloc>
 80089a8:	9005      	str	r0, [sp, #20]
 80089aa:	2800      	cmp	r0, #0
 80089ac:	f43f af18 	beq.w	80087e0 <_strtod_l+0x488>
 80089b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b2:	691a      	ldr	r2, [r3, #16]
 80089b4:	3202      	adds	r2, #2
 80089b6:	f103 010c 	add.w	r1, r3, #12
 80089ba:	0092      	lsls	r2, r2, #2
 80089bc:	300c      	adds	r0, #12
 80089be:	f000 fd87 	bl	80094d0 <memcpy>
 80089c2:	ec49 8b10 	vmov	d0, r8, r9
 80089c6:	aa18      	add	r2, sp, #96	; 0x60
 80089c8:	a917      	add	r1, sp, #92	; 0x5c
 80089ca:	4620      	mov	r0, r4
 80089cc:	f7ff fbd6 	bl	800817c <__d2b>
 80089d0:	ec49 8b18 	vmov	d8, r8, r9
 80089d4:	9016      	str	r0, [sp, #88]	; 0x58
 80089d6:	2800      	cmp	r0, #0
 80089d8:	f43f af02 	beq.w	80087e0 <_strtod_l+0x488>
 80089dc:	2101      	movs	r1, #1
 80089de:	4620      	mov	r0, r4
 80089e0:	f7ff f930 	bl	8007c44 <__i2b>
 80089e4:	4683      	mov	fp, r0
 80089e6:	2800      	cmp	r0, #0
 80089e8:	f43f aefa 	beq.w	80087e0 <_strtod_l+0x488>
 80089ec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80089ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80089f0:	2e00      	cmp	r6, #0
 80089f2:	bfab      	itete	ge
 80089f4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80089f6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80089f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80089fa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80089fe:	bfac      	ite	ge
 8008a00:	eb06 0a03 	addge.w	sl, r6, r3
 8008a04:	1b9f      	sublt	r7, r3, r6
 8008a06:	9b04      	ldr	r3, [sp, #16]
 8008a08:	1af6      	subs	r6, r6, r3
 8008a0a:	4416      	add	r6, r2
 8008a0c:	4ba0      	ldr	r3, [pc, #640]	; (8008c90 <_strtod_l+0x938>)
 8008a0e:	3e01      	subs	r6, #1
 8008a10:	429e      	cmp	r6, r3
 8008a12:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a16:	f280 80c4 	bge.w	8008ba2 <_strtod_l+0x84a>
 8008a1a:	1b9b      	subs	r3, r3, r6
 8008a1c:	2b1f      	cmp	r3, #31
 8008a1e:	eba2 0203 	sub.w	r2, r2, r3
 8008a22:	f04f 0101 	mov.w	r1, #1
 8008a26:	f300 80b0 	bgt.w	8008b8a <_strtod_l+0x832>
 8008a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a2e:	930e      	str	r3, [sp, #56]	; 0x38
 8008a30:	2300      	movs	r3, #0
 8008a32:	930d      	str	r3, [sp, #52]	; 0x34
 8008a34:	eb0a 0602 	add.w	r6, sl, r2
 8008a38:	9b04      	ldr	r3, [sp, #16]
 8008a3a:	45b2      	cmp	sl, r6
 8008a3c:	4417      	add	r7, r2
 8008a3e:	441f      	add	r7, r3
 8008a40:	4653      	mov	r3, sl
 8008a42:	bfa8      	it	ge
 8008a44:	4633      	movge	r3, r6
 8008a46:	42bb      	cmp	r3, r7
 8008a48:	bfa8      	it	ge
 8008a4a:	463b      	movge	r3, r7
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	bfc2      	ittt	gt
 8008a50:	1af6      	subgt	r6, r6, r3
 8008a52:	1aff      	subgt	r7, r7, r3
 8008a54:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	dd17      	ble.n	8008a8e <_strtod_l+0x736>
 8008a5e:	4659      	mov	r1, fp
 8008a60:	461a      	mov	r2, r3
 8008a62:	4620      	mov	r0, r4
 8008a64:	f7ff f9ae 	bl	8007dc4 <__pow5mult>
 8008a68:	4683      	mov	fp, r0
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	f43f aeb8 	beq.w	80087e0 <_strtod_l+0x488>
 8008a70:	4601      	mov	r1, r0
 8008a72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a74:	4620      	mov	r0, r4
 8008a76:	f7ff f8fb 	bl	8007c70 <__multiply>
 8008a7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	f43f aeaf 	beq.w	80087e0 <_strtod_l+0x488>
 8008a82:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a84:	4620      	mov	r0, r4
 8008a86:	f7fe ffdd 	bl	8007a44 <_Bfree>
 8008a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a8c:	9316      	str	r3, [sp, #88]	; 0x58
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	f300 808c 	bgt.w	8008bac <_strtod_l+0x854>
 8008a94:	9b08      	ldr	r3, [sp, #32]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	dd08      	ble.n	8008aac <_strtod_l+0x754>
 8008a9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a9c:	9905      	ldr	r1, [sp, #20]
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f7ff f990 	bl	8007dc4 <__pow5mult>
 8008aa4:	9005      	str	r0, [sp, #20]
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	f43f ae9a 	beq.w	80087e0 <_strtod_l+0x488>
 8008aac:	2f00      	cmp	r7, #0
 8008aae:	dd08      	ble.n	8008ac2 <_strtod_l+0x76a>
 8008ab0:	9905      	ldr	r1, [sp, #20]
 8008ab2:	463a      	mov	r2, r7
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f7ff f9df 	bl	8007e78 <__lshift>
 8008aba:	9005      	str	r0, [sp, #20]
 8008abc:	2800      	cmp	r0, #0
 8008abe:	f43f ae8f 	beq.w	80087e0 <_strtod_l+0x488>
 8008ac2:	f1ba 0f00 	cmp.w	sl, #0
 8008ac6:	dd08      	ble.n	8008ada <_strtod_l+0x782>
 8008ac8:	4659      	mov	r1, fp
 8008aca:	4652      	mov	r2, sl
 8008acc:	4620      	mov	r0, r4
 8008ace:	f7ff f9d3 	bl	8007e78 <__lshift>
 8008ad2:	4683      	mov	fp, r0
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	f43f ae83 	beq.w	80087e0 <_strtod_l+0x488>
 8008ada:	9a05      	ldr	r2, [sp, #20]
 8008adc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f7ff fa52 	bl	8007f88 <__mdiff>
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	f43f ae7a 	beq.w	80087e0 <_strtod_l+0x488>
 8008aec:	68c3      	ldr	r3, [r0, #12]
 8008aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af0:	2300      	movs	r3, #0
 8008af2:	60c3      	str	r3, [r0, #12]
 8008af4:	4659      	mov	r1, fp
 8008af6:	f7ff fa2b 	bl	8007f50 <__mcmp>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	da60      	bge.n	8008bc0 <_strtod_l+0x868>
 8008afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b00:	ea53 0308 	orrs.w	r3, r3, r8
 8008b04:	f040 8084 	bne.w	8008c10 <_strtod_l+0x8b8>
 8008b08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d17f      	bne.n	8008c10 <_strtod_l+0x8b8>
 8008b10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b14:	0d1b      	lsrs	r3, r3, #20
 8008b16:	051b      	lsls	r3, r3, #20
 8008b18:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b1c:	d978      	bls.n	8008c10 <_strtod_l+0x8b8>
 8008b1e:	696b      	ldr	r3, [r5, #20]
 8008b20:	b913      	cbnz	r3, 8008b28 <_strtod_l+0x7d0>
 8008b22:	692b      	ldr	r3, [r5, #16]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	dd73      	ble.n	8008c10 <_strtod_l+0x8b8>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f7ff f9a3 	bl	8007e78 <__lshift>
 8008b32:	4659      	mov	r1, fp
 8008b34:	4605      	mov	r5, r0
 8008b36:	f7ff fa0b 	bl	8007f50 <__mcmp>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	dd68      	ble.n	8008c10 <_strtod_l+0x8b8>
 8008b3e:	9904      	ldr	r1, [sp, #16]
 8008b40:	4a54      	ldr	r2, [pc, #336]	; (8008c94 <_strtod_l+0x93c>)
 8008b42:	464b      	mov	r3, r9
 8008b44:	2900      	cmp	r1, #0
 8008b46:	f000 8084 	beq.w	8008c52 <_strtod_l+0x8fa>
 8008b4a:	ea02 0109 	and.w	r1, r2, r9
 8008b4e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008b52:	dc7e      	bgt.n	8008c52 <_strtod_l+0x8fa>
 8008b54:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008b58:	f77f aeb3 	ble.w	80088c2 <_strtod_l+0x56a>
 8008b5c:	4b4e      	ldr	r3, [pc, #312]	; (8008c98 <_strtod_l+0x940>)
 8008b5e:	4640      	mov	r0, r8
 8008b60:	4649      	mov	r1, r9
 8008b62:	2200      	movs	r2, #0
 8008b64:	f7f7 fd50 	bl	8000608 <__aeabi_dmul>
 8008b68:	4b4a      	ldr	r3, [pc, #296]	; (8008c94 <_strtod_l+0x93c>)
 8008b6a:	400b      	ands	r3, r1
 8008b6c:	4680      	mov	r8, r0
 8008b6e:	4689      	mov	r9, r1
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f47f ae3f 	bne.w	80087f4 <_strtod_l+0x49c>
 8008b76:	2322      	movs	r3, #34	; 0x22
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	e63b      	b.n	80087f4 <_strtod_l+0x49c>
 8008b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b80:	fa02 f303 	lsl.w	r3, r2, r3
 8008b84:	ea03 0808 	and.w	r8, r3, r8
 8008b88:	e6e8      	b.n	800895c <_strtod_l+0x604>
 8008b8a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008b8e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008b92:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008b96:	36e2      	adds	r6, #226	; 0xe2
 8008b98:	fa01 f306 	lsl.w	r3, r1, r6
 8008b9c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008ba0:	e748      	b.n	8008a34 <_strtod_l+0x6dc>
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008baa:	e743      	b.n	8008a34 <_strtod_l+0x6dc>
 8008bac:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008bae:	4632      	mov	r2, r6
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f7ff f961 	bl	8007e78 <__lshift>
 8008bb6:	9016      	str	r0, [sp, #88]	; 0x58
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f47f af6b 	bne.w	8008a94 <_strtod_l+0x73c>
 8008bbe:	e60f      	b.n	80087e0 <_strtod_l+0x488>
 8008bc0:	46ca      	mov	sl, r9
 8008bc2:	d171      	bne.n	8008ca8 <_strtod_l+0x950>
 8008bc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bca:	b352      	cbz	r2, 8008c22 <_strtod_l+0x8ca>
 8008bcc:	4a33      	ldr	r2, [pc, #204]	; (8008c9c <_strtod_l+0x944>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d12a      	bne.n	8008c28 <_strtod_l+0x8d0>
 8008bd2:	9b04      	ldr	r3, [sp, #16]
 8008bd4:	4641      	mov	r1, r8
 8008bd6:	b1fb      	cbz	r3, 8008c18 <_strtod_l+0x8c0>
 8008bd8:	4b2e      	ldr	r3, [pc, #184]	; (8008c94 <_strtod_l+0x93c>)
 8008bda:	ea09 0303 	and.w	r3, r9, r3
 8008bde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008be2:	f04f 32ff 	mov.w	r2, #4294967295
 8008be6:	d81a      	bhi.n	8008c1e <_strtod_l+0x8c6>
 8008be8:	0d1b      	lsrs	r3, r3, #20
 8008bea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008bee:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf2:	4299      	cmp	r1, r3
 8008bf4:	d118      	bne.n	8008c28 <_strtod_l+0x8d0>
 8008bf6:	4b2a      	ldr	r3, [pc, #168]	; (8008ca0 <_strtod_l+0x948>)
 8008bf8:	459a      	cmp	sl, r3
 8008bfa:	d102      	bne.n	8008c02 <_strtod_l+0x8aa>
 8008bfc:	3101      	adds	r1, #1
 8008bfe:	f43f adef 	beq.w	80087e0 <_strtod_l+0x488>
 8008c02:	4b24      	ldr	r3, [pc, #144]	; (8008c94 <_strtod_l+0x93c>)
 8008c04:	ea0a 0303 	and.w	r3, sl, r3
 8008c08:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008c0c:	f04f 0800 	mov.w	r8, #0
 8008c10:	9b04      	ldr	r3, [sp, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1a2      	bne.n	8008b5c <_strtod_l+0x804>
 8008c16:	e5ed      	b.n	80087f4 <_strtod_l+0x49c>
 8008c18:	f04f 33ff 	mov.w	r3, #4294967295
 8008c1c:	e7e9      	b.n	8008bf2 <_strtod_l+0x89a>
 8008c1e:	4613      	mov	r3, r2
 8008c20:	e7e7      	b.n	8008bf2 <_strtod_l+0x89a>
 8008c22:	ea53 0308 	orrs.w	r3, r3, r8
 8008c26:	d08a      	beq.n	8008b3e <_strtod_l+0x7e6>
 8008c28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c2a:	b1e3      	cbz	r3, 8008c66 <_strtod_l+0x90e>
 8008c2c:	ea13 0f0a 	tst.w	r3, sl
 8008c30:	d0ee      	beq.n	8008c10 <_strtod_l+0x8b8>
 8008c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c34:	9a04      	ldr	r2, [sp, #16]
 8008c36:	4640      	mov	r0, r8
 8008c38:	4649      	mov	r1, r9
 8008c3a:	b1c3      	cbz	r3, 8008c6e <_strtod_l+0x916>
 8008c3c:	f7ff fb6f 	bl	800831e <sulp>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	ec51 0b18 	vmov	r0, r1, d8
 8008c48:	f7f7 fb28 	bl	800029c <__adddf3>
 8008c4c:	4680      	mov	r8, r0
 8008c4e:	4689      	mov	r9, r1
 8008c50:	e7de      	b.n	8008c10 <_strtod_l+0x8b8>
 8008c52:	4013      	ands	r3, r2
 8008c54:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c58:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008c5c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008c60:	f04f 38ff 	mov.w	r8, #4294967295
 8008c64:	e7d4      	b.n	8008c10 <_strtod_l+0x8b8>
 8008c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c68:	ea13 0f08 	tst.w	r3, r8
 8008c6c:	e7e0      	b.n	8008c30 <_strtod_l+0x8d8>
 8008c6e:	f7ff fb56 	bl	800831e <sulp>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	ec51 0b18 	vmov	r0, r1, d8
 8008c7a:	f7f7 fb0d 	bl	8000298 <__aeabi_dsub>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2300      	movs	r3, #0
 8008c82:	4680      	mov	r8, r0
 8008c84:	4689      	mov	r9, r1
 8008c86:	f7f7 ff27 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d0c0      	beq.n	8008c10 <_strtod_l+0x8b8>
 8008c8e:	e618      	b.n	80088c2 <_strtod_l+0x56a>
 8008c90:	fffffc02 	.word	0xfffffc02
 8008c94:	7ff00000 	.word	0x7ff00000
 8008c98:	39500000 	.word	0x39500000
 8008c9c:	000fffff 	.word	0x000fffff
 8008ca0:	7fefffff 	.word	0x7fefffff
 8008ca4:	0800a4b0 	.word	0x0800a4b0
 8008ca8:	4659      	mov	r1, fp
 8008caa:	4628      	mov	r0, r5
 8008cac:	f7ff fac0 	bl	8008230 <__ratio>
 8008cb0:	ec57 6b10 	vmov	r6, r7, d0
 8008cb4:	ee10 0a10 	vmov	r0, s0
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	f7f7 ff1e 	bl	8000b00 <__aeabi_dcmple>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d071      	beq.n	8008dac <_strtod_l+0xa54>
 8008cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d17c      	bne.n	8008dc8 <_strtod_l+0xa70>
 8008cce:	f1b8 0f00 	cmp.w	r8, #0
 8008cd2:	d15a      	bne.n	8008d8a <_strtod_l+0xa32>
 8008cd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d15d      	bne.n	8008d98 <_strtod_l+0xa40>
 8008cdc:	4b90      	ldr	r3, [pc, #576]	; (8008f20 <_strtod_l+0xbc8>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	4639      	mov	r1, r7
 8008ce4:	f7f7 ff02 	bl	8000aec <__aeabi_dcmplt>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d15c      	bne.n	8008da6 <_strtod_l+0xa4e>
 8008cec:	4630      	mov	r0, r6
 8008cee:	4639      	mov	r1, r7
 8008cf0:	4b8c      	ldr	r3, [pc, #560]	; (8008f24 <_strtod_l+0xbcc>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f7f7 fc88 	bl	8000608 <__aeabi_dmul>
 8008cf8:	4606      	mov	r6, r0
 8008cfa:	460f      	mov	r7, r1
 8008cfc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008d00:	9606      	str	r6, [sp, #24]
 8008d02:	9307      	str	r3, [sp, #28]
 8008d04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008d0c:	4b86      	ldr	r3, [pc, #536]	; (8008f28 <_strtod_l+0xbd0>)
 8008d0e:	ea0a 0303 	and.w	r3, sl, r3
 8008d12:	930d      	str	r3, [sp, #52]	; 0x34
 8008d14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d16:	4b85      	ldr	r3, [pc, #532]	; (8008f2c <_strtod_l+0xbd4>)
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	f040 8090 	bne.w	8008e3e <_strtod_l+0xae6>
 8008d1e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008d22:	ec49 8b10 	vmov	d0, r8, r9
 8008d26:	f7ff f9b9 	bl	800809c <__ulp>
 8008d2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d2e:	ec51 0b10 	vmov	r0, r1, d0
 8008d32:	f7f7 fc69 	bl	8000608 <__aeabi_dmul>
 8008d36:	4642      	mov	r2, r8
 8008d38:	464b      	mov	r3, r9
 8008d3a:	f7f7 faaf 	bl	800029c <__adddf3>
 8008d3e:	460b      	mov	r3, r1
 8008d40:	4979      	ldr	r1, [pc, #484]	; (8008f28 <_strtod_l+0xbd0>)
 8008d42:	4a7b      	ldr	r2, [pc, #492]	; (8008f30 <_strtod_l+0xbd8>)
 8008d44:	4019      	ands	r1, r3
 8008d46:	4291      	cmp	r1, r2
 8008d48:	4680      	mov	r8, r0
 8008d4a:	d944      	bls.n	8008dd6 <_strtod_l+0xa7e>
 8008d4c:	ee18 2a90 	vmov	r2, s17
 8008d50:	4b78      	ldr	r3, [pc, #480]	; (8008f34 <_strtod_l+0xbdc>)
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d104      	bne.n	8008d60 <_strtod_l+0xa08>
 8008d56:	ee18 3a10 	vmov	r3, s16
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	f43f ad40 	beq.w	80087e0 <_strtod_l+0x488>
 8008d60:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008f34 <_strtod_l+0xbdc>
 8008d64:	f04f 38ff 	mov.w	r8, #4294967295
 8008d68:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f7fe fe6a 	bl	8007a44 <_Bfree>
 8008d70:	9905      	ldr	r1, [sp, #20]
 8008d72:	4620      	mov	r0, r4
 8008d74:	f7fe fe66 	bl	8007a44 <_Bfree>
 8008d78:	4659      	mov	r1, fp
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7fe fe62 	bl	8007a44 <_Bfree>
 8008d80:	4629      	mov	r1, r5
 8008d82:	4620      	mov	r0, r4
 8008d84:	f7fe fe5e 	bl	8007a44 <_Bfree>
 8008d88:	e609      	b.n	800899e <_strtod_l+0x646>
 8008d8a:	f1b8 0f01 	cmp.w	r8, #1
 8008d8e:	d103      	bne.n	8008d98 <_strtod_l+0xa40>
 8008d90:	f1b9 0f00 	cmp.w	r9, #0
 8008d94:	f43f ad95 	beq.w	80088c2 <_strtod_l+0x56a>
 8008d98:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008ef0 <_strtod_l+0xb98>
 8008d9c:	4f60      	ldr	r7, [pc, #384]	; (8008f20 <_strtod_l+0xbc8>)
 8008d9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008da2:	2600      	movs	r6, #0
 8008da4:	e7ae      	b.n	8008d04 <_strtod_l+0x9ac>
 8008da6:	4f5f      	ldr	r7, [pc, #380]	; (8008f24 <_strtod_l+0xbcc>)
 8008da8:	2600      	movs	r6, #0
 8008daa:	e7a7      	b.n	8008cfc <_strtod_l+0x9a4>
 8008dac:	4b5d      	ldr	r3, [pc, #372]	; (8008f24 <_strtod_l+0xbcc>)
 8008dae:	4630      	mov	r0, r6
 8008db0:	4639      	mov	r1, r7
 8008db2:	2200      	movs	r2, #0
 8008db4:	f7f7 fc28 	bl	8000608 <__aeabi_dmul>
 8008db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dba:	4606      	mov	r6, r0
 8008dbc:	460f      	mov	r7, r1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d09c      	beq.n	8008cfc <_strtod_l+0x9a4>
 8008dc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008dc6:	e79d      	b.n	8008d04 <_strtod_l+0x9ac>
 8008dc8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008ef8 <_strtod_l+0xba0>
 8008dcc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008dd0:	ec57 6b17 	vmov	r6, r7, d7
 8008dd4:	e796      	b.n	8008d04 <_strtod_l+0x9ac>
 8008dd6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008dda:	9b04      	ldr	r3, [sp, #16]
 8008ddc:	46ca      	mov	sl, r9
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1c2      	bne.n	8008d68 <_strtod_l+0xa10>
 8008de2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008de6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008de8:	0d1b      	lsrs	r3, r3, #20
 8008dea:	051b      	lsls	r3, r3, #20
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d1bb      	bne.n	8008d68 <_strtod_l+0xa10>
 8008df0:	4630      	mov	r0, r6
 8008df2:	4639      	mov	r1, r7
 8008df4:	f7f7 ffb8 	bl	8000d68 <__aeabi_d2lz>
 8008df8:	f7f7 fbd8 	bl	80005ac <__aeabi_l2d>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4630      	mov	r0, r6
 8008e02:	4639      	mov	r1, r7
 8008e04:	f7f7 fa48 	bl	8000298 <__aeabi_dsub>
 8008e08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e0e:	ea43 0308 	orr.w	r3, r3, r8
 8008e12:	4313      	orrs	r3, r2
 8008e14:	4606      	mov	r6, r0
 8008e16:	460f      	mov	r7, r1
 8008e18:	d054      	beq.n	8008ec4 <_strtod_l+0xb6c>
 8008e1a:	a339      	add	r3, pc, #228	; (adr r3, 8008f00 <_strtod_l+0xba8>)
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f7f7 fe64 	bl	8000aec <__aeabi_dcmplt>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	f47f ace5 	bne.w	80087f4 <_strtod_l+0x49c>
 8008e2a:	a337      	add	r3, pc, #220	; (adr r3, 8008f08 <_strtod_l+0xbb0>)
 8008e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e30:	4630      	mov	r0, r6
 8008e32:	4639      	mov	r1, r7
 8008e34:	f7f7 fe78 	bl	8000b28 <__aeabi_dcmpgt>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d095      	beq.n	8008d68 <_strtod_l+0xa10>
 8008e3c:	e4da      	b.n	80087f4 <_strtod_l+0x49c>
 8008e3e:	9b04      	ldr	r3, [sp, #16]
 8008e40:	b333      	cbz	r3, 8008e90 <_strtod_l+0xb38>
 8008e42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e48:	d822      	bhi.n	8008e90 <_strtod_l+0xb38>
 8008e4a:	a331      	add	r3, pc, #196	; (adr r3, 8008f10 <_strtod_l+0xbb8>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	4630      	mov	r0, r6
 8008e52:	4639      	mov	r1, r7
 8008e54:	f7f7 fe54 	bl	8000b00 <__aeabi_dcmple>
 8008e58:	b1a0      	cbz	r0, 8008e84 <_strtod_l+0xb2c>
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	f7f7 feab 	bl	8000bb8 <__aeabi_d2uiz>
 8008e62:	2801      	cmp	r0, #1
 8008e64:	bf38      	it	cc
 8008e66:	2001      	movcc	r0, #1
 8008e68:	f7f7 fb54 	bl	8000514 <__aeabi_ui2d>
 8008e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e6e:	4606      	mov	r6, r0
 8008e70:	460f      	mov	r7, r1
 8008e72:	bb23      	cbnz	r3, 8008ebe <_strtod_l+0xb66>
 8008e74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e78:	9010      	str	r0, [sp, #64]	; 0x40
 8008e7a:	9311      	str	r3, [sp, #68]	; 0x44
 8008e7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008e84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e88:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008e8c:	1a9b      	subs	r3, r3, r2
 8008e8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e90:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008e94:	eeb0 0a48 	vmov.f32	s0, s16
 8008e98:	eef0 0a68 	vmov.f32	s1, s17
 8008e9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008ea0:	f7ff f8fc 	bl	800809c <__ulp>
 8008ea4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008ea8:	ec53 2b10 	vmov	r2, r3, d0
 8008eac:	f7f7 fbac 	bl	8000608 <__aeabi_dmul>
 8008eb0:	ec53 2b18 	vmov	r2, r3, d8
 8008eb4:	f7f7 f9f2 	bl	800029c <__adddf3>
 8008eb8:	4680      	mov	r8, r0
 8008eba:	4689      	mov	r9, r1
 8008ebc:	e78d      	b.n	8008dda <_strtod_l+0xa82>
 8008ebe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008ec2:	e7db      	b.n	8008e7c <_strtod_l+0xb24>
 8008ec4:	a314      	add	r3, pc, #80	; (adr r3, 8008f18 <_strtod_l+0xbc0>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f7f7 fe0f 	bl	8000aec <__aeabi_dcmplt>
 8008ece:	e7b3      	b.n	8008e38 <_strtod_l+0xae0>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ed4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ed6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	f7ff ba7c 	b.w	80083d6 <_strtod_l+0x7e>
 8008ede:	2a65      	cmp	r2, #101	; 0x65
 8008ee0:	f43f ab75 	beq.w	80085ce <_strtod_l+0x276>
 8008ee4:	2a45      	cmp	r2, #69	; 0x45
 8008ee6:	f43f ab72 	beq.w	80085ce <_strtod_l+0x276>
 8008eea:	2301      	movs	r3, #1
 8008eec:	f7ff bbaa 	b.w	8008644 <_strtod_l+0x2ec>
 8008ef0:	00000000 	.word	0x00000000
 8008ef4:	bff00000 	.word	0xbff00000
 8008ef8:	00000000 	.word	0x00000000
 8008efc:	3ff00000 	.word	0x3ff00000
 8008f00:	94a03595 	.word	0x94a03595
 8008f04:	3fdfffff 	.word	0x3fdfffff
 8008f08:	35afe535 	.word	0x35afe535
 8008f0c:	3fe00000 	.word	0x3fe00000
 8008f10:	ffc00000 	.word	0xffc00000
 8008f14:	41dfffff 	.word	0x41dfffff
 8008f18:	94a03595 	.word	0x94a03595
 8008f1c:	3fcfffff 	.word	0x3fcfffff
 8008f20:	3ff00000 	.word	0x3ff00000
 8008f24:	3fe00000 	.word	0x3fe00000
 8008f28:	7ff00000 	.word	0x7ff00000
 8008f2c:	7fe00000 	.word	0x7fe00000
 8008f30:	7c9fffff 	.word	0x7c9fffff
 8008f34:	7fefffff 	.word	0x7fefffff

08008f38 <_strtod_r>:
 8008f38:	4b01      	ldr	r3, [pc, #4]	; (8008f40 <_strtod_r+0x8>)
 8008f3a:	f7ff ba0d 	b.w	8008358 <_strtod_l>
 8008f3e:	bf00      	nop
 8008f40:	2000006c 	.word	0x2000006c

08008f44 <_strtol_l.constprop.0>:
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f4a:	d001      	beq.n	8008f50 <_strtol_l.constprop.0+0xc>
 8008f4c:	2b24      	cmp	r3, #36	; 0x24
 8008f4e:	d906      	bls.n	8008f5e <_strtol_l.constprop.0+0x1a>
 8008f50:	f7fd fd88 	bl	8006a64 <__errno>
 8008f54:	2316      	movs	r3, #22
 8008f56:	6003      	str	r3, [r0, #0]
 8008f58:	2000      	movs	r0, #0
 8008f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009044 <_strtol_l.constprop.0+0x100>
 8008f62:	460d      	mov	r5, r1
 8008f64:	462e      	mov	r6, r5
 8008f66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f6a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008f6e:	f017 0708 	ands.w	r7, r7, #8
 8008f72:	d1f7      	bne.n	8008f64 <_strtol_l.constprop.0+0x20>
 8008f74:	2c2d      	cmp	r4, #45	; 0x2d
 8008f76:	d132      	bne.n	8008fde <_strtol_l.constprop.0+0x9a>
 8008f78:	782c      	ldrb	r4, [r5, #0]
 8008f7a:	2701      	movs	r7, #1
 8008f7c:	1cb5      	adds	r5, r6, #2
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d05b      	beq.n	800903a <_strtol_l.constprop.0+0xf6>
 8008f82:	2b10      	cmp	r3, #16
 8008f84:	d109      	bne.n	8008f9a <_strtol_l.constprop.0+0x56>
 8008f86:	2c30      	cmp	r4, #48	; 0x30
 8008f88:	d107      	bne.n	8008f9a <_strtol_l.constprop.0+0x56>
 8008f8a:	782c      	ldrb	r4, [r5, #0]
 8008f8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008f90:	2c58      	cmp	r4, #88	; 0x58
 8008f92:	d14d      	bne.n	8009030 <_strtol_l.constprop.0+0xec>
 8008f94:	786c      	ldrb	r4, [r5, #1]
 8008f96:	2310      	movs	r3, #16
 8008f98:	3502      	adds	r5, #2
 8008f9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008f9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fa2:	f04f 0e00 	mov.w	lr, #0
 8008fa6:	fbb8 f9f3 	udiv	r9, r8, r3
 8008faa:	4676      	mov	r6, lr
 8008fac:	fb03 8a19 	mls	sl, r3, r9, r8
 8008fb0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008fb4:	f1bc 0f09 	cmp.w	ip, #9
 8008fb8:	d816      	bhi.n	8008fe8 <_strtol_l.constprop.0+0xa4>
 8008fba:	4664      	mov	r4, ip
 8008fbc:	42a3      	cmp	r3, r4
 8008fbe:	dd24      	ble.n	800900a <_strtol_l.constprop.0+0xc6>
 8008fc0:	f1be 3fff 	cmp.w	lr, #4294967295
 8008fc4:	d008      	beq.n	8008fd8 <_strtol_l.constprop.0+0x94>
 8008fc6:	45b1      	cmp	r9, r6
 8008fc8:	d31c      	bcc.n	8009004 <_strtol_l.constprop.0+0xc0>
 8008fca:	d101      	bne.n	8008fd0 <_strtol_l.constprop.0+0x8c>
 8008fcc:	45a2      	cmp	sl, r4
 8008fce:	db19      	blt.n	8009004 <_strtol_l.constprop.0+0xc0>
 8008fd0:	fb06 4603 	mla	r6, r6, r3, r4
 8008fd4:	f04f 0e01 	mov.w	lr, #1
 8008fd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fdc:	e7e8      	b.n	8008fb0 <_strtol_l.constprop.0+0x6c>
 8008fde:	2c2b      	cmp	r4, #43	; 0x2b
 8008fe0:	bf04      	itt	eq
 8008fe2:	782c      	ldrbeq	r4, [r5, #0]
 8008fe4:	1cb5      	addeq	r5, r6, #2
 8008fe6:	e7ca      	b.n	8008f7e <_strtol_l.constprop.0+0x3a>
 8008fe8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008fec:	f1bc 0f19 	cmp.w	ip, #25
 8008ff0:	d801      	bhi.n	8008ff6 <_strtol_l.constprop.0+0xb2>
 8008ff2:	3c37      	subs	r4, #55	; 0x37
 8008ff4:	e7e2      	b.n	8008fbc <_strtol_l.constprop.0+0x78>
 8008ff6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008ffa:	f1bc 0f19 	cmp.w	ip, #25
 8008ffe:	d804      	bhi.n	800900a <_strtol_l.constprop.0+0xc6>
 8009000:	3c57      	subs	r4, #87	; 0x57
 8009002:	e7db      	b.n	8008fbc <_strtol_l.constprop.0+0x78>
 8009004:	f04f 3eff 	mov.w	lr, #4294967295
 8009008:	e7e6      	b.n	8008fd8 <_strtol_l.constprop.0+0x94>
 800900a:	f1be 3fff 	cmp.w	lr, #4294967295
 800900e:	d105      	bne.n	800901c <_strtol_l.constprop.0+0xd8>
 8009010:	2322      	movs	r3, #34	; 0x22
 8009012:	6003      	str	r3, [r0, #0]
 8009014:	4646      	mov	r6, r8
 8009016:	b942      	cbnz	r2, 800902a <_strtol_l.constprop.0+0xe6>
 8009018:	4630      	mov	r0, r6
 800901a:	e79e      	b.n	8008f5a <_strtol_l.constprop.0+0x16>
 800901c:	b107      	cbz	r7, 8009020 <_strtol_l.constprop.0+0xdc>
 800901e:	4276      	negs	r6, r6
 8009020:	2a00      	cmp	r2, #0
 8009022:	d0f9      	beq.n	8009018 <_strtol_l.constprop.0+0xd4>
 8009024:	f1be 0f00 	cmp.w	lr, #0
 8009028:	d000      	beq.n	800902c <_strtol_l.constprop.0+0xe8>
 800902a:	1e69      	subs	r1, r5, #1
 800902c:	6011      	str	r1, [r2, #0]
 800902e:	e7f3      	b.n	8009018 <_strtol_l.constprop.0+0xd4>
 8009030:	2430      	movs	r4, #48	; 0x30
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1b1      	bne.n	8008f9a <_strtol_l.constprop.0+0x56>
 8009036:	2308      	movs	r3, #8
 8009038:	e7af      	b.n	8008f9a <_strtol_l.constprop.0+0x56>
 800903a:	2c30      	cmp	r4, #48	; 0x30
 800903c:	d0a5      	beq.n	8008f8a <_strtol_l.constprop.0+0x46>
 800903e:	230a      	movs	r3, #10
 8009040:	e7ab      	b.n	8008f9a <_strtol_l.constprop.0+0x56>
 8009042:	bf00      	nop
 8009044:	0800a4d9 	.word	0x0800a4d9

08009048 <_strtol_r>:
 8009048:	f7ff bf7c 	b.w	8008f44 <_strtol_l.constprop.0>

0800904c <__ssputs_r>:
 800904c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009050:	688e      	ldr	r6, [r1, #8]
 8009052:	461f      	mov	r7, r3
 8009054:	42be      	cmp	r6, r7
 8009056:	680b      	ldr	r3, [r1, #0]
 8009058:	4682      	mov	sl, r0
 800905a:	460c      	mov	r4, r1
 800905c:	4690      	mov	r8, r2
 800905e:	d82c      	bhi.n	80090ba <__ssputs_r+0x6e>
 8009060:	898a      	ldrh	r2, [r1, #12]
 8009062:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009066:	d026      	beq.n	80090b6 <__ssputs_r+0x6a>
 8009068:	6965      	ldr	r5, [r4, #20]
 800906a:	6909      	ldr	r1, [r1, #16]
 800906c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009070:	eba3 0901 	sub.w	r9, r3, r1
 8009074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009078:	1c7b      	adds	r3, r7, #1
 800907a:	444b      	add	r3, r9
 800907c:	106d      	asrs	r5, r5, #1
 800907e:	429d      	cmp	r5, r3
 8009080:	bf38      	it	cc
 8009082:	461d      	movcc	r5, r3
 8009084:	0553      	lsls	r3, r2, #21
 8009086:	d527      	bpl.n	80090d8 <__ssputs_r+0x8c>
 8009088:	4629      	mov	r1, r5
 800908a:	f7fe fc0f 	bl	80078ac <_malloc_r>
 800908e:	4606      	mov	r6, r0
 8009090:	b360      	cbz	r0, 80090ec <__ssputs_r+0xa0>
 8009092:	6921      	ldr	r1, [r4, #16]
 8009094:	464a      	mov	r2, r9
 8009096:	f000 fa1b 	bl	80094d0 <memcpy>
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090a4:	81a3      	strh	r3, [r4, #12]
 80090a6:	6126      	str	r6, [r4, #16]
 80090a8:	6165      	str	r5, [r4, #20]
 80090aa:	444e      	add	r6, r9
 80090ac:	eba5 0509 	sub.w	r5, r5, r9
 80090b0:	6026      	str	r6, [r4, #0]
 80090b2:	60a5      	str	r5, [r4, #8]
 80090b4:	463e      	mov	r6, r7
 80090b6:	42be      	cmp	r6, r7
 80090b8:	d900      	bls.n	80090bc <__ssputs_r+0x70>
 80090ba:	463e      	mov	r6, r7
 80090bc:	6820      	ldr	r0, [r4, #0]
 80090be:	4632      	mov	r2, r6
 80090c0:	4641      	mov	r1, r8
 80090c2:	f000 f9c9 	bl	8009458 <memmove>
 80090c6:	68a3      	ldr	r3, [r4, #8]
 80090c8:	1b9b      	subs	r3, r3, r6
 80090ca:	60a3      	str	r3, [r4, #8]
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	4433      	add	r3, r6
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	2000      	movs	r0, #0
 80090d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d8:	462a      	mov	r2, r5
 80090da:	f000 fdae 	bl	8009c3a <_realloc_r>
 80090de:	4606      	mov	r6, r0
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d1e0      	bne.n	80090a6 <__ssputs_r+0x5a>
 80090e4:	6921      	ldr	r1, [r4, #16]
 80090e6:	4650      	mov	r0, sl
 80090e8:	f7fe fb6c 	bl	80077c4 <_free_r>
 80090ec:	230c      	movs	r3, #12
 80090ee:	f8ca 3000 	str.w	r3, [sl]
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090f8:	81a3      	strh	r3, [r4, #12]
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295
 80090fe:	e7e9      	b.n	80090d4 <__ssputs_r+0x88>

08009100 <_svfiprintf_r>:
 8009100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	4698      	mov	r8, r3
 8009106:	898b      	ldrh	r3, [r1, #12]
 8009108:	061b      	lsls	r3, r3, #24
 800910a:	b09d      	sub	sp, #116	; 0x74
 800910c:	4607      	mov	r7, r0
 800910e:	460d      	mov	r5, r1
 8009110:	4614      	mov	r4, r2
 8009112:	d50e      	bpl.n	8009132 <_svfiprintf_r+0x32>
 8009114:	690b      	ldr	r3, [r1, #16]
 8009116:	b963      	cbnz	r3, 8009132 <_svfiprintf_r+0x32>
 8009118:	2140      	movs	r1, #64	; 0x40
 800911a:	f7fe fbc7 	bl	80078ac <_malloc_r>
 800911e:	6028      	str	r0, [r5, #0]
 8009120:	6128      	str	r0, [r5, #16]
 8009122:	b920      	cbnz	r0, 800912e <_svfiprintf_r+0x2e>
 8009124:	230c      	movs	r3, #12
 8009126:	603b      	str	r3, [r7, #0]
 8009128:	f04f 30ff 	mov.w	r0, #4294967295
 800912c:	e0d0      	b.n	80092d0 <_svfiprintf_r+0x1d0>
 800912e:	2340      	movs	r3, #64	; 0x40
 8009130:	616b      	str	r3, [r5, #20]
 8009132:	2300      	movs	r3, #0
 8009134:	9309      	str	r3, [sp, #36]	; 0x24
 8009136:	2320      	movs	r3, #32
 8009138:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800913c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009140:	2330      	movs	r3, #48	; 0x30
 8009142:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80092e8 <_svfiprintf_r+0x1e8>
 8009146:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800914a:	f04f 0901 	mov.w	r9, #1
 800914e:	4623      	mov	r3, r4
 8009150:	469a      	mov	sl, r3
 8009152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009156:	b10a      	cbz	r2, 800915c <_svfiprintf_r+0x5c>
 8009158:	2a25      	cmp	r2, #37	; 0x25
 800915a:	d1f9      	bne.n	8009150 <_svfiprintf_r+0x50>
 800915c:	ebba 0b04 	subs.w	fp, sl, r4
 8009160:	d00b      	beq.n	800917a <_svfiprintf_r+0x7a>
 8009162:	465b      	mov	r3, fp
 8009164:	4622      	mov	r2, r4
 8009166:	4629      	mov	r1, r5
 8009168:	4638      	mov	r0, r7
 800916a:	f7ff ff6f 	bl	800904c <__ssputs_r>
 800916e:	3001      	adds	r0, #1
 8009170:	f000 80a9 	beq.w	80092c6 <_svfiprintf_r+0x1c6>
 8009174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009176:	445a      	add	r2, fp
 8009178:	9209      	str	r2, [sp, #36]	; 0x24
 800917a:	f89a 3000 	ldrb.w	r3, [sl]
 800917e:	2b00      	cmp	r3, #0
 8009180:	f000 80a1 	beq.w	80092c6 <_svfiprintf_r+0x1c6>
 8009184:	2300      	movs	r3, #0
 8009186:	f04f 32ff 	mov.w	r2, #4294967295
 800918a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800918e:	f10a 0a01 	add.w	sl, sl, #1
 8009192:	9304      	str	r3, [sp, #16]
 8009194:	9307      	str	r3, [sp, #28]
 8009196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800919a:	931a      	str	r3, [sp, #104]	; 0x68
 800919c:	4654      	mov	r4, sl
 800919e:	2205      	movs	r2, #5
 80091a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a4:	4850      	ldr	r0, [pc, #320]	; (80092e8 <_svfiprintf_r+0x1e8>)
 80091a6:	f7f7 f81b 	bl	80001e0 <memchr>
 80091aa:	9a04      	ldr	r2, [sp, #16]
 80091ac:	b9d8      	cbnz	r0, 80091e6 <_svfiprintf_r+0xe6>
 80091ae:	06d0      	lsls	r0, r2, #27
 80091b0:	bf44      	itt	mi
 80091b2:	2320      	movmi	r3, #32
 80091b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091b8:	0711      	lsls	r1, r2, #28
 80091ba:	bf44      	itt	mi
 80091bc:	232b      	movmi	r3, #43	; 0x2b
 80091be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091c2:	f89a 3000 	ldrb.w	r3, [sl]
 80091c6:	2b2a      	cmp	r3, #42	; 0x2a
 80091c8:	d015      	beq.n	80091f6 <_svfiprintf_r+0xf6>
 80091ca:	9a07      	ldr	r2, [sp, #28]
 80091cc:	4654      	mov	r4, sl
 80091ce:	2000      	movs	r0, #0
 80091d0:	f04f 0c0a 	mov.w	ip, #10
 80091d4:	4621      	mov	r1, r4
 80091d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091da:	3b30      	subs	r3, #48	; 0x30
 80091dc:	2b09      	cmp	r3, #9
 80091de:	d94d      	bls.n	800927c <_svfiprintf_r+0x17c>
 80091e0:	b1b0      	cbz	r0, 8009210 <_svfiprintf_r+0x110>
 80091e2:	9207      	str	r2, [sp, #28]
 80091e4:	e014      	b.n	8009210 <_svfiprintf_r+0x110>
 80091e6:	eba0 0308 	sub.w	r3, r0, r8
 80091ea:	fa09 f303 	lsl.w	r3, r9, r3
 80091ee:	4313      	orrs	r3, r2
 80091f0:	9304      	str	r3, [sp, #16]
 80091f2:	46a2      	mov	sl, r4
 80091f4:	e7d2      	b.n	800919c <_svfiprintf_r+0x9c>
 80091f6:	9b03      	ldr	r3, [sp, #12]
 80091f8:	1d19      	adds	r1, r3, #4
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	9103      	str	r1, [sp, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	bfbb      	ittet	lt
 8009202:	425b      	neglt	r3, r3
 8009204:	f042 0202 	orrlt.w	r2, r2, #2
 8009208:	9307      	strge	r3, [sp, #28]
 800920a:	9307      	strlt	r3, [sp, #28]
 800920c:	bfb8      	it	lt
 800920e:	9204      	strlt	r2, [sp, #16]
 8009210:	7823      	ldrb	r3, [r4, #0]
 8009212:	2b2e      	cmp	r3, #46	; 0x2e
 8009214:	d10c      	bne.n	8009230 <_svfiprintf_r+0x130>
 8009216:	7863      	ldrb	r3, [r4, #1]
 8009218:	2b2a      	cmp	r3, #42	; 0x2a
 800921a:	d134      	bne.n	8009286 <_svfiprintf_r+0x186>
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	1d1a      	adds	r2, r3, #4
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	9203      	str	r2, [sp, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	bfb8      	it	lt
 8009228:	f04f 33ff 	movlt.w	r3, #4294967295
 800922c:	3402      	adds	r4, #2
 800922e:	9305      	str	r3, [sp, #20]
 8009230:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80092f8 <_svfiprintf_r+0x1f8>
 8009234:	7821      	ldrb	r1, [r4, #0]
 8009236:	2203      	movs	r2, #3
 8009238:	4650      	mov	r0, sl
 800923a:	f7f6 ffd1 	bl	80001e0 <memchr>
 800923e:	b138      	cbz	r0, 8009250 <_svfiprintf_r+0x150>
 8009240:	9b04      	ldr	r3, [sp, #16]
 8009242:	eba0 000a 	sub.w	r0, r0, sl
 8009246:	2240      	movs	r2, #64	; 0x40
 8009248:	4082      	lsls	r2, r0
 800924a:	4313      	orrs	r3, r2
 800924c:	3401      	adds	r4, #1
 800924e:	9304      	str	r3, [sp, #16]
 8009250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009254:	4825      	ldr	r0, [pc, #148]	; (80092ec <_svfiprintf_r+0x1ec>)
 8009256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800925a:	2206      	movs	r2, #6
 800925c:	f7f6 ffc0 	bl	80001e0 <memchr>
 8009260:	2800      	cmp	r0, #0
 8009262:	d038      	beq.n	80092d6 <_svfiprintf_r+0x1d6>
 8009264:	4b22      	ldr	r3, [pc, #136]	; (80092f0 <_svfiprintf_r+0x1f0>)
 8009266:	bb1b      	cbnz	r3, 80092b0 <_svfiprintf_r+0x1b0>
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	3307      	adds	r3, #7
 800926c:	f023 0307 	bic.w	r3, r3, #7
 8009270:	3308      	adds	r3, #8
 8009272:	9303      	str	r3, [sp, #12]
 8009274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009276:	4433      	add	r3, r6
 8009278:	9309      	str	r3, [sp, #36]	; 0x24
 800927a:	e768      	b.n	800914e <_svfiprintf_r+0x4e>
 800927c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009280:	460c      	mov	r4, r1
 8009282:	2001      	movs	r0, #1
 8009284:	e7a6      	b.n	80091d4 <_svfiprintf_r+0xd4>
 8009286:	2300      	movs	r3, #0
 8009288:	3401      	adds	r4, #1
 800928a:	9305      	str	r3, [sp, #20]
 800928c:	4619      	mov	r1, r3
 800928e:	f04f 0c0a 	mov.w	ip, #10
 8009292:	4620      	mov	r0, r4
 8009294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009298:	3a30      	subs	r2, #48	; 0x30
 800929a:	2a09      	cmp	r2, #9
 800929c:	d903      	bls.n	80092a6 <_svfiprintf_r+0x1a6>
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0c6      	beq.n	8009230 <_svfiprintf_r+0x130>
 80092a2:	9105      	str	r1, [sp, #20]
 80092a4:	e7c4      	b.n	8009230 <_svfiprintf_r+0x130>
 80092a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80092aa:	4604      	mov	r4, r0
 80092ac:	2301      	movs	r3, #1
 80092ae:	e7f0      	b.n	8009292 <_svfiprintf_r+0x192>
 80092b0:	ab03      	add	r3, sp, #12
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	462a      	mov	r2, r5
 80092b6:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <_svfiprintf_r+0x1f4>)
 80092b8:	a904      	add	r1, sp, #16
 80092ba:	4638      	mov	r0, r7
 80092bc:	f7fc fc84 	bl	8005bc8 <_printf_float>
 80092c0:	1c42      	adds	r2, r0, #1
 80092c2:	4606      	mov	r6, r0
 80092c4:	d1d6      	bne.n	8009274 <_svfiprintf_r+0x174>
 80092c6:	89ab      	ldrh	r3, [r5, #12]
 80092c8:	065b      	lsls	r3, r3, #25
 80092ca:	f53f af2d 	bmi.w	8009128 <_svfiprintf_r+0x28>
 80092ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092d0:	b01d      	add	sp, #116	; 0x74
 80092d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d6:	ab03      	add	r3, sp, #12
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	462a      	mov	r2, r5
 80092dc:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <_svfiprintf_r+0x1f4>)
 80092de:	a904      	add	r1, sp, #16
 80092e0:	4638      	mov	r0, r7
 80092e2:	f7fc ff15 	bl	8006110 <_printf_i>
 80092e6:	e7eb      	b.n	80092c0 <_svfiprintf_r+0x1c0>
 80092e8:	0800a5d9 	.word	0x0800a5d9
 80092ec:	0800a5e3 	.word	0x0800a5e3
 80092f0:	08005bc9 	.word	0x08005bc9
 80092f4:	0800904d 	.word	0x0800904d
 80092f8:	0800a5df 	.word	0x0800a5df

080092fc <__sflush_r>:
 80092fc:	898a      	ldrh	r2, [r1, #12]
 80092fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009302:	4605      	mov	r5, r0
 8009304:	0710      	lsls	r0, r2, #28
 8009306:	460c      	mov	r4, r1
 8009308:	d458      	bmi.n	80093bc <__sflush_r+0xc0>
 800930a:	684b      	ldr	r3, [r1, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	dc05      	bgt.n	800931c <__sflush_r+0x20>
 8009310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009312:	2b00      	cmp	r3, #0
 8009314:	dc02      	bgt.n	800931c <__sflush_r+0x20>
 8009316:	2000      	movs	r0, #0
 8009318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800931c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800931e:	2e00      	cmp	r6, #0
 8009320:	d0f9      	beq.n	8009316 <__sflush_r+0x1a>
 8009322:	2300      	movs	r3, #0
 8009324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009328:	682f      	ldr	r7, [r5, #0]
 800932a:	6a21      	ldr	r1, [r4, #32]
 800932c:	602b      	str	r3, [r5, #0]
 800932e:	d032      	beq.n	8009396 <__sflush_r+0x9a>
 8009330:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	075a      	lsls	r2, r3, #29
 8009336:	d505      	bpl.n	8009344 <__sflush_r+0x48>
 8009338:	6863      	ldr	r3, [r4, #4]
 800933a:	1ac0      	subs	r0, r0, r3
 800933c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800933e:	b10b      	cbz	r3, 8009344 <__sflush_r+0x48>
 8009340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009342:	1ac0      	subs	r0, r0, r3
 8009344:	2300      	movs	r3, #0
 8009346:	4602      	mov	r2, r0
 8009348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800934a:	6a21      	ldr	r1, [r4, #32]
 800934c:	4628      	mov	r0, r5
 800934e:	47b0      	blx	r6
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	d106      	bne.n	8009364 <__sflush_r+0x68>
 8009356:	6829      	ldr	r1, [r5, #0]
 8009358:	291d      	cmp	r1, #29
 800935a:	d82b      	bhi.n	80093b4 <__sflush_r+0xb8>
 800935c:	4a29      	ldr	r2, [pc, #164]	; (8009404 <__sflush_r+0x108>)
 800935e:	410a      	asrs	r2, r1
 8009360:	07d6      	lsls	r6, r2, #31
 8009362:	d427      	bmi.n	80093b4 <__sflush_r+0xb8>
 8009364:	2200      	movs	r2, #0
 8009366:	6062      	str	r2, [r4, #4]
 8009368:	04d9      	lsls	r1, r3, #19
 800936a:	6922      	ldr	r2, [r4, #16]
 800936c:	6022      	str	r2, [r4, #0]
 800936e:	d504      	bpl.n	800937a <__sflush_r+0x7e>
 8009370:	1c42      	adds	r2, r0, #1
 8009372:	d101      	bne.n	8009378 <__sflush_r+0x7c>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	b903      	cbnz	r3, 800937a <__sflush_r+0x7e>
 8009378:	6560      	str	r0, [r4, #84]	; 0x54
 800937a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800937c:	602f      	str	r7, [r5, #0]
 800937e:	2900      	cmp	r1, #0
 8009380:	d0c9      	beq.n	8009316 <__sflush_r+0x1a>
 8009382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009386:	4299      	cmp	r1, r3
 8009388:	d002      	beq.n	8009390 <__sflush_r+0x94>
 800938a:	4628      	mov	r0, r5
 800938c:	f7fe fa1a 	bl	80077c4 <_free_r>
 8009390:	2000      	movs	r0, #0
 8009392:	6360      	str	r0, [r4, #52]	; 0x34
 8009394:	e7c0      	b.n	8009318 <__sflush_r+0x1c>
 8009396:	2301      	movs	r3, #1
 8009398:	4628      	mov	r0, r5
 800939a:	47b0      	blx	r6
 800939c:	1c41      	adds	r1, r0, #1
 800939e:	d1c8      	bne.n	8009332 <__sflush_r+0x36>
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0c5      	beq.n	8009332 <__sflush_r+0x36>
 80093a6:	2b1d      	cmp	r3, #29
 80093a8:	d001      	beq.n	80093ae <__sflush_r+0xb2>
 80093aa:	2b16      	cmp	r3, #22
 80093ac:	d101      	bne.n	80093b2 <__sflush_r+0xb6>
 80093ae:	602f      	str	r7, [r5, #0]
 80093b0:	e7b1      	b.n	8009316 <__sflush_r+0x1a>
 80093b2:	89a3      	ldrh	r3, [r4, #12]
 80093b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093b8:	81a3      	strh	r3, [r4, #12]
 80093ba:	e7ad      	b.n	8009318 <__sflush_r+0x1c>
 80093bc:	690f      	ldr	r7, [r1, #16]
 80093be:	2f00      	cmp	r7, #0
 80093c0:	d0a9      	beq.n	8009316 <__sflush_r+0x1a>
 80093c2:	0793      	lsls	r3, r2, #30
 80093c4:	680e      	ldr	r6, [r1, #0]
 80093c6:	bf08      	it	eq
 80093c8:	694b      	ldreq	r3, [r1, #20]
 80093ca:	600f      	str	r7, [r1, #0]
 80093cc:	bf18      	it	ne
 80093ce:	2300      	movne	r3, #0
 80093d0:	eba6 0807 	sub.w	r8, r6, r7
 80093d4:	608b      	str	r3, [r1, #8]
 80093d6:	f1b8 0f00 	cmp.w	r8, #0
 80093da:	dd9c      	ble.n	8009316 <__sflush_r+0x1a>
 80093dc:	6a21      	ldr	r1, [r4, #32]
 80093de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093e0:	4643      	mov	r3, r8
 80093e2:	463a      	mov	r2, r7
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b0      	blx	r6
 80093e8:	2800      	cmp	r0, #0
 80093ea:	dc06      	bgt.n	80093fa <__sflush_r+0xfe>
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	f04f 30ff 	mov.w	r0, #4294967295
 80093f8:	e78e      	b.n	8009318 <__sflush_r+0x1c>
 80093fa:	4407      	add	r7, r0
 80093fc:	eba8 0800 	sub.w	r8, r8, r0
 8009400:	e7e9      	b.n	80093d6 <__sflush_r+0xda>
 8009402:	bf00      	nop
 8009404:	dfbffffe 	.word	0xdfbffffe

08009408 <_fflush_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	690b      	ldr	r3, [r1, #16]
 800940c:	4605      	mov	r5, r0
 800940e:	460c      	mov	r4, r1
 8009410:	b913      	cbnz	r3, 8009418 <_fflush_r+0x10>
 8009412:	2500      	movs	r5, #0
 8009414:	4628      	mov	r0, r5
 8009416:	bd38      	pop	{r3, r4, r5, pc}
 8009418:	b118      	cbz	r0, 8009422 <_fflush_r+0x1a>
 800941a:	6a03      	ldr	r3, [r0, #32]
 800941c:	b90b      	cbnz	r3, 8009422 <_fflush_r+0x1a>
 800941e:	f7fd fa35 	bl	800688c <__sinit>
 8009422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d0f3      	beq.n	8009412 <_fflush_r+0xa>
 800942a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800942c:	07d0      	lsls	r0, r2, #31
 800942e:	d404      	bmi.n	800943a <_fflush_r+0x32>
 8009430:	0599      	lsls	r1, r3, #22
 8009432:	d402      	bmi.n	800943a <_fflush_r+0x32>
 8009434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009436:	f7fd fb40 	bl	8006aba <__retarget_lock_acquire_recursive>
 800943a:	4628      	mov	r0, r5
 800943c:	4621      	mov	r1, r4
 800943e:	f7ff ff5d 	bl	80092fc <__sflush_r>
 8009442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009444:	07da      	lsls	r2, r3, #31
 8009446:	4605      	mov	r5, r0
 8009448:	d4e4      	bmi.n	8009414 <_fflush_r+0xc>
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	059b      	lsls	r3, r3, #22
 800944e:	d4e1      	bmi.n	8009414 <_fflush_r+0xc>
 8009450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009452:	f7fd fb33 	bl	8006abc <__retarget_lock_release_recursive>
 8009456:	e7dd      	b.n	8009414 <_fflush_r+0xc>

08009458 <memmove>:
 8009458:	4288      	cmp	r0, r1
 800945a:	b510      	push	{r4, lr}
 800945c:	eb01 0402 	add.w	r4, r1, r2
 8009460:	d902      	bls.n	8009468 <memmove+0x10>
 8009462:	4284      	cmp	r4, r0
 8009464:	4623      	mov	r3, r4
 8009466:	d807      	bhi.n	8009478 <memmove+0x20>
 8009468:	1e43      	subs	r3, r0, #1
 800946a:	42a1      	cmp	r1, r4
 800946c:	d008      	beq.n	8009480 <memmove+0x28>
 800946e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009476:	e7f8      	b.n	800946a <memmove+0x12>
 8009478:	4402      	add	r2, r0
 800947a:	4601      	mov	r1, r0
 800947c:	428a      	cmp	r2, r1
 800947e:	d100      	bne.n	8009482 <memmove+0x2a>
 8009480:	bd10      	pop	{r4, pc}
 8009482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800948a:	e7f7      	b.n	800947c <memmove+0x24>

0800948c <strncmp>:
 800948c:	b510      	push	{r4, lr}
 800948e:	b16a      	cbz	r2, 80094ac <strncmp+0x20>
 8009490:	3901      	subs	r1, #1
 8009492:	1884      	adds	r4, r0, r2
 8009494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009498:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800949c:	429a      	cmp	r2, r3
 800949e:	d103      	bne.n	80094a8 <strncmp+0x1c>
 80094a0:	42a0      	cmp	r0, r4
 80094a2:	d001      	beq.n	80094a8 <strncmp+0x1c>
 80094a4:	2a00      	cmp	r2, #0
 80094a6:	d1f5      	bne.n	8009494 <strncmp+0x8>
 80094a8:	1ad0      	subs	r0, r2, r3
 80094aa:	bd10      	pop	{r4, pc}
 80094ac:	4610      	mov	r0, r2
 80094ae:	e7fc      	b.n	80094aa <strncmp+0x1e>

080094b0 <_sbrk_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4d06      	ldr	r5, [pc, #24]	; (80094cc <_sbrk_r+0x1c>)
 80094b4:	2300      	movs	r3, #0
 80094b6:	4604      	mov	r4, r0
 80094b8:	4608      	mov	r0, r1
 80094ba:	602b      	str	r3, [r5, #0]
 80094bc:	f7f9 fbc0 	bl	8002c40 <_sbrk>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_sbrk_r+0x1a>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_sbrk_r+0x1a>
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	20000500 	.word	0x20000500

080094d0 <memcpy>:
 80094d0:	440a      	add	r2, r1
 80094d2:	4291      	cmp	r1, r2
 80094d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80094d8:	d100      	bne.n	80094dc <memcpy+0xc>
 80094da:	4770      	bx	lr
 80094dc:	b510      	push	{r4, lr}
 80094de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094e6:	4291      	cmp	r1, r2
 80094e8:	d1f9      	bne.n	80094de <memcpy+0xe>
 80094ea:	bd10      	pop	{r4, pc}
 80094ec:	0000      	movs	r0, r0
	...

080094f0 <nan>:
 80094f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80094f8 <nan+0x8>
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	00000000 	.word	0x00000000
 80094fc:	7ff80000 	.word	0x7ff80000

08009500 <__assert_func>:
 8009500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009502:	4614      	mov	r4, r2
 8009504:	461a      	mov	r2, r3
 8009506:	4b09      	ldr	r3, [pc, #36]	; (800952c <__assert_func+0x2c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4605      	mov	r5, r0
 800950c:	68d8      	ldr	r0, [r3, #12]
 800950e:	b14c      	cbz	r4, 8009524 <__assert_func+0x24>
 8009510:	4b07      	ldr	r3, [pc, #28]	; (8009530 <__assert_func+0x30>)
 8009512:	9100      	str	r1, [sp, #0]
 8009514:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009518:	4906      	ldr	r1, [pc, #24]	; (8009534 <__assert_func+0x34>)
 800951a:	462b      	mov	r3, r5
 800951c:	f000 fbca 	bl	8009cb4 <fiprintf>
 8009520:	f000 fbda 	bl	8009cd8 <abort>
 8009524:	4b04      	ldr	r3, [pc, #16]	; (8009538 <__assert_func+0x38>)
 8009526:	461c      	mov	r4, r3
 8009528:	e7f3      	b.n	8009512 <__assert_func+0x12>
 800952a:	bf00      	nop
 800952c:	20000068 	.word	0x20000068
 8009530:	0800a5f2 	.word	0x0800a5f2
 8009534:	0800a5ff 	.word	0x0800a5ff
 8009538:	0800a62d 	.word	0x0800a62d

0800953c <_calloc_r>:
 800953c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800953e:	fba1 2402 	umull	r2, r4, r1, r2
 8009542:	b94c      	cbnz	r4, 8009558 <_calloc_r+0x1c>
 8009544:	4611      	mov	r1, r2
 8009546:	9201      	str	r2, [sp, #4]
 8009548:	f7fe f9b0 	bl	80078ac <_malloc_r>
 800954c:	9a01      	ldr	r2, [sp, #4]
 800954e:	4605      	mov	r5, r0
 8009550:	b930      	cbnz	r0, 8009560 <_calloc_r+0x24>
 8009552:	4628      	mov	r0, r5
 8009554:	b003      	add	sp, #12
 8009556:	bd30      	pop	{r4, r5, pc}
 8009558:	220c      	movs	r2, #12
 800955a:	6002      	str	r2, [r0, #0]
 800955c:	2500      	movs	r5, #0
 800955e:	e7f8      	b.n	8009552 <_calloc_r+0x16>
 8009560:	4621      	mov	r1, r4
 8009562:	f7fd fa2c 	bl	80069be <memset>
 8009566:	e7f4      	b.n	8009552 <_calloc_r+0x16>

08009568 <rshift>:
 8009568:	6903      	ldr	r3, [r0, #16]
 800956a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800956e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009572:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009576:	f100 0414 	add.w	r4, r0, #20
 800957a:	dd45      	ble.n	8009608 <rshift+0xa0>
 800957c:	f011 011f 	ands.w	r1, r1, #31
 8009580:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009584:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009588:	d10c      	bne.n	80095a4 <rshift+0x3c>
 800958a:	f100 0710 	add.w	r7, r0, #16
 800958e:	4629      	mov	r1, r5
 8009590:	42b1      	cmp	r1, r6
 8009592:	d334      	bcc.n	80095fe <rshift+0x96>
 8009594:	1a9b      	subs	r3, r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	1eea      	subs	r2, r5, #3
 800959a:	4296      	cmp	r6, r2
 800959c:	bf38      	it	cc
 800959e:	2300      	movcc	r3, #0
 80095a0:	4423      	add	r3, r4
 80095a2:	e015      	b.n	80095d0 <rshift+0x68>
 80095a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095a8:	f1c1 0820 	rsb	r8, r1, #32
 80095ac:	40cf      	lsrs	r7, r1
 80095ae:	f105 0e04 	add.w	lr, r5, #4
 80095b2:	46a1      	mov	r9, r4
 80095b4:	4576      	cmp	r6, lr
 80095b6:	46f4      	mov	ip, lr
 80095b8:	d815      	bhi.n	80095e6 <rshift+0x7e>
 80095ba:	1a9a      	subs	r2, r3, r2
 80095bc:	0092      	lsls	r2, r2, #2
 80095be:	3a04      	subs	r2, #4
 80095c0:	3501      	adds	r5, #1
 80095c2:	42ae      	cmp	r6, r5
 80095c4:	bf38      	it	cc
 80095c6:	2200      	movcc	r2, #0
 80095c8:	18a3      	adds	r3, r4, r2
 80095ca:	50a7      	str	r7, [r4, r2]
 80095cc:	b107      	cbz	r7, 80095d0 <rshift+0x68>
 80095ce:	3304      	adds	r3, #4
 80095d0:	1b1a      	subs	r2, r3, r4
 80095d2:	42a3      	cmp	r3, r4
 80095d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80095d8:	bf08      	it	eq
 80095da:	2300      	moveq	r3, #0
 80095dc:	6102      	str	r2, [r0, #16]
 80095de:	bf08      	it	eq
 80095e0:	6143      	streq	r3, [r0, #20]
 80095e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095e6:	f8dc c000 	ldr.w	ip, [ip]
 80095ea:	fa0c fc08 	lsl.w	ip, ip, r8
 80095ee:	ea4c 0707 	orr.w	r7, ip, r7
 80095f2:	f849 7b04 	str.w	r7, [r9], #4
 80095f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80095fa:	40cf      	lsrs	r7, r1
 80095fc:	e7da      	b.n	80095b4 <rshift+0x4c>
 80095fe:	f851 cb04 	ldr.w	ip, [r1], #4
 8009602:	f847 cf04 	str.w	ip, [r7, #4]!
 8009606:	e7c3      	b.n	8009590 <rshift+0x28>
 8009608:	4623      	mov	r3, r4
 800960a:	e7e1      	b.n	80095d0 <rshift+0x68>

0800960c <__hexdig_fun>:
 800960c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009610:	2b09      	cmp	r3, #9
 8009612:	d802      	bhi.n	800961a <__hexdig_fun+0xe>
 8009614:	3820      	subs	r0, #32
 8009616:	b2c0      	uxtb	r0, r0
 8009618:	4770      	bx	lr
 800961a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800961e:	2b05      	cmp	r3, #5
 8009620:	d801      	bhi.n	8009626 <__hexdig_fun+0x1a>
 8009622:	3847      	subs	r0, #71	; 0x47
 8009624:	e7f7      	b.n	8009616 <__hexdig_fun+0xa>
 8009626:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800962a:	2b05      	cmp	r3, #5
 800962c:	d801      	bhi.n	8009632 <__hexdig_fun+0x26>
 800962e:	3827      	subs	r0, #39	; 0x27
 8009630:	e7f1      	b.n	8009616 <__hexdig_fun+0xa>
 8009632:	2000      	movs	r0, #0
 8009634:	4770      	bx	lr
	...

08009638 <__gethex>:
 8009638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963c:	4617      	mov	r7, r2
 800963e:	680a      	ldr	r2, [r1, #0]
 8009640:	b085      	sub	sp, #20
 8009642:	f102 0b02 	add.w	fp, r2, #2
 8009646:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800964a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800964e:	4681      	mov	r9, r0
 8009650:	468a      	mov	sl, r1
 8009652:	9302      	str	r3, [sp, #8]
 8009654:	32fe      	adds	r2, #254	; 0xfe
 8009656:	eb02 030b 	add.w	r3, r2, fp
 800965a:	46d8      	mov	r8, fp
 800965c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009660:	9301      	str	r3, [sp, #4]
 8009662:	2830      	cmp	r0, #48	; 0x30
 8009664:	d0f7      	beq.n	8009656 <__gethex+0x1e>
 8009666:	f7ff ffd1 	bl	800960c <__hexdig_fun>
 800966a:	4604      	mov	r4, r0
 800966c:	2800      	cmp	r0, #0
 800966e:	d138      	bne.n	80096e2 <__gethex+0xaa>
 8009670:	49a7      	ldr	r1, [pc, #668]	; (8009910 <__gethex+0x2d8>)
 8009672:	2201      	movs	r2, #1
 8009674:	4640      	mov	r0, r8
 8009676:	f7ff ff09 	bl	800948c <strncmp>
 800967a:	4606      	mov	r6, r0
 800967c:	2800      	cmp	r0, #0
 800967e:	d169      	bne.n	8009754 <__gethex+0x11c>
 8009680:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009684:	465d      	mov	r5, fp
 8009686:	f7ff ffc1 	bl	800960c <__hexdig_fun>
 800968a:	2800      	cmp	r0, #0
 800968c:	d064      	beq.n	8009758 <__gethex+0x120>
 800968e:	465a      	mov	r2, fp
 8009690:	7810      	ldrb	r0, [r2, #0]
 8009692:	2830      	cmp	r0, #48	; 0x30
 8009694:	4690      	mov	r8, r2
 8009696:	f102 0201 	add.w	r2, r2, #1
 800969a:	d0f9      	beq.n	8009690 <__gethex+0x58>
 800969c:	f7ff ffb6 	bl	800960c <__hexdig_fun>
 80096a0:	2301      	movs	r3, #1
 80096a2:	fab0 f480 	clz	r4, r0
 80096a6:	0964      	lsrs	r4, r4, #5
 80096a8:	465e      	mov	r6, fp
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	4642      	mov	r2, r8
 80096ae:	4615      	mov	r5, r2
 80096b0:	3201      	adds	r2, #1
 80096b2:	7828      	ldrb	r0, [r5, #0]
 80096b4:	f7ff ffaa 	bl	800960c <__hexdig_fun>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d1f8      	bne.n	80096ae <__gethex+0x76>
 80096bc:	4994      	ldr	r1, [pc, #592]	; (8009910 <__gethex+0x2d8>)
 80096be:	2201      	movs	r2, #1
 80096c0:	4628      	mov	r0, r5
 80096c2:	f7ff fee3 	bl	800948c <strncmp>
 80096c6:	b978      	cbnz	r0, 80096e8 <__gethex+0xb0>
 80096c8:	b946      	cbnz	r6, 80096dc <__gethex+0xa4>
 80096ca:	1c6e      	adds	r6, r5, #1
 80096cc:	4632      	mov	r2, r6
 80096ce:	4615      	mov	r5, r2
 80096d0:	3201      	adds	r2, #1
 80096d2:	7828      	ldrb	r0, [r5, #0]
 80096d4:	f7ff ff9a 	bl	800960c <__hexdig_fun>
 80096d8:	2800      	cmp	r0, #0
 80096da:	d1f8      	bne.n	80096ce <__gethex+0x96>
 80096dc:	1b73      	subs	r3, r6, r5
 80096de:	009e      	lsls	r6, r3, #2
 80096e0:	e004      	b.n	80096ec <__gethex+0xb4>
 80096e2:	2400      	movs	r4, #0
 80096e4:	4626      	mov	r6, r4
 80096e6:	e7e1      	b.n	80096ac <__gethex+0x74>
 80096e8:	2e00      	cmp	r6, #0
 80096ea:	d1f7      	bne.n	80096dc <__gethex+0xa4>
 80096ec:	782b      	ldrb	r3, [r5, #0]
 80096ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80096f2:	2b50      	cmp	r3, #80	; 0x50
 80096f4:	d13d      	bne.n	8009772 <__gethex+0x13a>
 80096f6:	786b      	ldrb	r3, [r5, #1]
 80096f8:	2b2b      	cmp	r3, #43	; 0x2b
 80096fa:	d02f      	beq.n	800975c <__gethex+0x124>
 80096fc:	2b2d      	cmp	r3, #45	; 0x2d
 80096fe:	d031      	beq.n	8009764 <__gethex+0x12c>
 8009700:	1c69      	adds	r1, r5, #1
 8009702:	f04f 0b00 	mov.w	fp, #0
 8009706:	7808      	ldrb	r0, [r1, #0]
 8009708:	f7ff ff80 	bl	800960c <__hexdig_fun>
 800970c:	1e42      	subs	r2, r0, #1
 800970e:	b2d2      	uxtb	r2, r2
 8009710:	2a18      	cmp	r2, #24
 8009712:	d82e      	bhi.n	8009772 <__gethex+0x13a>
 8009714:	f1a0 0210 	sub.w	r2, r0, #16
 8009718:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800971c:	f7ff ff76 	bl	800960c <__hexdig_fun>
 8009720:	f100 3cff 	add.w	ip, r0, #4294967295
 8009724:	fa5f fc8c 	uxtb.w	ip, ip
 8009728:	f1bc 0f18 	cmp.w	ip, #24
 800972c:	d91d      	bls.n	800976a <__gethex+0x132>
 800972e:	f1bb 0f00 	cmp.w	fp, #0
 8009732:	d000      	beq.n	8009736 <__gethex+0xfe>
 8009734:	4252      	negs	r2, r2
 8009736:	4416      	add	r6, r2
 8009738:	f8ca 1000 	str.w	r1, [sl]
 800973c:	b1dc      	cbz	r4, 8009776 <__gethex+0x13e>
 800973e:	9b01      	ldr	r3, [sp, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	bf14      	ite	ne
 8009744:	f04f 0800 	movne.w	r8, #0
 8009748:	f04f 0806 	moveq.w	r8, #6
 800974c:	4640      	mov	r0, r8
 800974e:	b005      	add	sp, #20
 8009750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009754:	4645      	mov	r5, r8
 8009756:	4626      	mov	r6, r4
 8009758:	2401      	movs	r4, #1
 800975a:	e7c7      	b.n	80096ec <__gethex+0xb4>
 800975c:	f04f 0b00 	mov.w	fp, #0
 8009760:	1ca9      	adds	r1, r5, #2
 8009762:	e7d0      	b.n	8009706 <__gethex+0xce>
 8009764:	f04f 0b01 	mov.w	fp, #1
 8009768:	e7fa      	b.n	8009760 <__gethex+0x128>
 800976a:	230a      	movs	r3, #10
 800976c:	fb03 0002 	mla	r0, r3, r2, r0
 8009770:	e7d0      	b.n	8009714 <__gethex+0xdc>
 8009772:	4629      	mov	r1, r5
 8009774:	e7e0      	b.n	8009738 <__gethex+0x100>
 8009776:	eba5 0308 	sub.w	r3, r5, r8
 800977a:	3b01      	subs	r3, #1
 800977c:	4621      	mov	r1, r4
 800977e:	2b07      	cmp	r3, #7
 8009780:	dc0a      	bgt.n	8009798 <__gethex+0x160>
 8009782:	4648      	mov	r0, r9
 8009784:	f7fe f91e 	bl	80079c4 <_Balloc>
 8009788:	4604      	mov	r4, r0
 800978a:	b940      	cbnz	r0, 800979e <__gethex+0x166>
 800978c:	4b61      	ldr	r3, [pc, #388]	; (8009914 <__gethex+0x2dc>)
 800978e:	4602      	mov	r2, r0
 8009790:	21e4      	movs	r1, #228	; 0xe4
 8009792:	4861      	ldr	r0, [pc, #388]	; (8009918 <__gethex+0x2e0>)
 8009794:	f7ff feb4 	bl	8009500 <__assert_func>
 8009798:	3101      	adds	r1, #1
 800979a:	105b      	asrs	r3, r3, #1
 800979c:	e7ef      	b.n	800977e <__gethex+0x146>
 800979e:	f100 0a14 	add.w	sl, r0, #20
 80097a2:	2300      	movs	r3, #0
 80097a4:	495a      	ldr	r1, [pc, #360]	; (8009910 <__gethex+0x2d8>)
 80097a6:	f8cd a004 	str.w	sl, [sp, #4]
 80097aa:	469b      	mov	fp, r3
 80097ac:	45a8      	cmp	r8, r5
 80097ae:	d342      	bcc.n	8009836 <__gethex+0x1fe>
 80097b0:	9801      	ldr	r0, [sp, #4]
 80097b2:	f840 bb04 	str.w	fp, [r0], #4
 80097b6:	eba0 000a 	sub.w	r0, r0, sl
 80097ba:	1080      	asrs	r0, r0, #2
 80097bc:	6120      	str	r0, [r4, #16]
 80097be:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80097c2:	4658      	mov	r0, fp
 80097c4:	f7fe f9f0 	bl	8007ba8 <__hi0bits>
 80097c8:	683d      	ldr	r5, [r7, #0]
 80097ca:	eba8 0000 	sub.w	r0, r8, r0
 80097ce:	42a8      	cmp	r0, r5
 80097d0:	dd59      	ble.n	8009886 <__gethex+0x24e>
 80097d2:	eba0 0805 	sub.w	r8, r0, r5
 80097d6:	4641      	mov	r1, r8
 80097d8:	4620      	mov	r0, r4
 80097da:	f7fe fd7f 	bl	80082dc <__any_on>
 80097de:	4683      	mov	fp, r0
 80097e0:	b1b8      	cbz	r0, 8009812 <__gethex+0x1da>
 80097e2:	f108 33ff 	add.w	r3, r8, #4294967295
 80097e6:	1159      	asrs	r1, r3, #5
 80097e8:	f003 021f 	and.w	r2, r3, #31
 80097ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80097f0:	f04f 0b01 	mov.w	fp, #1
 80097f4:	fa0b f202 	lsl.w	r2, fp, r2
 80097f8:	420a      	tst	r2, r1
 80097fa:	d00a      	beq.n	8009812 <__gethex+0x1da>
 80097fc:	455b      	cmp	r3, fp
 80097fe:	dd06      	ble.n	800980e <__gethex+0x1d6>
 8009800:	f1a8 0102 	sub.w	r1, r8, #2
 8009804:	4620      	mov	r0, r4
 8009806:	f7fe fd69 	bl	80082dc <__any_on>
 800980a:	2800      	cmp	r0, #0
 800980c:	d138      	bne.n	8009880 <__gethex+0x248>
 800980e:	f04f 0b02 	mov.w	fp, #2
 8009812:	4641      	mov	r1, r8
 8009814:	4620      	mov	r0, r4
 8009816:	f7ff fea7 	bl	8009568 <rshift>
 800981a:	4446      	add	r6, r8
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	42b3      	cmp	r3, r6
 8009820:	da41      	bge.n	80098a6 <__gethex+0x26e>
 8009822:	4621      	mov	r1, r4
 8009824:	4648      	mov	r0, r9
 8009826:	f7fe f90d 	bl	8007a44 <_Bfree>
 800982a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800982c:	2300      	movs	r3, #0
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009834:	e78a      	b.n	800974c <__gethex+0x114>
 8009836:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800983a:	2a2e      	cmp	r2, #46	; 0x2e
 800983c:	d014      	beq.n	8009868 <__gethex+0x230>
 800983e:	2b20      	cmp	r3, #32
 8009840:	d106      	bne.n	8009850 <__gethex+0x218>
 8009842:	9b01      	ldr	r3, [sp, #4]
 8009844:	f843 bb04 	str.w	fp, [r3], #4
 8009848:	f04f 0b00 	mov.w	fp, #0
 800984c:	9301      	str	r3, [sp, #4]
 800984e:	465b      	mov	r3, fp
 8009850:	7828      	ldrb	r0, [r5, #0]
 8009852:	9303      	str	r3, [sp, #12]
 8009854:	f7ff feda 	bl	800960c <__hexdig_fun>
 8009858:	9b03      	ldr	r3, [sp, #12]
 800985a:	f000 000f 	and.w	r0, r0, #15
 800985e:	4098      	lsls	r0, r3
 8009860:	ea4b 0b00 	orr.w	fp, fp, r0
 8009864:	3304      	adds	r3, #4
 8009866:	e7a1      	b.n	80097ac <__gethex+0x174>
 8009868:	45a8      	cmp	r8, r5
 800986a:	d8e8      	bhi.n	800983e <__gethex+0x206>
 800986c:	2201      	movs	r2, #1
 800986e:	4628      	mov	r0, r5
 8009870:	9303      	str	r3, [sp, #12]
 8009872:	f7ff fe0b 	bl	800948c <strncmp>
 8009876:	4926      	ldr	r1, [pc, #152]	; (8009910 <__gethex+0x2d8>)
 8009878:	9b03      	ldr	r3, [sp, #12]
 800987a:	2800      	cmp	r0, #0
 800987c:	d1df      	bne.n	800983e <__gethex+0x206>
 800987e:	e795      	b.n	80097ac <__gethex+0x174>
 8009880:	f04f 0b03 	mov.w	fp, #3
 8009884:	e7c5      	b.n	8009812 <__gethex+0x1da>
 8009886:	da0b      	bge.n	80098a0 <__gethex+0x268>
 8009888:	eba5 0800 	sub.w	r8, r5, r0
 800988c:	4621      	mov	r1, r4
 800988e:	4642      	mov	r2, r8
 8009890:	4648      	mov	r0, r9
 8009892:	f7fe faf1 	bl	8007e78 <__lshift>
 8009896:	eba6 0608 	sub.w	r6, r6, r8
 800989a:	4604      	mov	r4, r0
 800989c:	f100 0a14 	add.w	sl, r0, #20
 80098a0:	f04f 0b00 	mov.w	fp, #0
 80098a4:	e7ba      	b.n	800981c <__gethex+0x1e4>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	42b3      	cmp	r3, r6
 80098aa:	dd73      	ble.n	8009994 <__gethex+0x35c>
 80098ac:	1b9e      	subs	r6, r3, r6
 80098ae:	42b5      	cmp	r5, r6
 80098b0:	dc34      	bgt.n	800991c <__gethex+0x2e4>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d023      	beq.n	8009900 <__gethex+0x2c8>
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	d025      	beq.n	8009908 <__gethex+0x2d0>
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d115      	bne.n	80098ec <__gethex+0x2b4>
 80098c0:	42b5      	cmp	r5, r6
 80098c2:	d113      	bne.n	80098ec <__gethex+0x2b4>
 80098c4:	2d01      	cmp	r5, #1
 80098c6:	d10b      	bne.n	80098e0 <__gethex+0x2a8>
 80098c8:	9a02      	ldr	r2, [sp, #8]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	2301      	movs	r3, #1
 80098d0:	6123      	str	r3, [r4, #16]
 80098d2:	f8ca 3000 	str.w	r3, [sl]
 80098d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098d8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80098dc:	601c      	str	r4, [r3, #0]
 80098de:	e735      	b.n	800974c <__gethex+0x114>
 80098e0:	1e69      	subs	r1, r5, #1
 80098e2:	4620      	mov	r0, r4
 80098e4:	f7fe fcfa 	bl	80082dc <__any_on>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d1ed      	bne.n	80098c8 <__gethex+0x290>
 80098ec:	4621      	mov	r1, r4
 80098ee:	4648      	mov	r0, r9
 80098f0:	f7fe f8a8 	bl	8007a44 <_Bfree>
 80098f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098f6:	2300      	movs	r3, #0
 80098f8:	6013      	str	r3, [r2, #0]
 80098fa:	f04f 0850 	mov.w	r8, #80	; 0x50
 80098fe:	e725      	b.n	800974c <__gethex+0x114>
 8009900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1f2      	bne.n	80098ec <__gethex+0x2b4>
 8009906:	e7df      	b.n	80098c8 <__gethex+0x290>
 8009908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1dc      	bne.n	80098c8 <__gethex+0x290>
 800990e:	e7ed      	b.n	80098ec <__gethex+0x2b4>
 8009910:	0800a484 	.word	0x0800a484
 8009914:	0800a31d 	.word	0x0800a31d
 8009918:	0800a62e 	.word	0x0800a62e
 800991c:	f106 38ff 	add.w	r8, r6, #4294967295
 8009920:	f1bb 0f00 	cmp.w	fp, #0
 8009924:	d133      	bne.n	800998e <__gethex+0x356>
 8009926:	f1b8 0f00 	cmp.w	r8, #0
 800992a:	d004      	beq.n	8009936 <__gethex+0x2fe>
 800992c:	4641      	mov	r1, r8
 800992e:	4620      	mov	r0, r4
 8009930:	f7fe fcd4 	bl	80082dc <__any_on>
 8009934:	4683      	mov	fp, r0
 8009936:	ea4f 1268 	mov.w	r2, r8, asr #5
 800993a:	2301      	movs	r3, #1
 800993c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009940:	f008 081f 	and.w	r8, r8, #31
 8009944:	fa03 f308 	lsl.w	r3, r3, r8
 8009948:	4213      	tst	r3, r2
 800994a:	4631      	mov	r1, r6
 800994c:	4620      	mov	r0, r4
 800994e:	bf18      	it	ne
 8009950:	f04b 0b02 	orrne.w	fp, fp, #2
 8009954:	1bad      	subs	r5, r5, r6
 8009956:	f7ff fe07 	bl	8009568 <rshift>
 800995a:	687e      	ldr	r6, [r7, #4]
 800995c:	f04f 0802 	mov.w	r8, #2
 8009960:	f1bb 0f00 	cmp.w	fp, #0
 8009964:	d04a      	beq.n	80099fc <__gethex+0x3c4>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2b02      	cmp	r3, #2
 800996a:	d016      	beq.n	800999a <__gethex+0x362>
 800996c:	2b03      	cmp	r3, #3
 800996e:	d018      	beq.n	80099a2 <__gethex+0x36a>
 8009970:	2b01      	cmp	r3, #1
 8009972:	d109      	bne.n	8009988 <__gethex+0x350>
 8009974:	f01b 0f02 	tst.w	fp, #2
 8009978:	d006      	beq.n	8009988 <__gethex+0x350>
 800997a:	f8da 3000 	ldr.w	r3, [sl]
 800997e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009982:	f01b 0f01 	tst.w	fp, #1
 8009986:	d10f      	bne.n	80099a8 <__gethex+0x370>
 8009988:	f048 0810 	orr.w	r8, r8, #16
 800998c:	e036      	b.n	80099fc <__gethex+0x3c4>
 800998e:	f04f 0b01 	mov.w	fp, #1
 8009992:	e7d0      	b.n	8009936 <__gethex+0x2fe>
 8009994:	f04f 0801 	mov.w	r8, #1
 8009998:	e7e2      	b.n	8009960 <__gethex+0x328>
 800999a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800999c:	f1c3 0301 	rsb	r3, r3, #1
 80099a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80099a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d0ef      	beq.n	8009988 <__gethex+0x350>
 80099a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099ac:	f104 0214 	add.w	r2, r4, #20
 80099b0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80099b4:	9301      	str	r3, [sp, #4]
 80099b6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80099ba:	2300      	movs	r3, #0
 80099bc:	4694      	mov	ip, r2
 80099be:	f852 1b04 	ldr.w	r1, [r2], #4
 80099c2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80099c6:	d01e      	beq.n	8009a06 <__gethex+0x3ce>
 80099c8:	3101      	adds	r1, #1
 80099ca:	f8cc 1000 	str.w	r1, [ip]
 80099ce:	f1b8 0f02 	cmp.w	r8, #2
 80099d2:	f104 0214 	add.w	r2, r4, #20
 80099d6:	d13d      	bne.n	8009a54 <__gethex+0x41c>
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	3b01      	subs	r3, #1
 80099dc:	42ab      	cmp	r3, r5
 80099de:	d10b      	bne.n	80099f8 <__gethex+0x3c0>
 80099e0:	1169      	asrs	r1, r5, #5
 80099e2:	2301      	movs	r3, #1
 80099e4:	f005 051f 	and.w	r5, r5, #31
 80099e8:	fa03 f505 	lsl.w	r5, r3, r5
 80099ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099f0:	421d      	tst	r5, r3
 80099f2:	bf18      	it	ne
 80099f4:	f04f 0801 	movne.w	r8, #1
 80099f8:	f048 0820 	orr.w	r8, r8, #32
 80099fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099fe:	601c      	str	r4, [r3, #0]
 8009a00:	9b02      	ldr	r3, [sp, #8]
 8009a02:	601e      	str	r6, [r3, #0]
 8009a04:	e6a2      	b.n	800974c <__gethex+0x114>
 8009a06:	4290      	cmp	r0, r2
 8009a08:	f842 3c04 	str.w	r3, [r2, #-4]
 8009a0c:	d8d6      	bhi.n	80099bc <__gethex+0x384>
 8009a0e:	68a2      	ldr	r2, [r4, #8]
 8009a10:	4593      	cmp	fp, r2
 8009a12:	db17      	blt.n	8009a44 <__gethex+0x40c>
 8009a14:	6861      	ldr	r1, [r4, #4]
 8009a16:	4648      	mov	r0, r9
 8009a18:	3101      	adds	r1, #1
 8009a1a:	f7fd ffd3 	bl	80079c4 <_Balloc>
 8009a1e:	4682      	mov	sl, r0
 8009a20:	b918      	cbnz	r0, 8009a2a <__gethex+0x3f2>
 8009a22:	4b1b      	ldr	r3, [pc, #108]	; (8009a90 <__gethex+0x458>)
 8009a24:	4602      	mov	r2, r0
 8009a26:	2184      	movs	r1, #132	; 0x84
 8009a28:	e6b3      	b.n	8009792 <__gethex+0x15a>
 8009a2a:	6922      	ldr	r2, [r4, #16]
 8009a2c:	3202      	adds	r2, #2
 8009a2e:	f104 010c 	add.w	r1, r4, #12
 8009a32:	0092      	lsls	r2, r2, #2
 8009a34:	300c      	adds	r0, #12
 8009a36:	f7ff fd4b 	bl	80094d0 <memcpy>
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	4648      	mov	r0, r9
 8009a3e:	f7fe f801 	bl	8007a44 <_Bfree>
 8009a42:	4654      	mov	r4, sl
 8009a44:	6922      	ldr	r2, [r4, #16]
 8009a46:	1c51      	adds	r1, r2, #1
 8009a48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009a4c:	6121      	str	r1, [r4, #16]
 8009a4e:	2101      	movs	r1, #1
 8009a50:	6151      	str	r1, [r2, #20]
 8009a52:	e7bc      	b.n	80099ce <__gethex+0x396>
 8009a54:	6921      	ldr	r1, [r4, #16]
 8009a56:	4559      	cmp	r1, fp
 8009a58:	dd0b      	ble.n	8009a72 <__gethex+0x43a>
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f7ff fd83 	bl	8009568 <rshift>
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	3601      	adds	r6, #1
 8009a66:	42b3      	cmp	r3, r6
 8009a68:	f6ff aedb 	blt.w	8009822 <__gethex+0x1ea>
 8009a6c:	f04f 0801 	mov.w	r8, #1
 8009a70:	e7c2      	b.n	80099f8 <__gethex+0x3c0>
 8009a72:	f015 051f 	ands.w	r5, r5, #31
 8009a76:	d0f9      	beq.n	8009a6c <__gethex+0x434>
 8009a78:	9b01      	ldr	r3, [sp, #4]
 8009a7a:	441a      	add	r2, r3
 8009a7c:	f1c5 0520 	rsb	r5, r5, #32
 8009a80:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009a84:	f7fe f890 	bl	8007ba8 <__hi0bits>
 8009a88:	42a8      	cmp	r0, r5
 8009a8a:	dbe6      	blt.n	8009a5a <__gethex+0x422>
 8009a8c:	e7ee      	b.n	8009a6c <__gethex+0x434>
 8009a8e:	bf00      	nop
 8009a90:	0800a31d 	.word	0x0800a31d

08009a94 <L_shift>:
 8009a94:	f1c2 0208 	rsb	r2, r2, #8
 8009a98:	0092      	lsls	r2, r2, #2
 8009a9a:	b570      	push	{r4, r5, r6, lr}
 8009a9c:	f1c2 0620 	rsb	r6, r2, #32
 8009aa0:	6843      	ldr	r3, [r0, #4]
 8009aa2:	6804      	ldr	r4, [r0, #0]
 8009aa4:	fa03 f506 	lsl.w	r5, r3, r6
 8009aa8:	432c      	orrs	r4, r5
 8009aaa:	40d3      	lsrs	r3, r2
 8009aac:	6004      	str	r4, [r0, #0]
 8009aae:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ab2:	4288      	cmp	r0, r1
 8009ab4:	d3f4      	bcc.n	8009aa0 <L_shift+0xc>
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}

08009ab8 <__match>:
 8009ab8:	b530      	push	{r4, r5, lr}
 8009aba:	6803      	ldr	r3, [r0, #0]
 8009abc:	3301      	adds	r3, #1
 8009abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ac2:	b914      	cbnz	r4, 8009aca <__match+0x12>
 8009ac4:	6003      	str	r3, [r0, #0]
 8009ac6:	2001      	movs	r0, #1
 8009ac8:	bd30      	pop	{r4, r5, pc}
 8009aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ace:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009ad2:	2d19      	cmp	r5, #25
 8009ad4:	bf98      	it	ls
 8009ad6:	3220      	addls	r2, #32
 8009ad8:	42a2      	cmp	r2, r4
 8009ada:	d0f0      	beq.n	8009abe <__match+0x6>
 8009adc:	2000      	movs	r0, #0
 8009ade:	e7f3      	b.n	8009ac8 <__match+0x10>

08009ae0 <__hexnan>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	680b      	ldr	r3, [r1, #0]
 8009ae6:	6801      	ldr	r1, [r0, #0]
 8009ae8:	115e      	asrs	r6, r3, #5
 8009aea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009aee:	f013 031f 	ands.w	r3, r3, #31
 8009af2:	b087      	sub	sp, #28
 8009af4:	bf18      	it	ne
 8009af6:	3604      	addne	r6, #4
 8009af8:	2500      	movs	r5, #0
 8009afa:	1f37      	subs	r7, r6, #4
 8009afc:	4682      	mov	sl, r0
 8009afe:	4690      	mov	r8, r2
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b06:	46b9      	mov	r9, r7
 8009b08:	463c      	mov	r4, r7
 8009b0a:	9502      	str	r5, [sp, #8]
 8009b0c:	46ab      	mov	fp, r5
 8009b0e:	784a      	ldrb	r2, [r1, #1]
 8009b10:	1c4b      	adds	r3, r1, #1
 8009b12:	9303      	str	r3, [sp, #12]
 8009b14:	b342      	cbz	r2, 8009b68 <__hexnan+0x88>
 8009b16:	4610      	mov	r0, r2
 8009b18:	9105      	str	r1, [sp, #20]
 8009b1a:	9204      	str	r2, [sp, #16]
 8009b1c:	f7ff fd76 	bl	800960c <__hexdig_fun>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d14f      	bne.n	8009bc4 <__hexnan+0xe4>
 8009b24:	9a04      	ldr	r2, [sp, #16]
 8009b26:	9905      	ldr	r1, [sp, #20]
 8009b28:	2a20      	cmp	r2, #32
 8009b2a:	d818      	bhi.n	8009b5e <__hexnan+0x7e>
 8009b2c:	9b02      	ldr	r3, [sp, #8]
 8009b2e:	459b      	cmp	fp, r3
 8009b30:	dd13      	ble.n	8009b5a <__hexnan+0x7a>
 8009b32:	454c      	cmp	r4, r9
 8009b34:	d206      	bcs.n	8009b44 <__hexnan+0x64>
 8009b36:	2d07      	cmp	r5, #7
 8009b38:	dc04      	bgt.n	8009b44 <__hexnan+0x64>
 8009b3a:	462a      	mov	r2, r5
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f7ff ffa8 	bl	8009a94 <L_shift>
 8009b44:	4544      	cmp	r4, r8
 8009b46:	d950      	bls.n	8009bea <__hexnan+0x10a>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f1a4 0904 	sub.w	r9, r4, #4
 8009b4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b52:	f8cd b008 	str.w	fp, [sp, #8]
 8009b56:	464c      	mov	r4, r9
 8009b58:	461d      	mov	r5, r3
 8009b5a:	9903      	ldr	r1, [sp, #12]
 8009b5c:	e7d7      	b.n	8009b0e <__hexnan+0x2e>
 8009b5e:	2a29      	cmp	r2, #41	; 0x29
 8009b60:	d155      	bne.n	8009c0e <__hexnan+0x12e>
 8009b62:	3102      	adds	r1, #2
 8009b64:	f8ca 1000 	str.w	r1, [sl]
 8009b68:	f1bb 0f00 	cmp.w	fp, #0
 8009b6c:	d04f      	beq.n	8009c0e <__hexnan+0x12e>
 8009b6e:	454c      	cmp	r4, r9
 8009b70:	d206      	bcs.n	8009b80 <__hexnan+0xa0>
 8009b72:	2d07      	cmp	r5, #7
 8009b74:	dc04      	bgt.n	8009b80 <__hexnan+0xa0>
 8009b76:	462a      	mov	r2, r5
 8009b78:	4649      	mov	r1, r9
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f7ff ff8a 	bl	8009a94 <L_shift>
 8009b80:	4544      	cmp	r4, r8
 8009b82:	d934      	bls.n	8009bee <__hexnan+0x10e>
 8009b84:	f1a8 0204 	sub.w	r2, r8, #4
 8009b88:	4623      	mov	r3, r4
 8009b8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b8e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b92:	429f      	cmp	r7, r3
 8009b94:	d2f9      	bcs.n	8009b8a <__hexnan+0xaa>
 8009b96:	1b3b      	subs	r3, r7, r4
 8009b98:	f023 0303 	bic.w	r3, r3, #3
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	3e03      	subs	r6, #3
 8009ba0:	3401      	adds	r4, #1
 8009ba2:	42a6      	cmp	r6, r4
 8009ba4:	bf38      	it	cc
 8009ba6:	2304      	movcc	r3, #4
 8009ba8:	4443      	add	r3, r8
 8009baa:	2200      	movs	r2, #0
 8009bac:	f843 2b04 	str.w	r2, [r3], #4
 8009bb0:	429f      	cmp	r7, r3
 8009bb2:	d2fb      	bcs.n	8009bac <__hexnan+0xcc>
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	b91b      	cbnz	r3, 8009bc0 <__hexnan+0xe0>
 8009bb8:	4547      	cmp	r7, r8
 8009bba:	d126      	bne.n	8009c0a <__hexnan+0x12a>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	603b      	str	r3, [r7, #0]
 8009bc0:	2005      	movs	r0, #5
 8009bc2:	e025      	b.n	8009c10 <__hexnan+0x130>
 8009bc4:	3501      	adds	r5, #1
 8009bc6:	2d08      	cmp	r5, #8
 8009bc8:	f10b 0b01 	add.w	fp, fp, #1
 8009bcc:	dd06      	ble.n	8009bdc <__hexnan+0xfc>
 8009bce:	4544      	cmp	r4, r8
 8009bd0:	d9c3      	bls.n	8009b5a <__hexnan+0x7a>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bd8:	2501      	movs	r5, #1
 8009bda:	3c04      	subs	r4, #4
 8009bdc:	6822      	ldr	r2, [r4, #0]
 8009bde:	f000 000f 	and.w	r0, r0, #15
 8009be2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009be6:	6020      	str	r0, [r4, #0]
 8009be8:	e7b7      	b.n	8009b5a <__hexnan+0x7a>
 8009bea:	2508      	movs	r5, #8
 8009bec:	e7b5      	b.n	8009b5a <__hexnan+0x7a>
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d0df      	beq.n	8009bb4 <__hexnan+0xd4>
 8009bf4:	f1c3 0320 	rsb	r3, r3, #32
 8009bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfc:	40da      	lsrs	r2, r3
 8009bfe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c02:	4013      	ands	r3, r2
 8009c04:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c08:	e7d4      	b.n	8009bb4 <__hexnan+0xd4>
 8009c0a:	3f04      	subs	r7, #4
 8009c0c:	e7d2      	b.n	8009bb4 <__hexnan+0xd4>
 8009c0e:	2004      	movs	r0, #4
 8009c10:	b007      	add	sp, #28
 8009c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c16 <__ascii_mbtowc>:
 8009c16:	b082      	sub	sp, #8
 8009c18:	b901      	cbnz	r1, 8009c1c <__ascii_mbtowc+0x6>
 8009c1a:	a901      	add	r1, sp, #4
 8009c1c:	b142      	cbz	r2, 8009c30 <__ascii_mbtowc+0x1a>
 8009c1e:	b14b      	cbz	r3, 8009c34 <__ascii_mbtowc+0x1e>
 8009c20:	7813      	ldrb	r3, [r2, #0]
 8009c22:	600b      	str	r3, [r1, #0]
 8009c24:	7812      	ldrb	r2, [r2, #0]
 8009c26:	1e10      	subs	r0, r2, #0
 8009c28:	bf18      	it	ne
 8009c2a:	2001      	movne	r0, #1
 8009c2c:	b002      	add	sp, #8
 8009c2e:	4770      	bx	lr
 8009c30:	4610      	mov	r0, r2
 8009c32:	e7fb      	b.n	8009c2c <__ascii_mbtowc+0x16>
 8009c34:	f06f 0001 	mvn.w	r0, #1
 8009c38:	e7f8      	b.n	8009c2c <__ascii_mbtowc+0x16>

08009c3a <_realloc_r>:
 8009c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3e:	4680      	mov	r8, r0
 8009c40:	4614      	mov	r4, r2
 8009c42:	460e      	mov	r6, r1
 8009c44:	b921      	cbnz	r1, 8009c50 <_realloc_r+0x16>
 8009c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	f7fd be2e 	b.w	80078ac <_malloc_r>
 8009c50:	b92a      	cbnz	r2, 8009c5e <_realloc_r+0x24>
 8009c52:	f7fd fdb7 	bl	80077c4 <_free_r>
 8009c56:	4625      	mov	r5, r4
 8009c58:	4628      	mov	r0, r5
 8009c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c5e:	f000 f842 	bl	8009ce6 <_malloc_usable_size_r>
 8009c62:	4284      	cmp	r4, r0
 8009c64:	4607      	mov	r7, r0
 8009c66:	d802      	bhi.n	8009c6e <_realloc_r+0x34>
 8009c68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c6c:	d812      	bhi.n	8009c94 <_realloc_r+0x5a>
 8009c6e:	4621      	mov	r1, r4
 8009c70:	4640      	mov	r0, r8
 8009c72:	f7fd fe1b 	bl	80078ac <_malloc_r>
 8009c76:	4605      	mov	r5, r0
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d0ed      	beq.n	8009c58 <_realloc_r+0x1e>
 8009c7c:	42bc      	cmp	r4, r7
 8009c7e:	4622      	mov	r2, r4
 8009c80:	4631      	mov	r1, r6
 8009c82:	bf28      	it	cs
 8009c84:	463a      	movcs	r2, r7
 8009c86:	f7ff fc23 	bl	80094d0 <memcpy>
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4640      	mov	r0, r8
 8009c8e:	f7fd fd99 	bl	80077c4 <_free_r>
 8009c92:	e7e1      	b.n	8009c58 <_realloc_r+0x1e>
 8009c94:	4635      	mov	r5, r6
 8009c96:	e7df      	b.n	8009c58 <_realloc_r+0x1e>

08009c98 <__ascii_wctomb>:
 8009c98:	b149      	cbz	r1, 8009cae <__ascii_wctomb+0x16>
 8009c9a:	2aff      	cmp	r2, #255	; 0xff
 8009c9c:	bf85      	ittet	hi
 8009c9e:	238a      	movhi	r3, #138	; 0x8a
 8009ca0:	6003      	strhi	r3, [r0, #0]
 8009ca2:	700a      	strbls	r2, [r1, #0]
 8009ca4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ca8:	bf98      	it	ls
 8009caa:	2001      	movls	r0, #1
 8009cac:	4770      	bx	lr
 8009cae:	4608      	mov	r0, r1
 8009cb0:	4770      	bx	lr
	...

08009cb4 <fiprintf>:
 8009cb4:	b40e      	push	{r1, r2, r3}
 8009cb6:	b503      	push	{r0, r1, lr}
 8009cb8:	4601      	mov	r1, r0
 8009cba:	ab03      	add	r3, sp, #12
 8009cbc:	4805      	ldr	r0, [pc, #20]	; (8009cd4 <fiprintf+0x20>)
 8009cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cc2:	6800      	ldr	r0, [r0, #0]
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	f000 f83f 	bl	8009d48 <_vfiprintf_r>
 8009cca:	b002      	add	sp, #8
 8009ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cd0:	b003      	add	sp, #12
 8009cd2:	4770      	bx	lr
 8009cd4:	20000068 	.word	0x20000068

08009cd8 <abort>:
 8009cd8:	b508      	push	{r3, lr}
 8009cda:	2006      	movs	r0, #6
 8009cdc:	f000 fa0c 	bl	800a0f8 <raise>
 8009ce0:	2001      	movs	r0, #1
 8009ce2:	f7f8 ff35 	bl	8002b50 <_exit>

08009ce6 <_malloc_usable_size_r>:
 8009ce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cea:	1f18      	subs	r0, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	bfbc      	itt	lt
 8009cf0:	580b      	ldrlt	r3, [r1, r0]
 8009cf2:	18c0      	addlt	r0, r0, r3
 8009cf4:	4770      	bx	lr

08009cf6 <__sfputc_r>:
 8009cf6:	6893      	ldr	r3, [r2, #8]
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	b410      	push	{r4}
 8009cfe:	6093      	str	r3, [r2, #8]
 8009d00:	da08      	bge.n	8009d14 <__sfputc_r+0x1e>
 8009d02:	6994      	ldr	r4, [r2, #24]
 8009d04:	42a3      	cmp	r3, r4
 8009d06:	db01      	blt.n	8009d0c <__sfputc_r+0x16>
 8009d08:	290a      	cmp	r1, #10
 8009d0a:	d103      	bne.n	8009d14 <__sfputc_r+0x1e>
 8009d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d10:	f000 b934 	b.w	8009f7c <__swbuf_r>
 8009d14:	6813      	ldr	r3, [r2, #0]
 8009d16:	1c58      	adds	r0, r3, #1
 8009d18:	6010      	str	r0, [r2, #0]
 8009d1a:	7019      	strb	r1, [r3, #0]
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <__sfputs_r>:
 8009d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d26:	4606      	mov	r6, r0
 8009d28:	460f      	mov	r7, r1
 8009d2a:	4614      	mov	r4, r2
 8009d2c:	18d5      	adds	r5, r2, r3
 8009d2e:	42ac      	cmp	r4, r5
 8009d30:	d101      	bne.n	8009d36 <__sfputs_r+0x12>
 8009d32:	2000      	movs	r0, #0
 8009d34:	e007      	b.n	8009d46 <__sfputs_r+0x22>
 8009d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d3a:	463a      	mov	r2, r7
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f7ff ffda 	bl	8009cf6 <__sfputc_r>
 8009d42:	1c43      	adds	r3, r0, #1
 8009d44:	d1f3      	bne.n	8009d2e <__sfputs_r+0xa>
 8009d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d48 <_vfiprintf_r>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	460d      	mov	r5, r1
 8009d4e:	b09d      	sub	sp, #116	; 0x74
 8009d50:	4614      	mov	r4, r2
 8009d52:	4698      	mov	r8, r3
 8009d54:	4606      	mov	r6, r0
 8009d56:	b118      	cbz	r0, 8009d60 <_vfiprintf_r+0x18>
 8009d58:	6a03      	ldr	r3, [r0, #32]
 8009d5a:	b90b      	cbnz	r3, 8009d60 <_vfiprintf_r+0x18>
 8009d5c:	f7fc fd96 	bl	800688c <__sinit>
 8009d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d62:	07d9      	lsls	r1, r3, #31
 8009d64:	d405      	bmi.n	8009d72 <_vfiprintf_r+0x2a>
 8009d66:	89ab      	ldrh	r3, [r5, #12]
 8009d68:	059a      	lsls	r2, r3, #22
 8009d6a:	d402      	bmi.n	8009d72 <_vfiprintf_r+0x2a>
 8009d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d6e:	f7fc fea4 	bl	8006aba <__retarget_lock_acquire_recursive>
 8009d72:	89ab      	ldrh	r3, [r5, #12]
 8009d74:	071b      	lsls	r3, r3, #28
 8009d76:	d501      	bpl.n	8009d7c <_vfiprintf_r+0x34>
 8009d78:	692b      	ldr	r3, [r5, #16]
 8009d7a:	b99b      	cbnz	r3, 8009da4 <_vfiprintf_r+0x5c>
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	4630      	mov	r0, r6
 8009d80:	f000 f93a 	bl	8009ff8 <__swsetup_r>
 8009d84:	b170      	cbz	r0, 8009da4 <_vfiprintf_r+0x5c>
 8009d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d88:	07dc      	lsls	r4, r3, #31
 8009d8a:	d504      	bpl.n	8009d96 <_vfiprintf_r+0x4e>
 8009d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d90:	b01d      	add	sp, #116	; 0x74
 8009d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d96:	89ab      	ldrh	r3, [r5, #12]
 8009d98:	0598      	lsls	r0, r3, #22
 8009d9a:	d4f7      	bmi.n	8009d8c <_vfiprintf_r+0x44>
 8009d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d9e:	f7fc fe8d 	bl	8006abc <__retarget_lock_release_recursive>
 8009da2:	e7f3      	b.n	8009d8c <_vfiprintf_r+0x44>
 8009da4:	2300      	movs	r3, #0
 8009da6:	9309      	str	r3, [sp, #36]	; 0x24
 8009da8:	2320      	movs	r3, #32
 8009daa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dae:	f8cd 800c 	str.w	r8, [sp, #12]
 8009db2:	2330      	movs	r3, #48	; 0x30
 8009db4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009f68 <_vfiprintf_r+0x220>
 8009db8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dbc:	f04f 0901 	mov.w	r9, #1
 8009dc0:	4623      	mov	r3, r4
 8009dc2:	469a      	mov	sl, r3
 8009dc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dc8:	b10a      	cbz	r2, 8009dce <_vfiprintf_r+0x86>
 8009dca:	2a25      	cmp	r2, #37	; 0x25
 8009dcc:	d1f9      	bne.n	8009dc2 <_vfiprintf_r+0x7a>
 8009dce:	ebba 0b04 	subs.w	fp, sl, r4
 8009dd2:	d00b      	beq.n	8009dec <_vfiprintf_r+0xa4>
 8009dd4:	465b      	mov	r3, fp
 8009dd6:	4622      	mov	r2, r4
 8009dd8:	4629      	mov	r1, r5
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f7ff ffa2 	bl	8009d24 <__sfputs_r>
 8009de0:	3001      	adds	r0, #1
 8009de2:	f000 80a9 	beq.w	8009f38 <_vfiprintf_r+0x1f0>
 8009de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009de8:	445a      	add	r2, fp
 8009dea:	9209      	str	r2, [sp, #36]	; 0x24
 8009dec:	f89a 3000 	ldrb.w	r3, [sl]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 80a1 	beq.w	8009f38 <_vfiprintf_r+0x1f0>
 8009df6:	2300      	movs	r3, #0
 8009df8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e00:	f10a 0a01 	add.w	sl, sl, #1
 8009e04:	9304      	str	r3, [sp, #16]
 8009e06:	9307      	str	r3, [sp, #28]
 8009e08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e0c:	931a      	str	r3, [sp, #104]	; 0x68
 8009e0e:	4654      	mov	r4, sl
 8009e10:	2205      	movs	r2, #5
 8009e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e16:	4854      	ldr	r0, [pc, #336]	; (8009f68 <_vfiprintf_r+0x220>)
 8009e18:	f7f6 f9e2 	bl	80001e0 <memchr>
 8009e1c:	9a04      	ldr	r2, [sp, #16]
 8009e1e:	b9d8      	cbnz	r0, 8009e58 <_vfiprintf_r+0x110>
 8009e20:	06d1      	lsls	r1, r2, #27
 8009e22:	bf44      	itt	mi
 8009e24:	2320      	movmi	r3, #32
 8009e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e2a:	0713      	lsls	r3, r2, #28
 8009e2c:	bf44      	itt	mi
 8009e2e:	232b      	movmi	r3, #43	; 0x2b
 8009e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e34:	f89a 3000 	ldrb.w	r3, [sl]
 8009e38:	2b2a      	cmp	r3, #42	; 0x2a
 8009e3a:	d015      	beq.n	8009e68 <_vfiprintf_r+0x120>
 8009e3c:	9a07      	ldr	r2, [sp, #28]
 8009e3e:	4654      	mov	r4, sl
 8009e40:	2000      	movs	r0, #0
 8009e42:	f04f 0c0a 	mov.w	ip, #10
 8009e46:	4621      	mov	r1, r4
 8009e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e4c:	3b30      	subs	r3, #48	; 0x30
 8009e4e:	2b09      	cmp	r3, #9
 8009e50:	d94d      	bls.n	8009eee <_vfiprintf_r+0x1a6>
 8009e52:	b1b0      	cbz	r0, 8009e82 <_vfiprintf_r+0x13a>
 8009e54:	9207      	str	r2, [sp, #28]
 8009e56:	e014      	b.n	8009e82 <_vfiprintf_r+0x13a>
 8009e58:	eba0 0308 	sub.w	r3, r0, r8
 8009e5c:	fa09 f303 	lsl.w	r3, r9, r3
 8009e60:	4313      	orrs	r3, r2
 8009e62:	9304      	str	r3, [sp, #16]
 8009e64:	46a2      	mov	sl, r4
 8009e66:	e7d2      	b.n	8009e0e <_vfiprintf_r+0xc6>
 8009e68:	9b03      	ldr	r3, [sp, #12]
 8009e6a:	1d19      	adds	r1, r3, #4
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	9103      	str	r1, [sp, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	bfbb      	ittet	lt
 8009e74:	425b      	neglt	r3, r3
 8009e76:	f042 0202 	orrlt.w	r2, r2, #2
 8009e7a:	9307      	strge	r3, [sp, #28]
 8009e7c:	9307      	strlt	r3, [sp, #28]
 8009e7e:	bfb8      	it	lt
 8009e80:	9204      	strlt	r2, [sp, #16]
 8009e82:	7823      	ldrb	r3, [r4, #0]
 8009e84:	2b2e      	cmp	r3, #46	; 0x2e
 8009e86:	d10c      	bne.n	8009ea2 <_vfiprintf_r+0x15a>
 8009e88:	7863      	ldrb	r3, [r4, #1]
 8009e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e8c:	d134      	bne.n	8009ef8 <_vfiprintf_r+0x1b0>
 8009e8e:	9b03      	ldr	r3, [sp, #12]
 8009e90:	1d1a      	adds	r2, r3, #4
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	9203      	str	r2, [sp, #12]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	bfb8      	it	lt
 8009e9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e9e:	3402      	adds	r4, #2
 8009ea0:	9305      	str	r3, [sp, #20]
 8009ea2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009f78 <_vfiprintf_r+0x230>
 8009ea6:	7821      	ldrb	r1, [r4, #0]
 8009ea8:	2203      	movs	r2, #3
 8009eaa:	4650      	mov	r0, sl
 8009eac:	f7f6 f998 	bl	80001e0 <memchr>
 8009eb0:	b138      	cbz	r0, 8009ec2 <_vfiprintf_r+0x17a>
 8009eb2:	9b04      	ldr	r3, [sp, #16]
 8009eb4:	eba0 000a 	sub.w	r0, r0, sl
 8009eb8:	2240      	movs	r2, #64	; 0x40
 8009eba:	4082      	lsls	r2, r0
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	3401      	adds	r4, #1
 8009ec0:	9304      	str	r3, [sp, #16]
 8009ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ec6:	4829      	ldr	r0, [pc, #164]	; (8009f6c <_vfiprintf_r+0x224>)
 8009ec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ecc:	2206      	movs	r2, #6
 8009ece:	f7f6 f987 	bl	80001e0 <memchr>
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d03f      	beq.n	8009f56 <_vfiprintf_r+0x20e>
 8009ed6:	4b26      	ldr	r3, [pc, #152]	; (8009f70 <_vfiprintf_r+0x228>)
 8009ed8:	bb1b      	cbnz	r3, 8009f22 <_vfiprintf_r+0x1da>
 8009eda:	9b03      	ldr	r3, [sp, #12]
 8009edc:	3307      	adds	r3, #7
 8009ede:	f023 0307 	bic.w	r3, r3, #7
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	9303      	str	r3, [sp, #12]
 8009ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee8:	443b      	add	r3, r7
 8009eea:	9309      	str	r3, [sp, #36]	; 0x24
 8009eec:	e768      	b.n	8009dc0 <_vfiprintf_r+0x78>
 8009eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	2001      	movs	r0, #1
 8009ef6:	e7a6      	b.n	8009e46 <_vfiprintf_r+0xfe>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	3401      	adds	r4, #1
 8009efc:	9305      	str	r3, [sp, #20]
 8009efe:	4619      	mov	r1, r3
 8009f00:	f04f 0c0a 	mov.w	ip, #10
 8009f04:	4620      	mov	r0, r4
 8009f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f0a:	3a30      	subs	r2, #48	; 0x30
 8009f0c:	2a09      	cmp	r2, #9
 8009f0e:	d903      	bls.n	8009f18 <_vfiprintf_r+0x1d0>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d0c6      	beq.n	8009ea2 <_vfiprintf_r+0x15a>
 8009f14:	9105      	str	r1, [sp, #20]
 8009f16:	e7c4      	b.n	8009ea2 <_vfiprintf_r+0x15a>
 8009f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e7f0      	b.n	8009f04 <_vfiprintf_r+0x1bc>
 8009f22:	ab03      	add	r3, sp, #12
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	462a      	mov	r2, r5
 8009f28:	4b12      	ldr	r3, [pc, #72]	; (8009f74 <_vfiprintf_r+0x22c>)
 8009f2a:	a904      	add	r1, sp, #16
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f7fb fe4b 	bl	8005bc8 <_printf_float>
 8009f32:	4607      	mov	r7, r0
 8009f34:	1c78      	adds	r0, r7, #1
 8009f36:	d1d6      	bne.n	8009ee6 <_vfiprintf_r+0x19e>
 8009f38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f3a:	07d9      	lsls	r1, r3, #31
 8009f3c:	d405      	bmi.n	8009f4a <_vfiprintf_r+0x202>
 8009f3e:	89ab      	ldrh	r3, [r5, #12]
 8009f40:	059a      	lsls	r2, r3, #22
 8009f42:	d402      	bmi.n	8009f4a <_vfiprintf_r+0x202>
 8009f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f46:	f7fc fdb9 	bl	8006abc <__retarget_lock_release_recursive>
 8009f4a:	89ab      	ldrh	r3, [r5, #12]
 8009f4c:	065b      	lsls	r3, r3, #25
 8009f4e:	f53f af1d 	bmi.w	8009d8c <_vfiprintf_r+0x44>
 8009f52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f54:	e71c      	b.n	8009d90 <_vfiprintf_r+0x48>
 8009f56:	ab03      	add	r3, sp, #12
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	462a      	mov	r2, r5
 8009f5c:	4b05      	ldr	r3, [pc, #20]	; (8009f74 <_vfiprintf_r+0x22c>)
 8009f5e:	a904      	add	r1, sp, #16
 8009f60:	4630      	mov	r0, r6
 8009f62:	f7fc f8d5 	bl	8006110 <_printf_i>
 8009f66:	e7e4      	b.n	8009f32 <_vfiprintf_r+0x1ea>
 8009f68:	0800a5d9 	.word	0x0800a5d9
 8009f6c:	0800a5e3 	.word	0x0800a5e3
 8009f70:	08005bc9 	.word	0x08005bc9
 8009f74:	08009d25 	.word	0x08009d25
 8009f78:	0800a5df 	.word	0x0800a5df

08009f7c <__swbuf_r>:
 8009f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7e:	460e      	mov	r6, r1
 8009f80:	4614      	mov	r4, r2
 8009f82:	4605      	mov	r5, r0
 8009f84:	b118      	cbz	r0, 8009f8e <__swbuf_r+0x12>
 8009f86:	6a03      	ldr	r3, [r0, #32]
 8009f88:	b90b      	cbnz	r3, 8009f8e <__swbuf_r+0x12>
 8009f8a:	f7fc fc7f 	bl	800688c <__sinit>
 8009f8e:	69a3      	ldr	r3, [r4, #24]
 8009f90:	60a3      	str	r3, [r4, #8]
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	071a      	lsls	r2, r3, #28
 8009f96:	d525      	bpl.n	8009fe4 <__swbuf_r+0x68>
 8009f98:	6923      	ldr	r3, [r4, #16]
 8009f9a:	b31b      	cbz	r3, 8009fe4 <__swbuf_r+0x68>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	6922      	ldr	r2, [r4, #16]
 8009fa0:	1a98      	subs	r0, r3, r2
 8009fa2:	6963      	ldr	r3, [r4, #20]
 8009fa4:	b2f6      	uxtb	r6, r6
 8009fa6:	4283      	cmp	r3, r0
 8009fa8:	4637      	mov	r7, r6
 8009faa:	dc04      	bgt.n	8009fb6 <__swbuf_r+0x3a>
 8009fac:	4621      	mov	r1, r4
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f7ff fa2a 	bl	8009408 <_fflush_r>
 8009fb4:	b9e0      	cbnz	r0, 8009ff0 <__swbuf_r+0x74>
 8009fb6:	68a3      	ldr	r3, [r4, #8]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	60a3      	str	r3, [r4, #8]
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	1c5a      	adds	r2, r3, #1
 8009fc0:	6022      	str	r2, [r4, #0]
 8009fc2:	701e      	strb	r6, [r3, #0]
 8009fc4:	6962      	ldr	r2, [r4, #20]
 8009fc6:	1c43      	adds	r3, r0, #1
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d004      	beq.n	8009fd6 <__swbuf_r+0x5a>
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	07db      	lsls	r3, r3, #31
 8009fd0:	d506      	bpl.n	8009fe0 <__swbuf_r+0x64>
 8009fd2:	2e0a      	cmp	r6, #10
 8009fd4:	d104      	bne.n	8009fe0 <__swbuf_r+0x64>
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4628      	mov	r0, r5
 8009fda:	f7ff fa15 	bl	8009408 <_fflush_r>
 8009fde:	b938      	cbnz	r0, 8009ff0 <__swbuf_r+0x74>
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f000 f806 	bl	8009ff8 <__swsetup_r>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d0d5      	beq.n	8009f9c <__swbuf_r+0x20>
 8009ff0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ff4:	e7f4      	b.n	8009fe0 <__swbuf_r+0x64>
	...

08009ff8 <__swsetup_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4b2a      	ldr	r3, [pc, #168]	; (800a0a4 <__swsetup_r+0xac>)
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	460c      	mov	r4, r1
 800a002:	b118      	cbz	r0, 800a00c <__swsetup_r+0x14>
 800a004:	6a03      	ldr	r3, [r0, #32]
 800a006:	b90b      	cbnz	r3, 800a00c <__swsetup_r+0x14>
 800a008:	f7fc fc40 	bl	800688c <__sinit>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a012:	0718      	lsls	r0, r3, #28
 800a014:	d422      	bmi.n	800a05c <__swsetup_r+0x64>
 800a016:	06d9      	lsls	r1, r3, #27
 800a018:	d407      	bmi.n	800a02a <__swsetup_r+0x32>
 800a01a:	2309      	movs	r3, #9
 800a01c:	602b      	str	r3, [r5, #0]
 800a01e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a022:	81a3      	strh	r3, [r4, #12]
 800a024:	f04f 30ff 	mov.w	r0, #4294967295
 800a028:	e034      	b.n	800a094 <__swsetup_r+0x9c>
 800a02a:	0758      	lsls	r0, r3, #29
 800a02c:	d512      	bpl.n	800a054 <__swsetup_r+0x5c>
 800a02e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a030:	b141      	cbz	r1, 800a044 <__swsetup_r+0x4c>
 800a032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a036:	4299      	cmp	r1, r3
 800a038:	d002      	beq.n	800a040 <__swsetup_r+0x48>
 800a03a:	4628      	mov	r0, r5
 800a03c:	f7fd fbc2 	bl	80077c4 <_free_r>
 800a040:	2300      	movs	r3, #0
 800a042:	6363      	str	r3, [r4, #52]	; 0x34
 800a044:	89a3      	ldrh	r3, [r4, #12]
 800a046:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a04a:	81a3      	strh	r3, [r4, #12]
 800a04c:	2300      	movs	r3, #0
 800a04e:	6063      	str	r3, [r4, #4]
 800a050:	6923      	ldr	r3, [r4, #16]
 800a052:	6023      	str	r3, [r4, #0]
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	f043 0308 	orr.w	r3, r3, #8
 800a05a:	81a3      	strh	r3, [r4, #12]
 800a05c:	6923      	ldr	r3, [r4, #16]
 800a05e:	b94b      	cbnz	r3, 800a074 <__swsetup_r+0x7c>
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a06a:	d003      	beq.n	800a074 <__swsetup_r+0x7c>
 800a06c:	4621      	mov	r1, r4
 800a06e:	4628      	mov	r0, r5
 800a070:	f000 f884 	bl	800a17c <__smakebuf_r>
 800a074:	89a0      	ldrh	r0, [r4, #12]
 800a076:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a07a:	f010 0301 	ands.w	r3, r0, #1
 800a07e:	d00a      	beq.n	800a096 <__swsetup_r+0x9e>
 800a080:	2300      	movs	r3, #0
 800a082:	60a3      	str	r3, [r4, #8]
 800a084:	6963      	ldr	r3, [r4, #20]
 800a086:	425b      	negs	r3, r3
 800a088:	61a3      	str	r3, [r4, #24]
 800a08a:	6923      	ldr	r3, [r4, #16]
 800a08c:	b943      	cbnz	r3, 800a0a0 <__swsetup_r+0xa8>
 800a08e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a092:	d1c4      	bne.n	800a01e <__swsetup_r+0x26>
 800a094:	bd38      	pop	{r3, r4, r5, pc}
 800a096:	0781      	lsls	r1, r0, #30
 800a098:	bf58      	it	pl
 800a09a:	6963      	ldrpl	r3, [r4, #20]
 800a09c:	60a3      	str	r3, [r4, #8]
 800a09e:	e7f4      	b.n	800a08a <__swsetup_r+0x92>
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	e7f7      	b.n	800a094 <__swsetup_r+0x9c>
 800a0a4:	20000068 	.word	0x20000068

0800a0a8 <_raise_r>:
 800a0a8:	291f      	cmp	r1, #31
 800a0aa:	b538      	push	{r3, r4, r5, lr}
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	460d      	mov	r5, r1
 800a0b0:	d904      	bls.n	800a0bc <_raise_r+0x14>
 800a0b2:	2316      	movs	r3, #22
 800a0b4:	6003      	str	r3, [r0, #0]
 800a0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a0be:	b112      	cbz	r2, 800a0c6 <_raise_r+0x1e>
 800a0c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0c4:	b94b      	cbnz	r3, 800a0da <_raise_r+0x32>
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f000 f830 	bl	800a12c <_getpid_r>
 800a0cc:	462a      	mov	r2, r5
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0d6:	f000 b817 	b.w	800a108 <_kill_r>
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d00a      	beq.n	800a0f4 <_raise_r+0x4c>
 800a0de:	1c59      	adds	r1, r3, #1
 800a0e0:	d103      	bne.n	800a0ea <_raise_r+0x42>
 800a0e2:	2316      	movs	r3, #22
 800a0e4:	6003      	str	r3, [r0, #0]
 800a0e6:	2001      	movs	r0, #1
 800a0e8:	e7e7      	b.n	800a0ba <_raise_r+0x12>
 800a0ea:	2400      	movs	r4, #0
 800a0ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	4798      	blx	r3
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	e7e0      	b.n	800a0ba <_raise_r+0x12>

0800a0f8 <raise>:
 800a0f8:	4b02      	ldr	r3, [pc, #8]	; (800a104 <raise+0xc>)
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	f7ff bfd3 	b.w	800a0a8 <_raise_r>
 800a102:	bf00      	nop
 800a104:	20000068 	.word	0x20000068

0800a108 <_kill_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4d07      	ldr	r5, [pc, #28]	; (800a128 <_kill_r+0x20>)
 800a10c:	2300      	movs	r3, #0
 800a10e:	4604      	mov	r4, r0
 800a110:	4608      	mov	r0, r1
 800a112:	4611      	mov	r1, r2
 800a114:	602b      	str	r3, [r5, #0]
 800a116:	f7f8 fd0b 	bl	8002b30 <_kill>
 800a11a:	1c43      	adds	r3, r0, #1
 800a11c:	d102      	bne.n	800a124 <_kill_r+0x1c>
 800a11e:	682b      	ldr	r3, [r5, #0]
 800a120:	b103      	cbz	r3, 800a124 <_kill_r+0x1c>
 800a122:	6023      	str	r3, [r4, #0]
 800a124:	bd38      	pop	{r3, r4, r5, pc}
 800a126:	bf00      	nop
 800a128:	20000500 	.word	0x20000500

0800a12c <_getpid_r>:
 800a12c:	f7f8 bcf8 	b.w	8002b20 <_getpid>

0800a130 <__swhatbuf_r>:
 800a130:	b570      	push	{r4, r5, r6, lr}
 800a132:	460c      	mov	r4, r1
 800a134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a138:	2900      	cmp	r1, #0
 800a13a:	b096      	sub	sp, #88	; 0x58
 800a13c:	4615      	mov	r5, r2
 800a13e:	461e      	mov	r6, r3
 800a140:	da0d      	bge.n	800a15e <__swhatbuf_r+0x2e>
 800a142:	89a3      	ldrh	r3, [r4, #12]
 800a144:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a148:	f04f 0100 	mov.w	r1, #0
 800a14c:	bf0c      	ite	eq
 800a14e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a152:	2340      	movne	r3, #64	; 0x40
 800a154:	2000      	movs	r0, #0
 800a156:	6031      	str	r1, [r6, #0]
 800a158:	602b      	str	r3, [r5, #0]
 800a15a:	b016      	add	sp, #88	; 0x58
 800a15c:	bd70      	pop	{r4, r5, r6, pc}
 800a15e:	466a      	mov	r2, sp
 800a160:	f000 f848 	bl	800a1f4 <_fstat_r>
 800a164:	2800      	cmp	r0, #0
 800a166:	dbec      	blt.n	800a142 <__swhatbuf_r+0x12>
 800a168:	9901      	ldr	r1, [sp, #4]
 800a16a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a16e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a172:	4259      	negs	r1, r3
 800a174:	4159      	adcs	r1, r3
 800a176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a17a:	e7eb      	b.n	800a154 <__swhatbuf_r+0x24>

0800a17c <__smakebuf_r>:
 800a17c:	898b      	ldrh	r3, [r1, #12]
 800a17e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a180:	079d      	lsls	r5, r3, #30
 800a182:	4606      	mov	r6, r0
 800a184:	460c      	mov	r4, r1
 800a186:	d507      	bpl.n	800a198 <__smakebuf_r+0x1c>
 800a188:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	6123      	str	r3, [r4, #16]
 800a190:	2301      	movs	r3, #1
 800a192:	6163      	str	r3, [r4, #20]
 800a194:	b002      	add	sp, #8
 800a196:	bd70      	pop	{r4, r5, r6, pc}
 800a198:	ab01      	add	r3, sp, #4
 800a19a:	466a      	mov	r2, sp
 800a19c:	f7ff ffc8 	bl	800a130 <__swhatbuf_r>
 800a1a0:	9900      	ldr	r1, [sp, #0]
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7fd fb81 	bl	80078ac <_malloc_r>
 800a1aa:	b948      	cbnz	r0, 800a1c0 <__smakebuf_r+0x44>
 800a1ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1b0:	059a      	lsls	r2, r3, #22
 800a1b2:	d4ef      	bmi.n	800a194 <__smakebuf_r+0x18>
 800a1b4:	f023 0303 	bic.w	r3, r3, #3
 800a1b8:	f043 0302 	orr.w	r3, r3, #2
 800a1bc:	81a3      	strh	r3, [r4, #12]
 800a1be:	e7e3      	b.n	800a188 <__smakebuf_r+0xc>
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	6020      	str	r0, [r4, #0]
 800a1c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c8:	81a3      	strh	r3, [r4, #12]
 800a1ca:	9b00      	ldr	r3, [sp, #0]
 800a1cc:	6163      	str	r3, [r4, #20]
 800a1ce:	9b01      	ldr	r3, [sp, #4]
 800a1d0:	6120      	str	r0, [r4, #16]
 800a1d2:	b15b      	cbz	r3, 800a1ec <__smakebuf_r+0x70>
 800a1d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f000 f81d 	bl	800a218 <_isatty_r>
 800a1de:	b128      	cbz	r0, 800a1ec <__smakebuf_r+0x70>
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	f023 0303 	bic.w	r3, r3, #3
 800a1e6:	f043 0301 	orr.w	r3, r3, #1
 800a1ea:	81a3      	strh	r3, [r4, #12]
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	431d      	orrs	r5, r3
 800a1f0:	81a5      	strh	r5, [r4, #12]
 800a1f2:	e7cf      	b.n	800a194 <__smakebuf_r+0x18>

0800a1f4 <_fstat_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	4d07      	ldr	r5, [pc, #28]	; (800a214 <_fstat_r+0x20>)
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	4608      	mov	r0, r1
 800a1fe:	4611      	mov	r1, r2
 800a200:	602b      	str	r3, [r5, #0]
 800a202:	f7f8 fcf4 	bl	8002bee <_fstat>
 800a206:	1c43      	adds	r3, r0, #1
 800a208:	d102      	bne.n	800a210 <_fstat_r+0x1c>
 800a20a:	682b      	ldr	r3, [r5, #0]
 800a20c:	b103      	cbz	r3, 800a210 <_fstat_r+0x1c>
 800a20e:	6023      	str	r3, [r4, #0]
 800a210:	bd38      	pop	{r3, r4, r5, pc}
 800a212:	bf00      	nop
 800a214:	20000500 	.word	0x20000500

0800a218 <_isatty_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4d06      	ldr	r5, [pc, #24]	; (800a234 <_isatty_r+0x1c>)
 800a21c:	2300      	movs	r3, #0
 800a21e:	4604      	mov	r4, r0
 800a220:	4608      	mov	r0, r1
 800a222:	602b      	str	r3, [r5, #0]
 800a224:	f7f8 fcf3 	bl	8002c0e <_isatty>
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	d102      	bne.n	800a232 <_isatty_r+0x1a>
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	b103      	cbz	r3, 800a232 <_isatty_r+0x1a>
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	20000500 	.word	0x20000500

0800a238 <_init>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	bf00      	nop
 800a23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a23e:	bc08      	pop	{r3}
 800a240:	469e      	mov	lr, r3
 800a242:	4770      	bx	lr

0800a244 <_fini>:
 800a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a246:	bf00      	nop
 800a248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a24a:	bc08      	pop	{r3}
 800a24c:	469e      	mov	lr, r3
 800a24e:	4770      	bx	lr
