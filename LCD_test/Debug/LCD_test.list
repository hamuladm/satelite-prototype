
LCD_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009490  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08009630  08009630  00019630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a80  08009a80  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009a80  08009a80  00019a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a88  08009a88  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a88  08009a88  00019a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001d4  08009c64  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08009c64  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000088fc  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b9d  00000000  00000000  00028b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  0002a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000643  00000000  00000000  0002af28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000168ec  00000000  00000000  0002b56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6bb  00000000  00000000  00041e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000875fa  00000000  00000000  0004d512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003618  00000000  00000000  000d4b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000d8124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009618 	.word	0x08009618

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009618 	.word	0x08009618

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f1 	b.w	800109c <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9a6 	b.w	800109c <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9e08      	ldr	r6, [sp, #32]
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	460f      	mov	r7, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4694      	mov	ip, r2
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0xe2>
 8000dea:	fab2 f382 	clz	r3, r2
 8000dee:	b143      	cbz	r3, 8000e02 <__udivmoddi4+0x2e>
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	f1c3 0220 	rsb	r2, r3, #32
 8000df8:	409f      	lsls	r7, r3
 8000dfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dfe:	4317      	orrs	r7, r2
 8000e00:	409c      	lsls	r4, r3
 8000e02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e06:	fa1f f58c 	uxth.w	r5, ip
 8000e0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e0e:	0c22      	lsrs	r2, r4, #16
 8000e10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e18:	fb01 f005 	mul.w	r0, r1, r5
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e20:	eb1c 0202 	adds.w	r2, ip, r2
 8000e24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e28:	f080 811c 	bcs.w	8001064 <__udivmoddi4+0x290>
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	f240 8119 	bls.w	8001064 <__udivmoddi4+0x290>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4462      	add	r2, ip
 8000e36:	1a12      	subs	r2, r2, r0
 8000e38:	b2a4      	uxth	r4, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e46:	fb00 f505 	mul.w	r5, r0, r5
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d90a      	bls.n	8000e64 <__udivmoddi4+0x90>
 8000e4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e56:	f080 8107 	bcs.w	8001068 <__udivmoddi4+0x294>
 8000e5a:	42a5      	cmp	r5, r4
 8000e5c:	f240 8104 	bls.w	8001068 <__udivmoddi4+0x294>
 8000e60:	4464      	add	r4, ip
 8000e62:	3802      	subs	r0, #2
 8000e64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11e      	cbz	r6, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40dc      	lsrs	r4, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	e9c6 4300 	strd	r4, r3, [r6]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0xbc>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	f000 80ed 	beq.w	800105e <__udivmoddi4+0x28a>
 8000e84:	2100      	movs	r1, #0
 8000e86:	e9c6 0500 	strd	r0, r5, [r6]
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	fab3 f183 	clz	r1, r3
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d149      	bne.n	8000f2c <__udivmoddi4+0x158>
 8000e98:	42ab      	cmp	r3, r5
 8000e9a:	d302      	bcc.n	8000ea2 <__udivmoddi4+0xce>
 8000e9c:	4282      	cmp	r2, r0
 8000e9e:	f200 80f8 	bhi.w	8001092 <__udivmoddi4+0x2be>
 8000ea2:	1a84      	subs	r4, r0, r2
 8000ea4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	4617      	mov	r7, r2
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d0e2      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000eb4:	e7df      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb6:	b902      	cbnz	r2, 8000eba <__udivmoddi4+0xe6>
 8000eb8:	deff      	udf	#255	; 0xff
 8000eba:	fab2 f382 	clz	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 8090 	bne.w	8000fe4 <__udivmoddi4+0x210>
 8000ec4:	1a8a      	subs	r2, r1, r2
 8000ec6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eca:	fa1f fe8c 	uxth.w	lr, ip
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ed4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ed8:	0c22      	lsrs	r2, r4, #16
 8000eda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ede:	fb0e f005 	mul.w	r0, lr, r5
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x124>
 8000ee6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eee:	d202      	bcs.n	8000ef6 <__udivmoddi4+0x122>
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	f200 80cb 	bhi.w	800108c <__udivmoddi4+0x2b8>
 8000ef6:	4645      	mov	r5, r8
 8000ef8:	1a12      	subs	r2, r2, r0
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f00:	fb07 2210 	mls	r2, r7, r0, r2
 8000f04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f08:	fb0e fe00 	mul.w	lr, lr, r0
 8000f0c:	45a6      	cmp	lr, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x14e>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f18:	d202      	bcs.n	8000f20 <__udivmoddi4+0x14c>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f200 80bb 	bhi.w	8001096 <__udivmoddi4+0x2c2>
 8000f20:	4610      	mov	r0, r2
 8000f22:	eba4 040e 	sub.w	r4, r4, lr
 8000f26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f2a:	e79f      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f2c:	f1c1 0720 	rsb	r7, r1, #32
 8000f30:	408b      	lsls	r3, r1
 8000f32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f42:	40fd      	lsrs	r5, r7
 8000f44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f48:	4323      	orrs	r3, r4
 8000f4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f4e:	fa1f fe8c 	uxth.w	lr, ip
 8000f52:	fb09 5518 	mls	r5, r9, r8, r5
 8000f56:	0c1c      	lsrs	r4, r3, #16
 8000f58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	fa02 f201 	lsl.w	r2, r2, r1
 8000f66:	fa00 f001 	lsl.w	r0, r0, r1
 8000f6a:	d90b      	bls.n	8000f84 <__udivmoddi4+0x1b0>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f74:	f080 8088 	bcs.w	8001088 <__udivmoddi4+0x2b4>
 8000f78:	42a5      	cmp	r5, r4
 8000f7a:	f240 8085 	bls.w	8001088 <__udivmoddi4+0x2b4>
 8000f7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f82:	4464      	add	r4, ip
 8000f84:	1b64      	subs	r4, r4, r5
 8000f86:	b29d      	uxth	r5, r3
 8000f88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f98:	45a6      	cmp	lr, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x1da>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fa4:	d26c      	bcs.n	8001080 <__udivmoddi4+0x2ac>
 8000fa6:	45a6      	cmp	lr, r4
 8000fa8:	d96a      	bls.n	8001080 <__udivmoddi4+0x2ac>
 8000faa:	3b02      	subs	r3, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fb6:	eba4 040e 	sub.w	r4, r4, lr
 8000fba:	42ac      	cmp	r4, r5
 8000fbc:	46c8      	mov	r8, r9
 8000fbe:	46ae      	mov	lr, r5
 8000fc0:	d356      	bcc.n	8001070 <__udivmoddi4+0x29c>
 8000fc2:	d053      	beq.n	800106c <__udivmoddi4+0x298>
 8000fc4:	b156      	cbz	r6, 8000fdc <__udivmoddi4+0x208>
 8000fc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fca:	eb64 040e 	sbc.w	r4, r4, lr
 8000fce:	fa04 f707 	lsl.w	r7, r4, r7
 8000fd2:	40ca      	lsrs	r2, r1
 8000fd4:	40cc      	lsrs	r4, r1
 8000fd6:	4317      	orrs	r7, r2
 8000fd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe4:	f1c3 0120 	rsb	r1, r3, #32
 8000fe8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ff0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ff4:	409d      	lsls	r5, r3
 8000ff6:	432a      	orrs	r2, r5
 8000ff8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ffc:	fa1f fe8c 	uxth.w	lr, ip
 8001000:	fbb1 f0f7 	udiv	r0, r1, r7
 8001004:	fb07 1510 	mls	r5, r7, r0, r1
 8001008:	0c11      	lsrs	r1, r2, #16
 800100a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800100e:	fb00 f50e 	mul.w	r5, r0, lr
 8001012:	428d      	cmp	r5, r1
 8001014:	fa04 f403 	lsl.w	r4, r4, r3
 8001018:	d908      	bls.n	800102c <__udivmoddi4+0x258>
 800101a:	eb1c 0101 	adds.w	r1, ip, r1
 800101e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001022:	d22f      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001024:	428d      	cmp	r5, r1
 8001026:	d92d      	bls.n	8001084 <__udivmoddi4+0x2b0>
 8001028:	3802      	subs	r0, #2
 800102a:	4461      	add	r1, ip
 800102c:	1b49      	subs	r1, r1, r5
 800102e:	b292      	uxth	r2, r2
 8001030:	fbb1 f5f7 	udiv	r5, r1, r7
 8001034:	fb07 1115 	mls	r1, r7, r5, r1
 8001038:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800103c:	fb05 f10e 	mul.w	r1, r5, lr
 8001040:	4291      	cmp	r1, r2
 8001042:	d908      	bls.n	8001056 <__udivmoddi4+0x282>
 8001044:	eb1c 0202 	adds.w	r2, ip, r2
 8001048:	f105 38ff 	add.w	r8, r5, #4294967295
 800104c:	d216      	bcs.n	800107c <__udivmoddi4+0x2a8>
 800104e:	4291      	cmp	r1, r2
 8001050:	d914      	bls.n	800107c <__udivmoddi4+0x2a8>
 8001052:	3d02      	subs	r5, #2
 8001054:	4462      	add	r2, ip
 8001056:	1a52      	subs	r2, r2, r1
 8001058:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800105c:	e738      	b.n	8000ed0 <__udivmoddi4+0xfc>
 800105e:	4631      	mov	r1, r6
 8001060:	4630      	mov	r0, r6
 8001062:	e708      	b.n	8000e76 <__udivmoddi4+0xa2>
 8001064:	4639      	mov	r1, r7
 8001066:	e6e6      	b.n	8000e36 <__udivmoddi4+0x62>
 8001068:	4610      	mov	r0, r2
 800106a:	e6fb      	b.n	8000e64 <__udivmoddi4+0x90>
 800106c:	4548      	cmp	r0, r9
 800106e:	d2a9      	bcs.n	8000fc4 <__udivmoddi4+0x1f0>
 8001070:	ebb9 0802 	subs.w	r8, r9, r2
 8001074:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001078:	3b01      	subs	r3, #1
 800107a:	e7a3      	b.n	8000fc4 <__udivmoddi4+0x1f0>
 800107c:	4645      	mov	r5, r8
 800107e:	e7ea      	b.n	8001056 <__udivmoddi4+0x282>
 8001080:	462b      	mov	r3, r5
 8001082:	e794      	b.n	8000fae <__udivmoddi4+0x1da>
 8001084:	4640      	mov	r0, r8
 8001086:	e7d1      	b.n	800102c <__udivmoddi4+0x258>
 8001088:	46d0      	mov	r8, sl
 800108a:	e77b      	b.n	8000f84 <__udivmoddi4+0x1b0>
 800108c:	3d02      	subs	r5, #2
 800108e:	4462      	add	r2, ip
 8001090:	e732      	b.n	8000ef8 <__udivmoddi4+0x124>
 8001092:	4608      	mov	r0, r1
 8001094:	e70a      	b.n	8000eac <__udivmoddi4+0xd8>
 8001096:	4464      	add	r4, ip
 8001098:	3802      	subs	r0, #2
 800109a:	e742      	b.n	8000f22 <__udivmoddi4+0x14e>

0800109c <__aeabi_idiv0>:
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	9302      	str	r3, [sp, #8]
 80010ac:	2319      	movs	r3, #25
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	463b      	mov	r3, r7
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	2288      	movs	r2, #136	; 0x88
 80010b8:	21ec      	movs	r1, #236	; 0xec
 80010ba:	4857      	ldr	r0, [pc, #348]	; (8001218 <TrimRead+0x178>)
 80010bc:	f002 fbbe 	bl	800383c <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010c0:	463b      	mov	r3, r7
 80010c2:	3319      	adds	r3, #25
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	9202      	str	r2, [sp, #8]
 80010ca:	2207      	movs	r2, #7
 80010cc:	9201      	str	r2, [sp, #4]
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	22e1      	movs	r2, #225	; 0xe1
 80010d4:	21ec      	movs	r1, #236	; 0xec
 80010d6:	4850      	ldr	r0, [pc, #320]	; (8001218 <TrimRead+0x178>)
 80010d8:	f002 fbb0 	bl	800383c <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	783b      	ldrb	r3, [r7, #0]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4b4b      	ldr	r3, [pc, #300]	; (800121c <TrimRead+0x17c>)
 80010ee:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	78bb      	ldrb	r3, [r7, #2]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b48      	ldr	r3, [pc, #288]	; (8001220 <TrimRead+0x180>)
 8001100:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	793b      	ldrb	r3, [r7, #4]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21a      	sxth	r2, r3
 8001110:	4b44      	ldr	r3, [pc, #272]	; (8001224 <TrimRead+0x184>)
 8001112:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	797b      	ldrb	r3, [r7, #5]
 800111c:	b21b      	sxth	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b21b      	sxth	r3, r3
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b40      	ldr	r3, [pc, #256]	; (8001228 <TrimRead+0x188>)
 8001126:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001128:	7a7b      	ldrb	r3, [r7, #9]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b21a      	sxth	r2, r3
 800112e:	79bb      	ldrb	r3, [r7, #6]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21a      	sxth	r2, r3
 8001136:	4b3d      	ldr	r3, [pc, #244]	; (800122c <TrimRead+0x18c>)
 8001138:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	7abb      	ldrb	r3, [r7, #10]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b39      	ldr	r3, [pc, #228]	; (8001230 <TrimRead+0x190>)
 800114a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800114c:	7b7b      	ldrb	r3, [r7, #13]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	7b3b      	ldrb	r3, [r7, #12]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b36      	ldr	r3, [pc, #216]	; (8001234 <TrimRead+0x194>)
 800115c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b21a      	sxth	r2, r3
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21a      	sxth	r2, r3
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <TrimRead+0x198>)
 800116e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001170:	7c7b      	ldrb	r3, [r7, #17]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	7c3b      	ldrb	r3, [r7, #16]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21a      	sxth	r2, r3
 800117e:	4b2f      	ldr	r3, [pc, #188]	; (800123c <TrimRead+0x19c>)
 8001180:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001182:	7cfb      	ldrb	r3, [r7, #19]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21a      	sxth	r2, r3
 8001188:	7cbb      	ldrb	r3, [r7, #18]
 800118a:	b21b      	sxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b21a      	sxth	r2, r3
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <TrimRead+0x1a0>)
 8001192:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001194:	7d7b      	ldrb	r3, [r7, #21]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	b21a      	sxth	r2, r3
 800119a:	7d3b      	ldrb	r3, [r7, #20]
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	4b28      	ldr	r3, [pc, #160]	; (8001244 <TrimRead+0x1a4>)
 80011a4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	7dbb      	ldrb	r3, [r7, #22]
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <TrimRead+0x1a8>)
 80011b6:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011b8:	7e3b      	ldrb	r3, [r7, #24]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <TrimRead+0x1ac>)
 80011be:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011c0:	7ebb      	ldrb	r3, [r7, #26]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	7e7b      	ldrb	r3, [r7, #25]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <TrimRead+0x1b0>)
 80011d0:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011d2:	7efb      	ldrb	r3, [r7, #27]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <TrimRead+0x1b4>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011da:	7f3b      	ldrb	r3, [r7, #28]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	b21a      	sxth	r2, r3
 80011e0:	7f7b      	ldrb	r3, [r7, #29]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <TrimRead+0x1b8>)
 80011f0:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80011f2:	7fbb      	ldrb	r3, [r7, #30]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	7f7b      	ldrb	r3, [r7, #29]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <TrimRead+0x1bc>)
 8001206:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001208:	7ffb      	ldrb	r3, [r7, #31]
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <TrimRead+0x1c0>)
 800120e:	801a      	strh	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200002d0 	.word	0x200002d0
 800121c:	20000200 	.word	0x20000200
 8001220:	20000208 	.word	0x20000208
 8001224:	2000020a 	.word	0x2000020a
 8001228:	20000202 	.word	0x20000202
 800122c:	2000020c 	.word	0x2000020c
 8001230:	2000020e 	.word	0x2000020e
 8001234:	20000210 	.word	0x20000210
 8001238:	20000212 	.word	0x20000212
 800123c:	20000214 	.word	0x20000214
 8001240:	20000216 	.word	0x20000216
 8001244:	20000218 	.word	0x20000218
 8001248:	2000021a 	.word	0x2000021a
 800124c:	20000204 	.word	0x20000204
 8001250:	2000021c 	.word	0x2000021c
 8001254:	20000206 	.word	0x20000206
 8001258:	2000021e 	.word	0x2000021e
 800125c:	20000220 	.word	0x20000220
 8001260:	20000222 	.word	0x20000222

08001264 <BMP280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BMP280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af04      	add	r7, sp, #16
 800126a:	4604      	mov	r4, r0
 800126c:	4608      	mov	r0, r1
 800126e:	4611      	mov	r1, r2
 8001270:	461a      	mov	r2, r3
 8001272:	4623      	mov	r3, r4
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	4603      	mov	r3, r0
 8001278:	71bb      	strb	r3, [r7, #6]
 800127a:	460b      	mov	r3, r1
 800127c:	717b      	strb	r3, [r7, #5]
 800127e:	4613      	mov	r3, r2
 8001280:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8001282:	f7ff ff0d 	bl	80010a0 <TrimRead>


	uint8_t datatowrite = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 800128e:	23b6      	movs	r3, #182	; 0xb6
 8001290:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	2301      	movs	r3, #1
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	f107 030f 	add.w	r3, r7, #15
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	22e0      	movs	r2, #224	; 0xe0
 80012a6:	21ec      	movs	r1, #236	; 0xec
 80012a8:	4858      	ldr	r0, [pc, #352]	; (800140c <BMP280_Config+0x1a8>)
 80012aa:	f002 f9cd 	bl	8003648 <HAL_I2C_Mem_Write>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <BMP280_Config+0x56>
	{
		return -1;
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	e0a3      	b.n	8001402 <BMP280_Config+0x19e>
	}

	HAL_Delay (100);
 80012ba:	2064      	movs	r0, #100	; 0x64
 80012bc:	f001 face 	bl	800285c <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	f107 030f 	add.w	r3, r7, #15
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	22f2      	movs	r2, #242	; 0xf2
 80012d8:	21ec      	movs	r1, #236	; 0xec
 80012da:	484c      	ldr	r0, [pc, #304]	; (800140c <BMP280_Config+0x1a8>)
 80012dc:	f002 f9b4 	bl	8003648 <HAL_I2C_Mem_Write>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <BMP280_Config+0x88>
	{
		return -2;
 80012e6:	f06f 0301 	mvn.w	r3, #1
 80012ea:	e08a      	b.n	8001402 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 80012ec:	2064      	movs	r0, #100	; 0x64
 80012ee:	f001 fab5 	bl	800285c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	2301      	movs	r3, #1
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	f107 030e 	add.w	r3, r7, #14
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	22f2      	movs	r2, #242	; 0xf2
 8001306:	21ec      	movs	r1, #236	; 0xec
 8001308:	4840      	ldr	r0, [pc, #256]	; (800140c <BMP280_Config+0x1a8>)
 800130a:	f002 fa97 	bl	800383c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800130e:	7bba      	ldrb	r2, [r7, #14]
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	429a      	cmp	r2, r3
 8001314:	d002      	beq.n	800131c <BMP280_Config+0xb8>
	{
		return -3;
 8001316:	f06f 0302 	mvn.w	r3, #2
 800131a:	e072      	b.n	8001402 <BMP280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800131c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	b25a      	sxtb	r2, r3
 8001324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	b25b      	sxtb	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b25b      	sxtb	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	2301      	movs	r3, #1
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	f107 030f 	add.w	r3, r7, #15
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	22f5      	movs	r2, #245	; 0xf5
 8001348:	21ec      	movs	r1, #236	; 0xec
 800134a:	4830      	ldr	r0, [pc, #192]	; (800140c <BMP280_Config+0x1a8>)
 800134c:	f002 f97c 	bl	8003648 <HAL_I2C_Mem_Write>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <BMP280_Config+0xf8>
	{
		return -4;
 8001356:	f06f 0303 	mvn.w	r3, #3
 800135a:	e052      	b.n	8001402 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 800135c:	2064      	movs	r0, #100	; 0x64
 800135e:	f001 fa7d 	bl	800285c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2301      	movs	r3, #1
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	f107 030e 	add.w	r3, r7, #14
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	22f5      	movs	r2, #245	; 0xf5
 8001376:	21ec      	movs	r1, #236	; 0xec
 8001378:	4824      	ldr	r0, [pc, #144]	; (800140c <BMP280_Config+0x1a8>)
 800137a:	f002 fa5f 	bl	800383c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800137e:	7bba      	ldrb	r2, [r7, #14]
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	429a      	cmp	r2, r3
 8001384:	d002      	beq.n	800138c <BMP280_Config+0x128>
	{
		return -5;
 8001386:	f06f 0304 	mvn.w	r3, #4
 800138a:	e03a      	b.n	8001402 <BMP280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	015b      	lsls	r3, r3, #5
 8001390:	b25a      	sxtb	r2, r3
 8001392:	79bb      	ldrb	r3, [r7, #6]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b25a      	sxtb	r2, r3
 800139c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	2301      	movs	r3, #1
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	f107 030f 	add.w	r3, r7, #15
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	22f4      	movs	r2, #244	; 0xf4
 80013bc:	21ec      	movs	r1, #236	; 0xec
 80013be:	4813      	ldr	r0, [pc, #76]	; (800140c <BMP280_Config+0x1a8>)
 80013c0:	f002 f942 	bl	8003648 <HAL_I2C_Mem_Write>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <BMP280_Config+0x16c>
	{
		return -6;
 80013ca:	f06f 0305 	mvn.w	r3, #5
 80013ce:	e018      	b.n	8001402 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 80013d0:	2064      	movs	r0, #100	; 0x64
 80013d2:	f001 fa43 	bl	800285c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2301      	movs	r3, #1
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	f107 030e 	add.w	r3, r7, #14
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	22f4      	movs	r2, #244	; 0xf4
 80013ea:	21ec      	movs	r1, #236	; 0xec
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <BMP280_Config+0x1a8>)
 80013ee:	f002 fa25 	bl	800383c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013f2:	7bba      	ldrb	r2, [r7, #14]
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d002      	beq.n	8001400 <BMP280_Config+0x19c>
	{
		return -7;
 80013fa:	f06f 0306 	mvn.w	r3, #6
 80013fe:	e000      	b.n	8001402 <BMP280_Config+0x19e>
	}

	return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}
 800140a:	bf00      	nop
 800140c:	200002d0 	.word	0x200002d0

08001410 <BMPReadRaw>:


int BMPReadRaw(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af04      	add	r7, sp, #16
	uint8_t RawData[6];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c3, BMP280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	2301      	movs	r3, #1
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <BMPReadRaw+0x84>)
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2301      	movs	r3, #1
 8001426:	22d0      	movs	r2, #208	; 0xd0
 8001428:	21ec      	movs	r1, #236	; 0xec
 800142a:	481b      	ldr	r0, [pc, #108]	; (8001498 <BMPReadRaw+0x88>)
 800142c:	f002 fa06 	bl	800383c <HAL_I2C_Mem_Read>

	if (chipID == 0x58)
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <BMPReadRaw+0x84>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b58      	cmp	r3, #88	; 0x58
 8001436:	d127      	bne.n	8001488 <BMPReadRaw+0x78>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, PRESS_MSB_REG, 1, RawData, 6, HAL_MAX_DELAY);
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2306      	movs	r3, #6
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	463b      	mov	r3, r7
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2301      	movs	r3, #1
 8001448:	22f7      	movs	r2, #247	; 0xf7
 800144a:	21ec      	movs	r1, #236	; 0xec
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <BMPReadRaw+0x88>)
 800144e:	f002 f9f5 	bl	800383c <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001452:	783b      	ldrb	r3, [r7, #0]
 8001454:	031a      	lsls	r2, r3, #12
 8001456:	787b      	ldrb	r3, [r7, #1]
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	4313      	orrs	r3, r2
 800145c:	78ba      	ldrb	r2, [r7, #2]
 800145e:	0912      	lsrs	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	4313      	orrs	r3, r2
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <BMPReadRaw+0x8c>)
 8001466:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	031a      	lsls	r2, r3, #12
 800146c:	793b      	ldrb	r3, [r7, #4]
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4313      	orrs	r3, r2
 8001472:	797a      	ldrb	r2, [r7, #5]
 8001474:	0912      	lsrs	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	4313      	orrs	r3, r2
 800147a:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <BMPReadRaw+0x90>)
 800147c:	6013      	str	r3, [r2, #0]
		hRaw = 0;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <BMPReadRaw+0x94>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

		return 0;
 8001484:	2300      	movs	r3, #0
 8001486:	e001      	b.n	800148c <BMPReadRaw+0x7c>
	}

	else return -1;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200001f0 	.word	0x200001f0
 8001498:	200002d0 	.word	0x200002d0
 800149c:	200001f8 	.word	0x200001f8
 80014a0:	200001f4 	.word	0x200001f4
 80014a4:	200001fc 	.word	0x200001fc

080014a8 <BMP280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BMP280_compensate_T_int32(int32_t adc_T)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	10da      	asrs	r2, r3, #3
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <BMP280_compensate_T_int32+0x74>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4a18      	ldr	r2, [pc, #96]	; (8001520 <BMP280_compensate_T_int32+0x78>)
 80014be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	12db      	asrs	r3, r3, #11
 80014c8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	111b      	asrs	r3, r3, #4
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <BMP280_compensate_T_int32+0x74>)
 80014d0:	8812      	ldrh	r2, [r2, #0]
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	1112      	asrs	r2, r2, #4
 80014d8:	4910      	ldr	r1, [pc, #64]	; (800151c <BMP280_compensate_T_int32+0x74>)
 80014da:	8809      	ldrh	r1, [r1, #0]
 80014dc:	1a52      	subs	r2, r2, r1
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	131b      	asrs	r3, r3, #12
 80014e4:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <BMP280_compensate_T_int32+0x7c>)
 80014e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	139b      	asrs	r3, r3, #14
 80014f0:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <BMP280_compensate_T_int32+0x80>)
 80014fa:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <BMP280_compensate_T_int32+0x80>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	3380      	adds	r3, #128	; 0x80
 8001508:	121b      	asrs	r3, r3, #8
 800150a:	60fb      	str	r3, [r7, #12]
	return T;
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	4618      	mov	r0, r3
 8001510:	371c      	adds	r7, #28
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000200 	.word	0x20000200
 8001520:	20000208 	.word	0x20000208
 8001524:	2000020a 	.word	0x2000020a
 8001528:	20000224 	.word	0x20000224

0800152c <BMP280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BMP280_compensate_P_int64(int32_t adc_P)
{
 800152c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001530:	b0ca      	sub	sp, #296	; 0x128
 8001532:	af00      	add	r7, sp, #0
 8001534:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001538:	4baf      	ldr	r3, [pc, #700]	; (80017f8 <BMP280_compensate_P_int64+0x2cc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	17da      	asrs	r2, r3, #31
 800153e:	461c      	mov	r4, r3
 8001540:	4615      	mov	r5, r2
 8001542:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001546:	f145 3bff 	adc.w	fp, r5, #4294967295
 800154a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800154e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001552:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001556:	fb03 f102 	mul.w	r1, r3, r2
 800155a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800155e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	18ca      	adds	r2, r1, r3
 8001568:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800156c:	fba3 8903 	umull	r8, r9, r3, r3
 8001570:	eb02 0309 	add.w	r3, r2, r9
 8001574:	4699      	mov	r9, r3
 8001576:	4ba1      	ldr	r3, [pc, #644]	; (80017fc <BMP280_compensate_P_int64+0x2d0>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	b21b      	sxth	r3, r3
 800157e:	17da      	asrs	r2, r3, #31
 8001580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001584:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001588:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800158c:	4603      	mov	r3, r0
 800158e:	fb03 f209 	mul.w	r2, r3, r9
 8001592:	460b      	mov	r3, r1
 8001594:	fb08 f303 	mul.w	r3, r8, r3
 8001598:	4413      	add	r3, r2
 800159a:	4602      	mov	r2, r0
 800159c:	fba8 1202 	umull	r1, r2, r8, r2
 80015a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015a4:	460a      	mov	r2, r1
 80015a6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015ae:	4413      	add	r3, r2
 80015b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015b4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015b8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015bc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015c0:	4b8f      	ldr	r3, [pc, #572]	; (8001800 <BMP280_compensate_P_int64+0x2d4>)
 80015c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	17da      	asrs	r2, r3, #31
 80015ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015ce:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80015da:	462a      	mov	r2, r5
 80015dc:	fb02 f203 	mul.w	r2, r2, r3
 80015e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015e4:	4621      	mov	r1, r4
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	441a      	add	r2, r3
 80015ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015f0:	4621      	mov	r1, r4
 80015f2:	fba3 1301 	umull	r1, r3, r3, r1
 80015f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015fa:	460b      	mov	r3, r1
 80015fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001604:	18d3      	adds	r3, r2, r3
 8001606:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800160a:	f04f 0000 	mov.w	r0, #0
 800160e:	f04f 0100 	mov.w	r1, #0
 8001612:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001616:	462b      	mov	r3, r5
 8001618:	0459      	lsls	r1, r3, #17
 800161a:	4623      	mov	r3, r4
 800161c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001620:	4623      	mov	r3, r4
 8001622:	0458      	lsls	r0, r3, #17
 8001624:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001628:	1814      	adds	r4, r2, r0
 800162a:	643c      	str	r4, [r7, #64]	; 0x40
 800162c:	414b      	adcs	r3, r1
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
 8001630:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001634:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001638:	4b72      	ldr	r3, [pc, #456]	; (8001804 <BMP280_compensate_P_int64+0x2d8>)
 800163a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163e:	b21b      	sxth	r3, r3
 8001640:	17da      	asrs	r2, r3, #31
 8001642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001646:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800164a:	f04f 0000 	mov.w	r0, #0
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001656:	00d9      	lsls	r1, r3, #3
 8001658:	2000      	movs	r0, #0
 800165a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800165e:	1814      	adds	r4, r2, r0
 8001660:	63bc      	str	r4, [r7, #56]	; 0x38
 8001662:	414b      	adcs	r3, r1
 8001664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001666:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800166a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800166e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001672:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001676:	fb03 f102 	mul.w	r1, r3, r2
 800167a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800167e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	18ca      	adds	r2, r1, r3
 8001688:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800168c:	fba3 1303 	umull	r1, r3, r3, r3
 8001690:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001694:	460b      	mov	r3, r1
 8001696:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800169a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800169e:	18d3      	adds	r3, r2, r3
 80016a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016a4:	4b58      	ldr	r3, [pc, #352]	; (8001808 <BMP280_compensate_P_int64+0x2dc>)
 80016a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	17da      	asrs	r2, r3, #31
 80016ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016b6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016ba:	462b      	mov	r3, r5
 80016bc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016c0:	4642      	mov	r2, r8
 80016c2:	fb02 f203 	mul.w	r2, r2, r3
 80016c6:	464b      	mov	r3, r9
 80016c8:	4621      	mov	r1, r4
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	4622      	mov	r2, r4
 80016d2:	4641      	mov	r1, r8
 80016d4:	fba2 1201 	umull	r1, r2, r2, r1
 80016d8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80016dc:	460a      	mov	r2, r1
 80016de:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80016e2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80016e6:	4413      	add	r3, r2
 80016e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016ec:	f04f 0000 	mov.w	r0, #0
 80016f0:	f04f 0100 	mov.w	r1, #0
 80016f4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80016f8:	4623      	mov	r3, r4
 80016fa:	0a18      	lsrs	r0, r3, #8
 80016fc:	462b      	mov	r3, r5
 80016fe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001702:	462b      	mov	r3, r5
 8001704:	1219      	asrs	r1, r3, #8
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <BMP280_compensate_P_int64+0x2e0>)
 8001708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170c:	b21b      	sxth	r3, r3
 800170e:	17da      	asrs	r2, r3, #31
 8001710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001714:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001718:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800171c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001720:	464a      	mov	r2, r9
 8001722:	fb02 f203 	mul.w	r2, r2, r3
 8001726:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800172a:	4644      	mov	r4, r8
 800172c:	fb04 f303 	mul.w	r3, r4, r3
 8001730:	441a      	add	r2, r3
 8001732:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001736:	4644      	mov	r4, r8
 8001738:	fba3 4304 	umull	r4, r3, r3, r4
 800173c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001740:	4623      	mov	r3, r4
 8001742:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001746:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800174a:	18d3      	adds	r3, r2, r3
 800174c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800175c:	464c      	mov	r4, r9
 800175e:	0323      	lsls	r3, r4, #12
 8001760:	4644      	mov	r4, r8
 8001762:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001766:	4644      	mov	r4, r8
 8001768:	0322      	lsls	r2, r4, #12
 800176a:	1884      	adds	r4, r0, r2
 800176c:	633c      	str	r4, [r7, #48]	; 0x30
 800176e:	eb41 0303 	adc.w	r3, r1, r3
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
 8001774:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001778:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800177c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001780:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001784:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001788:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800178c:	4b20      	ldr	r3, [pc, #128]	; (8001810 <BMP280_compensate_P_int64+0x2e4>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	b29b      	uxth	r3, r3
 8001792:	2200      	movs	r2, #0
 8001794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001798:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800179c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017a0:	462b      	mov	r3, r5
 80017a2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017a6:	4642      	mov	r2, r8
 80017a8:	fb02 f203 	mul.w	r2, r2, r3
 80017ac:	464b      	mov	r3, r9
 80017ae:	4621      	mov	r1, r4
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	4622      	mov	r2, r4
 80017b8:	4641      	mov	r1, r8
 80017ba:	fba2 1201 	umull	r1, r2, r2, r1
 80017be:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017c2:	460a      	mov	r2, r1
 80017c4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017c8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017cc:	4413      	add	r3, r2
 80017ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017de:	4629      	mov	r1, r5
 80017e0:	104a      	asrs	r2, r1, #1
 80017e2:	4629      	mov	r1, r5
 80017e4:	17cb      	asrs	r3, r1, #31
 80017e6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80017ea:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017ee:	4313      	orrs	r3, r2
 80017f0:	d110      	bne.n	8001814 <BMP280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 80017f2:	2300      	movs	r3, #0
 80017f4:	e154      	b.n	8001aa0 <BMP280_compensate_P_int64+0x574>
 80017f6:	bf00      	nop
 80017f8:	20000224 	.word	0x20000224
 80017fc:	20000214 	.word	0x20000214
 8001800:	20000212 	.word	0x20000212
 8001804:	20000210 	.word	0x20000210
 8001808:	2000020e 	.word	0x2000020e
 800180c:	2000020c 	.word	0x2000020c
 8001810:	20000202 	.word	0x20000202
	}
	p = 1048576-adc_P;
 8001814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001818:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800181c:	17da      	asrs	r2, r3, #31
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001820:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001822:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001826:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800182a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800182e:	105b      	asrs	r3, r3, #1
 8001830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001834:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001838:	07db      	lsls	r3, r3, #31
 800183a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800183e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001842:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001846:	4621      	mov	r1, r4
 8001848:	1a89      	subs	r1, r1, r2
 800184a:	67b9      	str	r1, [r7, #120]	; 0x78
 800184c:	4629      	mov	r1, r5
 800184e:	eb61 0303 	sbc.w	r3, r1, r3
 8001852:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001854:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001858:	4622      	mov	r2, r4
 800185a:	462b      	mov	r3, r5
 800185c:	1891      	adds	r1, r2, r2
 800185e:	6239      	str	r1, [r7, #32]
 8001860:	415b      	adcs	r3, r3
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
 8001864:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001868:	4621      	mov	r1, r4
 800186a:	1851      	adds	r1, r2, r1
 800186c:	61b9      	str	r1, [r7, #24]
 800186e:	4629      	mov	r1, r5
 8001870:	414b      	adcs	r3, r1
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001880:	4649      	mov	r1, r9
 8001882:	018b      	lsls	r3, r1, #6
 8001884:	4641      	mov	r1, r8
 8001886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800188a:	4641      	mov	r1, r8
 800188c:	018a      	lsls	r2, r1, #6
 800188e:	4641      	mov	r1, r8
 8001890:	1889      	adds	r1, r1, r2
 8001892:	6139      	str	r1, [r7, #16]
 8001894:	4649      	mov	r1, r9
 8001896:	eb43 0101 	adc.w	r1, r3, r1
 800189a:	6179      	str	r1, [r7, #20]
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018a8:	4649      	mov	r1, r9
 80018aa:	008b      	lsls	r3, r1, #2
 80018ac:	4641      	mov	r1, r8
 80018ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018b2:	4641      	mov	r1, r8
 80018b4:	008a      	lsls	r2, r1, #2
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	4622      	mov	r2, r4
 80018be:	189b      	adds	r3, r3, r2
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	460b      	mov	r3, r1
 80018c4:	462a      	mov	r2, r5
 80018c6:	eb42 0303 	adc.w	r3, r2, r3
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018d8:	4649      	mov	r1, r9
 80018da:	008b      	lsls	r3, r1, #2
 80018dc:	4641      	mov	r1, r8
 80018de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018e2:	4641      	mov	r1, r8
 80018e4:	008a      	lsls	r2, r1, #2
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	4622      	mov	r2, r4
 80018ee:	189b      	adds	r3, r3, r2
 80018f0:	673b      	str	r3, [r7, #112]	; 0x70
 80018f2:	462b      	mov	r3, r5
 80018f4:	460a      	mov	r2, r1
 80018f6:	eb42 0303 	adc.w	r3, r2, r3
 80018fa:	677b      	str	r3, [r7, #116]	; 0x74
 80018fc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001900:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001904:	f7ff f9c8 	bl	8000c98 <__aeabi_ldivmod>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001910:	4b66      	ldr	r3, [pc, #408]	; (8001aac <BMP280_compensate_P_int64+0x580>)
 8001912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001916:	b21b      	sxth	r3, r3
 8001918:	17da      	asrs	r2, r3, #31
 800191a:	66bb      	str	r3, [r7, #104]	; 0x68
 800191c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800191e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001922:	f04f 0000 	mov.w	r0, #0
 8001926:	f04f 0100 	mov.w	r1, #0
 800192a:	0b50      	lsrs	r0, r2, #13
 800192c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001930:	1359      	asrs	r1, r3, #13
 8001932:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001936:	462b      	mov	r3, r5
 8001938:	fb00 f203 	mul.w	r2, r0, r3
 800193c:	4623      	mov	r3, r4
 800193e:	fb03 f301 	mul.w	r3, r3, r1
 8001942:	4413      	add	r3, r2
 8001944:	4622      	mov	r2, r4
 8001946:	fba2 1200 	umull	r1, r2, r2, r0
 800194a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800194e:	460a      	mov	r2, r1
 8001950:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001954:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001958:	4413      	add	r3, r2
 800195a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800195e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	0b50      	lsrs	r0, r2, #13
 800196c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001970:	1359      	asrs	r1, r3, #13
 8001972:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001976:	462b      	mov	r3, r5
 8001978:	fb00 f203 	mul.w	r2, r0, r3
 800197c:	4623      	mov	r3, r4
 800197e:	fb03 f301 	mul.w	r3, r3, r1
 8001982:	4413      	add	r3, r2
 8001984:	4622      	mov	r2, r4
 8001986:	fba2 1200 	umull	r1, r2, r2, r0
 800198a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800198e:	460a      	mov	r2, r1
 8001990:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001994:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001998:	4413      	add	r3, r2
 800199a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019aa:	4621      	mov	r1, r4
 80019ac:	0e4a      	lsrs	r2, r1, #25
 80019ae:	4629      	mov	r1, r5
 80019b0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019b4:	4629      	mov	r1, r5
 80019b6:	164b      	asrs	r3, r1, #25
 80019b8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019bc:	4b3c      	ldr	r3, [pc, #240]	; (8001ab0 <BMP280_compensate_P_int64+0x584>)
 80019be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	17da      	asrs	r2, r3, #31
 80019c6:	663b      	str	r3, [r7, #96]	; 0x60
 80019c8:	667a      	str	r2, [r7, #100]	; 0x64
 80019ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019d2:	462a      	mov	r2, r5
 80019d4:	fb02 f203 	mul.w	r2, r2, r3
 80019d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019dc:	4621      	mov	r1, r4
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80019e8:	4621      	mov	r1, r4
 80019ea:	fba2 1201 	umull	r1, r2, r2, r1
 80019ee:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80019f2:	460a      	mov	r2, r1
 80019f4:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80019f8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80019fc:	4413      	add	r3, r2
 80019fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a0e:	4621      	mov	r1, r4
 8001a10:	0cca      	lsrs	r2, r1, #19
 8001a12:	4629      	mov	r1, r5
 8001a14:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a18:	4629      	mov	r1, r5
 8001a1a:	14cb      	asrs	r3, r1, #19
 8001a1c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a20:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a24:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a28:	1884      	adds	r4, r0, r2
 8001a2a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a2c:	eb41 0303 	adc.w	r3, r1, r3
 8001a30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a32:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a36:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	1889      	adds	r1, r1, r2
 8001a3e:	6539      	str	r1, [r7, #80]	; 0x50
 8001a40:	4629      	mov	r1, r5
 8001a42:	eb43 0101 	adc.w	r1, r3, r1
 8001a46:	6579      	str	r1, [r7, #84]	; 0x54
 8001a48:	f04f 0000 	mov.w	r0, #0
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a54:	4623      	mov	r3, r4
 8001a56:	0a18      	lsrs	r0, r3, #8
 8001a58:	462b      	mov	r3, r5
 8001a5a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a5e:	462b      	mov	r3, r5
 8001a60:	1219      	asrs	r1, r3, #8
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <BMP280_compensate_P_int64+0x588>)
 8001a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	17da      	asrs	r2, r3, #31
 8001a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a7c:	464c      	mov	r4, r9
 8001a7e:	0123      	lsls	r3, r4, #4
 8001a80:	4644      	mov	r4, r8
 8001a82:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a86:	4644      	mov	r4, r8
 8001a88:	0122      	lsls	r2, r4, #4
 8001a8a:	1884      	adds	r4, r0, r2
 8001a8c:	603c      	str	r4, [r7, #0]
 8001a8e:	eb41 0303 	adc.w	r3, r1, r3
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a98:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001a9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aac:	2000021a 	.word	0x2000021a
 8001ab0:	20000218 	.word	0x20000218
 8001ab4:	20000216 	.word	0x20000216

08001ab8 <BMP280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t BMP280_compensate_H_int32(int32_t adc_H)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <BMP280_compensate_H_int32+0xbc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001ac8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	039a      	lsls	r2, r3, #14
 8001ace:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <BMP280_compensate_H_int32+0xc0>)
 8001ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad4:	051b      	lsls	r3, r3, #20
 8001ad6:	1ad2      	subs	r2, r2, r3
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <BMP280_compensate_H_int32+0xc4>)
 8001ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001ae8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001aec:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001aee:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <BMP280_compensate_H_int32+0xc8>)
 8001af0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001af4:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001afc:	1292      	asrs	r2, r2, #10
 8001afe:	4921      	ldr	r1, [pc, #132]	; (8001b84 <BMP280_compensate_H_int32+0xcc>)
 8001b00:	8809      	ldrh	r1, [r1, #0]
 8001b02:	4608      	mov	r0, r1
 8001b04:	68f9      	ldr	r1, [r7, #12]
 8001b06:	fb00 f101 	mul.w	r1, r0, r1
 8001b0a:	12c9      	asrs	r1, r1, #11
 8001b0c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b10:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b14:	1292      	asrs	r2, r2, #10
 8001b16:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b1a:	491b      	ldr	r1, [pc, #108]	; (8001b88 <BMP280_compensate_H_int32+0xd0>)
 8001b1c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b20:	fb01 f202 	mul.w	r2, r1, r2
 8001b24:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b28:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	13db      	asrs	r3, r3, #15
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	13d2      	asrs	r2, r2, #15
 8001b38:	fb02 f303 	mul.w	r3, r2, r3
 8001b3c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <BMP280_compensate_H_int32+0xd4>)
 8001b40:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b42:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b46:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b54:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b5c:	bfa8      	it	ge
 8001b5e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b62:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	131b      	asrs	r3, r3, #12
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	20000224 	.word	0x20000224
 8001b78:	2000021e 	.word	0x2000021e
 8001b7c:	20000220 	.word	0x20000220
 8001b80:	20000222 	.word	0x20000222
 8001b84:	20000206 	.word	0x20000206
 8001b88:	2000021c 	.word	0x2000021c
 8001b8c:	20000204 	.word	0x20000204

08001b90 <BMP280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BMP280_Measure (void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	if (BMPReadRaw() == 0)
 8001b94:	f7ff fc3c 	bl	8001410 <BMPReadRaw>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d163      	bne.n	8001c66 <BMP280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <BMP280_Measure+0xf4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ba6:	d104      	bne.n	8001bb2 <BMP280_Measure+0x22>
 8001ba8:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <BMP280_Measure+0xf8>)
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e016      	b.n	8001be0 <BMP280_Measure+0x50>
		  else
		  {
			  Temperature = (BMP280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <BMP280_Measure+0xf4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fc76 	bl	80014a8 <BMP280_compensate_T_int32>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fcb8 	bl	8000534 <__aeabi_i2d>
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <BMP280_Measure+0xfc>)
 8001bca:	f7fe fe47 	bl	800085c <__aeabi_ddiv>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7ff f80f 	bl	8000bf8 <__aeabi_d2f>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a2a      	ldr	r2, [pc, #168]	; (8001c88 <BMP280_Measure+0xf8>)
 8001bde:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <BMP280_Measure+0x100>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001be8:	d104      	bne.n	8001bf4 <BMP280_Measure+0x64>
 8001bea:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <BMP280_Measure+0x104>)
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e016      	b.n	8001c22 <BMP280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BMP280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001bf4:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <BMP280_Measure+0x100>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fc97 	bl	800152c <BMP280_compensate_P_int64>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc87 	bl	8000514 <__aeabi_ui2d>
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <BMP280_Measure+0x108>)
 8001c0c:	f7fe fe26 	bl	800085c <__aeabi_ddiv>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe ffee 	bl	8000bf8 <__aeabi_d2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <BMP280_Measure+0x104>)
 8001c20:	6013      	str	r3, [r2, #0]
			  Pressure = (BMP280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <BMP280_Measure+0x10c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c2a:	d104      	bne.n	8001c36 <BMP280_Measure+0xa6>
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <BMP280_Measure+0x110>)
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001c34:	e023      	b.n	8001c7e <BMP280_Measure+0xee>
			  Humidity = (BMP280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <BMP280_Measure+0x10c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff3c 	bl	8001ab8 <BMP280_compensate_H_int32>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc66 	bl	8000514 <__aeabi_ui2d>
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <BMP280_Measure+0x114>)
 8001c4e:	f7fe fe05 	bl	800085c <__aeabi_ddiv>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ffcd 	bl	8000bf8 <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <BMP280_Measure+0x110>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	e00b      	b.n	8001c7e <BMP280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <BMP280_Measure+0x110>)
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <BMP280_Measure+0x110>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <BMP280_Measure+0x104>)
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <BMP280_Measure+0x104>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a03      	ldr	r2, [pc, #12]	; (8001c88 <BMP280_Measure+0xf8>)
 8001c7c:	6013      	str	r3, [r2, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200001f4 	.word	0x200001f4
 8001c88:	20000324 	.word	0x20000324
 8001c8c:	40590000 	.word	0x40590000
 8001c90:	200001f8 	.word	0x200001f8
 8001c94:	20000328 	.word	0x20000328
 8001c98:	40700000 	.word	0x40700000
 8001c9c:	200001fc 	.word	0x200001fc
 8001ca0:	2000032c 	.word	0x2000032c
 8001ca4:	40900000 	.word	0x40900000

08001ca8 <lcd_send_cmd>:
#include "i2c-lcd.h"
extern I2C_HandleTypeDef hi2c1;
#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f023 030f 	bic.w	r3, r3, #15
 8001cb8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	f043 030c 	orr.w	r3, r3, #12
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001cd4:	7bbb      	ldrb	r3, [r7, #14]
 8001cd6:	f043 030c 	orr.w	r3, r3, #12
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001cde:	7bbb      	ldrb	r3, [r7, #14]
 8001ce0:	f043 0308 	orr.w	r3, r3, #8
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 50);
 8001ce8:	f107 0208 	add.w	r2, r7, #8
 8001cec:	2332      	movs	r3, #50	; 0x32
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	214e      	movs	r1, #78	; 0x4e
 8001cf4:	4803      	ldr	r0, [pc, #12]	; (8001d04 <lcd_send_cmd+0x5c>)
 8001cf6:	f001 f983 	bl	8003000 <HAL_I2C_Master_Transmit>
}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000228 	.word	0x20000228

08001d08 <lcd_send_data>:

void lcd_send_data (char data){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f023 030f 	bic.w	r3, r3, #15
 8001d18:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	f043 030d 	orr.w	r3, r3, #13
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	f043 0309 	orr.w	r3, r3, #9
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d34:	7bbb      	ldrb	r3, [r7, #14]
 8001d36:	f043 030d 	orr.w	r3, r3, #13
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d3e:	7bbb      	ldrb	r3, [r7, #14]
 8001d40:	f043 0309 	orr.w	r3, r3, #9
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d48:	f107 0208 	add.w	r2, r7, #8
 8001d4c:	2364      	movs	r3, #100	; 0x64
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2304      	movs	r3, #4
 8001d52:	214e      	movs	r1, #78	; 0x4e
 8001d54:	4803      	ldr	r0, [pc, #12]	; (8001d64 <lcd_send_data+0x5c>)
 8001d56:	f001 f953 	bl	8003000 <HAL_I2C_Master_Transmit>
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000228 	.word	0x20000228

08001d68 <lcd_clear>:

void lcd_clear (void){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001d6e:	2080      	movs	r0, #128	; 0x80
 8001d70:	f7ff ff9a 	bl	8001ca8 <lcd_send_cmd>
	for (int i = 0; i < 70; i++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	e005      	b.n	8001d86 <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 8001d7a:	2020      	movs	r0, #32
 8001d7c:	f7ff ffc4 	bl	8001d08 <lcd_send_data>
	for (int i = 0; i < 70; i++)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3301      	adds	r3, #1
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b45      	cmp	r3, #69	; 0x45
 8001d8a:	ddf6      	ble.n	8001d7a <lcd_clear+0x12>
	}
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <lcd_put_cur>:

void lcd_put_cur(int row, int col){
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
    switch(row)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <lcd_put_cur+0x18>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d005      	beq.n	8001db8 <lcd_put_cur+0x22>
 8001dac:	e009      	b.n	8001dc2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db4:	603b      	str	r3, [r7, #0]
            break;
 8001db6:	e004      	b.n	8001dc2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dbe:	603b      	str	r3, [r7, #0]
            break;
 8001dc0:	bf00      	nop
    }
    lcd_send_cmd (col);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff6e 	bl	8001ca8 <lcd_send_cmd>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <lcd_init>:

void lcd_init (void){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001dd8:	2032      	movs	r0, #50	; 0x32
 8001dda:	f000 fd3f 	bl	800285c <HAL_Delay>
	lcd_send_cmd(0x30);
 8001dde:	2030      	movs	r0, #48	; 0x30
 8001de0:	f7ff ff62 	bl	8001ca8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001de4:	2005      	movs	r0, #5
 8001de6:	f000 fd39 	bl	800285c <HAL_Delay>
	lcd_send_cmd(0x30);
 8001dea:	2030      	movs	r0, #48	; 0x30
 8001dec:	f7ff ff5c 	bl	8001ca8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001df0:	2001      	movs	r0, #1
 8001df2:	f000 fd33 	bl	800285c <HAL_Delay>
	lcd_send_cmd(0x30);
 8001df6:	2030      	movs	r0, #48	; 0x30
 8001df8:	f7ff ff56 	bl	8001ca8 <lcd_send_cmd>
	HAL_Delay(10);
 8001dfc:	200a      	movs	r0, #10
 8001dfe:	f000 fd2d 	bl	800285c <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 8001e02:	2020      	movs	r0, #32
 8001e04:	f7ff ff50 	bl	8001ca8 <lcd_send_cmd>
	HAL_Delay(10);
 8001e08:	200a      	movs	r0, #10
 8001e0a:	f000 fd27 	bl	800285c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001e0e:	2028      	movs	r0, #40	; 0x28
 8001e10:	f7ff ff4a 	bl	8001ca8 <lcd_send_cmd>
	HAL_Delay(1);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f000 fd21 	bl	800285c <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001e1a:	2008      	movs	r0, #8
 8001e1c:	f7ff ff44 	bl	8001ca8 <lcd_send_cmd>
	HAL_Delay(1);
 8001e20:	2001      	movs	r0, #1
 8001e22:	f000 fd1b 	bl	800285c <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff ff3e 	bl	8001ca8 <lcd_send_cmd>
	HAL_Delay(1);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f000 fd15 	bl	800285c <HAL_Delay>
	HAL_Delay(1);
 8001e32:	2001      	movs	r0, #1
 8001e34:	f000 fd12 	bl	800285c <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001e38:	2006      	movs	r0, #6
 8001e3a:	f7ff ff35 	bl	8001ca8 <lcd_send_cmd>
	HAL_Delay(1);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f000 fd0c 	bl	800285c <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001e44:	200c      	movs	r0, #12
 8001e46:	f7ff ff2f 	bl	8001ca8 <lcd_send_cmd>
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <lcd_send_string>:

void lcd_send_string (char *str){
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001e56:	e006      	b.n	8001e66 <lcd_send_string+0x18>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff51 	bl	8001d08 <lcd_send_data>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f4      	bne.n	8001e58 <lcd_send_string+0xa>
}
 8001e6e:	bf00      	nop
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0d8      	sub	sp, #352	; 0x160
 8001e7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7e:	f000 fc7b 	bl	8002778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e82:	f000 f873 	bl	8001f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e86:	f000 f963 	bl	8002150 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e8a:	f000 f8d7 	bl	800203c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001e8e:	f000 f903 	bl	8002098 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001e92:	f000 f92f 	bl	80020f4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  MCP9808_HandleTypeDef mcp9808 = mcp9808_init();
 8001e96:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f9a1 	bl	80021e2 <mcp9808_init>
  lcd_init();
 8001ea0:	f7ff ff98 	bl	8001dd4 <lcd_init>
  int ret = BMP280_Config(OSRS_16, OSRS_16, OSRS_OFF, MODE_NORMAL, T_SB_1000, IIR_16);
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	2305      	movs	r3, #5
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2303      	movs	r3, #3
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2105      	movs	r1, #5
 8001eb2:	2005      	movs	r0, #5
 8001eb4:	f7ff f9d6 	bl	8001264 <BMP280_Config>
 8001eb8:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	float temp = mcp9808_read_temp(&mcp9808);
 8001ebc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 f9a7 	bl	8002214 <mcp9808_read_temp>
 8001ec6:	ed87 0a54 	vstr	s0, [r7, #336]	; 0x150
	BMP280_Measure();
 8001eca:	f7ff fe61 	bl	8001b90 <BMP280_Measure>
	HAL_Delay(500);
 8001ece:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ed2:	f000 fcc3 	bl	800285c <HAL_Delay>
	char data[255] = "";
 8001ed6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001eda:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	22fb      	movs	r2, #251	; 0xfb
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 ff58 	bl	8005d9e <memset>

    sprintf(msgstr, "%f Pa", (float)Pressure);
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <main+0xe4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fb30 	bl	8000558 <__aeabi_f2d>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001f00:	4917      	ldr	r1, [pc, #92]	; (8001f60 <main+0xe8>)
 8001f02:	f003 fee9 	bl	8005cd8 <siprintf>
    sprintf(data, "%f C", (float)Temperature);
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <main+0xec>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fb24 	bl	8000558 <__aeabi_f2d>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	1d38      	adds	r0, r7, #4
 8001f16:	4914      	ldr	r1, [pc, #80]	; (8001f68 <main+0xf0>)
 8001f18:	f003 fede 	bl	8005cd8 <siprintf>
    lcd_put_cur(0, 0);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7ff ff39 	bl	8001d96 <lcd_put_cur>
    lcd_send_string(msgstr);
 8001f24:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff90 	bl	8001e4e <lcd_send_string>
    lcd_put_cur(1, 0);
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7ff ff30 	bl	8001d96 <lcd_put_cur>
    lcd_send_string(data);
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff88 	bl	8001e4e <lcd_send_string>
    HAL_Delay(1000);
 8001f3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f42:	f000 fc8b 	bl	800285c <HAL_Delay>
    lcd_clear();
 8001f46:	f7ff ff0f 	bl	8001d68 <lcd_clear>
    mcp9808.value = 0;
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    mcp9808.value_dec = 0.0625;
 8001f52:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8001f56:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  {
 8001f5a:	e7af      	b.n	8001ebc <main+0x44>
 8001f5c:	20000328 	.word	0x20000328
 8001f60:	08009630 	.word	0x08009630
 8001f64:	20000324 	.word	0x20000324
 8001f68:	08009638 	.word	0x08009638

08001f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b094      	sub	sp, #80	; 0x50
 8001f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f72:	f107 0320 	add.w	r3, r7, #32
 8001f76:	2230      	movs	r2, #48	; 0x30
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 ff0f 	bl	8005d9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	4b27      	ldr	r3, [pc, #156]	; (8002034 <SystemClock_Config+0xc8>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	4a26      	ldr	r2, [pc, #152]	; (8002034 <SystemClock_Config+0xc8>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa0:	4b24      	ldr	r3, [pc, #144]	; (8002034 <SystemClock_Config+0xc8>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fac:	2300      	movs	r3, #0
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	4b21      	ldr	r3, [pc, #132]	; (8002038 <SystemClock_Config+0xcc>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a20      	ldr	r2, [pc, #128]	; (8002038 <SystemClock_Config+0xcc>)
 8001fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <SystemClock_Config+0xcc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001fdc:	2310      	movs	r3, #16
 8001fde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001fe0:	23c0      	movs	r3, #192	; 0xc0
 8001fe2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fe8:	2304      	movs	r3, #4
 8001fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fec:	f107 0320 	add.w	r3, r7, #32
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f002 faf5 	bl	80045e0 <HAL_RCC_OscConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ffc:	f000 f8ec 	bl	80021d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002000:	230f      	movs	r3, #15
 8002002:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002004:	2302      	movs	r3, #2
 8002006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800200c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	2103      	movs	r1, #3
 800201c:	4618      	mov	r0, r3
 800201e:	f002 fd57 	bl	8004ad0 <HAL_RCC_ClockConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002028:	f000 f8d6 	bl	80021d8 <Error_Handler>
  }
}
 800202c:	bf00      	nop
 800202e:	3750      	adds	r7, #80	; 0x50
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000

0800203c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <MX_I2C1_Init+0x50>)
 8002042:	4a13      	ldr	r2, [pc, #76]	; (8002090 <MX_I2C1_Init+0x54>)
 8002044:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_I2C1_Init+0x50>)
 8002048:	4a12      	ldr	r2, [pc, #72]	; (8002094 <MX_I2C1_Init+0x58>)
 800204a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <MX_I2C1_Init+0x50>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_I2C1_Init+0x50>)
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_I2C1_Init+0x50>)
 800205a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800205e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <MX_I2C1_Init+0x50>)
 8002062:	2200      	movs	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_I2C1_Init+0x50>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800206c:	4b07      	ldr	r3, [pc, #28]	; (800208c <MX_I2C1_Init+0x50>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_I2C1_Init+0x50>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002078:	4804      	ldr	r0, [pc, #16]	; (800208c <MX_I2C1_Init+0x50>)
 800207a:	f000 fe7d 	bl	8002d78 <HAL_I2C_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002084:	f000 f8a8 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000228 	.word	0x20000228
 8002090:	40005400 	.word	0x40005400
 8002094:	000186a0 	.word	0x000186a0

08002098 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <MX_I2C2_Init+0x50>)
 800209e:	4a13      	ldr	r2, [pc, #76]	; (80020ec <MX_I2C2_Init+0x54>)
 80020a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <MX_I2C2_Init+0x50>)
 80020a4:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <MX_I2C2_Init+0x58>)
 80020a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <MX_I2C2_Init+0x50>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <MX_I2C2_Init+0x50>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <MX_I2C2_Init+0x50>)
 80020b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <MX_I2C2_Init+0x50>)
 80020be:	2200      	movs	r2, #0
 80020c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <MX_I2C2_Init+0x50>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020c8:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <MX_I2C2_Init+0x50>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <MX_I2C2_Init+0x50>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <MX_I2C2_Init+0x50>)
 80020d6:	f000 fe4f 	bl	8002d78 <HAL_I2C_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80020e0:	f000 f87a 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2000027c 	.word	0x2000027c
 80020ec:	40005800 	.word	0x40005800
 80020f0:	000186a0 	.word	0x000186a0

080020f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <MX_I2C3_Init+0x50>)
 80020fa:	4a13      	ldr	r2, [pc, #76]	; (8002148 <MX_I2C3_Init+0x54>)
 80020fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <MX_I2C3_Init+0x50>)
 8002100:	4a12      	ldr	r2, [pc, #72]	; (800214c <MX_I2C3_Init+0x58>)
 8002102:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <MX_I2C3_Init+0x50>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <MX_I2C3_Init+0x50>)
 800210c:	2200      	movs	r2, #0
 800210e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <MX_I2C3_Init+0x50>)
 8002112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002116:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <MX_I2C3_Init+0x50>)
 800211a:	2200      	movs	r2, #0
 800211c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <MX_I2C3_Init+0x50>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <MX_I2C3_Init+0x50>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <MX_I2C3_Init+0x50>)
 800212c:	2200      	movs	r2, #0
 800212e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002130:	4804      	ldr	r0, [pc, #16]	; (8002144 <MX_I2C3_Init+0x50>)
 8002132:	f000 fe21 	bl	8002d78 <HAL_I2C_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800213c:	f000 f84c 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200002d0 	.word	0x200002d0
 8002148:	40005c00 	.word	0x40005c00
 800214c:	000186a0 	.word	0x000186a0

08002150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <MX_GPIO_Init+0x84>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a1d      	ldr	r2, [pc, #116]	; (80021d4 <MX_GPIO_Init+0x84>)
 8002160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <MX_GPIO_Init+0x84>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <MX_GPIO_Init+0x84>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <MX_GPIO_Init+0x84>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <MX_GPIO_Init+0x84>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <MX_GPIO_Init+0x84>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <MX_GPIO_Init+0x84>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <MX_GPIO_Init+0x84>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <MX_GPIO_Init+0x84>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <MX_GPIO_Init+0x84>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <MX_GPIO_Init+0x84>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800

080021d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021dc:	b672      	cpsid	i
}
 80021de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <Error_Handler+0x8>

080021e2 <mcp9808_init>:
 */

#include "mcp9808.h"
extern I2C_HandleTypeDef hi2c2;

MCP9808_HandleTypeDef mcp9808_init(){
 80021e2:	b490      	push	{r4, r7}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
	MCP9808_HandleTypeDef mcp9808;
	mcp9808.value = 0;
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
	mcp9808.temp_reg = 0x05u;
 80021f0:	2305      	movs	r3, #5
 80021f2:	753b      	strb	r3, [r7, #20]
	mcp9808.value_dec = 0.0625;
 80021f4:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 80021f8:	613b      	str	r3, [r7, #16]
	return mcp9808;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	461c      	mov	r4, r3
 80021fe:	f107 030c 	add.w	r3, r7, #12
 8002202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bc90      	pop	{r4, r7}
 8002212:	4770      	bx	lr

08002214 <mcp9808_read_temp>:

float mcp9808_read_temp(MCP9808_HandleTypeDef *mcp9808){
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af02      	add	r7, sp, #8
 800221a:	6078      	str	r0, [r7, #4]
	  HAL_I2C_Master_Transmit(&hi2c2, MCP9808_DEFAULT_ADDRESS, &mcp9808->temp_reg, 1, 2000);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f103 0208 	add.w	r2, r3, #8
 8002222:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2301      	movs	r3, #1
 800222a:	2130      	movs	r1, #48	; 0x30
 800222c:	4835      	ldr	r0, [pc, #212]	; (8002304 <mcp9808_read_temp+0xf0>)
 800222e:	f000 fee7 	bl	8003000 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c2, MCP9808_DEFAULT_ADDRESS | 0x01, mcp9808->data, 2, 2000);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f103 0209 	add.w	r2, r3, #9
 8002238:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2302      	movs	r3, #2
 8002240:	2131      	movs	r1, #49	; 0x31
 8002242:	4830      	ldr	r0, [pc, #192]	; (8002304 <mcp9808_read_temp+0xf0>)
 8002244:	f000 ffda 	bl	80031fc <HAL_I2C_Master_Receive>
	  for (int i = 0; i < 8; i++){
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e023      	b.n	8002296 <mcp9808_read_temp+0x82>
		  mcp9808->value += ((mcp9808->data[1] >> i) & 0x00000001) * mcp9808->value_dec;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	ed93 7a00 	vldr	s14, [r3]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7a9b      	ldrb	r3, [r3, #10]
 8002258:	461a      	mov	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	fa42 f303 	asr.w	r3, r2, r3
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	edc3 7a00 	vstr	s15, [r3]
		  mcp9808->value_dec *= 2u;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	edd3 7a01 	vldr	s15, [r3, #4]
 8002286:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	edc3 7a01 	vstr	s15, [r3, #4]
	  for (int i = 0; i < 8; i++){
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3301      	adds	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b07      	cmp	r3, #7
 800229a:	ddd8      	ble.n	800224e <mcp9808_read_temp+0x3a>
	  }
	  for (int i = 0; i < 4; i++){
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	e023      	b.n	80022ea <mcp9808_read_temp+0xd6>
		  mcp9808->value += ((mcp9808->data[0] >> i) & 0x00000001) * mcp9808->value_dec;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	ed93 7a00 	vldr	s14, [r3]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7a5b      	ldrb	r3, [r3, #9]
 80022ac:	461a      	mov	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	fa42 f303 	asr.w	r3, r2, r3
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	ee07 3a90 	vmov	s15, r3
 80022bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80022c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	edc3 7a00 	vstr	s15, [r3]
		  mcp9808->value_dec *= 2u;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80022da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	edc3 7a01 	vstr	s15, [r3, #4]
	  for (int i = 0; i < 4; i++){
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	3301      	adds	r3, #1
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	ddd8      	ble.n	80022a2 <mcp9808_read_temp+0x8e>
	  }
	  return mcp9808->value;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	ee07 3a90 	vmov	s15, r3
	}
 80022f8:	eeb0 0a67 	vmov.f32	s0, s15
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2000027c 	.word	0x2000027c

08002308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <HAL_MspInit+0x4c>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4a0f      	ldr	r2, [pc, #60]	; (8002354 <HAL_MspInit+0x4c>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231c:	6453      	str	r3, [r2, #68]	; 0x44
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HAL_MspInit+0x4c>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_MspInit+0x4c>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a08      	ldr	r2, [pc, #32]	; (8002354 <HAL_MspInit+0x4c>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_MspInit+0x4c>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08e      	sub	sp, #56	; 0x38
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a63      	ldr	r2, [pc, #396]	; (8002504 <HAL_I2C_MspInit+0x1ac>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d12c      	bne.n	80023d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
 800237e:	4b62      	ldr	r3, [pc, #392]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a61      	ldr	r2, [pc, #388]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b5f      	ldr	r3, [pc, #380]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	623b      	str	r3, [r7, #32]
 8002394:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002396:	23c0      	movs	r3, #192	; 0xc0
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800239a:	2312      	movs	r3, #18
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023a6:	2304      	movs	r3, #4
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ae:	4619      	mov	r1, r3
 80023b0:	4856      	ldr	r0, [pc, #344]	; (800250c <HAL_I2C_MspInit+0x1b4>)
 80023b2:	f000 fb5d 	bl	8002a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	4b53      	ldr	r3, [pc, #332]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	4a52      	ldr	r2, [pc, #328]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 80023c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023c4:	6413      	str	r3, [r2, #64]	; 0x40
 80023c6:	4b50      	ldr	r3, [pc, #320]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80023d2:	e093      	b.n	80024fc <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a4d      	ldr	r2, [pc, #308]	; (8002510 <HAL_I2C_MspInit+0x1b8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d13d      	bne.n	800245a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	4b49      	ldr	r3, [pc, #292]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a48      	ldr	r2, [pc, #288]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b46      	ldr	r3, [pc, #280]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002400:	2312      	movs	r3, #18
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002408:	2303      	movs	r3, #3
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800240c:	2304      	movs	r3, #4
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	4619      	mov	r1, r3
 8002416:	483d      	ldr	r0, [pc, #244]	; (800250c <HAL_I2C_MspInit+0x1b4>)
 8002418:	f000 fb2a 	bl	8002a70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800241c:	2308      	movs	r3, #8
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002420:	2312      	movs	r3, #18
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002428:	2303      	movs	r3, #3
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800242c:	2309      	movs	r3, #9
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002434:	4619      	mov	r1, r3
 8002436:	4835      	ldr	r0, [pc, #212]	; (800250c <HAL_I2C_MspInit+0x1b4>)
 8002438:	f000 fb1a 	bl	8002a70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	4b31      	ldr	r3, [pc, #196]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	4a30      	ldr	r2, [pc, #192]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 8002446:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800244a:	6413      	str	r3, [r2, #64]	; 0x40
 800244c:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	697b      	ldr	r3, [r7, #20]
}
 8002458:	e050      	b.n	80024fc <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a2d      	ldr	r2, [pc, #180]	; (8002514 <HAL_I2C_MspInit+0x1bc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d14b      	bne.n	80024fc <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002464:	2300      	movs	r3, #0
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	4a26      	ldr	r2, [pc, #152]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6313      	str	r3, [r2, #48]	; 0x30
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	4b20      	ldr	r3, [pc, #128]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	4a1f      	ldr	r2, [pc, #124]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6313      	str	r3, [r2, #48]	; 0x30
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800249c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a2:	2312      	movs	r3, #18
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024ae:	2304      	movs	r3, #4
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b6:	4619      	mov	r1, r3
 80024b8:	4817      	ldr	r0, [pc, #92]	; (8002518 <HAL_I2C_MspInit+0x1c0>)
 80024ba:	f000 fad9 	bl	8002a70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c4:	2312      	movs	r3, #18
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024cc:	2303      	movs	r3, #3
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024d0:	2304      	movs	r3, #4
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d8:	4619      	mov	r1, r3
 80024da:	4810      	ldr	r0, [pc, #64]	; (800251c <HAL_I2C_MspInit+0x1c4>)
 80024dc:	f000 fac8 	bl	8002a70 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	4a07      	ldr	r2, [pc, #28]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 80024ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024ee:	6413      	str	r3, [r2, #64]	; 0x40
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_I2C_MspInit+0x1b0>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
}
 80024fc:	bf00      	nop
 80024fe:	3738      	adds	r7, #56	; 0x38
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40005400 	.word	0x40005400
 8002508:	40023800 	.word	0x40023800
 800250c:	40020400 	.word	0x40020400
 8002510:	40005800 	.word	0x40005800
 8002514:	40005c00 	.word	0x40005c00
 8002518:	40020800 	.word	0x40020800
 800251c:	40020000 	.word	0x40020000

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <NMI_Handler+0x4>

08002526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <HardFault_Handler+0x4>

0800252c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <MemManage_Handler+0x4>

08002532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002536:	e7fe      	b.n	8002536 <BusFault_Handler+0x4>

08002538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800253c:	e7fe      	b.n	800253c <UsageFault_Handler+0x4>

0800253e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256c:	f000 f956 	bl	800281c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}

08002574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return 1;
 8002578:	2301      	movs	r3, #1
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <_kill>:

int _kill(int pid, int sig)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800258e:	f003 fc59 	bl	8005e44 <__errno>
 8002592:	4603      	mov	r3, r0
 8002594:	2216      	movs	r2, #22
 8002596:	601a      	str	r2, [r3, #0]
  return -1;
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <_exit>:

void _exit (int status)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ffe7 	bl	8002584 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025b6:	e7fe      	b.n	80025b6 <_exit+0x12>

080025b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	e00a      	b.n	80025e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025ca:	f3af 8000 	nop.w
 80025ce:	4601      	mov	r1, r0
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	60ba      	str	r2, [r7, #8]
 80025d6:	b2ca      	uxtb	r2, r1
 80025d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	dbf0      	blt.n	80025ca <_read+0x12>
  }

  return len;
 80025e8:	687b      	ldr	r3, [r7, #4]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e009      	b.n	8002618 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	60ba      	str	r2, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	dbf1      	blt.n	8002604 <_write+0x12>
  }
  return len;
 8002620:	687b      	ldr	r3, [r7, #4]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_close>:

int _close(int file)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002652:	605a      	str	r2, [r3, #4]
  return 0;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <_isatty>:

int _isatty(int file)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800266a:	2301      	movs	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <_sbrk+0x5c>)
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <_sbrk+0x60>)
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a8:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <_sbrk+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <_sbrk+0x64>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <_sbrk+0x68>)
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d207      	bcs.n	80026d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c4:	f003 fbbe 	bl	8005e44 <__errno>
 80026c8:	4603      	mov	r3, r0
 80026ca:	220c      	movs	r2, #12
 80026cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	e009      	b.n	80026e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <_sbrk+0x64>)
 80026e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20020000 	.word	0x20020000
 80026f4:	00000400 	.word	0x00000400
 80026f8:	20000330 	.word	0x20000330
 80026fc:	20000488 	.word	0x20000488

08002700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <SystemInit+0x20>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <SystemInit+0x20>)
 800270c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800275c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002728:	480d      	ldr	r0, [pc, #52]	; (8002760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800272a:	490e      	ldr	r1, [pc, #56]	; (8002764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800272c:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002730:	e002      	b.n	8002738 <LoopCopyDataInit>

08002732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002736:	3304      	adds	r3, #4

08002738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800273c:	d3f9      	bcc.n	8002732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273e:	4a0b      	ldr	r2, [pc, #44]	; (800276c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002740:	4c0b      	ldr	r4, [pc, #44]	; (8002770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002744:	e001      	b.n	800274a <LoopFillZerobss>

08002746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002748:	3204      	adds	r2, #4

0800274a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800274c:	d3fb      	bcc.n	8002746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800274e:	f7ff ffd7 	bl	8002700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002752:	f003 fb7d 	bl	8005e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002756:	f7ff fb8f 	bl	8001e78 <main>
  bx  lr    
 800275a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800275c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002764:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002768:	08009a90 	.word	0x08009a90
  ldr r2, =_sbss
 800276c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002770:	20000484 	.word	0x20000484

08002774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC_IRQHandler>
	...

08002778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <HAL_Init+0x40>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0d      	ldr	r2, [pc, #52]	; (80027b8 <HAL_Init+0x40>)
 8002782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <HAL_Init+0x40>)
 800278e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <HAL_Init+0x40>)
 800279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a0:	2003      	movs	r0, #3
 80027a2:	f000 f931 	bl	8002a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027a6:	200f      	movs	r0, #15
 80027a8:	f000 f808 	bl	80027bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ac:	f7ff fdac 	bl	8002308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023c00 	.word	0x40023c00

080027bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_InitTick+0x54>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_InitTick+0x58>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f93b 	bl	8002a56 <HAL_SYSTICK_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00e      	b.n	8002808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b0f      	cmp	r3, #15
 80027ee:	d80a      	bhi.n	8002806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f0:	2200      	movs	r2, #0
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	f000 f911 	bl	8002a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027fc:	4a06      	ldr	r2, [pc, #24]	; (8002818 <HAL_InitTick+0x5c>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000000 	.word	0x20000000
 8002814:	20000008 	.word	0x20000008
 8002818:	20000004 	.word	0x20000004

0800281c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_IncTick+0x20>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x24>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_IncTick+0x24>)
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000008 	.word	0x20000008
 8002840:	20000334 	.word	0x20000334

08002844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return uwTick;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_GetTick+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000334 	.word	0x20000334

0800285c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff ffee 	bl	8002844 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d005      	beq.n	8002882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_Delay+0x44>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002882:	bf00      	nop
 8002884:	f7ff ffde 	bl	8002844 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	429a      	cmp	r2, r3
 8002892:	d8f7      	bhi.n	8002884 <HAL_Delay+0x28>
  {
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000008 	.word	0x20000008

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002918:	2b00      	cmp	r3, #0
 800291a:	db0a      	blt.n	8002932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	490c      	ldr	r1, [pc, #48]	; (8002954 <__NVIC_SetPriority+0x4c>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	0112      	lsls	r2, r2, #4
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	440b      	add	r3, r1
 800292c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002930:	e00a      	b.n	8002948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4908      	ldr	r1, [pc, #32]	; (8002958 <__NVIC_SetPriority+0x50>)
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	3b04      	subs	r3, #4
 8002940:	0112      	lsls	r2, r2, #4
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	440b      	add	r3, r1
 8002946:	761a      	strb	r2, [r3, #24]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000e100 	.word	0xe000e100
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f1c3 0307 	rsb	r3, r3, #7
 8002976:	2b04      	cmp	r3, #4
 8002978:	bf28      	it	cs
 800297a:	2304      	movcs	r3, #4
 800297c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3304      	adds	r3, #4
 8002982:	2b06      	cmp	r3, #6
 8002984:	d902      	bls.n	800298c <NVIC_EncodePriority+0x30>
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3b03      	subs	r3, #3
 800298a:	e000      	b.n	800298e <NVIC_EncodePriority+0x32>
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	f04f 32ff 	mov.w	r2, #4294967295
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43da      	mvns	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	401a      	ands	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a4:	f04f 31ff 	mov.w	r1, #4294967295
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	43d9      	mvns	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	4313      	orrs	r3, r2
         );
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3724      	adds	r7, #36	; 0x24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d4:	d301      	bcc.n	80029da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00f      	b.n	80029fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <SysTick_Config+0x40>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e2:	210f      	movs	r1, #15
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f7ff ff8e 	bl	8002908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <SysTick_Config+0x40>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f2:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <SysTick_Config+0x40>)
 80029f4:	2207      	movs	r2, #7
 80029f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	e000e010 	.word	0xe000e010

08002a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff47 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a30:	f7ff ff5c 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff ff8e 	bl	800295c <NVIC_EncodePriority>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff5d 	bl	8002908 <__NVIC_SetPriority>
}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffb0 	bl	80029c4 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	e159      	b.n	8002d40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	f040 8148 	bne.w	8002d3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d005      	beq.n	8002ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d130      	bne.n	8002b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 0201 	and.w	r2, r3, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d017      	beq.n	8002b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d123      	bne.n	8002bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	08da      	lsrs	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3208      	adds	r2, #8
 8002b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	220f      	movs	r2, #15
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	08da      	lsrs	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3208      	adds	r2, #8
 8002bae:	69b9      	ldr	r1, [r7, #24]
 8002bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0203 	and.w	r2, r3, #3
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80a2 	beq.w	8002d3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b57      	ldr	r3, [pc, #348]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	4a56      	ldr	r2, [pc, #344]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c04:	6453      	str	r3, [r2, #68]	; 0x44
 8002c06:	4b54      	ldr	r3, [pc, #336]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c12:	4a52      	ldr	r2, [pc, #328]	; (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	220f      	movs	r2, #15
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a49      	ldr	r2, [pc, #292]	; (8002d60 <HAL_GPIO_Init+0x2f0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d019      	beq.n	8002c72 <HAL_GPIO_Init+0x202>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a48      	ldr	r2, [pc, #288]	; (8002d64 <HAL_GPIO_Init+0x2f4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_GPIO_Init+0x1fe>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a47      	ldr	r2, [pc, #284]	; (8002d68 <HAL_GPIO_Init+0x2f8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_GPIO_Init+0x1fa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a46      	ldr	r2, [pc, #280]	; (8002d6c <HAL_GPIO_Init+0x2fc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x1f6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a45      	ldr	r2, [pc, #276]	; (8002d70 <HAL_GPIO_Init+0x300>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_GPIO_Init+0x1f2>
 8002c5e:	2304      	movs	r3, #4
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c62:	2307      	movs	r3, #7
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c84:	4935      	ldr	r1, [pc, #212]	; (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c92:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cbc:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce0:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ce6:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d34:	4a0f      	ldr	r2, [pc, #60]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f aea2 	bls.w	8002a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40013c00 	.word	0x40013c00

08002d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e12b      	b.n	8002fe2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff fada 	bl	8002358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2224      	movs	r2, #36	; 0x24
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ddc:	f002 f830 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8002de0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a81      	ldr	r2, [pc, #516]	; (8002fec <HAL_I2C_Init+0x274>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d807      	bhi.n	8002dfc <HAL_I2C_Init+0x84>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a80      	ldr	r2, [pc, #512]	; (8002ff0 <HAL_I2C_Init+0x278>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	bf94      	ite	ls
 8002df4:	2301      	movls	r3, #1
 8002df6:	2300      	movhi	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	e006      	b.n	8002e0a <HAL_I2C_Init+0x92>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a7d      	ldr	r2, [pc, #500]	; (8002ff4 <HAL_I2C_Init+0x27c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	bf94      	ite	ls
 8002e04:	2301      	movls	r3, #1
 8002e06:	2300      	movhi	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0e7      	b.n	8002fe2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a78      	ldr	r2, [pc, #480]	; (8002ff8 <HAL_I2C_Init+0x280>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	0c9b      	lsrs	r3, r3, #18
 8002e1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a6a      	ldr	r2, [pc, #424]	; (8002fec <HAL_I2C_Init+0x274>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d802      	bhi.n	8002e4c <HAL_I2C_Init+0xd4>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	e009      	b.n	8002e60 <HAL_I2C_Init+0xe8>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	4a69      	ldr	r2, [pc, #420]	; (8002ffc <HAL_I2C_Init+0x284>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	3301      	adds	r3, #1
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	495c      	ldr	r1, [pc, #368]	; (8002fec <HAL_I2C_Init+0x274>)
 8002e7c:	428b      	cmp	r3, r1
 8002e7e:	d819      	bhi.n	8002eb4 <HAL_I2C_Init+0x13c>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1e59      	subs	r1, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e8e:	1c59      	adds	r1, r3, #1
 8002e90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e94:	400b      	ands	r3, r1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_I2C_Init+0x138>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1e59      	subs	r1, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eae:	e051      	b.n	8002f54 <HAL_I2C_Init+0x1dc>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	e04f      	b.n	8002f54 <HAL_I2C_Init+0x1dc>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d111      	bne.n	8002ee0 <HAL_I2C_Init+0x168>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e58      	subs	r0, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	440b      	add	r3, r1
 8002eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	e012      	b.n	8002f06 <HAL_I2C_Init+0x18e>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1e58      	subs	r0, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	0099      	lsls	r1, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_I2C_Init+0x196>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e022      	b.n	8002f54 <HAL_I2C_Init+0x1dc>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10e      	bne.n	8002f34 <HAL_I2C_Init+0x1bc>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1e58      	subs	r0, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6859      	ldr	r1, [r3, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	440b      	add	r3, r1
 8002f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f32:	e00f      	b.n	8002f54 <HAL_I2C_Init+0x1dc>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1e58      	subs	r0, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	0099      	lsls	r1, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	6809      	ldr	r1, [r1, #0]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6911      	ldr	r1, [r2, #16]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68d2      	ldr	r2, [r2, #12]
 8002f8e:	4311      	orrs	r1, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	000186a0 	.word	0x000186a0
 8002ff0:	001e847f 	.word	0x001e847f
 8002ff4:	003d08ff 	.word	0x003d08ff
 8002ff8:	431bde83 	.word	0x431bde83
 8002ffc:	10624dd3 	.word	0x10624dd3

08003000 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	461a      	mov	r2, r3
 800300c:	460b      	mov	r3, r1
 800300e:	817b      	strh	r3, [r7, #10]
 8003010:	4613      	mov	r3, r2
 8003012:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003014:	f7ff fc16 	bl	8002844 <HAL_GetTick>
 8003018:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b20      	cmp	r3, #32
 8003024:	f040 80e0 	bne.w	80031e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	2319      	movs	r3, #25
 800302e:	2201      	movs	r2, #1
 8003030:	4970      	ldr	r1, [pc, #448]	; (80031f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f001 f8f6 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800303e:	2302      	movs	r3, #2
 8003040:	e0d3      	b.n	80031ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_I2C_Master_Transmit+0x50>
 800304c:	2302      	movs	r3, #2
 800304e:	e0cc      	b.n	80031ea <HAL_I2C_Master_Transmit+0x1ea>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b01      	cmp	r3, #1
 8003064:	d007      	beq.n	8003076 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0201 	orr.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003084:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2221      	movs	r2, #33	; 0x21
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2210      	movs	r2, #16
 8003092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	893a      	ldrh	r2, [r7, #8]
 80030a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4a50      	ldr	r2, [pc, #320]	; (80031f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030b8:	8979      	ldrh	r1, [r7, #10]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fde2 	bl	8003c88 <I2C_MasterRequestWrite>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e08d      	b.n	80031ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030e4:	e066      	b.n	80031b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	6a39      	ldr	r1, [r7, #32]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f001 f970 	bl	80043d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d107      	bne.n	800310e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e06b      	b.n	80031ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b04      	cmp	r3, #4
 800314e:	d11b      	bne.n	8003188 <HAL_I2C_Master_Transmit+0x188>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d017      	beq.n	8003188 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	781a      	ldrb	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	6a39      	ldr	r1, [r7, #32]
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f001 f960 	bl	8004452 <I2C_WaitOnBTFFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00d      	beq.n	80031b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2b04      	cmp	r3, #4
 800319e:	d107      	bne.n	80031b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e01a      	b.n	80031ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d194      	bne.n	80030e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e000      	b.n	80031ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
  }
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	00100002 	.word	0x00100002
 80031f8:	ffff0000 	.word	0xffff0000

080031fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08c      	sub	sp, #48	; 0x30
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	461a      	mov	r2, r3
 8003208:	460b      	mov	r3, r1
 800320a:	817b      	strh	r3, [r7, #10]
 800320c:	4613      	mov	r3, r2
 800320e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003210:	f7ff fb18 	bl	8002844 <HAL_GetTick>
 8003214:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b20      	cmp	r3, #32
 8003220:	f040 820b 	bne.w	800363a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2319      	movs	r3, #25
 800322a:	2201      	movs	r2, #1
 800322c:	497c      	ldr	r1, [pc, #496]	; (8003420 <HAL_I2C_Master_Receive+0x224>)
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fff8 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800323a:	2302      	movs	r3, #2
 800323c:	e1fe      	b.n	800363c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_I2C_Master_Receive+0x50>
 8003248:	2302      	movs	r3, #2
 800324a:	e1f7      	b.n	800363c <HAL_I2C_Master_Receive+0x440>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b01      	cmp	r3, #1
 8003260:	d007      	beq.n	8003272 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0201 	orr.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003280:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2222      	movs	r2, #34	; 0x22
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2210      	movs	r2, #16
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	893a      	ldrh	r2, [r7, #8]
 80032a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a5c      	ldr	r2, [pc, #368]	; (8003424 <HAL_I2C_Master_Receive+0x228>)
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032b4:	8979      	ldrh	r1, [r7, #10]
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fd66 	bl	8003d8c <I2C_MasterRequestRead>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e1b8      	b.n	800363c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d113      	bne.n	80032fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d2:	2300      	movs	r3, #0
 80032d4:	623b      	str	r3, [r7, #32]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	623b      	str	r3, [r7, #32]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	623b      	str	r3, [r7, #32]
 80032e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e18c      	b.n	8003614 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d11b      	bne.n	800333a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003310:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e16c      	b.n	8003614 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	2b02      	cmp	r3, #2
 8003340:	d11b      	bne.n	800337a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003350:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003360:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	e14c      	b.n	8003614 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003388:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033a0:	e138      	b.n	8003614 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	f200 80f1 	bhi.w	800358e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d123      	bne.n	80033fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f001 f88b 	bl	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e139      	b.n	800363c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033fa:	e10b      	b.n	8003614 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003400:	2b02      	cmp	r3, #2
 8003402:	d14e      	bne.n	80034a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	2200      	movs	r2, #0
 800340c:	4906      	ldr	r1, [pc, #24]	; (8003428 <HAL_I2C_Master_Receive+0x22c>)
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 ff08 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e10e      	b.n	800363c <HAL_I2C_Master_Receive+0x440>
 800341e:	bf00      	nop
 8003420:	00100002 	.word	0x00100002
 8003424:	ffff0000 	.word	0xffff0000
 8003428:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034a0:	e0b8      	b.n	8003614 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	2200      	movs	r2, #0
 80034aa:	4966      	ldr	r1, [pc, #408]	; (8003644 <HAL_I2C_Master_Receive+0x448>)
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 feb9 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0bf      	b.n	800363c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	2200      	movs	r2, #0
 8003506:	494f      	ldr	r1, [pc, #316]	; (8003644 <HAL_I2C_Master_Receive+0x448>)
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fe8b 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e091      	b.n	800363c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800358c:	e042      	b.n	8003614 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003590:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 ff9e 	bl	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e04c      	b.n	800363c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d118      	bne.n	8003614 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	f47f aec2 	bne.w	80033a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	e000      	b.n	800363c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800363a:	2302      	movs	r3, #2
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	3728      	adds	r7, #40	; 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	00010004 	.word	0x00010004

08003648 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	461a      	mov	r2, r3
 8003656:	4603      	mov	r3, r0
 8003658:	817b      	strh	r3, [r7, #10]
 800365a:	460b      	mov	r3, r1
 800365c:	813b      	strh	r3, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003662:	f7ff f8ef 	bl	8002844 <HAL_GetTick>
 8003666:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b20      	cmp	r3, #32
 8003672:	f040 80d9 	bne.w	8003828 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	2319      	movs	r3, #25
 800367c:	2201      	movs	r2, #1
 800367e:	496d      	ldr	r1, [pc, #436]	; (8003834 <HAL_I2C_Mem_Write+0x1ec>)
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 fdcf 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800368c:	2302      	movs	r3, #2
 800368e:	e0cc      	b.n	800382a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_I2C_Mem_Write+0x56>
 800369a:	2302      	movs	r3, #2
 800369c:	e0c5      	b.n	800382a <HAL_I2C_Mem_Write+0x1e2>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d007      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2221      	movs	r2, #33	; 0x21
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a3a      	ldr	r2, [r7, #32]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a4d      	ldr	r2, [pc, #308]	; (8003838 <HAL_I2C_Mem_Write+0x1f0>)
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003706:	88f8      	ldrh	r0, [r7, #6]
 8003708:	893a      	ldrh	r2, [r7, #8]
 800370a:	8979      	ldrh	r1, [r7, #10]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	4603      	mov	r3, r0
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fc06 	bl	8003f28 <I2C_RequestMemoryWrite>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d052      	beq.n	80037c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e081      	b.n	800382a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fe50 	bl	80043d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b04      	cmp	r3, #4
 800373c:	d107      	bne.n	800374e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e06b      	b.n	800382a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	781a      	ldrb	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b04      	cmp	r3, #4
 800378e:	d11b      	bne.n	80037c8 <HAL_I2C_Mem_Write+0x180>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003794:	2b00      	cmp	r3, #0
 8003796:	d017      	beq.n	80037c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1aa      	bne.n	8003726 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fe3c 	bl	8004452 <I2C_WaitOnBTFFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d107      	bne.n	80037f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e016      	b.n	800382a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	e000      	b.n	800382a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003828:	2302      	movs	r3, #2
  }
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	00100002 	.word	0x00100002
 8003838:	ffff0000 	.word	0xffff0000

0800383c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08c      	sub	sp, #48	; 0x30
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	461a      	mov	r2, r3
 800384a:	4603      	mov	r3, r0
 800384c:	817b      	strh	r3, [r7, #10]
 800384e:	460b      	mov	r3, r1
 8003850:	813b      	strh	r3, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003856:	f7fe fff5 	bl	8002844 <HAL_GetTick>
 800385a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b20      	cmp	r3, #32
 8003866:	f040 8208 	bne.w	8003c7a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	2319      	movs	r3, #25
 8003870:	2201      	movs	r2, #1
 8003872:	497b      	ldr	r1, [pc, #492]	; (8003a60 <HAL_I2C_Mem_Read+0x224>)
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fcd5 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
 8003882:	e1fb      	b.n	8003c7c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_I2C_Mem_Read+0x56>
 800388e:	2302      	movs	r3, #2
 8003890:	e1f4      	b.n	8003c7c <HAL_I2C_Mem_Read+0x440>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d007      	beq.n	80038b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2222      	movs	r2, #34	; 0x22
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2240      	movs	r2, #64	; 0x40
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80038e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a5b      	ldr	r2, [pc, #364]	; (8003a64 <HAL_I2C_Mem_Read+0x228>)
 80038f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038fa:	88f8      	ldrh	r0, [r7, #6]
 80038fc:	893a      	ldrh	r2, [r7, #8]
 80038fe:	8979      	ldrh	r1, [r7, #10]
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	4603      	mov	r3, r0
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fba2 	bl	8004054 <I2C_RequestMemoryRead>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e1b0      	b.n	8003c7c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391e:	2b00      	cmp	r3, #0
 8003920:	d113      	bne.n	800394a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003922:	2300      	movs	r3, #0
 8003924:	623b      	str	r3, [r7, #32]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	623b      	str	r3, [r7, #32]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	623b      	str	r3, [r7, #32]
 8003936:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	e184      	b.n	8003c54 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394e:	2b01      	cmp	r3, #1
 8003950:	d11b      	bne.n	800398a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e164      	b.n	8003c54 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	2b02      	cmp	r3, #2
 8003990:	d11b      	bne.n	80039ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	e144      	b.n	8003c54 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039e0:	e138      	b.n	8003c54 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	f200 80f1 	bhi.w	8003bce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d123      	bne.n	8003a3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fd6b 	bl	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e139      	b.n	8003c7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a3a:	e10b      	b.n	8003c54 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d14e      	bne.n	8003ae2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	4906      	ldr	r1, [pc, #24]	; (8003a68 <HAL_I2C_Mem_Read+0x22c>)
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fbe8 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e10e      	b.n	8003c7c <HAL_I2C_Mem_Read+0x440>
 8003a5e:	bf00      	nop
 8003a60:	00100002 	.word	0x00100002
 8003a64:	ffff0000 	.word	0xffff0000
 8003a68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ae0:	e0b8      	b.n	8003c54 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4966      	ldr	r1, [pc, #408]	; (8003c84 <HAL_I2C_Mem_Read+0x448>)
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fb99 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0bf      	b.n	8003c7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b44:	2200      	movs	r2, #0
 8003b46:	494f      	ldr	r1, [pc, #316]	; (8003c84 <HAL_I2C_Mem_Read+0x448>)
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fb6b 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e091      	b.n	8003c7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bcc:	e042      	b.n	8003c54 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fc7e 	bl	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e04c      	b.n	8003c7c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d118      	bne.n	8003c54 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f47f aec2 	bne.w	80039e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e000      	b.n	8003c7c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c7a:	2302      	movs	r3, #2
  }
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3728      	adds	r7, #40	; 0x28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	00010004 	.word	0x00010004

08003c88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	460b      	mov	r3, r1
 8003c96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d006      	beq.n	8003cb2 <I2C_MasterRequestWrite+0x2a>
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d003      	beq.n	8003cb2 <I2C_MasterRequestWrite+0x2a>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cb0:	d108      	bne.n	8003cc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	e00b      	b.n	8003cdc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	2b12      	cmp	r3, #18
 8003cca:	d107      	bne.n	8003cdc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fa9b 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00d      	beq.n	8003d10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d02:	d103      	bne.n	8003d0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e035      	b.n	8003d7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d18:	d108      	bne.n	8003d2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d1a:	897b      	ldrh	r3, [r7, #10]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d28:	611a      	str	r2, [r3, #16]
 8003d2a:	e01b      	b.n	8003d64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d2c:	897b      	ldrh	r3, [r7, #10]
 8003d2e:	11db      	asrs	r3, r3, #7
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f003 0306 	and.w	r3, r3, #6
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f063 030f 	orn	r3, r3, #15
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	490e      	ldr	r1, [pc, #56]	; (8003d84 <I2C_MasterRequestWrite+0xfc>)
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 fac1 	bl	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e010      	b.n	8003d7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d5a:	897b      	ldrh	r3, [r7, #10]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4907      	ldr	r1, [pc, #28]	; (8003d88 <I2C_MasterRequestWrite+0x100>)
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fab1 	bl	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	00010008 	.word	0x00010008
 8003d88:	00010002 	.word	0x00010002

08003d8c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003db0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d006      	beq.n	8003dc6 <I2C_MasterRequestRead+0x3a>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d003      	beq.n	8003dc6 <I2C_MasterRequestRead+0x3a>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dc4:	d108      	bne.n	8003dd8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e00b      	b.n	8003df0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	2b11      	cmp	r3, #17
 8003dde:	d107      	bne.n	8003df0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fa11 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00d      	beq.n	8003e24 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e16:	d103      	bne.n	8003e20 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e079      	b.n	8003f18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e2c:	d108      	bne.n	8003e40 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e2e:	897b      	ldrh	r3, [r7, #10]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	611a      	str	r2, [r3, #16]
 8003e3e:	e05f      	b.n	8003f00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e40:	897b      	ldrh	r3, [r7, #10]
 8003e42:	11db      	asrs	r3, r3, #7
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f003 0306 	and.w	r3, r3, #6
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f063 030f 	orn	r3, r3, #15
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4930      	ldr	r1, [pc, #192]	; (8003f20 <I2C_MasterRequestRead+0x194>)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fa37 	bl	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e054      	b.n	8003f18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e6e:	897b      	ldrh	r3, [r7, #10]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4929      	ldr	r1, [pc, #164]	; (8003f24 <I2C_MasterRequestRead+0x198>)
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fa27 	bl	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e044      	b.n	8003f18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f9af 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00d      	beq.n	8003ee8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eda:	d103      	bne.n	8003ee4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e017      	b.n	8003f18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ee8:	897b      	ldrh	r3, [r7, #10]
 8003eea:	11db      	asrs	r3, r3, #7
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 0306 	and.w	r3, r3, #6
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f063 030e 	orn	r3, r3, #14
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	4907      	ldr	r1, [pc, #28]	; (8003f24 <I2C_MasterRequestRead+0x198>)
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f9e3 	bl	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	00010008 	.word	0x00010008
 8003f24:	00010002 	.word	0x00010002

08003f28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	4608      	mov	r0, r1
 8003f32:	4611      	mov	r1, r2
 8003f34:	461a      	mov	r2, r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	817b      	strh	r3, [r7, #10]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	813b      	strh	r3, [r7, #8]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f960 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f78:	d103      	bne.n	8003f82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e05f      	b.n	8004046 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f86:	897b      	ldrh	r3, [r7, #10]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	6a3a      	ldr	r2, [r7, #32]
 8003f9a:	492d      	ldr	r1, [pc, #180]	; (8004050 <I2C_RequestMemoryWrite+0x128>)
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f998 	bl	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e04c      	b.n	8004046 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc4:	6a39      	ldr	r1, [r7, #32]
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fa02 	bl	80043d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d107      	bne.n	8003fea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e02b      	b.n	8004046 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d105      	bne.n	8004000 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff4:	893b      	ldrh	r3, [r7, #8]
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	611a      	str	r2, [r3, #16]
 8003ffe:	e021      	b.n	8004044 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004000:	893b      	ldrh	r3, [r7, #8]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	b29b      	uxth	r3, r3
 8004006:	b2da      	uxtb	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004010:	6a39      	ldr	r1, [r7, #32]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f9dc 	bl	80043d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00d      	beq.n	800403a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	2b04      	cmp	r3, #4
 8004024:	d107      	bne.n	8004036 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004034:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e005      	b.n	8004046 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800403a:	893b      	ldrh	r3, [r7, #8]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	00010002 	.word	0x00010002

08004054 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	4608      	mov	r0, r1
 800405e:	4611      	mov	r1, r2
 8004060:	461a      	mov	r2, r3
 8004062:	4603      	mov	r3, r0
 8004064:	817b      	strh	r3, [r7, #10]
 8004066:	460b      	mov	r3, r1
 8004068:	813b      	strh	r3, [r7, #8]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800407c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800408c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	2200      	movs	r2, #0
 8004096:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f8c2 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b4:	d103      	bne.n	80040be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e0aa      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040c2:	897b      	ldrh	r3, [r7, #10]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	4952      	ldr	r1, [pc, #328]	; (8004220 <I2C_RequestMemoryRead+0x1cc>)
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f8fa 	bl	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e097      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004100:	6a39      	ldr	r1, [r7, #32]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f964 	bl	80043d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2b04      	cmp	r3, #4
 8004114:	d107      	bne.n	8004126 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e076      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d105      	bne.n	800413c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004130:	893b      	ldrh	r3, [r7, #8]
 8004132:	b2da      	uxtb	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	611a      	str	r2, [r3, #16]
 800413a:	e021      	b.n	8004180 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800413c:	893b      	ldrh	r3, [r7, #8]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b29b      	uxth	r3, r3
 8004142:	b2da      	uxtb	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414c:	6a39      	ldr	r1, [r7, #32]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f93e 	bl	80043d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00d      	beq.n	8004176 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	2b04      	cmp	r3, #4
 8004160:	d107      	bne.n	8004172 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e050      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004176:	893b      	ldrh	r3, [r7, #8]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004182:	6a39      	ldr	r1, [r7, #32]
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f923 	bl	80043d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00d      	beq.n	80041ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	2b04      	cmp	r3, #4
 8004196:	d107      	bne.n	80041a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e035      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f82b 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00d      	beq.n	80041f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e2:	d103      	bne.n	80041ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e013      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041f0:	897b      	ldrh	r3, [r7, #10]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	6a3a      	ldr	r2, [r7, #32]
 8004204:	4906      	ldr	r1, [pc, #24]	; (8004220 <I2C_RequestMemoryRead+0x1cc>)
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f863 	bl	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	00010002 	.word	0x00010002

08004224 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004234:	e025      	b.n	8004282 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d021      	beq.n	8004282 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423e:	f7fe fb01 	bl	8002844 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d302      	bcc.n	8004254 <I2C_WaitOnFlagUntilTimeout+0x30>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d116      	bne.n	8004282 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f043 0220 	orr.w	r2, r3, #32
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e023      	b.n	80042ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	d10d      	bne.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	43da      	mvns	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4013      	ands	r3, r2
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	bf0c      	ite	eq
 800429e:	2301      	moveq	r3, #1
 80042a0:	2300      	movne	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	461a      	mov	r2, r3
 80042a6:	e00c      	b.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	43da      	mvns	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4013      	ands	r3, r2
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bf0c      	ite	eq
 80042ba:	2301      	moveq	r3, #1
 80042bc:	2300      	movne	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d0b6      	beq.n	8004236 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042e0:	e051      	b.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f0:	d123      	bne.n	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004300:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800430a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f043 0204 	orr.w	r2, r3, #4
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e046      	b.n	80043c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d021      	beq.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fe fa7f 	bl	8002844 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d116      	bne.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f043 0220 	orr.w	r2, r3, #32
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e020      	b.n	80043c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d10c      	bne.n	80043aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	43da      	mvns	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bf14      	ite	ne
 80043a2:	2301      	movne	r3, #1
 80043a4:	2300      	moveq	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	e00b      	b.n	80043c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	43da      	mvns	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4013      	ands	r3, r2
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf14      	ite	ne
 80043bc:	2301      	movne	r3, #1
 80043be:	2300      	moveq	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d18d      	bne.n	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043dc:	e02d      	b.n	800443a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f8ce 	bl	8004580 <I2C_IsAcknowledgeFailed>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e02d      	b.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d021      	beq.n	800443a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f6:	f7fe fa25 	bl	8002844 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d116      	bne.n	800443a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f043 0220 	orr.w	r2, r3, #32
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e007      	b.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004444:	2b80      	cmp	r3, #128	; 0x80
 8004446:	d1ca      	bne.n	80043de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800445e:	e02d      	b.n	80044bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f88d 	bl	8004580 <I2C_IsAcknowledgeFailed>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e02d      	b.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004476:	d021      	beq.n	80044bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004478:	f7fe f9e4 	bl	8002844 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	429a      	cmp	r2, r3
 8004486:	d302      	bcc.n	800448e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d116      	bne.n	80044bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f043 0220 	orr.w	r2, r3, #32
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e007      	b.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d1ca      	bne.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044e0:	e042      	b.n	8004568 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d119      	bne.n	8004524 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0210 	mvn.w	r2, #16
 80044f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e029      	b.n	8004578 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004524:	f7fe f98e 	bl	8002844 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	429a      	cmp	r2, r3
 8004532:	d302      	bcc.n	800453a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d116      	bne.n	8004568 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e007      	b.n	8004578 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d1b5      	bne.n	80044e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004596:	d11b      	bne.n	80045d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f043 0204 	orr.w	r2, r3, #4
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e267      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d075      	beq.n	80046ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045fe:	4b88      	ldr	r3, [pc, #544]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b04      	cmp	r3, #4
 8004608:	d00c      	beq.n	8004624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800460a:	4b85      	ldr	r3, [pc, #532]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004612:	2b08      	cmp	r3, #8
 8004614:	d112      	bne.n	800463c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004616:	4b82      	ldr	r3, [pc, #520]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004622:	d10b      	bne.n	800463c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004624:	4b7e      	ldr	r3, [pc, #504]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d05b      	beq.n	80046e8 <HAL_RCC_OscConfig+0x108>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d157      	bne.n	80046e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e242      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004644:	d106      	bne.n	8004654 <HAL_RCC_OscConfig+0x74>
 8004646:	4b76      	ldr	r3, [pc, #472]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a75      	ldr	r2, [pc, #468]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 800464c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	e01d      	b.n	8004690 <HAL_RCC_OscConfig+0xb0>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800465c:	d10c      	bne.n	8004678 <HAL_RCC_OscConfig+0x98>
 800465e:	4b70      	ldr	r3, [pc, #448]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6f      	ldr	r2, [pc, #444]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 8004664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	4b6d      	ldr	r3, [pc, #436]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a6c      	ldr	r2, [pc, #432]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e00b      	b.n	8004690 <HAL_RCC_OscConfig+0xb0>
 8004678:	4b69      	ldr	r3, [pc, #420]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a68      	ldr	r2, [pc, #416]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 800467e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	4b66      	ldr	r3, [pc, #408]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a65      	ldr	r2, [pc, #404]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 800468a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800468e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d013      	beq.n	80046c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7fe f8d4 	bl	8002844 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a0:	f7fe f8d0 	bl	8002844 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	; 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e207      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b2:	4b5b      	ldr	r3, [pc, #364]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0xc0>
 80046be:	e014      	b.n	80046ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fe f8c0 	bl	8002844 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046c8:	f7fe f8bc 	bl	8002844 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b64      	cmp	r3, #100	; 0x64
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e1f3      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046da:	4b51      	ldr	r3, [pc, #324]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0xe8>
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d063      	beq.n	80047be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046f6:	4b4a      	ldr	r3, [pc, #296]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00b      	beq.n	800471a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004702:	4b47      	ldr	r3, [pc, #284]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800470a:	2b08      	cmp	r3, #8
 800470c:	d11c      	bne.n	8004748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800470e:	4b44      	ldr	r3, [pc, #272]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d116      	bne.n	8004748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471a:	4b41      	ldr	r3, [pc, #260]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <HAL_RCC_OscConfig+0x152>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d001      	beq.n	8004732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e1c7      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004732:	4b3b      	ldr	r3, [pc, #236]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4937      	ldr	r1, [pc, #220]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 8004742:	4313      	orrs	r3, r2
 8004744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004746:	e03a      	b.n	80047be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d020      	beq.n	8004792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004750:	4b34      	ldr	r3, [pc, #208]	; (8004824 <HAL_RCC_OscConfig+0x244>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7fe f875 	bl	8002844 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800475e:	f7fe f871 	bl	8002844 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e1a8      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004770:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477c:	4b28      	ldr	r3, [pc, #160]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	4925      	ldr	r1, [pc, #148]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 800478c:	4313      	orrs	r3, r2
 800478e:	600b      	str	r3, [r1, #0]
 8004790:	e015      	b.n	80047be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004792:	4b24      	ldr	r3, [pc, #144]	; (8004824 <HAL_RCC_OscConfig+0x244>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fe f854 	bl	8002844 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047a0:	f7fe f850 	bl	8002844 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e187      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b2:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d036      	beq.n	8004838 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d016      	beq.n	8004800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047d2:	4b15      	ldr	r3, [pc, #84]	; (8004828 <HAL_RCC_OscConfig+0x248>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d8:	f7fe f834 	bl	8002844 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e0:	f7fe f830 	bl	8002844 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e167      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f2:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <HAL_RCC_OscConfig+0x240>)
 80047f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x200>
 80047fe:	e01b      	b.n	8004838 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004800:	4b09      	ldr	r3, [pc, #36]	; (8004828 <HAL_RCC_OscConfig+0x248>)
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004806:	f7fe f81d 	bl	8002844 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800480c:	e00e      	b.n	800482c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800480e:	f7fe f819 	bl	8002844 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d907      	bls.n	800482c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e150      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
 8004820:	40023800 	.word	0x40023800
 8004824:	42470000 	.word	0x42470000
 8004828:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800482c:	4b88      	ldr	r3, [pc, #544]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 800482e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ea      	bne.n	800480e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8097 	beq.w	8004974 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484a:	4b81      	ldr	r3, [pc, #516]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10f      	bne.n	8004876 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004856:	2300      	movs	r3, #0
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	4b7d      	ldr	r3, [pc, #500]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	4a7c      	ldr	r2, [pc, #496]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 8004860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004864:	6413      	str	r3, [r2, #64]	; 0x40
 8004866:	4b7a      	ldr	r3, [pc, #488]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004876:	4b77      	ldr	r3, [pc, #476]	; (8004a54 <HAL_RCC_OscConfig+0x474>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d118      	bne.n	80048b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004882:	4b74      	ldr	r3, [pc, #464]	; (8004a54 <HAL_RCC_OscConfig+0x474>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a73      	ldr	r2, [pc, #460]	; (8004a54 <HAL_RCC_OscConfig+0x474>)
 8004888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488e:	f7fd ffd9 	bl	8002844 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004896:	f7fd ffd5 	bl	8002844 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e10c      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a8:	4b6a      	ldr	r3, [pc, #424]	; (8004a54 <HAL_RCC_OscConfig+0x474>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d106      	bne.n	80048ca <HAL_RCC_OscConfig+0x2ea>
 80048bc:	4b64      	ldr	r3, [pc, #400]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c0:	4a63      	ldr	r2, [pc, #396]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6713      	str	r3, [r2, #112]	; 0x70
 80048c8:	e01c      	b.n	8004904 <HAL_RCC_OscConfig+0x324>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	d10c      	bne.n	80048ec <HAL_RCC_OscConfig+0x30c>
 80048d2:	4b5f      	ldr	r3, [pc, #380]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	4a5e      	ldr	r2, [pc, #376]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048d8:	f043 0304 	orr.w	r3, r3, #4
 80048dc:	6713      	str	r3, [r2, #112]	; 0x70
 80048de:	4b5c      	ldr	r3, [pc, #368]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	4a5b      	ldr	r2, [pc, #364]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ea:	e00b      	b.n	8004904 <HAL_RCC_OscConfig+0x324>
 80048ec:	4b58      	ldr	r3, [pc, #352]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f0:	4a57      	ldr	r2, [pc, #348]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048f2:	f023 0301 	bic.w	r3, r3, #1
 80048f6:	6713      	str	r3, [r2, #112]	; 0x70
 80048f8:	4b55      	ldr	r3, [pc, #340]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	4a54      	ldr	r2, [pc, #336]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048fe:	f023 0304 	bic.w	r3, r3, #4
 8004902:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d015      	beq.n	8004938 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490c:	f7fd ff9a 	bl	8002844 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004912:	e00a      	b.n	800492a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004914:	f7fd ff96 	bl	8002844 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e0cb      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492a:	4b49      	ldr	r3, [pc, #292]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 800492c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0ee      	beq.n	8004914 <HAL_RCC_OscConfig+0x334>
 8004936:	e014      	b.n	8004962 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004938:	f7fd ff84 	bl	8002844 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800493e:	e00a      	b.n	8004956 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004940:	f7fd ff80 	bl	8002844 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	; 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e0b5      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004956:	4b3e      	ldr	r3, [pc, #248]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1ee      	bne.n	8004940 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d105      	bne.n	8004974 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004968:	4b39      	ldr	r3, [pc, #228]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	4a38      	ldr	r2, [pc, #224]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 800496e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004972:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80a1 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800497e:	4b34      	ldr	r3, [pc, #208]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b08      	cmp	r3, #8
 8004988:	d05c      	beq.n	8004a44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d141      	bne.n	8004a16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004992:	4b31      	ldr	r3, [pc, #196]	; (8004a58 <HAL_RCC_OscConfig+0x478>)
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004998:	f7fd ff54 	bl	8002844 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a0:	f7fd ff50 	bl	8002844 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e087      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b2:	4b27      	ldr	r3, [pc, #156]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f0      	bne.n	80049a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69da      	ldr	r2, [r3, #28]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	019b      	lsls	r3, r3, #6
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	085b      	lsrs	r3, r3, #1
 80049d6:	3b01      	subs	r3, #1
 80049d8:	041b      	lsls	r3, r3, #16
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e0:	061b      	lsls	r3, r3, #24
 80049e2:	491b      	ldr	r1, [pc, #108]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049e8:	4b1b      	ldr	r3, [pc, #108]	; (8004a58 <HAL_RCC_OscConfig+0x478>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7fd ff29 	bl	8002844 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f6:	f7fd ff25 	bl	8002844 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e05c      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a08:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x416>
 8004a14:	e054      	b.n	8004ac0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <HAL_RCC_OscConfig+0x478>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1c:	f7fd ff12 	bl	8002844 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a24:	f7fd ff0e 	bl	8002844 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e045      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_RCC_OscConfig+0x470>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x444>
 8004a42:	e03d      	b.n	8004ac0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e038      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
 8004a50:	40023800 	.word	0x40023800
 8004a54:	40007000 	.word	0x40007000
 8004a58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <HAL_RCC_OscConfig+0x4ec>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d028      	beq.n	8004abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d121      	bne.n	8004abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d11a      	bne.n	8004abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d111      	bne.n	8004abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d107      	bne.n	8004abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40023800 	.word	0x40023800

08004ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0cc      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ae4:	4b68      	ldr	r3, [pc, #416]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d90c      	bls.n	8004b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af2:	4b65      	ldr	r3, [pc, #404]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b63      	ldr	r3, [pc, #396]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0b8      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d020      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b24:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	4a58      	ldr	r2, [pc, #352]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b3c:	4b53      	ldr	r3, [pc, #332]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4a52      	ldr	r2, [pc, #328]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b48:	4b50      	ldr	r3, [pc, #320]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	494d      	ldr	r1, [pc, #308]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d044      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	4b47      	ldr	r3, [pc, #284]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d119      	bne.n	8004bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e07f      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d003      	beq.n	8004b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d107      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8e:	4b3f      	ldr	r3, [pc, #252]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e06f      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9e:	4b3b      	ldr	r3, [pc, #236]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e067      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bae:	4b37      	ldr	r3, [pc, #220]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f023 0203 	bic.w	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4934      	ldr	r1, [pc, #208]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bc0:	f7fd fe40 	bl	8002844 <HAL_GetTick>
 8004bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc6:	e00a      	b.n	8004bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc8:	f7fd fe3c 	bl	8002844 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e04f      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	4b2b      	ldr	r3, [pc, #172]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 020c 	and.w	r2, r3, #12
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d1eb      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf0:	4b25      	ldr	r3, [pc, #148]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d20c      	bcs.n	8004c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfe:	4b22      	ldr	r3, [pc, #136]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e032      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c24:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4916      	ldr	r1, [pc, #88]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c42:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	490e      	ldr	r1, [pc, #56]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c56:	f000 f821 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	490a      	ldr	r1, [pc, #40]	; (8004c90 <HAL_RCC_ClockConfig+0x1c0>)
 8004c68:	5ccb      	ldrb	r3, [r1, r3]
 8004c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6e:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_RCC_ClockConfig+0x1c8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fd fda0 	bl	80027bc <HAL_InitTick>

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40023c00 	.word	0x40023c00
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	08009640 	.word	0x08009640
 8004c94:	20000000 	.word	0x20000000
 8004c98:	20000004 	.word	0x20000004

08004c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca0:	b090      	sub	sp, #64	; 0x40
 8004ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca8:	2300      	movs	r3, #0
 8004caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cac:	2300      	movs	r3, #0
 8004cae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cb4:	4b59      	ldr	r3, [pc, #356]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 030c 	and.w	r3, r3, #12
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d00d      	beq.n	8004cdc <HAL_RCC_GetSysClockFreq+0x40>
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	f200 80a1 	bhi.w	8004e08 <HAL_RCC_GetSysClockFreq+0x16c>
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d003      	beq.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cce:	e09b      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cd0:	4b53      	ldr	r3, [pc, #332]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004cd4:	e09b      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cd6:	4b53      	ldr	r3, [pc, #332]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cda:	e098      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cdc:	4b4f      	ldr	r3, [pc, #316]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ce6:	4b4d      	ldr	r3, [pc, #308]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d028      	beq.n	8004d44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf2:	4b4a      	ldr	r3, [pc, #296]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	099b      	lsrs	r3, r3, #6
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	623b      	str	r3, [r7, #32]
 8004cfc:	627a      	str	r2, [r7, #36]	; 0x24
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d04:	2100      	movs	r1, #0
 8004d06:	4b47      	ldr	r3, [pc, #284]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d08:	fb03 f201 	mul.w	r2, r3, r1
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	fb00 f303 	mul.w	r3, r0, r3
 8004d12:	4413      	add	r3, r2
 8004d14:	4a43      	ldr	r2, [pc, #268]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d16:	fba0 1202 	umull	r1, r2, r0, r2
 8004d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d1c:	460a      	mov	r2, r1
 8004d1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d22:	4413      	add	r3, r2
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d28:	2200      	movs	r2, #0
 8004d2a:	61bb      	str	r3, [r7, #24]
 8004d2c:	61fa      	str	r2, [r7, #28]
 8004d2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004d36:	f7fb ffff 	bl	8000d38 <__aeabi_uldivmod>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4613      	mov	r3, r2
 8004d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d42:	e053      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d44:	4b35      	ldr	r3, [pc, #212]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	099b      	lsrs	r3, r3, #6
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	617a      	str	r2, [r7, #20]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d56:	f04f 0b00 	mov.w	fp, #0
 8004d5a:	4652      	mov	r2, sl
 8004d5c:	465b      	mov	r3, fp
 8004d5e:	f04f 0000 	mov.w	r0, #0
 8004d62:	f04f 0100 	mov.w	r1, #0
 8004d66:	0159      	lsls	r1, r3, #5
 8004d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d6c:	0150      	lsls	r0, r2, #5
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	ebb2 080a 	subs.w	r8, r2, sl
 8004d76:	eb63 090b 	sbc.w	r9, r3, fp
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d8e:	ebb2 0408 	subs.w	r4, r2, r8
 8004d92:	eb63 0509 	sbc.w	r5, r3, r9
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	00eb      	lsls	r3, r5, #3
 8004da0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004da4:	00e2      	lsls	r2, r4, #3
 8004da6:	4614      	mov	r4, r2
 8004da8:	461d      	mov	r5, r3
 8004daa:	eb14 030a 	adds.w	r3, r4, sl
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	eb45 030b 	adc.w	r3, r5, fp
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	028b      	lsls	r3, r1, #10
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dcc:	4621      	mov	r1, r4
 8004dce:	028a      	lsls	r2, r1, #10
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	60fa      	str	r2, [r7, #12]
 8004ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004de0:	f7fb ffaa 	bl	8000d38 <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4613      	mov	r3, r2
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	3301      	adds	r3, #1
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004dfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e06:	e002      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3740      	adds	r7, #64	; 0x40
 8004e14:	46bd      	mov	sp, r7
 8004e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	00f42400 	.word	0x00f42400
 8004e24:	017d7840 	.word	0x017d7840

08004e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000000 	.word	0x20000000

08004e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e44:	f7ff fff0 	bl	8004e28 <HAL_RCC_GetHCLKFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	0a9b      	lsrs	r3, r3, #10
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	4903      	ldr	r1, [pc, #12]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40023800 	.word	0x40023800
 8004e64:	08009650 	.word	0x08009650

08004e68 <__cvt>:
 8004e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	ec55 4b10 	vmov	r4, r5, d0
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	460e      	mov	r6, r1
 8004e74:	4619      	mov	r1, r3
 8004e76:	462b      	mov	r3, r5
 8004e78:	bfbb      	ittet	lt
 8004e7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e7e:	461d      	movlt	r5, r3
 8004e80:	2300      	movge	r3, #0
 8004e82:	232d      	movlt	r3, #45	; 0x2d
 8004e84:	700b      	strb	r3, [r1, #0]
 8004e86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e8c:	4691      	mov	r9, r2
 8004e8e:	f023 0820 	bic.w	r8, r3, #32
 8004e92:	bfbc      	itt	lt
 8004e94:	4622      	movlt	r2, r4
 8004e96:	4614      	movlt	r4, r2
 8004e98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e9c:	d005      	beq.n	8004eaa <__cvt+0x42>
 8004e9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ea2:	d100      	bne.n	8004ea6 <__cvt+0x3e>
 8004ea4:	3601      	adds	r6, #1
 8004ea6:	2102      	movs	r1, #2
 8004ea8:	e000      	b.n	8004eac <__cvt+0x44>
 8004eaa:	2103      	movs	r1, #3
 8004eac:	ab03      	add	r3, sp, #12
 8004eae:	9301      	str	r3, [sp, #4]
 8004eb0:	ab02      	add	r3, sp, #8
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	ec45 4b10 	vmov	d0, r4, r5
 8004eb8:	4653      	mov	r3, sl
 8004eba:	4632      	mov	r2, r6
 8004ebc:	f001 f880 	bl	8005fc0 <_dtoa_r>
 8004ec0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	d102      	bne.n	8004ece <__cvt+0x66>
 8004ec8:	f019 0f01 	tst.w	r9, #1
 8004ecc:	d022      	beq.n	8004f14 <__cvt+0xac>
 8004ece:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ed2:	eb07 0906 	add.w	r9, r7, r6
 8004ed6:	d110      	bne.n	8004efa <__cvt+0x92>
 8004ed8:	783b      	ldrb	r3, [r7, #0]
 8004eda:	2b30      	cmp	r3, #48	; 0x30
 8004edc:	d10a      	bne.n	8004ef4 <__cvt+0x8c>
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	f7fb fdf7 	bl	8000ad8 <__aeabi_dcmpeq>
 8004eea:	b918      	cbnz	r0, 8004ef4 <__cvt+0x8c>
 8004eec:	f1c6 0601 	rsb	r6, r6, #1
 8004ef0:	f8ca 6000 	str.w	r6, [sl]
 8004ef4:	f8da 3000 	ldr.w	r3, [sl]
 8004ef8:	4499      	add	r9, r3
 8004efa:	2200      	movs	r2, #0
 8004efc:	2300      	movs	r3, #0
 8004efe:	4620      	mov	r0, r4
 8004f00:	4629      	mov	r1, r5
 8004f02:	f7fb fde9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f06:	b108      	cbz	r0, 8004f0c <__cvt+0xa4>
 8004f08:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f0c:	2230      	movs	r2, #48	; 0x30
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	454b      	cmp	r3, r9
 8004f12:	d307      	bcc.n	8004f24 <__cvt+0xbc>
 8004f14:	9b03      	ldr	r3, [sp, #12]
 8004f16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f18:	1bdb      	subs	r3, r3, r7
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	b004      	add	sp, #16
 8004f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f24:	1c59      	adds	r1, r3, #1
 8004f26:	9103      	str	r1, [sp, #12]
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	e7f0      	b.n	8004f0e <__cvt+0xa6>

08004f2c <__exponent>:
 8004f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2900      	cmp	r1, #0
 8004f32:	bfb8      	it	lt
 8004f34:	4249      	neglt	r1, r1
 8004f36:	f803 2b02 	strb.w	r2, [r3], #2
 8004f3a:	bfb4      	ite	lt
 8004f3c:	222d      	movlt	r2, #45	; 0x2d
 8004f3e:	222b      	movge	r2, #43	; 0x2b
 8004f40:	2909      	cmp	r1, #9
 8004f42:	7042      	strb	r2, [r0, #1]
 8004f44:	dd2a      	ble.n	8004f9c <__exponent+0x70>
 8004f46:	f10d 0207 	add.w	r2, sp, #7
 8004f4a:	4617      	mov	r7, r2
 8004f4c:	260a      	movs	r6, #10
 8004f4e:	4694      	mov	ip, r2
 8004f50:	fb91 f5f6 	sdiv	r5, r1, r6
 8004f54:	fb06 1415 	mls	r4, r6, r5, r1
 8004f58:	3430      	adds	r4, #48	; 0x30
 8004f5a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004f5e:	460c      	mov	r4, r1
 8004f60:	2c63      	cmp	r4, #99	; 0x63
 8004f62:	f102 32ff 	add.w	r2, r2, #4294967295
 8004f66:	4629      	mov	r1, r5
 8004f68:	dcf1      	bgt.n	8004f4e <__exponent+0x22>
 8004f6a:	3130      	adds	r1, #48	; 0x30
 8004f6c:	f1ac 0402 	sub.w	r4, ip, #2
 8004f70:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f74:	1c41      	adds	r1, r0, #1
 8004f76:	4622      	mov	r2, r4
 8004f78:	42ba      	cmp	r2, r7
 8004f7a:	d30a      	bcc.n	8004f92 <__exponent+0x66>
 8004f7c:	f10d 0209 	add.w	r2, sp, #9
 8004f80:	eba2 020c 	sub.w	r2, r2, ip
 8004f84:	42bc      	cmp	r4, r7
 8004f86:	bf88      	it	hi
 8004f88:	2200      	movhi	r2, #0
 8004f8a:	4413      	add	r3, r2
 8004f8c:	1a18      	subs	r0, r3, r0
 8004f8e:	b003      	add	sp, #12
 8004f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f92:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004f96:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004f9a:	e7ed      	b.n	8004f78 <__exponent+0x4c>
 8004f9c:	2330      	movs	r3, #48	; 0x30
 8004f9e:	3130      	adds	r1, #48	; 0x30
 8004fa0:	7083      	strb	r3, [r0, #2]
 8004fa2:	70c1      	strb	r1, [r0, #3]
 8004fa4:	1d03      	adds	r3, r0, #4
 8004fa6:	e7f1      	b.n	8004f8c <__exponent+0x60>

08004fa8 <_printf_float>:
 8004fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	ed2d 8b02 	vpush	{d8}
 8004fb0:	b08d      	sub	sp, #52	; 0x34
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fb8:	4616      	mov	r6, r2
 8004fba:	461f      	mov	r7, r3
 8004fbc:	4605      	mov	r5, r0
 8004fbe:	f000 fef7 	bl	8005db0 <_localeconv_r>
 8004fc2:	f8d0 a000 	ldr.w	sl, [r0]
 8004fc6:	4650      	mov	r0, sl
 8004fc8:	f7fb f95a 	bl	8000280 <strlen>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	930a      	str	r3, [sp, #40]	; 0x28
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	9305      	str	r3, [sp, #20]
 8004fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004fdc:	3307      	adds	r3, #7
 8004fde:	f023 0307 	bic.w	r3, r3, #7
 8004fe2:	f103 0208 	add.w	r2, r3, #8
 8004fe6:	f8c8 2000 	str.w	r2, [r8]
 8004fea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ff2:	9307      	str	r3, [sp, #28]
 8004ff4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ff8:	ee08 0a10 	vmov	s16, r0
 8004ffc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005004:	4b9e      	ldr	r3, [pc, #632]	; (8005280 <_printf_float+0x2d8>)
 8005006:	f04f 32ff 	mov.w	r2, #4294967295
 800500a:	f7fb fd97 	bl	8000b3c <__aeabi_dcmpun>
 800500e:	bb88      	cbnz	r0, 8005074 <_printf_float+0xcc>
 8005010:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005014:	4b9a      	ldr	r3, [pc, #616]	; (8005280 <_printf_float+0x2d8>)
 8005016:	f04f 32ff 	mov.w	r2, #4294967295
 800501a:	f7fb fd71 	bl	8000b00 <__aeabi_dcmple>
 800501e:	bb48      	cbnz	r0, 8005074 <_printf_float+0xcc>
 8005020:	2200      	movs	r2, #0
 8005022:	2300      	movs	r3, #0
 8005024:	4640      	mov	r0, r8
 8005026:	4649      	mov	r1, r9
 8005028:	f7fb fd60 	bl	8000aec <__aeabi_dcmplt>
 800502c:	b110      	cbz	r0, 8005034 <_printf_float+0x8c>
 800502e:	232d      	movs	r3, #45	; 0x2d
 8005030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005034:	4a93      	ldr	r2, [pc, #588]	; (8005284 <_printf_float+0x2dc>)
 8005036:	4b94      	ldr	r3, [pc, #592]	; (8005288 <_printf_float+0x2e0>)
 8005038:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800503c:	bf94      	ite	ls
 800503e:	4690      	movls	r8, r2
 8005040:	4698      	movhi	r8, r3
 8005042:	2303      	movs	r3, #3
 8005044:	6123      	str	r3, [r4, #16]
 8005046:	9b05      	ldr	r3, [sp, #20]
 8005048:	f023 0304 	bic.w	r3, r3, #4
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	f04f 0900 	mov.w	r9, #0
 8005052:	9700      	str	r7, [sp, #0]
 8005054:	4633      	mov	r3, r6
 8005056:	aa0b      	add	r2, sp, #44	; 0x2c
 8005058:	4621      	mov	r1, r4
 800505a:	4628      	mov	r0, r5
 800505c:	f000 f9da 	bl	8005414 <_printf_common>
 8005060:	3001      	adds	r0, #1
 8005062:	f040 8090 	bne.w	8005186 <_printf_float+0x1de>
 8005066:	f04f 30ff 	mov.w	r0, #4294967295
 800506a:	b00d      	add	sp, #52	; 0x34
 800506c:	ecbd 8b02 	vpop	{d8}
 8005070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005074:	4642      	mov	r2, r8
 8005076:	464b      	mov	r3, r9
 8005078:	4640      	mov	r0, r8
 800507a:	4649      	mov	r1, r9
 800507c:	f7fb fd5e 	bl	8000b3c <__aeabi_dcmpun>
 8005080:	b140      	cbz	r0, 8005094 <_printf_float+0xec>
 8005082:	464b      	mov	r3, r9
 8005084:	2b00      	cmp	r3, #0
 8005086:	bfbc      	itt	lt
 8005088:	232d      	movlt	r3, #45	; 0x2d
 800508a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800508e:	4a7f      	ldr	r2, [pc, #508]	; (800528c <_printf_float+0x2e4>)
 8005090:	4b7f      	ldr	r3, [pc, #508]	; (8005290 <_printf_float+0x2e8>)
 8005092:	e7d1      	b.n	8005038 <_printf_float+0x90>
 8005094:	6863      	ldr	r3, [r4, #4]
 8005096:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800509a:	9206      	str	r2, [sp, #24]
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	d13f      	bne.n	8005120 <_printf_float+0x178>
 80050a0:	2306      	movs	r3, #6
 80050a2:	6063      	str	r3, [r4, #4]
 80050a4:	9b05      	ldr	r3, [sp, #20]
 80050a6:	6861      	ldr	r1, [r4, #4]
 80050a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80050ac:	2300      	movs	r3, #0
 80050ae:	9303      	str	r3, [sp, #12]
 80050b0:	ab0a      	add	r3, sp, #40	; 0x28
 80050b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050b6:	ab09      	add	r3, sp, #36	; 0x24
 80050b8:	ec49 8b10 	vmov	d0, r8, r9
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	6022      	str	r2, [r4, #0]
 80050c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050c4:	4628      	mov	r0, r5
 80050c6:	f7ff fecf 	bl	8004e68 <__cvt>
 80050ca:	9b06      	ldr	r3, [sp, #24]
 80050cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050ce:	2b47      	cmp	r3, #71	; 0x47
 80050d0:	4680      	mov	r8, r0
 80050d2:	d108      	bne.n	80050e6 <_printf_float+0x13e>
 80050d4:	1cc8      	adds	r0, r1, #3
 80050d6:	db02      	blt.n	80050de <_printf_float+0x136>
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	4299      	cmp	r1, r3
 80050dc:	dd41      	ble.n	8005162 <_printf_float+0x1ba>
 80050de:	f1ab 0302 	sub.w	r3, fp, #2
 80050e2:	fa5f fb83 	uxtb.w	fp, r3
 80050e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050ea:	d820      	bhi.n	800512e <_printf_float+0x186>
 80050ec:	3901      	subs	r1, #1
 80050ee:	465a      	mov	r2, fp
 80050f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050f4:	9109      	str	r1, [sp, #36]	; 0x24
 80050f6:	f7ff ff19 	bl	8004f2c <__exponent>
 80050fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050fc:	1813      	adds	r3, r2, r0
 80050fe:	2a01      	cmp	r2, #1
 8005100:	4681      	mov	r9, r0
 8005102:	6123      	str	r3, [r4, #16]
 8005104:	dc02      	bgt.n	800510c <_printf_float+0x164>
 8005106:	6822      	ldr	r2, [r4, #0]
 8005108:	07d2      	lsls	r2, r2, #31
 800510a:	d501      	bpl.n	8005110 <_printf_float+0x168>
 800510c:	3301      	adds	r3, #1
 800510e:	6123      	str	r3, [r4, #16]
 8005110:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005114:	2b00      	cmp	r3, #0
 8005116:	d09c      	beq.n	8005052 <_printf_float+0xaa>
 8005118:	232d      	movs	r3, #45	; 0x2d
 800511a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800511e:	e798      	b.n	8005052 <_printf_float+0xaa>
 8005120:	9a06      	ldr	r2, [sp, #24]
 8005122:	2a47      	cmp	r2, #71	; 0x47
 8005124:	d1be      	bne.n	80050a4 <_printf_float+0xfc>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1bc      	bne.n	80050a4 <_printf_float+0xfc>
 800512a:	2301      	movs	r3, #1
 800512c:	e7b9      	b.n	80050a2 <_printf_float+0xfa>
 800512e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005132:	d118      	bne.n	8005166 <_printf_float+0x1be>
 8005134:	2900      	cmp	r1, #0
 8005136:	6863      	ldr	r3, [r4, #4]
 8005138:	dd0b      	ble.n	8005152 <_printf_float+0x1aa>
 800513a:	6121      	str	r1, [r4, #16]
 800513c:	b913      	cbnz	r3, 8005144 <_printf_float+0x19c>
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	07d0      	lsls	r0, r2, #31
 8005142:	d502      	bpl.n	800514a <_printf_float+0x1a2>
 8005144:	3301      	adds	r3, #1
 8005146:	440b      	add	r3, r1
 8005148:	6123      	str	r3, [r4, #16]
 800514a:	65a1      	str	r1, [r4, #88]	; 0x58
 800514c:	f04f 0900 	mov.w	r9, #0
 8005150:	e7de      	b.n	8005110 <_printf_float+0x168>
 8005152:	b913      	cbnz	r3, 800515a <_printf_float+0x1b2>
 8005154:	6822      	ldr	r2, [r4, #0]
 8005156:	07d2      	lsls	r2, r2, #31
 8005158:	d501      	bpl.n	800515e <_printf_float+0x1b6>
 800515a:	3302      	adds	r3, #2
 800515c:	e7f4      	b.n	8005148 <_printf_float+0x1a0>
 800515e:	2301      	movs	r3, #1
 8005160:	e7f2      	b.n	8005148 <_printf_float+0x1a0>
 8005162:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005168:	4299      	cmp	r1, r3
 800516a:	db05      	blt.n	8005178 <_printf_float+0x1d0>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	6121      	str	r1, [r4, #16]
 8005170:	07d8      	lsls	r0, r3, #31
 8005172:	d5ea      	bpl.n	800514a <_printf_float+0x1a2>
 8005174:	1c4b      	adds	r3, r1, #1
 8005176:	e7e7      	b.n	8005148 <_printf_float+0x1a0>
 8005178:	2900      	cmp	r1, #0
 800517a:	bfd4      	ite	le
 800517c:	f1c1 0202 	rsble	r2, r1, #2
 8005180:	2201      	movgt	r2, #1
 8005182:	4413      	add	r3, r2
 8005184:	e7e0      	b.n	8005148 <_printf_float+0x1a0>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	055a      	lsls	r2, r3, #21
 800518a:	d407      	bmi.n	800519c <_printf_float+0x1f4>
 800518c:	6923      	ldr	r3, [r4, #16]
 800518e:	4642      	mov	r2, r8
 8005190:	4631      	mov	r1, r6
 8005192:	4628      	mov	r0, r5
 8005194:	47b8      	blx	r7
 8005196:	3001      	adds	r0, #1
 8005198:	d12c      	bne.n	80051f4 <_printf_float+0x24c>
 800519a:	e764      	b.n	8005066 <_printf_float+0xbe>
 800519c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051a0:	f240 80e0 	bls.w	8005364 <_printf_float+0x3bc>
 80051a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051a8:	2200      	movs	r2, #0
 80051aa:	2300      	movs	r3, #0
 80051ac:	f7fb fc94 	bl	8000ad8 <__aeabi_dcmpeq>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d034      	beq.n	800521e <_printf_float+0x276>
 80051b4:	4a37      	ldr	r2, [pc, #220]	; (8005294 <_printf_float+0x2ec>)
 80051b6:	2301      	movs	r3, #1
 80051b8:	4631      	mov	r1, r6
 80051ba:	4628      	mov	r0, r5
 80051bc:	47b8      	blx	r7
 80051be:	3001      	adds	r0, #1
 80051c0:	f43f af51 	beq.w	8005066 <_printf_float+0xbe>
 80051c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051c8:	429a      	cmp	r2, r3
 80051ca:	db02      	blt.n	80051d2 <_printf_float+0x22a>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	07d8      	lsls	r0, r3, #31
 80051d0:	d510      	bpl.n	80051f4 <_printf_float+0x24c>
 80051d2:	ee18 3a10 	vmov	r3, s16
 80051d6:	4652      	mov	r2, sl
 80051d8:	4631      	mov	r1, r6
 80051da:	4628      	mov	r0, r5
 80051dc:	47b8      	blx	r7
 80051de:	3001      	adds	r0, #1
 80051e0:	f43f af41 	beq.w	8005066 <_printf_float+0xbe>
 80051e4:	f04f 0800 	mov.w	r8, #0
 80051e8:	f104 091a 	add.w	r9, r4, #26
 80051ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ee:	3b01      	subs	r3, #1
 80051f0:	4543      	cmp	r3, r8
 80051f2:	dc09      	bgt.n	8005208 <_printf_float+0x260>
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	079b      	lsls	r3, r3, #30
 80051f8:	f100 8107 	bmi.w	800540a <_printf_float+0x462>
 80051fc:	68e0      	ldr	r0, [r4, #12]
 80051fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005200:	4298      	cmp	r0, r3
 8005202:	bfb8      	it	lt
 8005204:	4618      	movlt	r0, r3
 8005206:	e730      	b.n	800506a <_printf_float+0xc2>
 8005208:	2301      	movs	r3, #1
 800520a:	464a      	mov	r2, r9
 800520c:	4631      	mov	r1, r6
 800520e:	4628      	mov	r0, r5
 8005210:	47b8      	blx	r7
 8005212:	3001      	adds	r0, #1
 8005214:	f43f af27 	beq.w	8005066 <_printf_float+0xbe>
 8005218:	f108 0801 	add.w	r8, r8, #1
 800521c:	e7e6      	b.n	80051ec <_printf_float+0x244>
 800521e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	dc39      	bgt.n	8005298 <_printf_float+0x2f0>
 8005224:	4a1b      	ldr	r2, [pc, #108]	; (8005294 <_printf_float+0x2ec>)
 8005226:	2301      	movs	r3, #1
 8005228:	4631      	mov	r1, r6
 800522a:	4628      	mov	r0, r5
 800522c:	47b8      	blx	r7
 800522e:	3001      	adds	r0, #1
 8005230:	f43f af19 	beq.w	8005066 <_printf_float+0xbe>
 8005234:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005238:	4313      	orrs	r3, r2
 800523a:	d102      	bne.n	8005242 <_printf_float+0x29a>
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	07d9      	lsls	r1, r3, #31
 8005240:	d5d8      	bpl.n	80051f4 <_printf_float+0x24c>
 8005242:	ee18 3a10 	vmov	r3, s16
 8005246:	4652      	mov	r2, sl
 8005248:	4631      	mov	r1, r6
 800524a:	4628      	mov	r0, r5
 800524c:	47b8      	blx	r7
 800524e:	3001      	adds	r0, #1
 8005250:	f43f af09 	beq.w	8005066 <_printf_float+0xbe>
 8005254:	f04f 0900 	mov.w	r9, #0
 8005258:	f104 0a1a 	add.w	sl, r4, #26
 800525c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525e:	425b      	negs	r3, r3
 8005260:	454b      	cmp	r3, r9
 8005262:	dc01      	bgt.n	8005268 <_printf_float+0x2c0>
 8005264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005266:	e792      	b.n	800518e <_printf_float+0x1e6>
 8005268:	2301      	movs	r3, #1
 800526a:	4652      	mov	r2, sl
 800526c:	4631      	mov	r1, r6
 800526e:	4628      	mov	r0, r5
 8005270:	47b8      	blx	r7
 8005272:	3001      	adds	r0, #1
 8005274:	f43f aef7 	beq.w	8005066 <_printf_float+0xbe>
 8005278:	f109 0901 	add.w	r9, r9, #1
 800527c:	e7ee      	b.n	800525c <_printf_float+0x2b4>
 800527e:	bf00      	nop
 8005280:	7fefffff 	.word	0x7fefffff
 8005284:	08009658 	.word	0x08009658
 8005288:	0800965c 	.word	0x0800965c
 800528c:	08009660 	.word	0x08009660
 8005290:	08009664 	.word	0x08009664
 8005294:	08009668 	.word	0x08009668
 8005298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800529a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800529c:	429a      	cmp	r2, r3
 800529e:	bfa8      	it	ge
 80052a0:	461a      	movge	r2, r3
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	4691      	mov	r9, r2
 80052a6:	dc37      	bgt.n	8005318 <_printf_float+0x370>
 80052a8:	f04f 0b00 	mov.w	fp, #0
 80052ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052b0:	f104 021a 	add.w	r2, r4, #26
 80052b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052b6:	9305      	str	r3, [sp, #20]
 80052b8:	eba3 0309 	sub.w	r3, r3, r9
 80052bc:	455b      	cmp	r3, fp
 80052be:	dc33      	bgt.n	8005328 <_printf_float+0x380>
 80052c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052c4:	429a      	cmp	r2, r3
 80052c6:	db3b      	blt.n	8005340 <_printf_float+0x398>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	07da      	lsls	r2, r3, #31
 80052cc:	d438      	bmi.n	8005340 <_printf_float+0x398>
 80052ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80052d2:	eba2 0903 	sub.w	r9, r2, r3
 80052d6:	9b05      	ldr	r3, [sp, #20]
 80052d8:	1ad2      	subs	r2, r2, r3
 80052da:	4591      	cmp	r9, r2
 80052dc:	bfa8      	it	ge
 80052de:	4691      	movge	r9, r2
 80052e0:	f1b9 0f00 	cmp.w	r9, #0
 80052e4:	dc35      	bgt.n	8005352 <_printf_float+0x3aa>
 80052e6:	f04f 0800 	mov.w	r8, #0
 80052ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052ee:	f104 0a1a 	add.w	sl, r4, #26
 80052f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052f6:	1a9b      	subs	r3, r3, r2
 80052f8:	eba3 0309 	sub.w	r3, r3, r9
 80052fc:	4543      	cmp	r3, r8
 80052fe:	f77f af79 	ble.w	80051f4 <_printf_float+0x24c>
 8005302:	2301      	movs	r3, #1
 8005304:	4652      	mov	r2, sl
 8005306:	4631      	mov	r1, r6
 8005308:	4628      	mov	r0, r5
 800530a:	47b8      	blx	r7
 800530c:	3001      	adds	r0, #1
 800530e:	f43f aeaa 	beq.w	8005066 <_printf_float+0xbe>
 8005312:	f108 0801 	add.w	r8, r8, #1
 8005316:	e7ec      	b.n	80052f2 <_printf_float+0x34a>
 8005318:	4613      	mov	r3, r2
 800531a:	4631      	mov	r1, r6
 800531c:	4642      	mov	r2, r8
 800531e:	4628      	mov	r0, r5
 8005320:	47b8      	blx	r7
 8005322:	3001      	adds	r0, #1
 8005324:	d1c0      	bne.n	80052a8 <_printf_float+0x300>
 8005326:	e69e      	b.n	8005066 <_printf_float+0xbe>
 8005328:	2301      	movs	r3, #1
 800532a:	4631      	mov	r1, r6
 800532c:	4628      	mov	r0, r5
 800532e:	9205      	str	r2, [sp, #20]
 8005330:	47b8      	blx	r7
 8005332:	3001      	adds	r0, #1
 8005334:	f43f ae97 	beq.w	8005066 <_printf_float+0xbe>
 8005338:	9a05      	ldr	r2, [sp, #20]
 800533a:	f10b 0b01 	add.w	fp, fp, #1
 800533e:	e7b9      	b.n	80052b4 <_printf_float+0x30c>
 8005340:	ee18 3a10 	vmov	r3, s16
 8005344:	4652      	mov	r2, sl
 8005346:	4631      	mov	r1, r6
 8005348:	4628      	mov	r0, r5
 800534a:	47b8      	blx	r7
 800534c:	3001      	adds	r0, #1
 800534e:	d1be      	bne.n	80052ce <_printf_float+0x326>
 8005350:	e689      	b.n	8005066 <_printf_float+0xbe>
 8005352:	9a05      	ldr	r2, [sp, #20]
 8005354:	464b      	mov	r3, r9
 8005356:	4442      	add	r2, r8
 8005358:	4631      	mov	r1, r6
 800535a:	4628      	mov	r0, r5
 800535c:	47b8      	blx	r7
 800535e:	3001      	adds	r0, #1
 8005360:	d1c1      	bne.n	80052e6 <_printf_float+0x33e>
 8005362:	e680      	b.n	8005066 <_printf_float+0xbe>
 8005364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005366:	2a01      	cmp	r2, #1
 8005368:	dc01      	bgt.n	800536e <_printf_float+0x3c6>
 800536a:	07db      	lsls	r3, r3, #31
 800536c:	d53a      	bpl.n	80053e4 <_printf_float+0x43c>
 800536e:	2301      	movs	r3, #1
 8005370:	4642      	mov	r2, r8
 8005372:	4631      	mov	r1, r6
 8005374:	4628      	mov	r0, r5
 8005376:	47b8      	blx	r7
 8005378:	3001      	adds	r0, #1
 800537a:	f43f ae74 	beq.w	8005066 <_printf_float+0xbe>
 800537e:	ee18 3a10 	vmov	r3, s16
 8005382:	4652      	mov	r2, sl
 8005384:	4631      	mov	r1, r6
 8005386:	4628      	mov	r0, r5
 8005388:	47b8      	blx	r7
 800538a:	3001      	adds	r0, #1
 800538c:	f43f ae6b 	beq.w	8005066 <_printf_float+0xbe>
 8005390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005394:	2200      	movs	r2, #0
 8005396:	2300      	movs	r3, #0
 8005398:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800539c:	f7fb fb9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80053a0:	b9d8      	cbnz	r0, 80053da <_printf_float+0x432>
 80053a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80053a6:	f108 0201 	add.w	r2, r8, #1
 80053aa:	4631      	mov	r1, r6
 80053ac:	4628      	mov	r0, r5
 80053ae:	47b8      	blx	r7
 80053b0:	3001      	adds	r0, #1
 80053b2:	d10e      	bne.n	80053d2 <_printf_float+0x42a>
 80053b4:	e657      	b.n	8005066 <_printf_float+0xbe>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4652      	mov	r2, sl
 80053ba:	4631      	mov	r1, r6
 80053bc:	4628      	mov	r0, r5
 80053be:	47b8      	blx	r7
 80053c0:	3001      	adds	r0, #1
 80053c2:	f43f ae50 	beq.w	8005066 <_printf_float+0xbe>
 80053c6:	f108 0801 	add.w	r8, r8, #1
 80053ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053cc:	3b01      	subs	r3, #1
 80053ce:	4543      	cmp	r3, r8
 80053d0:	dcf1      	bgt.n	80053b6 <_printf_float+0x40e>
 80053d2:	464b      	mov	r3, r9
 80053d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053d8:	e6da      	b.n	8005190 <_printf_float+0x1e8>
 80053da:	f04f 0800 	mov.w	r8, #0
 80053de:	f104 0a1a 	add.w	sl, r4, #26
 80053e2:	e7f2      	b.n	80053ca <_printf_float+0x422>
 80053e4:	2301      	movs	r3, #1
 80053e6:	4642      	mov	r2, r8
 80053e8:	e7df      	b.n	80053aa <_printf_float+0x402>
 80053ea:	2301      	movs	r3, #1
 80053ec:	464a      	mov	r2, r9
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b8      	blx	r7
 80053f4:	3001      	adds	r0, #1
 80053f6:	f43f ae36 	beq.w	8005066 <_printf_float+0xbe>
 80053fa:	f108 0801 	add.w	r8, r8, #1
 80053fe:	68e3      	ldr	r3, [r4, #12]
 8005400:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005402:	1a5b      	subs	r3, r3, r1
 8005404:	4543      	cmp	r3, r8
 8005406:	dcf0      	bgt.n	80053ea <_printf_float+0x442>
 8005408:	e6f8      	b.n	80051fc <_printf_float+0x254>
 800540a:	f04f 0800 	mov.w	r8, #0
 800540e:	f104 0919 	add.w	r9, r4, #25
 8005412:	e7f4      	b.n	80053fe <_printf_float+0x456>

08005414 <_printf_common>:
 8005414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005418:	4616      	mov	r6, r2
 800541a:	4699      	mov	r9, r3
 800541c:	688a      	ldr	r2, [r1, #8]
 800541e:	690b      	ldr	r3, [r1, #16]
 8005420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005424:	4293      	cmp	r3, r2
 8005426:	bfb8      	it	lt
 8005428:	4613      	movlt	r3, r2
 800542a:	6033      	str	r3, [r6, #0]
 800542c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005430:	4607      	mov	r7, r0
 8005432:	460c      	mov	r4, r1
 8005434:	b10a      	cbz	r2, 800543a <_printf_common+0x26>
 8005436:	3301      	adds	r3, #1
 8005438:	6033      	str	r3, [r6, #0]
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	0699      	lsls	r1, r3, #26
 800543e:	bf42      	ittt	mi
 8005440:	6833      	ldrmi	r3, [r6, #0]
 8005442:	3302      	addmi	r3, #2
 8005444:	6033      	strmi	r3, [r6, #0]
 8005446:	6825      	ldr	r5, [r4, #0]
 8005448:	f015 0506 	ands.w	r5, r5, #6
 800544c:	d106      	bne.n	800545c <_printf_common+0x48>
 800544e:	f104 0a19 	add.w	sl, r4, #25
 8005452:	68e3      	ldr	r3, [r4, #12]
 8005454:	6832      	ldr	r2, [r6, #0]
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	42ab      	cmp	r3, r5
 800545a:	dc26      	bgt.n	80054aa <_printf_common+0x96>
 800545c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005460:	1e13      	subs	r3, r2, #0
 8005462:	6822      	ldr	r2, [r4, #0]
 8005464:	bf18      	it	ne
 8005466:	2301      	movne	r3, #1
 8005468:	0692      	lsls	r2, r2, #26
 800546a:	d42b      	bmi.n	80054c4 <_printf_common+0xb0>
 800546c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005470:	4649      	mov	r1, r9
 8005472:	4638      	mov	r0, r7
 8005474:	47c0      	blx	r8
 8005476:	3001      	adds	r0, #1
 8005478:	d01e      	beq.n	80054b8 <_printf_common+0xa4>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	6922      	ldr	r2, [r4, #16]
 800547e:	f003 0306 	and.w	r3, r3, #6
 8005482:	2b04      	cmp	r3, #4
 8005484:	bf02      	ittt	eq
 8005486:	68e5      	ldreq	r5, [r4, #12]
 8005488:	6833      	ldreq	r3, [r6, #0]
 800548a:	1aed      	subeq	r5, r5, r3
 800548c:	68a3      	ldr	r3, [r4, #8]
 800548e:	bf0c      	ite	eq
 8005490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005494:	2500      	movne	r5, #0
 8005496:	4293      	cmp	r3, r2
 8005498:	bfc4      	itt	gt
 800549a:	1a9b      	subgt	r3, r3, r2
 800549c:	18ed      	addgt	r5, r5, r3
 800549e:	2600      	movs	r6, #0
 80054a0:	341a      	adds	r4, #26
 80054a2:	42b5      	cmp	r5, r6
 80054a4:	d11a      	bne.n	80054dc <_printf_common+0xc8>
 80054a6:	2000      	movs	r0, #0
 80054a8:	e008      	b.n	80054bc <_printf_common+0xa8>
 80054aa:	2301      	movs	r3, #1
 80054ac:	4652      	mov	r2, sl
 80054ae:	4649      	mov	r1, r9
 80054b0:	4638      	mov	r0, r7
 80054b2:	47c0      	blx	r8
 80054b4:	3001      	adds	r0, #1
 80054b6:	d103      	bne.n	80054c0 <_printf_common+0xac>
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c0:	3501      	adds	r5, #1
 80054c2:	e7c6      	b.n	8005452 <_printf_common+0x3e>
 80054c4:	18e1      	adds	r1, r4, r3
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	2030      	movs	r0, #48	; 0x30
 80054ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054ce:	4422      	add	r2, r4
 80054d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054d8:	3302      	adds	r3, #2
 80054da:	e7c7      	b.n	800546c <_printf_common+0x58>
 80054dc:	2301      	movs	r3, #1
 80054de:	4622      	mov	r2, r4
 80054e0:	4649      	mov	r1, r9
 80054e2:	4638      	mov	r0, r7
 80054e4:	47c0      	blx	r8
 80054e6:	3001      	adds	r0, #1
 80054e8:	d0e6      	beq.n	80054b8 <_printf_common+0xa4>
 80054ea:	3601      	adds	r6, #1
 80054ec:	e7d9      	b.n	80054a2 <_printf_common+0x8e>
	...

080054f0 <_printf_i>:
 80054f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054f4:	7e0f      	ldrb	r7, [r1, #24]
 80054f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054f8:	2f78      	cmp	r7, #120	; 0x78
 80054fa:	4691      	mov	r9, r2
 80054fc:	4680      	mov	r8, r0
 80054fe:	460c      	mov	r4, r1
 8005500:	469a      	mov	sl, r3
 8005502:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005506:	d807      	bhi.n	8005518 <_printf_i+0x28>
 8005508:	2f62      	cmp	r7, #98	; 0x62
 800550a:	d80a      	bhi.n	8005522 <_printf_i+0x32>
 800550c:	2f00      	cmp	r7, #0
 800550e:	f000 80d4 	beq.w	80056ba <_printf_i+0x1ca>
 8005512:	2f58      	cmp	r7, #88	; 0x58
 8005514:	f000 80c0 	beq.w	8005698 <_printf_i+0x1a8>
 8005518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800551c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005520:	e03a      	b.n	8005598 <_printf_i+0xa8>
 8005522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005526:	2b15      	cmp	r3, #21
 8005528:	d8f6      	bhi.n	8005518 <_printf_i+0x28>
 800552a:	a101      	add	r1, pc, #4	; (adr r1, 8005530 <_printf_i+0x40>)
 800552c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005530:	08005589 	.word	0x08005589
 8005534:	0800559d 	.word	0x0800559d
 8005538:	08005519 	.word	0x08005519
 800553c:	08005519 	.word	0x08005519
 8005540:	08005519 	.word	0x08005519
 8005544:	08005519 	.word	0x08005519
 8005548:	0800559d 	.word	0x0800559d
 800554c:	08005519 	.word	0x08005519
 8005550:	08005519 	.word	0x08005519
 8005554:	08005519 	.word	0x08005519
 8005558:	08005519 	.word	0x08005519
 800555c:	080056a1 	.word	0x080056a1
 8005560:	080055c9 	.word	0x080055c9
 8005564:	0800565b 	.word	0x0800565b
 8005568:	08005519 	.word	0x08005519
 800556c:	08005519 	.word	0x08005519
 8005570:	080056c3 	.word	0x080056c3
 8005574:	08005519 	.word	0x08005519
 8005578:	080055c9 	.word	0x080055c9
 800557c:	08005519 	.word	0x08005519
 8005580:	08005519 	.word	0x08005519
 8005584:	08005663 	.word	0x08005663
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	1d1a      	adds	r2, r3, #4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	602a      	str	r2, [r5, #0]
 8005590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005598:	2301      	movs	r3, #1
 800559a:	e09f      	b.n	80056dc <_printf_i+0x1ec>
 800559c:	6820      	ldr	r0, [r4, #0]
 800559e:	682b      	ldr	r3, [r5, #0]
 80055a0:	0607      	lsls	r7, r0, #24
 80055a2:	f103 0104 	add.w	r1, r3, #4
 80055a6:	6029      	str	r1, [r5, #0]
 80055a8:	d501      	bpl.n	80055ae <_printf_i+0xbe>
 80055aa:	681e      	ldr	r6, [r3, #0]
 80055ac:	e003      	b.n	80055b6 <_printf_i+0xc6>
 80055ae:	0646      	lsls	r6, r0, #25
 80055b0:	d5fb      	bpl.n	80055aa <_printf_i+0xba>
 80055b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055b6:	2e00      	cmp	r6, #0
 80055b8:	da03      	bge.n	80055c2 <_printf_i+0xd2>
 80055ba:	232d      	movs	r3, #45	; 0x2d
 80055bc:	4276      	negs	r6, r6
 80055be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c2:	485a      	ldr	r0, [pc, #360]	; (800572c <_printf_i+0x23c>)
 80055c4:	230a      	movs	r3, #10
 80055c6:	e012      	b.n	80055ee <_printf_i+0xfe>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	6820      	ldr	r0, [r4, #0]
 80055cc:	1d19      	adds	r1, r3, #4
 80055ce:	6029      	str	r1, [r5, #0]
 80055d0:	0605      	lsls	r5, r0, #24
 80055d2:	d501      	bpl.n	80055d8 <_printf_i+0xe8>
 80055d4:	681e      	ldr	r6, [r3, #0]
 80055d6:	e002      	b.n	80055de <_printf_i+0xee>
 80055d8:	0641      	lsls	r1, r0, #25
 80055da:	d5fb      	bpl.n	80055d4 <_printf_i+0xe4>
 80055dc:	881e      	ldrh	r6, [r3, #0]
 80055de:	4853      	ldr	r0, [pc, #332]	; (800572c <_printf_i+0x23c>)
 80055e0:	2f6f      	cmp	r7, #111	; 0x6f
 80055e2:	bf0c      	ite	eq
 80055e4:	2308      	moveq	r3, #8
 80055e6:	230a      	movne	r3, #10
 80055e8:	2100      	movs	r1, #0
 80055ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055ee:	6865      	ldr	r5, [r4, #4]
 80055f0:	60a5      	str	r5, [r4, #8]
 80055f2:	2d00      	cmp	r5, #0
 80055f4:	bfa2      	ittt	ge
 80055f6:	6821      	ldrge	r1, [r4, #0]
 80055f8:	f021 0104 	bicge.w	r1, r1, #4
 80055fc:	6021      	strge	r1, [r4, #0]
 80055fe:	b90e      	cbnz	r6, 8005604 <_printf_i+0x114>
 8005600:	2d00      	cmp	r5, #0
 8005602:	d04b      	beq.n	800569c <_printf_i+0x1ac>
 8005604:	4615      	mov	r5, r2
 8005606:	fbb6 f1f3 	udiv	r1, r6, r3
 800560a:	fb03 6711 	mls	r7, r3, r1, r6
 800560e:	5dc7      	ldrb	r7, [r0, r7]
 8005610:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005614:	4637      	mov	r7, r6
 8005616:	42bb      	cmp	r3, r7
 8005618:	460e      	mov	r6, r1
 800561a:	d9f4      	bls.n	8005606 <_printf_i+0x116>
 800561c:	2b08      	cmp	r3, #8
 800561e:	d10b      	bne.n	8005638 <_printf_i+0x148>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	07de      	lsls	r6, r3, #31
 8005624:	d508      	bpl.n	8005638 <_printf_i+0x148>
 8005626:	6923      	ldr	r3, [r4, #16]
 8005628:	6861      	ldr	r1, [r4, #4]
 800562a:	4299      	cmp	r1, r3
 800562c:	bfde      	ittt	le
 800562e:	2330      	movle	r3, #48	; 0x30
 8005630:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005634:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005638:	1b52      	subs	r2, r2, r5
 800563a:	6122      	str	r2, [r4, #16]
 800563c:	f8cd a000 	str.w	sl, [sp]
 8005640:	464b      	mov	r3, r9
 8005642:	aa03      	add	r2, sp, #12
 8005644:	4621      	mov	r1, r4
 8005646:	4640      	mov	r0, r8
 8005648:	f7ff fee4 	bl	8005414 <_printf_common>
 800564c:	3001      	adds	r0, #1
 800564e:	d14a      	bne.n	80056e6 <_printf_i+0x1f6>
 8005650:	f04f 30ff 	mov.w	r0, #4294967295
 8005654:	b004      	add	sp, #16
 8005656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	f043 0320 	orr.w	r3, r3, #32
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	4833      	ldr	r0, [pc, #204]	; (8005730 <_printf_i+0x240>)
 8005664:	2778      	movs	r7, #120	; 0x78
 8005666:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	6829      	ldr	r1, [r5, #0]
 800566e:	061f      	lsls	r7, r3, #24
 8005670:	f851 6b04 	ldr.w	r6, [r1], #4
 8005674:	d402      	bmi.n	800567c <_printf_i+0x18c>
 8005676:	065f      	lsls	r7, r3, #25
 8005678:	bf48      	it	mi
 800567a:	b2b6      	uxthmi	r6, r6
 800567c:	07df      	lsls	r7, r3, #31
 800567e:	bf48      	it	mi
 8005680:	f043 0320 	orrmi.w	r3, r3, #32
 8005684:	6029      	str	r1, [r5, #0]
 8005686:	bf48      	it	mi
 8005688:	6023      	strmi	r3, [r4, #0]
 800568a:	b91e      	cbnz	r6, 8005694 <_printf_i+0x1a4>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	f023 0320 	bic.w	r3, r3, #32
 8005692:	6023      	str	r3, [r4, #0]
 8005694:	2310      	movs	r3, #16
 8005696:	e7a7      	b.n	80055e8 <_printf_i+0xf8>
 8005698:	4824      	ldr	r0, [pc, #144]	; (800572c <_printf_i+0x23c>)
 800569a:	e7e4      	b.n	8005666 <_printf_i+0x176>
 800569c:	4615      	mov	r5, r2
 800569e:	e7bd      	b.n	800561c <_printf_i+0x12c>
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	6826      	ldr	r6, [r4, #0]
 80056a4:	6961      	ldr	r1, [r4, #20]
 80056a6:	1d18      	adds	r0, r3, #4
 80056a8:	6028      	str	r0, [r5, #0]
 80056aa:	0635      	lsls	r5, r6, #24
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	d501      	bpl.n	80056b4 <_printf_i+0x1c4>
 80056b0:	6019      	str	r1, [r3, #0]
 80056b2:	e002      	b.n	80056ba <_printf_i+0x1ca>
 80056b4:	0670      	lsls	r0, r6, #25
 80056b6:	d5fb      	bpl.n	80056b0 <_printf_i+0x1c0>
 80056b8:	8019      	strh	r1, [r3, #0]
 80056ba:	2300      	movs	r3, #0
 80056bc:	6123      	str	r3, [r4, #16]
 80056be:	4615      	mov	r5, r2
 80056c0:	e7bc      	b.n	800563c <_printf_i+0x14c>
 80056c2:	682b      	ldr	r3, [r5, #0]
 80056c4:	1d1a      	adds	r2, r3, #4
 80056c6:	602a      	str	r2, [r5, #0]
 80056c8:	681d      	ldr	r5, [r3, #0]
 80056ca:	6862      	ldr	r2, [r4, #4]
 80056cc:	2100      	movs	r1, #0
 80056ce:	4628      	mov	r0, r5
 80056d0:	f7fa fd86 	bl	80001e0 <memchr>
 80056d4:	b108      	cbz	r0, 80056da <_printf_i+0x1ea>
 80056d6:	1b40      	subs	r0, r0, r5
 80056d8:	6060      	str	r0, [r4, #4]
 80056da:	6863      	ldr	r3, [r4, #4]
 80056dc:	6123      	str	r3, [r4, #16]
 80056de:	2300      	movs	r3, #0
 80056e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e4:	e7aa      	b.n	800563c <_printf_i+0x14c>
 80056e6:	6923      	ldr	r3, [r4, #16]
 80056e8:	462a      	mov	r2, r5
 80056ea:	4649      	mov	r1, r9
 80056ec:	4640      	mov	r0, r8
 80056ee:	47d0      	blx	sl
 80056f0:	3001      	adds	r0, #1
 80056f2:	d0ad      	beq.n	8005650 <_printf_i+0x160>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	079b      	lsls	r3, r3, #30
 80056f8:	d413      	bmi.n	8005722 <_printf_i+0x232>
 80056fa:	68e0      	ldr	r0, [r4, #12]
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	4298      	cmp	r0, r3
 8005700:	bfb8      	it	lt
 8005702:	4618      	movlt	r0, r3
 8005704:	e7a6      	b.n	8005654 <_printf_i+0x164>
 8005706:	2301      	movs	r3, #1
 8005708:	4632      	mov	r2, r6
 800570a:	4649      	mov	r1, r9
 800570c:	4640      	mov	r0, r8
 800570e:	47d0      	blx	sl
 8005710:	3001      	adds	r0, #1
 8005712:	d09d      	beq.n	8005650 <_printf_i+0x160>
 8005714:	3501      	adds	r5, #1
 8005716:	68e3      	ldr	r3, [r4, #12]
 8005718:	9903      	ldr	r1, [sp, #12]
 800571a:	1a5b      	subs	r3, r3, r1
 800571c:	42ab      	cmp	r3, r5
 800571e:	dcf2      	bgt.n	8005706 <_printf_i+0x216>
 8005720:	e7eb      	b.n	80056fa <_printf_i+0x20a>
 8005722:	2500      	movs	r5, #0
 8005724:	f104 0619 	add.w	r6, r4, #25
 8005728:	e7f5      	b.n	8005716 <_printf_i+0x226>
 800572a:	bf00      	nop
 800572c:	0800966a 	.word	0x0800966a
 8005730:	0800967b 	.word	0x0800967b

08005734 <_scanf_float>:
 8005734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005738:	b087      	sub	sp, #28
 800573a:	4617      	mov	r7, r2
 800573c:	9303      	str	r3, [sp, #12]
 800573e:	688b      	ldr	r3, [r1, #8]
 8005740:	1e5a      	subs	r2, r3, #1
 8005742:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005746:	bf83      	ittte	hi
 8005748:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800574c:	195b      	addhi	r3, r3, r5
 800574e:	9302      	strhi	r3, [sp, #8]
 8005750:	2300      	movls	r3, #0
 8005752:	bf86      	itte	hi
 8005754:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005758:	608b      	strhi	r3, [r1, #8]
 800575a:	9302      	strls	r3, [sp, #8]
 800575c:	680b      	ldr	r3, [r1, #0]
 800575e:	468b      	mov	fp, r1
 8005760:	2500      	movs	r5, #0
 8005762:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005766:	f84b 3b1c 	str.w	r3, [fp], #28
 800576a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800576e:	4680      	mov	r8, r0
 8005770:	460c      	mov	r4, r1
 8005772:	465e      	mov	r6, fp
 8005774:	46aa      	mov	sl, r5
 8005776:	46a9      	mov	r9, r5
 8005778:	9501      	str	r5, [sp, #4]
 800577a:	68a2      	ldr	r2, [r4, #8]
 800577c:	b152      	cbz	r2, 8005794 <_scanf_float+0x60>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b4e      	cmp	r3, #78	; 0x4e
 8005784:	d864      	bhi.n	8005850 <_scanf_float+0x11c>
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d83c      	bhi.n	8005804 <_scanf_float+0xd0>
 800578a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800578e:	b2c8      	uxtb	r0, r1
 8005790:	280e      	cmp	r0, #14
 8005792:	d93a      	bls.n	800580a <_scanf_float+0xd6>
 8005794:	f1b9 0f00 	cmp.w	r9, #0
 8005798:	d003      	beq.n	80057a2 <_scanf_float+0x6e>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057a6:	f1ba 0f01 	cmp.w	sl, #1
 80057aa:	f200 8113 	bhi.w	80059d4 <_scanf_float+0x2a0>
 80057ae:	455e      	cmp	r6, fp
 80057b0:	f200 8105 	bhi.w	80059be <_scanf_float+0x28a>
 80057b4:	2501      	movs	r5, #1
 80057b6:	4628      	mov	r0, r5
 80057b8:	b007      	add	sp, #28
 80057ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80057c2:	2a0d      	cmp	r2, #13
 80057c4:	d8e6      	bhi.n	8005794 <_scanf_float+0x60>
 80057c6:	a101      	add	r1, pc, #4	; (adr r1, 80057cc <_scanf_float+0x98>)
 80057c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80057cc:	0800590b 	.word	0x0800590b
 80057d0:	08005795 	.word	0x08005795
 80057d4:	08005795 	.word	0x08005795
 80057d8:	08005795 	.word	0x08005795
 80057dc:	0800596b 	.word	0x0800596b
 80057e0:	08005943 	.word	0x08005943
 80057e4:	08005795 	.word	0x08005795
 80057e8:	08005795 	.word	0x08005795
 80057ec:	08005919 	.word	0x08005919
 80057f0:	08005795 	.word	0x08005795
 80057f4:	08005795 	.word	0x08005795
 80057f8:	08005795 	.word	0x08005795
 80057fc:	08005795 	.word	0x08005795
 8005800:	080058d1 	.word	0x080058d1
 8005804:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005808:	e7db      	b.n	80057c2 <_scanf_float+0x8e>
 800580a:	290e      	cmp	r1, #14
 800580c:	d8c2      	bhi.n	8005794 <_scanf_float+0x60>
 800580e:	a001      	add	r0, pc, #4	; (adr r0, 8005814 <_scanf_float+0xe0>)
 8005810:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005814:	080058c3 	.word	0x080058c3
 8005818:	08005795 	.word	0x08005795
 800581c:	080058c3 	.word	0x080058c3
 8005820:	08005957 	.word	0x08005957
 8005824:	08005795 	.word	0x08005795
 8005828:	08005871 	.word	0x08005871
 800582c:	080058ad 	.word	0x080058ad
 8005830:	080058ad 	.word	0x080058ad
 8005834:	080058ad 	.word	0x080058ad
 8005838:	080058ad 	.word	0x080058ad
 800583c:	080058ad 	.word	0x080058ad
 8005840:	080058ad 	.word	0x080058ad
 8005844:	080058ad 	.word	0x080058ad
 8005848:	080058ad 	.word	0x080058ad
 800584c:	080058ad 	.word	0x080058ad
 8005850:	2b6e      	cmp	r3, #110	; 0x6e
 8005852:	d809      	bhi.n	8005868 <_scanf_float+0x134>
 8005854:	2b60      	cmp	r3, #96	; 0x60
 8005856:	d8b2      	bhi.n	80057be <_scanf_float+0x8a>
 8005858:	2b54      	cmp	r3, #84	; 0x54
 800585a:	d077      	beq.n	800594c <_scanf_float+0x218>
 800585c:	2b59      	cmp	r3, #89	; 0x59
 800585e:	d199      	bne.n	8005794 <_scanf_float+0x60>
 8005860:	2d07      	cmp	r5, #7
 8005862:	d197      	bne.n	8005794 <_scanf_float+0x60>
 8005864:	2508      	movs	r5, #8
 8005866:	e029      	b.n	80058bc <_scanf_float+0x188>
 8005868:	2b74      	cmp	r3, #116	; 0x74
 800586a:	d06f      	beq.n	800594c <_scanf_float+0x218>
 800586c:	2b79      	cmp	r3, #121	; 0x79
 800586e:	e7f6      	b.n	800585e <_scanf_float+0x12a>
 8005870:	6821      	ldr	r1, [r4, #0]
 8005872:	05c8      	lsls	r0, r1, #23
 8005874:	d51a      	bpl.n	80058ac <_scanf_float+0x178>
 8005876:	9b02      	ldr	r3, [sp, #8]
 8005878:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800587c:	6021      	str	r1, [r4, #0]
 800587e:	f109 0901 	add.w	r9, r9, #1
 8005882:	b11b      	cbz	r3, 800588c <_scanf_float+0x158>
 8005884:	3b01      	subs	r3, #1
 8005886:	3201      	adds	r2, #1
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	60a2      	str	r2, [r4, #8]
 800588c:	68a3      	ldr	r3, [r4, #8]
 800588e:	3b01      	subs	r3, #1
 8005890:	60a3      	str	r3, [r4, #8]
 8005892:	6923      	ldr	r3, [r4, #16]
 8005894:	3301      	adds	r3, #1
 8005896:	6123      	str	r3, [r4, #16]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3b01      	subs	r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	607b      	str	r3, [r7, #4]
 80058a0:	f340 8084 	ble.w	80059ac <_scanf_float+0x278>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	3301      	adds	r3, #1
 80058a8:	603b      	str	r3, [r7, #0]
 80058aa:	e766      	b.n	800577a <_scanf_float+0x46>
 80058ac:	eb1a 0f05 	cmn.w	sl, r5
 80058b0:	f47f af70 	bne.w	8005794 <_scanf_float+0x60>
 80058b4:	6822      	ldr	r2, [r4, #0]
 80058b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80058ba:	6022      	str	r2, [r4, #0]
 80058bc:	f806 3b01 	strb.w	r3, [r6], #1
 80058c0:	e7e4      	b.n	800588c <_scanf_float+0x158>
 80058c2:	6822      	ldr	r2, [r4, #0]
 80058c4:	0610      	lsls	r0, r2, #24
 80058c6:	f57f af65 	bpl.w	8005794 <_scanf_float+0x60>
 80058ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058ce:	e7f4      	b.n	80058ba <_scanf_float+0x186>
 80058d0:	f1ba 0f00 	cmp.w	sl, #0
 80058d4:	d10e      	bne.n	80058f4 <_scanf_float+0x1c0>
 80058d6:	f1b9 0f00 	cmp.w	r9, #0
 80058da:	d10e      	bne.n	80058fa <_scanf_float+0x1c6>
 80058dc:	6822      	ldr	r2, [r4, #0]
 80058de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80058e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80058e6:	d108      	bne.n	80058fa <_scanf_float+0x1c6>
 80058e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80058ec:	6022      	str	r2, [r4, #0]
 80058ee:	f04f 0a01 	mov.w	sl, #1
 80058f2:	e7e3      	b.n	80058bc <_scanf_float+0x188>
 80058f4:	f1ba 0f02 	cmp.w	sl, #2
 80058f8:	d055      	beq.n	80059a6 <_scanf_float+0x272>
 80058fa:	2d01      	cmp	r5, #1
 80058fc:	d002      	beq.n	8005904 <_scanf_float+0x1d0>
 80058fe:	2d04      	cmp	r5, #4
 8005900:	f47f af48 	bne.w	8005794 <_scanf_float+0x60>
 8005904:	3501      	adds	r5, #1
 8005906:	b2ed      	uxtb	r5, r5
 8005908:	e7d8      	b.n	80058bc <_scanf_float+0x188>
 800590a:	f1ba 0f01 	cmp.w	sl, #1
 800590e:	f47f af41 	bne.w	8005794 <_scanf_float+0x60>
 8005912:	f04f 0a02 	mov.w	sl, #2
 8005916:	e7d1      	b.n	80058bc <_scanf_float+0x188>
 8005918:	b97d      	cbnz	r5, 800593a <_scanf_float+0x206>
 800591a:	f1b9 0f00 	cmp.w	r9, #0
 800591e:	f47f af3c 	bne.w	800579a <_scanf_float+0x66>
 8005922:	6822      	ldr	r2, [r4, #0]
 8005924:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005928:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800592c:	f47f af39 	bne.w	80057a2 <_scanf_float+0x6e>
 8005930:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005934:	6022      	str	r2, [r4, #0]
 8005936:	2501      	movs	r5, #1
 8005938:	e7c0      	b.n	80058bc <_scanf_float+0x188>
 800593a:	2d03      	cmp	r5, #3
 800593c:	d0e2      	beq.n	8005904 <_scanf_float+0x1d0>
 800593e:	2d05      	cmp	r5, #5
 8005940:	e7de      	b.n	8005900 <_scanf_float+0x1cc>
 8005942:	2d02      	cmp	r5, #2
 8005944:	f47f af26 	bne.w	8005794 <_scanf_float+0x60>
 8005948:	2503      	movs	r5, #3
 800594a:	e7b7      	b.n	80058bc <_scanf_float+0x188>
 800594c:	2d06      	cmp	r5, #6
 800594e:	f47f af21 	bne.w	8005794 <_scanf_float+0x60>
 8005952:	2507      	movs	r5, #7
 8005954:	e7b2      	b.n	80058bc <_scanf_float+0x188>
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	0591      	lsls	r1, r2, #22
 800595a:	f57f af1b 	bpl.w	8005794 <_scanf_float+0x60>
 800595e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005962:	6022      	str	r2, [r4, #0]
 8005964:	f8cd 9004 	str.w	r9, [sp, #4]
 8005968:	e7a8      	b.n	80058bc <_scanf_float+0x188>
 800596a:	6822      	ldr	r2, [r4, #0]
 800596c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005970:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005974:	d006      	beq.n	8005984 <_scanf_float+0x250>
 8005976:	0550      	lsls	r0, r2, #21
 8005978:	f57f af0c 	bpl.w	8005794 <_scanf_float+0x60>
 800597c:	f1b9 0f00 	cmp.w	r9, #0
 8005980:	f43f af0f 	beq.w	80057a2 <_scanf_float+0x6e>
 8005984:	0591      	lsls	r1, r2, #22
 8005986:	bf58      	it	pl
 8005988:	9901      	ldrpl	r1, [sp, #4]
 800598a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800598e:	bf58      	it	pl
 8005990:	eba9 0101 	subpl.w	r1, r9, r1
 8005994:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005998:	bf58      	it	pl
 800599a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800599e:	6022      	str	r2, [r4, #0]
 80059a0:	f04f 0900 	mov.w	r9, #0
 80059a4:	e78a      	b.n	80058bc <_scanf_float+0x188>
 80059a6:	f04f 0a03 	mov.w	sl, #3
 80059aa:	e787      	b.n	80058bc <_scanf_float+0x188>
 80059ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80059b0:	4639      	mov	r1, r7
 80059b2:	4640      	mov	r0, r8
 80059b4:	4798      	blx	r3
 80059b6:	2800      	cmp	r0, #0
 80059b8:	f43f aedf 	beq.w	800577a <_scanf_float+0x46>
 80059bc:	e6ea      	b.n	8005794 <_scanf_float+0x60>
 80059be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059c6:	463a      	mov	r2, r7
 80059c8:	4640      	mov	r0, r8
 80059ca:	4798      	blx	r3
 80059cc:	6923      	ldr	r3, [r4, #16]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	6123      	str	r3, [r4, #16]
 80059d2:	e6ec      	b.n	80057ae <_scanf_float+0x7a>
 80059d4:	1e6b      	subs	r3, r5, #1
 80059d6:	2b06      	cmp	r3, #6
 80059d8:	d825      	bhi.n	8005a26 <_scanf_float+0x2f2>
 80059da:	2d02      	cmp	r5, #2
 80059dc:	d836      	bhi.n	8005a4c <_scanf_float+0x318>
 80059de:	455e      	cmp	r6, fp
 80059e0:	f67f aee8 	bls.w	80057b4 <_scanf_float+0x80>
 80059e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059ec:	463a      	mov	r2, r7
 80059ee:	4640      	mov	r0, r8
 80059f0:	4798      	blx	r3
 80059f2:	6923      	ldr	r3, [r4, #16]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	6123      	str	r3, [r4, #16]
 80059f8:	e7f1      	b.n	80059de <_scanf_float+0x2aa>
 80059fa:	9802      	ldr	r0, [sp, #8]
 80059fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005a04:	9002      	str	r0, [sp, #8]
 8005a06:	463a      	mov	r2, r7
 8005a08:	4640      	mov	r0, r8
 8005a0a:	4798      	blx	r3
 8005a0c:	6923      	ldr	r3, [r4, #16]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a16:	fa5f fa8a 	uxtb.w	sl, sl
 8005a1a:	f1ba 0f02 	cmp.w	sl, #2
 8005a1e:	d1ec      	bne.n	80059fa <_scanf_float+0x2c6>
 8005a20:	3d03      	subs	r5, #3
 8005a22:	b2ed      	uxtb	r5, r5
 8005a24:	1b76      	subs	r6, r6, r5
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	05da      	lsls	r2, r3, #23
 8005a2a:	d52f      	bpl.n	8005a8c <_scanf_float+0x358>
 8005a2c:	055b      	lsls	r3, r3, #21
 8005a2e:	d510      	bpl.n	8005a52 <_scanf_float+0x31e>
 8005a30:	455e      	cmp	r6, fp
 8005a32:	f67f aebf 	bls.w	80057b4 <_scanf_float+0x80>
 8005a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a3e:	463a      	mov	r2, r7
 8005a40:	4640      	mov	r0, r8
 8005a42:	4798      	blx	r3
 8005a44:	6923      	ldr	r3, [r4, #16]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	6123      	str	r3, [r4, #16]
 8005a4a:	e7f1      	b.n	8005a30 <_scanf_float+0x2fc>
 8005a4c:	46aa      	mov	sl, r5
 8005a4e:	9602      	str	r6, [sp, #8]
 8005a50:	e7df      	b.n	8005a12 <_scanf_float+0x2de>
 8005a52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	2965      	cmp	r1, #101	; 0x65
 8005a5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a5e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005a62:	6123      	str	r3, [r4, #16]
 8005a64:	d00c      	beq.n	8005a80 <_scanf_float+0x34c>
 8005a66:	2945      	cmp	r1, #69	; 0x45
 8005a68:	d00a      	beq.n	8005a80 <_scanf_float+0x34c>
 8005a6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a6e:	463a      	mov	r2, r7
 8005a70:	4640      	mov	r0, r8
 8005a72:	4798      	blx	r3
 8005a74:	6923      	ldr	r3, [r4, #16]
 8005a76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	1eb5      	subs	r5, r6, #2
 8005a7e:	6123      	str	r3, [r4, #16]
 8005a80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a84:	463a      	mov	r2, r7
 8005a86:	4640      	mov	r0, r8
 8005a88:	4798      	blx	r3
 8005a8a:	462e      	mov	r6, r5
 8005a8c:	6825      	ldr	r5, [r4, #0]
 8005a8e:	f015 0510 	ands.w	r5, r5, #16
 8005a92:	d158      	bne.n	8005b46 <_scanf_float+0x412>
 8005a94:	7035      	strb	r5, [r6, #0]
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa0:	d11c      	bne.n	8005adc <_scanf_float+0x3a8>
 8005aa2:	9b01      	ldr	r3, [sp, #4]
 8005aa4:	454b      	cmp	r3, r9
 8005aa6:	eba3 0209 	sub.w	r2, r3, r9
 8005aaa:	d124      	bne.n	8005af6 <_scanf_float+0x3c2>
 8005aac:	2200      	movs	r2, #0
 8005aae:	4659      	mov	r1, fp
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	f002 fc31 	bl	8008318 <_strtod_r>
 8005ab6:	9b03      	ldr	r3, [sp, #12]
 8005ab8:	6821      	ldr	r1, [r4, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f011 0f02 	tst.w	r1, #2
 8005ac0:	ec57 6b10 	vmov	r6, r7, d0
 8005ac4:	f103 0204 	add.w	r2, r3, #4
 8005ac8:	d020      	beq.n	8005b0c <_scanf_float+0x3d8>
 8005aca:	9903      	ldr	r1, [sp, #12]
 8005acc:	600a      	str	r2, [r1, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	e9c3 6700 	strd	r6, r7, [r3]
 8005ad4:	68e3      	ldr	r3, [r4, #12]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	60e3      	str	r3, [r4, #12]
 8005ada:	e66c      	b.n	80057b6 <_scanf_float+0x82>
 8005adc:	9b04      	ldr	r3, [sp, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0e4      	beq.n	8005aac <_scanf_float+0x378>
 8005ae2:	9905      	ldr	r1, [sp, #20]
 8005ae4:	230a      	movs	r3, #10
 8005ae6:	462a      	mov	r2, r5
 8005ae8:	3101      	adds	r1, #1
 8005aea:	4640      	mov	r0, r8
 8005aec:	f002 fc9c 	bl	8008428 <_strtol_r>
 8005af0:	9b04      	ldr	r3, [sp, #16]
 8005af2:	9e05      	ldr	r6, [sp, #20]
 8005af4:	1ac2      	subs	r2, r0, r3
 8005af6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005afa:	429e      	cmp	r6, r3
 8005afc:	bf28      	it	cs
 8005afe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005b02:	4912      	ldr	r1, [pc, #72]	; (8005b4c <_scanf_float+0x418>)
 8005b04:	4630      	mov	r0, r6
 8005b06:	f000 f8e7 	bl	8005cd8 <siprintf>
 8005b0a:	e7cf      	b.n	8005aac <_scanf_float+0x378>
 8005b0c:	f011 0f04 	tst.w	r1, #4
 8005b10:	9903      	ldr	r1, [sp, #12]
 8005b12:	600a      	str	r2, [r1, #0]
 8005b14:	d1db      	bne.n	8005ace <_scanf_float+0x39a>
 8005b16:	f8d3 8000 	ldr.w	r8, [r3]
 8005b1a:	ee10 2a10 	vmov	r2, s0
 8005b1e:	ee10 0a10 	vmov	r0, s0
 8005b22:	463b      	mov	r3, r7
 8005b24:	4639      	mov	r1, r7
 8005b26:	f7fb f809 	bl	8000b3c <__aeabi_dcmpun>
 8005b2a:	b128      	cbz	r0, 8005b38 <_scanf_float+0x404>
 8005b2c:	4808      	ldr	r0, [pc, #32]	; (8005b50 <_scanf_float+0x41c>)
 8005b2e:	f000 f9b7 	bl	8005ea0 <nanf>
 8005b32:	ed88 0a00 	vstr	s0, [r8]
 8005b36:	e7cd      	b.n	8005ad4 <_scanf_float+0x3a0>
 8005b38:	4630      	mov	r0, r6
 8005b3a:	4639      	mov	r1, r7
 8005b3c:	f7fb f85c 	bl	8000bf8 <__aeabi_d2f>
 8005b40:	f8c8 0000 	str.w	r0, [r8]
 8005b44:	e7c6      	b.n	8005ad4 <_scanf_float+0x3a0>
 8005b46:	2500      	movs	r5, #0
 8005b48:	e635      	b.n	80057b6 <_scanf_float+0x82>
 8005b4a:	bf00      	nop
 8005b4c:	0800968c 	.word	0x0800968c
 8005b50:	08009a1d 	.word	0x08009a1d

08005b54 <std>:
 8005b54:	2300      	movs	r3, #0
 8005b56:	b510      	push	{r4, lr}
 8005b58:	4604      	mov	r4, r0
 8005b5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b62:	6083      	str	r3, [r0, #8]
 8005b64:	8181      	strh	r1, [r0, #12]
 8005b66:	6643      	str	r3, [r0, #100]	; 0x64
 8005b68:	81c2      	strh	r2, [r0, #14]
 8005b6a:	6183      	str	r3, [r0, #24]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	2208      	movs	r2, #8
 8005b70:	305c      	adds	r0, #92	; 0x5c
 8005b72:	f000 f914 	bl	8005d9e <memset>
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <std+0x58>)
 8005b78:	6263      	str	r3, [r4, #36]	; 0x24
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <std+0x5c>)
 8005b7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <std+0x60>)
 8005b80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b82:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <std+0x64>)
 8005b84:	6323      	str	r3, [r4, #48]	; 0x30
 8005b86:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <std+0x68>)
 8005b88:	6224      	str	r4, [r4, #32]
 8005b8a:	429c      	cmp	r4, r3
 8005b8c:	d006      	beq.n	8005b9c <std+0x48>
 8005b8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b92:	4294      	cmp	r4, r2
 8005b94:	d002      	beq.n	8005b9c <std+0x48>
 8005b96:	33d0      	adds	r3, #208	; 0xd0
 8005b98:	429c      	cmp	r4, r3
 8005b9a:	d105      	bne.n	8005ba8 <std+0x54>
 8005b9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba4:	f000 b978 	b.w	8005e98 <__retarget_lock_init_recursive>
 8005ba8:	bd10      	pop	{r4, pc}
 8005baa:	bf00      	nop
 8005bac:	08005d19 	.word	0x08005d19
 8005bb0:	08005d3b 	.word	0x08005d3b
 8005bb4:	08005d73 	.word	0x08005d73
 8005bb8:	08005d97 	.word	0x08005d97
 8005bbc:	20000338 	.word	0x20000338

08005bc0 <stdio_exit_handler>:
 8005bc0:	4a02      	ldr	r2, [pc, #8]	; (8005bcc <stdio_exit_handler+0xc>)
 8005bc2:	4903      	ldr	r1, [pc, #12]	; (8005bd0 <stdio_exit_handler+0x10>)
 8005bc4:	4803      	ldr	r0, [pc, #12]	; (8005bd4 <stdio_exit_handler+0x14>)
 8005bc6:	f000 b869 	b.w	8005c9c <_fwalk_sglue>
 8005bca:	bf00      	nop
 8005bcc:	2000000c 	.word	0x2000000c
 8005bd0:	080087e9 	.word	0x080087e9
 8005bd4:	20000018 	.word	0x20000018

08005bd8 <cleanup_stdio>:
 8005bd8:	6841      	ldr	r1, [r0, #4]
 8005bda:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <cleanup_stdio+0x34>)
 8005bdc:	4299      	cmp	r1, r3
 8005bde:	b510      	push	{r4, lr}
 8005be0:	4604      	mov	r4, r0
 8005be2:	d001      	beq.n	8005be8 <cleanup_stdio+0x10>
 8005be4:	f002 fe00 	bl	80087e8 <_fflush_r>
 8005be8:	68a1      	ldr	r1, [r4, #8]
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <cleanup_stdio+0x38>)
 8005bec:	4299      	cmp	r1, r3
 8005bee:	d002      	beq.n	8005bf6 <cleanup_stdio+0x1e>
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f002 fdf9 	bl	80087e8 <_fflush_r>
 8005bf6:	68e1      	ldr	r1, [r4, #12]
 8005bf8:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <cleanup_stdio+0x3c>)
 8005bfa:	4299      	cmp	r1, r3
 8005bfc:	d004      	beq.n	8005c08 <cleanup_stdio+0x30>
 8005bfe:	4620      	mov	r0, r4
 8005c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c04:	f002 bdf0 	b.w	80087e8 <_fflush_r>
 8005c08:	bd10      	pop	{r4, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000338 	.word	0x20000338
 8005c10:	200003a0 	.word	0x200003a0
 8005c14:	20000408 	.word	0x20000408

08005c18 <global_stdio_init.part.0>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <global_stdio_init.part.0+0x30>)
 8005c1c:	4c0b      	ldr	r4, [pc, #44]	; (8005c4c <global_stdio_init.part.0+0x34>)
 8005c1e:	4a0c      	ldr	r2, [pc, #48]	; (8005c50 <global_stdio_init.part.0+0x38>)
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	4620      	mov	r0, r4
 8005c24:	2200      	movs	r2, #0
 8005c26:	2104      	movs	r1, #4
 8005c28:	f7ff ff94 	bl	8005b54 <std>
 8005c2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c30:	2201      	movs	r2, #1
 8005c32:	2109      	movs	r1, #9
 8005c34:	f7ff ff8e 	bl	8005b54 <std>
 8005c38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c42:	2112      	movs	r1, #18
 8005c44:	f7ff bf86 	b.w	8005b54 <std>
 8005c48:	20000470 	.word	0x20000470
 8005c4c:	20000338 	.word	0x20000338
 8005c50:	08005bc1 	.word	0x08005bc1

08005c54 <__sfp_lock_acquire>:
 8005c54:	4801      	ldr	r0, [pc, #4]	; (8005c5c <__sfp_lock_acquire+0x8>)
 8005c56:	f000 b920 	b.w	8005e9a <__retarget_lock_acquire_recursive>
 8005c5a:	bf00      	nop
 8005c5c:	20000479 	.word	0x20000479

08005c60 <__sfp_lock_release>:
 8005c60:	4801      	ldr	r0, [pc, #4]	; (8005c68 <__sfp_lock_release+0x8>)
 8005c62:	f000 b91b 	b.w	8005e9c <__retarget_lock_release_recursive>
 8005c66:	bf00      	nop
 8005c68:	20000479 	.word	0x20000479

08005c6c <__sinit>:
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	4604      	mov	r4, r0
 8005c70:	f7ff fff0 	bl	8005c54 <__sfp_lock_acquire>
 8005c74:	6a23      	ldr	r3, [r4, #32]
 8005c76:	b11b      	cbz	r3, 8005c80 <__sinit+0x14>
 8005c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c7c:	f7ff bff0 	b.w	8005c60 <__sfp_lock_release>
 8005c80:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <__sinit+0x28>)
 8005c82:	6223      	str	r3, [r4, #32]
 8005c84:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <__sinit+0x2c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1f5      	bne.n	8005c78 <__sinit+0xc>
 8005c8c:	f7ff ffc4 	bl	8005c18 <global_stdio_init.part.0>
 8005c90:	e7f2      	b.n	8005c78 <__sinit+0xc>
 8005c92:	bf00      	nop
 8005c94:	08005bd9 	.word	0x08005bd9
 8005c98:	20000470 	.word	0x20000470

08005c9c <_fwalk_sglue>:
 8005c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ca0:	4607      	mov	r7, r0
 8005ca2:	4688      	mov	r8, r1
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cac:	f1b9 0901 	subs.w	r9, r9, #1
 8005cb0:	d505      	bpl.n	8005cbe <_fwalk_sglue+0x22>
 8005cb2:	6824      	ldr	r4, [r4, #0]
 8005cb4:	2c00      	cmp	r4, #0
 8005cb6:	d1f7      	bne.n	8005ca8 <_fwalk_sglue+0xc>
 8005cb8:	4630      	mov	r0, r6
 8005cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cbe:	89ab      	ldrh	r3, [r5, #12]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d907      	bls.n	8005cd4 <_fwalk_sglue+0x38>
 8005cc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	d003      	beq.n	8005cd4 <_fwalk_sglue+0x38>
 8005ccc:	4629      	mov	r1, r5
 8005cce:	4638      	mov	r0, r7
 8005cd0:	47c0      	blx	r8
 8005cd2:	4306      	orrs	r6, r0
 8005cd4:	3568      	adds	r5, #104	; 0x68
 8005cd6:	e7e9      	b.n	8005cac <_fwalk_sglue+0x10>

08005cd8 <siprintf>:
 8005cd8:	b40e      	push	{r1, r2, r3}
 8005cda:	b500      	push	{lr}
 8005cdc:	b09c      	sub	sp, #112	; 0x70
 8005cde:	ab1d      	add	r3, sp, #116	; 0x74
 8005ce0:	9002      	str	r0, [sp, #8]
 8005ce2:	9006      	str	r0, [sp, #24]
 8005ce4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ce8:	4809      	ldr	r0, [pc, #36]	; (8005d10 <siprintf+0x38>)
 8005cea:	9107      	str	r1, [sp, #28]
 8005cec:	9104      	str	r1, [sp, #16]
 8005cee:	4909      	ldr	r1, [pc, #36]	; (8005d14 <siprintf+0x3c>)
 8005cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cf4:	9105      	str	r1, [sp, #20]
 8005cf6:	6800      	ldr	r0, [r0, #0]
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	a902      	add	r1, sp, #8
 8005cfc:	f002 fbf0 	bl	80084e0 <_svfiprintf_r>
 8005d00:	9b02      	ldr	r3, [sp, #8]
 8005d02:	2200      	movs	r2, #0
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	b01c      	add	sp, #112	; 0x70
 8005d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d0c:	b003      	add	sp, #12
 8005d0e:	4770      	bx	lr
 8005d10:	20000064 	.word	0x20000064
 8005d14:	ffff0208 	.word	0xffff0208

08005d18 <__sread>:
 8005d18:	b510      	push	{r4, lr}
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d20:	f000 f86c 	bl	8005dfc <_read_r>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	bfab      	itete	ge
 8005d28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d2c:	181b      	addge	r3, r3, r0
 8005d2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d32:	bfac      	ite	ge
 8005d34:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d36:	81a3      	strhlt	r3, [r4, #12]
 8005d38:	bd10      	pop	{r4, pc}

08005d3a <__swrite>:
 8005d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3e:	461f      	mov	r7, r3
 8005d40:	898b      	ldrh	r3, [r1, #12]
 8005d42:	05db      	lsls	r3, r3, #23
 8005d44:	4605      	mov	r5, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	4616      	mov	r6, r2
 8005d4a:	d505      	bpl.n	8005d58 <__swrite+0x1e>
 8005d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d50:	2302      	movs	r3, #2
 8005d52:	2200      	movs	r2, #0
 8005d54:	f000 f840 	bl	8005dd8 <_lseek_r>
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d62:	81a3      	strh	r3, [r4, #12]
 8005d64:	4632      	mov	r2, r6
 8005d66:	463b      	mov	r3, r7
 8005d68:	4628      	mov	r0, r5
 8005d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6e:	f000 b857 	b.w	8005e20 <_write_r>

08005d72 <__sseek>:
 8005d72:	b510      	push	{r4, lr}
 8005d74:	460c      	mov	r4, r1
 8005d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d7a:	f000 f82d 	bl	8005dd8 <_lseek_r>
 8005d7e:	1c43      	adds	r3, r0, #1
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	bf15      	itete	ne
 8005d84:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d8e:	81a3      	strheq	r3, [r4, #12]
 8005d90:	bf18      	it	ne
 8005d92:	81a3      	strhne	r3, [r4, #12]
 8005d94:	bd10      	pop	{r4, pc}

08005d96 <__sclose>:
 8005d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d9a:	f000 b80d 	b.w	8005db8 <_close_r>

08005d9e <memset>:
 8005d9e:	4402      	add	r2, r0
 8005da0:	4603      	mov	r3, r0
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d100      	bne.n	8005da8 <memset+0xa>
 8005da6:	4770      	bx	lr
 8005da8:	f803 1b01 	strb.w	r1, [r3], #1
 8005dac:	e7f9      	b.n	8005da2 <memset+0x4>
	...

08005db0 <_localeconv_r>:
 8005db0:	4800      	ldr	r0, [pc, #0]	; (8005db4 <_localeconv_r+0x4>)
 8005db2:	4770      	bx	lr
 8005db4:	20000158 	.word	0x20000158

08005db8 <_close_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d06      	ldr	r5, [pc, #24]	; (8005dd4 <_close_r+0x1c>)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	f7fc fc31 	bl	800262a <_close>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_close_r+0x1a>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_close_r+0x1a>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	20000474 	.word	0x20000474

08005dd8 <_lseek_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4d07      	ldr	r5, [pc, #28]	; (8005df8 <_lseek_r+0x20>)
 8005ddc:	4604      	mov	r4, r0
 8005dde:	4608      	mov	r0, r1
 8005de0:	4611      	mov	r1, r2
 8005de2:	2200      	movs	r2, #0
 8005de4:	602a      	str	r2, [r5, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f7fc fc46 	bl	8002678 <_lseek>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_lseek_r+0x1e>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_lseek_r+0x1e>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	20000474 	.word	0x20000474

08005dfc <_read_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d07      	ldr	r5, [pc, #28]	; (8005e1c <_read_r+0x20>)
 8005e00:	4604      	mov	r4, r0
 8005e02:	4608      	mov	r0, r1
 8005e04:	4611      	mov	r1, r2
 8005e06:	2200      	movs	r2, #0
 8005e08:	602a      	str	r2, [r5, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f7fc fbd4 	bl	80025b8 <_read>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_read_r+0x1e>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_read_r+0x1e>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	20000474 	.word	0x20000474

08005e20 <_write_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d07      	ldr	r5, [pc, #28]	; (8005e40 <_write_r+0x20>)
 8005e24:	4604      	mov	r4, r0
 8005e26:	4608      	mov	r0, r1
 8005e28:	4611      	mov	r1, r2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	602a      	str	r2, [r5, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f7fc fbdf 	bl	80025f2 <_write>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d102      	bne.n	8005e3e <_write_r+0x1e>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b103      	cbz	r3, 8005e3e <_write_r+0x1e>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
 8005e40:	20000474 	.word	0x20000474

08005e44 <__errno>:
 8005e44:	4b01      	ldr	r3, [pc, #4]	; (8005e4c <__errno+0x8>)
 8005e46:	6818      	ldr	r0, [r3, #0]
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000064 	.word	0x20000064

08005e50 <__libc_init_array>:
 8005e50:	b570      	push	{r4, r5, r6, lr}
 8005e52:	4d0d      	ldr	r5, [pc, #52]	; (8005e88 <__libc_init_array+0x38>)
 8005e54:	4c0d      	ldr	r4, [pc, #52]	; (8005e8c <__libc_init_array+0x3c>)
 8005e56:	1b64      	subs	r4, r4, r5
 8005e58:	10a4      	asrs	r4, r4, #2
 8005e5a:	2600      	movs	r6, #0
 8005e5c:	42a6      	cmp	r6, r4
 8005e5e:	d109      	bne.n	8005e74 <__libc_init_array+0x24>
 8005e60:	4d0b      	ldr	r5, [pc, #44]	; (8005e90 <__libc_init_array+0x40>)
 8005e62:	4c0c      	ldr	r4, [pc, #48]	; (8005e94 <__libc_init_array+0x44>)
 8005e64:	f003 fbd8 	bl	8009618 <_init>
 8005e68:	1b64      	subs	r4, r4, r5
 8005e6a:	10a4      	asrs	r4, r4, #2
 8005e6c:	2600      	movs	r6, #0
 8005e6e:	42a6      	cmp	r6, r4
 8005e70:	d105      	bne.n	8005e7e <__libc_init_array+0x2e>
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
 8005e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e78:	4798      	blx	r3
 8005e7a:	3601      	adds	r6, #1
 8005e7c:	e7ee      	b.n	8005e5c <__libc_init_array+0xc>
 8005e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e82:	4798      	blx	r3
 8005e84:	3601      	adds	r6, #1
 8005e86:	e7f2      	b.n	8005e6e <__libc_init_array+0x1e>
 8005e88:	08009a88 	.word	0x08009a88
 8005e8c:	08009a88 	.word	0x08009a88
 8005e90:	08009a88 	.word	0x08009a88
 8005e94:	08009a8c 	.word	0x08009a8c

08005e98 <__retarget_lock_init_recursive>:
 8005e98:	4770      	bx	lr

08005e9a <__retarget_lock_acquire_recursive>:
 8005e9a:	4770      	bx	lr

08005e9c <__retarget_lock_release_recursive>:
 8005e9c:	4770      	bx	lr
	...

08005ea0 <nanf>:
 8005ea0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005ea8 <nanf+0x8>
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	7fc00000 	.word	0x7fc00000

08005eac <quorem>:
 8005eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb0:	6903      	ldr	r3, [r0, #16]
 8005eb2:	690c      	ldr	r4, [r1, #16]
 8005eb4:	42a3      	cmp	r3, r4
 8005eb6:	4607      	mov	r7, r0
 8005eb8:	db7e      	blt.n	8005fb8 <quorem+0x10c>
 8005eba:	3c01      	subs	r4, #1
 8005ebc:	f101 0814 	add.w	r8, r1, #20
 8005ec0:	f100 0514 	add.w	r5, r0, #20
 8005ec4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ece:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005eda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ede:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ee2:	d331      	bcc.n	8005f48 <quorem+0x9c>
 8005ee4:	f04f 0e00 	mov.w	lr, #0
 8005ee8:	4640      	mov	r0, r8
 8005eea:	46ac      	mov	ip, r5
 8005eec:	46f2      	mov	sl, lr
 8005eee:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ef2:	b293      	uxth	r3, r2
 8005ef4:	fb06 e303 	mla	r3, r6, r3, lr
 8005ef8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005efc:	0c1a      	lsrs	r2, r3, #16
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	ebaa 0303 	sub.w	r3, sl, r3
 8005f04:	f8dc a000 	ldr.w	sl, [ip]
 8005f08:	fa13 f38a 	uxtah	r3, r3, sl
 8005f0c:	fb06 220e 	mla	r2, r6, lr, r2
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	9b00      	ldr	r3, [sp, #0]
 8005f14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f18:	b292      	uxth	r2, r2
 8005f1a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f22:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f26:	4581      	cmp	r9, r0
 8005f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f2c:	f84c 3b04 	str.w	r3, [ip], #4
 8005f30:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f34:	d2db      	bcs.n	8005eee <quorem+0x42>
 8005f36:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f3a:	b92b      	cbnz	r3, 8005f48 <quorem+0x9c>
 8005f3c:	9b01      	ldr	r3, [sp, #4]
 8005f3e:	3b04      	subs	r3, #4
 8005f40:	429d      	cmp	r5, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	d32c      	bcc.n	8005fa0 <quorem+0xf4>
 8005f46:	613c      	str	r4, [r7, #16]
 8005f48:	4638      	mov	r0, r7
 8005f4a:	f001 f9f1 	bl	8007330 <__mcmp>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	db22      	blt.n	8005f98 <quorem+0xec>
 8005f52:	3601      	adds	r6, #1
 8005f54:	4629      	mov	r1, r5
 8005f56:	2000      	movs	r0, #0
 8005f58:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f5c:	f8d1 c000 	ldr.w	ip, [r1]
 8005f60:	b293      	uxth	r3, r2
 8005f62:	1ac3      	subs	r3, r0, r3
 8005f64:	0c12      	lsrs	r2, r2, #16
 8005f66:	fa13 f38c 	uxtah	r3, r3, ip
 8005f6a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f78:	45c1      	cmp	r9, r8
 8005f7a:	f841 3b04 	str.w	r3, [r1], #4
 8005f7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f82:	d2e9      	bcs.n	8005f58 <quorem+0xac>
 8005f84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f8c:	b922      	cbnz	r2, 8005f98 <quorem+0xec>
 8005f8e:	3b04      	subs	r3, #4
 8005f90:	429d      	cmp	r5, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	d30a      	bcc.n	8005fac <quorem+0x100>
 8005f96:	613c      	str	r4, [r7, #16]
 8005f98:	4630      	mov	r0, r6
 8005f9a:	b003      	add	sp, #12
 8005f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	3b04      	subs	r3, #4
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	d1ce      	bne.n	8005f46 <quorem+0x9a>
 8005fa8:	3c01      	subs	r4, #1
 8005faa:	e7c9      	b.n	8005f40 <quorem+0x94>
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	3b04      	subs	r3, #4
 8005fb0:	2a00      	cmp	r2, #0
 8005fb2:	d1f0      	bne.n	8005f96 <quorem+0xea>
 8005fb4:	3c01      	subs	r4, #1
 8005fb6:	e7eb      	b.n	8005f90 <quorem+0xe4>
 8005fb8:	2000      	movs	r0, #0
 8005fba:	e7ee      	b.n	8005f9a <quorem+0xee>
 8005fbc:	0000      	movs	r0, r0
	...

08005fc0 <_dtoa_r>:
 8005fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc4:	ed2d 8b04 	vpush	{d8-d9}
 8005fc8:	69c5      	ldr	r5, [r0, #28]
 8005fca:	b093      	sub	sp, #76	; 0x4c
 8005fcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005fd0:	ec57 6b10 	vmov	r6, r7, d0
 8005fd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fd8:	9107      	str	r1, [sp, #28]
 8005fda:	4604      	mov	r4, r0
 8005fdc:	920a      	str	r2, [sp, #40]	; 0x28
 8005fde:	930d      	str	r3, [sp, #52]	; 0x34
 8005fe0:	b975      	cbnz	r5, 8006000 <_dtoa_r+0x40>
 8005fe2:	2010      	movs	r0, #16
 8005fe4:	f000 fe2a 	bl	8006c3c <malloc>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	61e0      	str	r0, [r4, #28]
 8005fec:	b920      	cbnz	r0, 8005ff8 <_dtoa_r+0x38>
 8005fee:	4bae      	ldr	r3, [pc, #696]	; (80062a8 <_dtoa_r+0x2e8>)
 8005ff0:	21ef      	movs	r1, #239	; 0xef
 8005ff2:	48ae      	ldr	r0, [pc, #696]	; (80062ac <_dtoa_r+0x2ec>)
 8005ff4:	f002 fc74 	bl	80088e0 <__assert_func>
 8005ff8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ffc:	6005      	str	r5, [r0, #0]
 8005ffe:	60c5      	str	r5, [r0, #12]
 8006000:	69e3      	ldr	r3, [r4, #28]
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	b151      	cbz	r1, 800601c <_dtoa_r+0x5c>
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	604a      	str	r2, [r1, #4]
 800600a:	2301      	movs	r3, #1
 800600c:	4093      	lsls	r3, r2
 800600e:	608b      	str	r3, [r1, #8]
 8006010:	4620      	mov	r0, r4
 8006012:	f000 ff07 	bl	8006e24 <_Bfree>
 8006016:	69e3      	ldr	r3, [r4, #28]
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	1e3b      	subs	r3, r7, #0
 800601e:	bfbb      	ittet	lt
 8006020:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006024:	9303      	strlt	r3, [sp, #12]
 8006026:	2300      	movge	r3, #0
 8006028:	2201      	movlt	r2, #1
 800602a:	bfac      	ite	ge
 800602c:	f8c8 3000 	strge.w	r3, [r8]
 8006030:	f8c8 2000 	strlt.w	r2, [r8]
 8006034:	4b9e      	ldr	r3, [pc, #632]	; (80062b0 <_dtoa_r+0x2f0>)
 8006036:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800603a:	ea33 0308 	bics.w	r3, r3, r8
 800603e:	d11b      	bne.n	8006078 <_dtoa_r+0xb8>
 8006040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006042:	f242 730f 	movw	r3, #9999	; 0x270f
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800604c:	4333      	orrs	r3, r6
 800604e:	f000 8593 	beq.w	8006b78 <_dtoa_r+0xbb8>
 8006052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006054:	b963      	cbnz	r3, 8006070 <_dtoa_r+0xb0>
 8006056:	4b97      	ldr	r3, [pc, #604]	; (80062b4 <_dtoa_r+0x2f4>)
 8006058:	e027      	b.n	80060aa <_dtoa_r+0xea>
 800605a:	4b97      	ldr	r3, [pc, #604]	; (80062b8 <_dtoa_r+0x2f8>)
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	3308      	adds	r3, #8
 8006060:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006062:	6013      	str	r3, [r2, #0]
 8006064:	9800      	ldr	r0, [sp, #0]
 8006066:	b013      	add	sp, #76	; 0x4c
 8006068:	ecbd 8b04 	vpop	{d8-d9}
 800606c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006070:	4b90      	ldr	r3, [pc, #576]	; (80062b4 <_dtoa_r+0x2f4>)
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	3303      	adds	r3, #3
 8006076:	e7f3      	b.n	8006060 <_dtoa_r+0xa0>
 8006078:	ed9d 7b02 	vldr	d7, [sp, #8]
 800607c:	2200      	movs	r2, #0
 800607e:	ec51 0b17 	vmov	r0, r1, d7
 8006082:	eeb0 8a47 	vmov.f32	s16, s14
 8006086:	eef0 8a67 	vmov.f32	s17, s15
 800608a:	2300      	movs	r3, #0
 800608c:	f7fa fd24 	bl	8000ad8 <__aeabi_dcmpeq>
 8006090:	4681      	mov	r9, r0
 8006092:	b160      	cbz	r0, 80060ae <_dtoa_r+0xee>
 8006094:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006096:	2301      	movs	r3, #1
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 8568 	beq.w	8006b72 <_dtoa_r+0xbb2>
 80060a2:	4b86      	ldr	r3, [pc, #536]	; (80062bc <_dtoa_r+0x2fc>)
 80060a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	e7da      	b.n	8006064 <_dtoa_r+0xa4>
 80060ae:	aa10      	add	r2, sp, #64	; 0x40
 80060b0:	a911      	add	r1, sp, #68	; 0x44
 80060b2:	4620      	mov	r0, r4
 80060b4:	eeb0 0a48 	vmov.f32	s0, s16
 80060b8:	eef0 0a68 	vmov.f32	s1, s17
 80060bc:	f001 fa4e 	bl	800755c <__d2b>
 80060c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80060c4:	4682      	mov	sl, r0
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	d07f      	beq.n	80061ca <_dtoa_r+0x20a>
 80060ca:	ee18 3a90 	vmov	r3, s17
 80060ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80060d6:	ec51 0b18 	vmov	r0, r1, d8
 80060da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80060e6:	4619      	mov	r1, r3
 80060e8:	2200      	movs	r2, #0
 80060ea:	4b75      	ldr	r3, [pc, #468]	; (80062c0 <_dtoa_r+0x300>)
 80060ec:	f7fa f8d4 	bl	8000298 <__aeabi_dsub>
 80060f0:	a367      	add	r3, pc, #412	; (adr r3, 8006290 <_dtoa_r+0x2d0>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa fa87 	bl	8000608 <__aeabi_dmul>
 80060fa:	a367      	add	r3, pc, #412	; (adr r3, 8006298 <_dtoa_r+0x2d8>)
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	f7fa f8cc 	bl	800029c <__adddf3>
 8006104:	4606      	mov	r6, r0
 8006106:	4628      	mov	r0, r5
 8006108:	460f      	mov	r7, r1
 800610a:	f7fa fa13 	bl	8000534 <__aeabi_i2d>
 800610e:	a364      	add	r3, pc, #400	; (adr r3, 80062a0 <_dtoa_r+0x2e0>)
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	f7fa fa78 	bl	8000608 <__aeabi_dmul>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4630      	mov	r0, r6
 800611e:	4639      	mov	r1, r7
 8006120:	f7fa f8bc 	bl	800029c <__adddf3>
 8006124:	4606      	mov	r6, r0
 8006126:	460f      	mov	r7, r1
 8006128:	f7fa fd1e 	bl	8000b68 <__aeabi_d2iz>
 800612c:	2200      	movs	r2, #0
 800612e:	4683      	mov	fp, r0
 8006130:	2300      	movs	r3, #0
 8006132:	4630      	mov	r0, r6
 8006134:	4639      	mov	r1, r7
 8006136:	f7fa fcd9 	bl	8000aec <__aeabi_dcmplt>
 800613a:	b148      	cbz	r0, 8006150 <_dtoa_r+0x190>
 800613c:	4658      	mov	r0, fp
 800613e:	f7fa f9f9 	bl	8000534 <__aeabi_i2d>
 8006142:	4632      	mov	r2, r6
 8006144:	463b      	mov	r3, r7
 8006146:	f7fa fcc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800614a:	b908      	cbnz	r0, 8006150 <_dtoa_r+0x190>
 800614c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006150:	f1bb 0f16 	cmp.w	fp, #22
 8006154:	d857      	bhi.n	8006206 <_dtoa_r+0x246>
 8006156:	4b5b      	ldr	r3, [pc, #364]	; (80062c4 <_dtoa_r+0x304>)
 8006158:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	ec51 0b18 	vmov	r0, r1, d8
 8006164:	f7fa fcc2 	bl	8000aec <__aeabi_dcmplt>
 8006168:	2800      	cmp	r0, #0
 800616a:	d04e      	beq.n	800620a <_dtoa_r+0x24a>
 800616c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006170:	2300      	movs	r3, #0
 8006172:	930c      	str	r3, [sp, #48]	; 0x30
 8006174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006176:	1b5b      	subs	r3, r3, r5
 8006178:	1e5a      	subs	r2, r3, #1
 800617a:	bf45      	ittet	mi
 800617c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006180:	9305      	strmi	r3, [sp, #20]
 8006182:	2300      	movpl	r3, #0
 8006184:	2300      	movmi	r3, #0
 8006186:	9206      	str	r2, [sp, #24]
 8006188:	bf54      	ite	pl
 800618a:	9305      	strpl	r3, [sp, #20]
 800618c:	9306      	strmi	r3, [sp, #24]
 800618e:	f1bb 0f00 	cmp.w	fp, #0
 8006192:	db3c      	blt.n	800620e <_dtoa_r+0x24e>
 8006194:	9b06      	ldr	r3, [sp, #24]
 8006196:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800619a:	445b      	add	r3, fp
 800619c:	9306      	str	r3, [sp, #24]
 800619e:	2300      	movs	r3, #0
 80061a0:	9308      	str	r3, [sp, #32]
 80061a2:	9b07      	ldr	r3, [sp, #28]
 80061a4:	2b09      	cmp	r3, #9
 80061a6:	d868      	bhi.n	800627a <_dtoa_r+0x2ba>
 80061a8:	2b05      	cmp	r3, #5
 80061aa:	bfc4      	itt	gt
 80061ac:	3b04      	subgt	r3, #4
 80061ae:	9307      	strgt	r3, [sp, #28]
 80061b0:	9b07      	ldr	r3, [sp, #28]
 80061b2:	f1a3 0302 	sub.w	r3, r3, #2
 80061b6:	bfcc      	ite	gt
 80061b8:	2500      	movgt	r5, #0
 80061ba:	2501      	movle	r5, #1
 80061bc:	2b03      	cmp	r3, #3
 80061be:	f200 8085 	bhi.w	80062cc <_dtoa_r+0x30c>
 80061c2:	e8df f003 	tbb	[pc, r3]
 80061c6:	3b2e      	.short	0x3b2e
 80061c8:	5839      	.short	0x5839
 80061ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80061ce:	441d      	add	r5, r3
 80061d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061d4:	2b20      	cmp	r3, #32
 80061d6:	bfc1      	itttt	gt
 80061d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80061e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80061e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061e8:	bfd6      	itet	le
 80061ea:	f1c3 0320 	rsble	r3, r3, #32
 80061ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80061f2:	fa06 f003 	lslle.w	r0, r6, r3
 80061f6:	f7fa f98d 	bl	8000514 <__aeabi_ui2d>
 80061fa:	2201      	movs	r2, #1
 80061fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006200:	3d01      	subs	r5, #1
 8006202:	920e      	str	r2, [sp, #56]	; 0x38
 8006204:	e76f      	b.n	80060e6 <_dtoa_r+0x126>
 8006206:	2301      	movs	r3, #1
 8006208:	e7b3      	b.n	8006172 <_dtoa_r+0x1b2>
 800620a:	900c      	str	r0, [sp, #48]	; 0x30
 800620c:	e7b2      	b.n	8006174 <_dtoa_r+0x1b4>
 800620e:	9b05      	ldr	r3, [sp, #20]
 8006210:	eba3 030b 	sub.w	r3, r3, fp
 8006214:	9305      	str	r3, [sp, #20]
 8006216:	f1cb 0300 	rsb	r3, fp, #0
 800621a:	9308      	str	r3, [sp, #32]
 800621c:	2300      	movs	r3, #0
 800621e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006220:	e7bf      	b.n	80061a2 <_dtoa_r+0x1e2>
 8006222:	2300      	movs	r3, #0
 8006224:	9309      	str	r3, [sp, #36]	; 0x24
 8006226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006228:	2b00      	cmp	r3, #0
 800622a:	dc52      	bgt.n	80062d2 <_dtoa_r+0x312>
 800622c:	2301      	movs	r3, #1
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	461a      	mov	r2, r3
 8006234:	920a      	str	r2, [sp, #40]	; 0x28
 8006236:	e00b      	b.n	8006250 <_dtoa_r+0x290>
 8006238:	2301      	movs	r3, #1
 800623a:	e7f3      	b.n	8006224 <_dtoa_r+0x264>
 800623c:	2300      	movs	r3, #0
 800623e:	9309      	str	r3, [sp, #36]	; 0x24
 8006240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006242:	445b      	add	r3, fp
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	3301      	adds	r3, #1
 8006248:	2b01      	cmp	r3, #1
 800624a:	9304      	str	r3, [sp, #16]
 800624c:	bfb8      	it	lt
 800624e:	2301      	movlt	r3, #1
 8006250:	69e0      	ldr	r0, [r4, #28]
 8006252:	2100      	movs	r1, #0
 8006254:	2204      	movs	r2, #4
 8006256:	f102 0614 	add.w	r6, r2, #20
 800625a:	429e      	cmp	r6, r3
 800625c:	d93d      	bls.n	80062da <_dtoa_r+0x31a>
 800625e:	6041      	str	r1, [r0, #4]
 8006260:	4620      	mov	r0, r4
 8006262:	f000 fd9f 	bl	8006da4 <_Balloc>
 8006266:	9000      	str	r0, [sp, #0]
 8006268:	2800      	cmp	r0, #0
 800626a:	d139      	bne.n	80062e0 <_dtoa_r+0x320>
 800626c:	4b16      	ldr	r3, [pc, #88]	; (80062c8 <_dtoa_r+0x308>)
 800626e:	4602      	mov	r2, r0
 8006270:	f240 11af 	movw	r1, #431	; 0x1af
 8006274:	e6bd      	b.n	8005ff2 <_dtoa_r+0x32>
 8006276:	2301      	movs	r3, #1
 8006278:	e7e1      	b.n	800623e <_dtoa_r+0x27e>
 800627a:	2501      	movs	r5, #1
 800627c:	2300      	movs	r3, #0
 800627e:	9307      	str	r3, [sp, #28]
 8006280:	9509      	str	r5, [sp, #36]	; 0x24
 8006282:	f04f 33ff 	mov.w	r3, #4294967295
 8006286:	9301      	str	r3, [sp, #4]
 8006288:	9304      	str	r3, [sp, #16]
 800628a:	2200      	movs	r2, #0
 800628c:	2312      	movs	r3, #18
 800628e:	e7d1      	b.n	8006234 <_dtoa_r+0x274>
 8006290:	636f4361 	.word	0x636f4361
 8006294:	3fd287a7 	.word	0x3fd287a7
 8006298:	8b60c8b3 	.word	0x8b60c8b3
 800629c:	3fc68a28 	.word	0x3fc68a28
 80062a0:	509f79fb 	.word	0x509f79fb
 80062a4:	3fd34413 	.word	0x3fd34413
 80062a8:	0800969e 	.word	0x0800969e
 80062ac:	080096b5 	.word	0x080096b5
 80062b0:	7ff00000 	.word	0x7ff00000
 80062b4:	0800969a 	.word	0x0800969a
 80062b8:	08009691 	.word	0x08009691
 80062bc:	08009669 	.word	0x08009669
 80062c0:	3ff80000 	.word	0x3ff80000
 80062c4:	080097a0 	.word	0x080097a0
 80062c8:	0800970d 	.word	0x0800970d
 80062cc:	2301      	movs	r3, #1
 80062ce:	9309      	str	r3, [sp, #36]	; 0x24
 80062d0:	e7d7      	b.n	8006282 <_dtoa_r+0x2c2>
 80062d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	9304      	str	r3, [sp, #16]
 80062d8:	e7ba      	b.n	8006250 <_dtoa_r+0x290>
 80062da:	3101      	adds	r1, #1
 80062dc:	0052      	lsls	r2, r2, #1
 80062de:	e7ba      	b.n	8006256 <_dtoa_r+0x296>
 80062e0:	69e3      	ldr	r3, [r4, #28]
 80062e2:	9a00      	ldr	r2, [sp, #0]
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	9b04      	ldr	r3, [sp, #16]
 80062e8:	2b0e      	cmp	r3, #14
 80062ea:	f200 80a8 	bhi.w	800643e <_dtoa_r+0x47e>
 80062ee:	2d00      	cmp	r5, #0
 80062f0:	f000 80a5 	beq.w	800643e <_dtoa_r+0x47e>
 80062f4:	f1bb 0f00 	cmp.w	fp, #0
 80062f8:	dd38      	ble.n	800636c <_dtoa_r+0x3ac>
 80062fa:	4bc0      	ldr	r3, [pc, #768]	; (80065fc <_dtoa_r+0x63c>)
 80062fc:	f00b 020f 	and.w	r2, fp, #15
 8006300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006304:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006308:	e9d3 6700 	ldrd	r6, r7, [r3]
 800630c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006310:	d019      	beq.n	8006346 <_dtoa_r+0x386>
 8006312:	4bbb      	ldr	r3, [pc, #748]	; (8006600 <_dtoa_r+0x640>)
 8006314:	ec51 0b18 	vmov	r0, r1, d8
 8006318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800631c:	f7fa fa9e 	bl	800085c <__aeabi_ddiv>
 8006320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006324:	f008 080f 	and.w	r8, r8, #15
 8006328:	2503      	movs	r5, #3
 800632a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006600 <_dtoa_r+0x640>
 800632e:	f1b8 0f00 	cmp.w	r8, #0
 8006332:	d10a      	bne.n	800634a <_dtoa_r+0x38a>
 8006334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006338:	4632      	mov	r2, r6
 800633a:	463b      	mov	r3, r7
 800633c:	f7fa fa8e 	bl	800085c <__aeabi_ddiv>
 8006340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006344:	e02b      	b.n	800639e <_dtoa_r+0x3de>
 8006346:	2502      	movs	r5, #2
 8006348:	e7ef      	b.n	800632a <_dtoa_r+0x36a>
 800634a:	f018 0f01 	tst.w	r8, #1
 800634e:	d008      	beq.n	8006362 <_dtoa_r+0x3a2>
 8006350:	4630      	mov	r0, r6
 8006352:	4639      	mov	r1, r7
 8006354:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006358:	f7fa f956 	bl	8000608 <__aeabi_dmul>
 800635c:	3501      	adds	r5, #1
 800635e:	4606      	mov	r6, r0
 8006360:	460f      	mov	r7, r1
 8006362:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006366:	f109 0908 	add.w	r9, r9, #8
 800636a:	e7e0      	b.n	800632e <_dtoa_r+0x36e>
 800636c:	f000 809f 	beq.w	80064ae <_dtoa_r+0x4ee>
 8006370:	f1cb 0600 	rsb	r6, fp, #0
 8006374:	4ba1      	ldr	r3, [pc, #644]	; (80065fc <_dtoa_r+0x63c>)
 8006376:	4fa2      	ldr	r7, [pc, #648]	; (8006600 <_dtoa_r+0x640>)
 8006378:	f006 020f 	and.w	r2, r6, #15
 800637c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	ec51 0b18 	vmov	r0, r1, d8
 8006388:	f7fa f93e 	bl	8000608 <__aeabi_dmul>
 800638c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006390:	1136      	asrs	r6, r6, #4
 8006392:	2300      	movs	r3, #0
 8006394:	2502      	movs	r5, #2
 8006396:	2e00      	cmp	r6, #0
 8006398:	d17e      	bne.n	8006498 <_dtoa_r+0x4d8>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1d0      	bne.n	8006340 <_dtoa_r+0x380>
 800639e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8084 	beq.w	80064b2 <_dtoa_r+0x4f2>
 80063aa:	4b96      	ldr	r3, [pc, #600]	; (8006604 <_dtoa_r+0x644>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	4640      	mov	r0, r8
 80063b0:	4649      	mov	r1, r9
 80063b2:	f7fa fb9b 	bl	8000aec <__aeabi_dcmplt>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d07b      	beq.n	80064b2 <_dtoa_r+0x4f2>
 80063ba:	9b04      	ldr	r3, [sp, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d078      	beq.n	80064b2 <_dtoa_r+0x4f2>
 80063c0:	9b01      	ldr	r3, [sp, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	dd39      	ble.n	800643a <_dtoa_r+0x47a>
 80063c6:	4b90      	ldr	r3, [pc, #576]	; (8006608 <_dtoa_r+0x648>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	4640      	mov	r0, r8
 80063cc:	4649      	mov	r1, r9
 80063ce:	f7fa f91b 	bl	8000608 <__aeabi_dmul>
 80063d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063d6:	9e01      	ldr	r6, [sp, #4]
 80063d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80063dc:	3501      	adds	r5, #1
 80063de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063e2:	4628      	mov	r0, r5
 80063e4:	f7fa f8a6 	bl	8000534 <__aeabi_i2d>
 80063e8:	4642      	mov	r2, r8
 80063ea:	464b      	mov	r3, r9
 80063ec:	f7fa f90c 	bl	8000608 <__aeabi_dmul>
 80063f0:	4b86      	ldr	r3, [pc, #536]	; (800660c <_dtoa_r+0x64c>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	f7f9 ff52 	bl	800029c <__adddf3>
 80063f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80063fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006400:	9303      	str	r3, [sp, #12]
 8006402:	2e00      	cmp	r6, #0
 8006404:	d158      	bne.n	80064b8 <_dtoa_r+0x4f8>
 8006406:	4b82      	ldr	r3, [pc, #520]	; (8006610 <_dtoa_r+0x650>)
 8006408:	2200      	movs	r2, #0
 800640a:	4640      	mov	r0, r8
 800640c:	4649      	mov	r1, r9
 800640e:	f7f9 ff43 	bl	8000298 <__aeabi_dsub>
 8006412:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006416:	4680      	mov	r8, r0
 8006418:	4689      	mov	r9, r1
 800641a:	f7fa fb85 	bl	8000b28 <__aeabi_dcmpgt>
 800641e:	2800      	cmp	r0, #0
 8006420:	f040 8296 	bne.w	8006950 <_dtoa_r+0x990>
 8006424:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006428:	4640      	mov	r0, r8
 800642a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800642e:	4649      	mov	r1, r9
 8006430:	f7fa fb5c 	bl	8000aec <__aeabi_dcmplt>
 8006434:	2800      	cmp	r0, #0
 8006436:	f040 8289 	bne.w	800694c <_dtoa_r+0x98c>
 800643a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800643e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006440:	2b00      	cmp	r3, #0
 8006442:	f2c0 814e 	blt.w	80066e2 <_dtoa_r+0x722>
 8006446:	f1bb 0f0e 	cmp.w	fp, #14
 800644a:	f300 814a 	bgt.w	80066e2 <_dtoa_r+0x722>
 800644e:	4b6b      	ldr	r3, [pc, #428]	; (80065fc <_dtoa_r+0x63c>)
 8006450:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006454:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	f280 80dc 	bge.w	8006618 <_dtoa_r+0x658>
 8006460:	9b04      	ldr	r3, [sp, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	f300 80d8 	bgt.w	8006618 <_dtoa_r+0x658>
 8006468:	f040 826f 	bne.w	800694a <_dtoa_r+0x98a>
 800646c:	4b68      	ldr	r3, [pc, #416]	; (8006610 <_dtoa_r+0x650>)
 800646e:	2200      	movs	r2, #0
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	f7fa f8c8 	bl	8000608 <__aeabi_dmul>
 8006478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800647c:	f7fa fb4a 	bl	8000b14 <__aeabi_dcmpge>
 8006480:	9e04      	ldr	r6, [sp, #16]
 8006482:	4637      	mov	r7, r6
 8006484:	2800      	cmp	r0, #0
 8006486:	f040 8245 	bne.w	8006914 <_dtoa_r+0x954>
 800648a:	9d00      	ldr	r5, [sp, #0]
 800648c:	2331      	movs	r3, #49	; 0x31
 800648e:	f805 3b01 	strb.w	r3, [r5], #1
 8006492:	f10b 0b01 	add.w	fp, fp, #1
 8006496:	e241      	b.n	800691c <_dtoa_r+0x95c>
 8006498:	07f2      	lsls	r2, r6, #31
 800649a:	d505      	bpl.n	80064a8 <_dtoa_r+0x4e8>
 800649c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a0:	f7fa f8b2 	bl	8000608 <__aeabi_dmul>
 80064a4:	3501      	adds	r5, #1
 80064a6:	2301      	movs	r3, #1
 80064a8:	1076      	asrs	r6, r6, #1
 80064aa:	3708      	adds	r7, #8
 80064ac:	e773      	b.n	8006396 <_dtoa_r+0x3d6>
 80064ae:	2502      	movs	r5, #2
 80064b0:	e775      	b.n	800639e <_dtoa_r+0x3de>
 80064b2:	9e04      	ldr	r6, [sp, #16]
 80064b4:	465f      	mov	r7, fp
 80064b6:	e792      	b.n	80063de <_dtoa_r+0x41e>
 80064b8:	9900      	ldr	r1, [sp, #0]
 80064ba:	4b50      	ldr	r3, [pc, #320]	; (80065fc <_dtoa_r+0x63c>)
 80064bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064c0:	4431      	add	r1, r6
 80064c2:	9102      	str	r1, [sp, #8]
 80064c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064c6:	eeb0 9a47 	vmov.f32	s18, s14
 80064ca:	eef0 9a67 	vmov.f32	s19, s15
 80064ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064d6:	2900      	cmp	r1, #0
 80064d8:	d044      	beq.n	8006564 <_dtoa_r+0x5a4>
 80064da:	494e      	ldr	r1, [pc, #312]	; (8006614 <_dtoa_r+0x654>)
 80064dc:	2000      	movs	r0, #0
 80064de:	f7fa f9bd 	bl	800085c <__aeabi_ddiv>
 80064e2:	ec53 2b19 	vmov	r2, r3, d9
 80064e6:	f7f9 fed7 	bl	8000298 <__aeabi_dsub>
 80064ea:	9d00      	ldr	r5, [sp, #0]
 80064ec:	ec41 0b19 	vmov	d9, r0, r1
 80064f0:	4649      	mov	r1, r9
 80064f2:	4640      	mov	r0, r8
 80064f4:	f7fa fb38 	bl	8000b68 <__aeabi_d2iz>
 80064f8:	4606      	mov	r6, r0
 80064fa:	f7fa f81b 	bl	8000534 <__aeabi_i2d>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4640      	mov	r0, r8
 8006504:	4649      	mov	r1, r9
 8006506:	f7f9 fec7 	bl	8000298 <__aeabi_dsub>
 800650a:	3630      	adds	r6, #48	; 0x30
 800650c:	f805 6b01 	strb.w	r6, [r5], #1
 8006510:	ec53 2b19 	vmov	r2, r3, d9
 8006514:	4680      	mov	r8, r0
 8006516:	4689      	mov	r9, r1
 8006518:	f7fa fae8 	bl	8000aec <__aeabi_dcmplt>
 800651c:	2800      	cmp	r0, #0
 800651e:	d164      	bne.n	80065ea <_dtoa_r+0x62a>
 8006520:	4642      	mov	r2, r8
 8006522:	464b      	mov	r3, r9
 8006524:	4937      	ldr	r1, [pc, #220]	; (8006604 <_dtoa_r+0x644>)
 8006526:	2000      	movs	r0, #0
 8006528:	f7f9 feb6 	bl	8000298 <__aeabi_dsub>
 800652c:	ec53 2b19 	vmov	r2, r3, d9
 8006530:	f7fa fadc 	bl	8000aec <__aeabi_dcmplt>
 8006534:	2800      	cmp	r0, #0
 8006536:	f040 80b6 	bne.w	80066a6 <_dtoa_r+0x6e6>
 800653a:	9b02      	ldr	r3, [sp, #8]
 800653c:	429d      	cmp	r5, r3
 800653e:	f43f af7c 	beq.w	800643a <_dtoa_r+0x47a>
 8006542:	4b31      	ldr	r3, [pc, #196]	; (8006608 <_dtoa_r+0x648>)
 8006544:	ec51 0b19 	vmov	r0, r1, d9
 8006548:	2200      	movs	r2, #0
 800654a:	f7fa f85d 	bl	8000608 <__aeabi_dmul>
 800654e:	4b2e      	ldr	r3, [pc, #184]	; (8006608 <_dtoa_r+0x648>)
 8006550:	ec41 0b19 	vmov	d9, r0, r1
 8006554:	2200      	movs	r2, #0
 8006556:	4640      	mov	r0, r8
 8006558:	4649      	mov	r1, r9
 800655a:	f7fa f855 	bl	8000608 <__aeabi_dmul>
 800655e:	4680      	mov	r8, r0
 8006560:	4689      	mov	r9, r1
 8006562:	e7c5      	b.n	80064f0 <_dtoa_r+0x530>
 8006564:	ec51 0b17 	vmov	r0, r1, d7
 8006568:	f7fa f84e 	bl	8000608 <__aeabi_dmul>
 800656c:	9b02      	ldr	r3, [sp, #8]
 800656e:	9d00      	ldr	r5, [sp, #0]
 8006570:	930f      	str	r3, [sp, #60]	; 0x3c
 8006572:	ec41 0b19 	vmov	d9, r0, r1
 8006576:	4649      	mov	r1, r9
 8006578:	4640      	mov	r0, r8
 800657a:	f7fa faf5 	bl	8000b68 <__aeabi_d2iz>
 800657e:	4606      	mov	r6, r0
 8006580:	f7f9 ffd8 	bl	8000534 <__aeabi_i2d>
 8006584:	3630      	adds	r6, #48	; 0x30
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	4640      	mov	r0, r8
 800658c:	4649      	mov	r1, r9
 800658e:	f7f9 fe83 	bl	8000298 <__aeabi_dsub>
 8006592:	f805 6b01 	strb.w	r6, [r5], #1
 8006596:	9b02      	ldr	r3, [sp, #8]
 8006598:	429d      	cmp	r5, r3
 800659a:	4680      	mov	r8, r0
 800659c:	4689      	mov	r9, r1
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	d124      	bne.n	80065ee <_dtoa_r+0x62e>
 80065a4:	4b1b      	ldr	r3, [pc, #108]	; (8006614 <_dtoa_r+0x654>)
 80065a6:	ec51 0b19 	vmov	r0, r1, d9
 80065aa:	f7f9 fe77 	bl	800029c <__adddf3>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4640      	mov	r0, r8
 80065b4:	4649      	mov	r1, r9
 80065b6:	f7fa fab7 	bl	8000b28 <__aeabi_dcmpgt>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d173      	bne.n	80066a6 <_dtoa_r+0x6e6>
 80065be:	ec53 2b19 	vmov	r2, r3, d9
 80065c2:	4914      	ldr	r1, [pc, #80]	; (8006614 <_dtoa_r+0x654>)
 80065c4:	2000      	movs	r0, #0
 80065c6:	f7f9 fe67 	bl	8000298 <__aeabi_dsub>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4640      	mov	r0, r8
 80065d0:	4649      	mov	r1, r9
 80065d2:	f7fa fa8b 	bl	8000aec <__aeabi_dcmplt>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f43f af2f 	beq.w	800643a <_dtoa_r+0x47a>
 80065dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065de:	1e6b      	subs	r3, r5, #1
 80065e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80065e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065e6:	2b30      	cmp	r3, #48	; 0x30
 80065e8:	d0f8      	beq.n	80065dc <_dtoa_r+0x61c>
 80065ea:	46bb      	mov	fp, r7
 80065ec:	e04a      	b.n	8006684 <_dtoa_r+0x6c4>
 80065ee:	4b06      	ldr	r3, [pc, #24]	; (8006608 <_dtoa_r+0x648>)
 80065f0:	f7fa f80a 	bl	8000608 <__aeabi_dmul>
 80065f4:	4680      	mov	r8, r0
 80065f6:	4689      	mov	r9, r1
 80065f8:	e7bd      	b.n	8006576 <_dtoa_r+0x5b6>
 80065fa:	bf00      	nop
 80065fc:	080097a0 	.word	0x080097a0
 8006600:	08009778 	.word	0x08009778
 8006604:	3ff00000 	.word	0x3ff00000
 8006608:	40240000 	.word	0x40240000
 800660c:	401c0000 	.word	0x401c0000
 8006610:	40140000 	.word	0x40140000
 8006614:	3fe00000 	.word	0x3fe00000
 8006618:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800661c:	9d00      	ldr	r5, [sp, #0]
 800661e:	4642      	mov	r2, r8
 8006620:	464b      	mov	r3, r9
 8006622:	4630      	mov	r0, r6
 8006624:	4639      	mov	r1, r7
 8006626:	f7fa f919 	bl	800085c <__aeabi_ddiv>
 800662a:	f7fa fa9d 	bl	8000b68 <__aeabi_d2iz>
 800662e:	9001      	str	r0, [sp, #4]
 8006630:	f7f9 ff80 	bl	8000534 <__aeabi_i2d>
 8006634:	4642      	mov	r2, r8
 8006636:	464b      	mov	r3, r9
 8006638:	f7f9 ffe6 	bl	8000608 <__aeabi_dmul>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4630      	mov	r0, r6
 8006642:	4639      	mov	r1, r7
 8006644:	f7f9 fe28 	bl	8000298 <__aeabi_dsub>
 8006648:	9e01      	ldr	r6, [sp, #4]
 800664a:	9f04      	ldr	r7, [sp, #16]
 800664c:	3630      	adds	r6, #48	; 0x30
 800664e:	f805 6b01 	strb.w	r6, [r5], #1
 8006652:	9e00      	ldr	r6, [sp, #0]
 8006654:	1bae      	subs	r6, r5, r6
 8006656:	42b7      	cmp	r7, r6
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	d134      	bne.n	80066c8 <_dtoa_r+0x708>
 800665e:	f7f9 fe1d 	bl	800029c <__adddf3>
 8006662:	4642      	mov	r2, r8
 8006664:	464b      	mov	r3, r9
 8006666:	4606      	mov	r6, r0
 8006668:	460f      	mov	r7, r1
 800666a:	f7fa fa5d 	bl	8000b28 <__aeabi_dcmpgt>
 800666e:	b9c8      	cbnz	r0, 80066a4 <_dtoa_r+0x6e4>
 8006670:	4642      	mov	r2, r8
 8006672:	464b      	mov	r3, r9
 8006674:	4630      	mov	r0, r6
 8006676:	4639      	mov	r1, r7
 8006678:	f7fa fa2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800667c:	b110      	cbz	r0, 8006684 <_dtoa_r+0x6c4>
 800667e:	9b01      	ldr	r3, [sp, #4]
 8006680:	07db      	lsls	r3, r3, #31
 8006682:	d40f      	bmi.n	80066a4 <_dtoa_r+0x6e4>
 8006684:	4651      	mov	r1, sl
 8006686:	4620      	mov	r0, r4
 8006688:	f000 fbcc 	bl	8006e24 <_Bfree>
 800668c:	2300      	movs	r3, #0
 800668e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006690:	702b      	strb	r3, [r5, #0]
 8006692:	f10b 0301 	add.w	r3, fp, #1
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800669a:	2b00      	cmp	r3, #0
 800669c:	f43f ace2 	beq.w	8006064 <_dtoa_r+0xa4>
 80066a0:	601d      	str	r5, [r3, #0]
 80066a2:	e4df      	b.n	8006064 <_dtoa_r+0xa4>
 80066a4:	465f      	mov	r7, fp
 80066a6:	462b      	mov	r3, r5
 80066a8:	461d      	mov	r5, r3
 80066aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066ae:	2a39      	cmp	r2, #57	; 0x39
 80066b0:	d106      	bne.n	80066c0 <_dtoa_r+0x700>
 80066b2:	9a00      	ldr	r2, [sp, #0]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d1f7      	bne.n	80066a8 <_dtoa_r+0x6e8>
 80066b8:	9900      	ldr	r1, [sp, #0]
 80066ba:	2230      	movs	r2, #48	; 0x30
 80066bc:	3701      	adds	r7, #1
 80066be:	700a      	strb	r2, [r1, #0]
 80066c0:	781a      	ldrb	r2, [r3, #0]
 80066c2:	3201      	adds	r2, #1
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	e790      	b.n	80065ea <_dtoa_r+0x62a>
 80066c8:	4ba3      	ldr	r3, [pc, #652]	; (8006958 <_dtoa_r+0x998>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	f7f9 ff9c 	bl	8000608 <__aeabi_dmul>
 80066d0:	2200      	movs	r2, #0
 80066d2:	2300      	movs	r3, #0
 80066d4:	4606      	mov	r6, r0
 80066d6:	460f      	mov	r7, r1
 80066d8:	f7fa f9fe 	bl	8000ad8 <__aeabi_dcmpeq>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d09e      	beq.n	800661e <_dtoa_r+0x65e>
 80066e0:	e7d0      	b.n	8006684 <_dtoa_r+0x6c4>
 80066e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e4:	2a00      	cmp	r2, #0
 80066e6:	f000 80ca 	beq.w	800687e <_dtoa_r+0x8be>
 80066ea:	9a07      	ldr	r2, [sp, #28]
 80066ec:	2a01      	cmp	r2, #1
 80066ee:	f300 80ad 	bgt.w	800684c <_dtoa_r+0x88c>
 80066f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066f4:	2a00      	cmp	r2, #0
 80066f6:	f000 80a5 	beq.w	8006844 <_dtoa_r+0x884>
 80066fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066fe:	9e08      	ldr	r6, [sp, #32]
 8006700:	9d05      	ldr	r5, [sp, #20]
 8006702:	9a05      	ldr	r2, [sp, #20]
 8006704:	441a      	add	r2, r3
 8006706:	9205      	str	r2, [sp, #20]
 8006708:	9a06      	ldr	r2, [sp, #24]
 800670a:	2101      	movs	r1, #1
 800670c:	441a      	add	r2, r3
 800670e:	4620      	mov	r0, r4
 8006710:	9206      	str	r2, [sp, #24]
 8006712:	f000 fc87 	bl	8007024 <__i2b>
 8006716:	4607      	mov	r7, r0
 8006718:	b165      	cbz	r5, 8006734 <_dtoa_r+0x774>
 800671a:	9b06      	ldr	r3, [sp, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	dd09      	ble.n	8006734 <_dtoa_r+0x774>
 8006720:	42ab      	cmp	r3, r5
 8006722:	9a05      	ldr	r2, [sp, #20]
 8006724:	bfa8      	it	ge
 8006726:	462b      	movge	r3, r5
 8006728:	1ad2      	subs	r2, r2, r3
 800672a:	9205      	str	r2, [sp, #20]
 800672c:	9a06      	ldr	r2, [sp, #24]
 800672e:	1aed      	subs	r5, r5, r3
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	9306      	str	r3, [sp, #24]
 8006734:	9b08      	ldr	r3, [sp, #32]
 8006736:	b1f3      	cbz	r3, 8006776 <_dtoa_r+0x7b6>
 8006738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 80a3 	beq.w	8006886 <_dtoa_r+0x8c6>
 8006740:	2e00      	cmp	r6, #0
 8006742:	dd10      	ble.n	8006766 <_dtoa_r+0x7a6>
 8006744:	4639      	mov	r1, r7
 8006746:	4632      	mov	r2, r6
 8006748:	4620      	mov	r0, r4
 800674a:	f000 fd2b 	bl	80071a4 <__pow5mult>
 800674e:	4652      	mov	r2, sl
 8006750:	4601      	mov	r1, r0
 8006752:	4607      	mov	r7, r0
 8006754:	4620      	mov	r0, r4
 8006756:	f000 fc7b 	bl	8007050 <__multiply>
 800675a:	4651      	mov	r1, sl
 800675c:	4680      	mov	r8, r0
 800675e:	4620      	mov	r0, r4
 8006760:	f000 fb60 	bl	8006e24 <_Bfree>
 8006764:	46c2      	mov	sl, r8
 8006766:	9b08      	ldr	r3, [sp, #32]
 8006768:	1b9a      	subs	r2, r3, r6
 800676a:	d004      	beq.n	8006776 <_dtoa_r+0x7b6>
 800676c:	4651      	mov	r1, sl
 800676e:	4620      	mov	r0, r4
 8006770:	f000 fd18 	bl	80071a4 <__pow5mult>
 8006774:	4682      	mov	sl, r0
 8006776:	2101      	movs	r1, #1
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fc53 	bl	8007024 <__i2b>
 800677e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006780:	2b00      	cmp	r3, #0
 8006782:	4606      	mov	r6, r0
 8006784:	f340 8081 	ble.w	800688a <_dtoa_r+0x8ca>
 8006788:	461a      	mov	r2, r3
 800678a:	4601      	mov	r1, r0
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fd09 	bl	80071a4 <__pow5mult>
 8006792:	9b07      	ldr	r3, [sp, #28]
 8006794:	2b01      	cmp	r3, #1
 8006796:	4606      	mov	r6, r0
 8006798:	dd7a      	ble.n	8006890 <_dtoa_r+0x8d0>
 800679a:	f04f 0800 	mov.w	r8, #0
 800679e:	6933      	ldr	r3, [r6, #16]
 80067a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80067a4:	6918      	ldr	r0, [r3, #16]
 80067a6:	f000 fbef 	bl	8006f88 <__hi0bits>
 80067aa:	f1c0 0020 	rsb	r0, r0, #32
 80067ae:	9b06      	ldr	r3, [sp, #24]
 80067b0:	4418      	add	r0, r3
 80067b2:	f010 001f 	ands.w	r0, r0, #31
 80067b6:	f000 8094 	beq.w	80068e2 <_dtoa_r+0x922>
 80067ba:	f1c0 0320 	rsb	r3, r0, #32
 80067be:	2b04      	cmp	r3, #4
 80067c0:	f340 8085 	ble.w	80068ce <_dtoa_r+0x90e>
 80067c4:	9b05      	ldr	r3, [sp, #20]
 80067c6:	f1c0 001c 	rsb	r0, r0, #28
 80067ca:	4403      	add	r3, r0
 80067cc:	9305      	str	r3, [sp, #20]
 80067ce:	9b06      	ldr	r3, [sp, #24]
 80067d0:	4403      	add	r3, r0
 80067d2:	4405      	add	r5, r0
 80067d4:	9306      	str	r3, [sp, #24]
 80067d6:	9b05      	ldr	r3, [sp, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	dd05      	ble.n	80067e8 <_dtoa_r+0x828>
 80067dc:	4651      	mov	r1, sl
 80067de:	461a      	mov	r2, r3
 80067e0:	4620      	mov	r0, r4
 80067e2:	f000 fd39 	bl	8007258 <__lshift>
 80067e6:	4682      	mov	sl, r0
 80067e8:	9b06      	ldr	r3, [sp, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	dd05      	ble.n	80067fa <_dtoa_r+0x83a>
 80067ee:	4631      	mov	r1, r6
 80067f0:	461a      	mov	r2, r3
 80067f2:	4620      	mov	r0, r4
 80067f4:	f000 fd30 	bl	8007258 <__lshift>
 80067f8:	4606      	mov	r6, r0
 80067fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d072      	beq.n	80068e6 <_dtoa_r+0x926>
 8006800:	4631      	mov	r1, r6
 8006802:	4650      	mov	r0, sl
 8006804:	f000 fd94 	bl	8007330 <__mcmp>
 8006808:	2800      	cmp	r0, #0
 800680a:	da6c      	bge.n	80068e6 <_dtoa_r+0x926>
 800680c:	2300      	movs	r3, #0
 800680e:	4651      	mov	r1, sl
 8006810:	220a      	movs	r2, #10
 8006812:	4620      	mov	r0, r4
 8006814:	f000 fb28 	bl	8006e68 <__multadd>
 8006818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800681e:	4682      	mov	sl, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 81b0 	beq.w	8006b86 <_dtoa_r+0xbc6>
 8006826:	2300      	movs	r3, #0
 8006828:	4639      	mov	r1, r7
 800682a:	220a      	movs	r2, #10
 800682c:	4620      	mov	r0, r4
 800682e:	f000 fb1b 	bl	8006e68 <__multadd>
 8006832:	9b01      	ldr	r3, [sp, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	4607      	mov	r7, r0
 8006838:	f300 8096 	bgt.w	8006968 <_dtoa_r+0x9a8>
 800683c:	9b07      	ldr	r3, [sp, #28]
 800683e:	2b02      	cmp	r3, #2
 8006840:	dc59      	bgt.n	80068f6 <_dtoa_r+0x936>
 8006842:	e091      	b.n	8006968 <_dtoa_r+0x9a8>
 8006844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006846:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800684a:	e758      	b.n	80066fe <_dtoa_r+0x73e>
 800684c:	9b04      	ldr	r3, [sp, #16]
 800684e:	1e5e      	subs	r6, r3, #1
 8006850:	9b08      	ldr	r3, [sp, #32]
 8006852:	42b3      	cmp	r3, r6
 8006854:	bfbf      	itttt	lt
 8006856:	9b08      	ldrlt	r3, [sp, #32]
 8006858:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800685a:	9608      	strlt	r6, [sp, #32]
 800685c:	1af3      	sublt	r3, r6, r3
 800685e:	bfb4      	ite	lt
 8006860:	18d2      	addlt	r2, r2, r3
 8006862:	1b9e      	subge	r6, r3, r6
 8006864:	9b04      	ldr	r3, [sp, #16]
 8006866:	bfbc      	itt	lt
 8006868:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800686a:	2600      	movlt	r6, #0
 800686c:	2b00      	cmp	r3, #0
 800686e:	bfb7      	itett	lt
 8006870:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006874:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006878:	1a9d      	sublt	r5, r3, r2
 800687a:	2300      	movlt	r3, #0
 800687c:	e741      	b.n	8006702 <_dtoa_r+0x742>
 800687e:	9e08      	ldr	r6, [sp, #32]
 8006880:	9d05      	ldr	r5, [sp, #20]
 8006882:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006884:	e748      	b.n	8006718 <_dtoa_r+0x758>
 8006886:	9a08      	ldr	r2, [sp, #32]
 8006888:	e770      	b.n	800676c <_dtoa_r+0x7ac>
 800688a:	9b07      	ldr	r3, [sp, #28]
 800688c:	2b01      	cmp	r3, #1
 800688e:	dc19      	bgt.n	80068c4 <_dtoa_r+0x904>
 8006890:	9b02      	ldr	r3, [sp, #8]
 8006892:	b9bb      	cbnz	r3, 80068c4 <_dtoa_r+0x904>
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800689a:	b99b      	cbnz	r3, 80068c4 <_dtoa_r+0x904>
 800689c:	9b03      	ldr	r3, [sp, #12]
 800689e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068a2:	0d1b      	lsrs	r3, r3, #20
 80068a4:	051b      	lsls	r3, r3, #20
 80068a6:	b183      	cbz	r3, 80068ca <_dtoa_r+0x90a>
 80068a8:	9b05      	ldr	r3, [sp, #20]
 80068aa:	3301      	adds	r3, #1
 80068ac:	9305      	str	r3, [sp, #20]
 80068ae:	9b06      	ldr	r3, [sp, #24]
 80068b0:	3301      	adds	r3, #1
 80068b2:	9306      	str	r3, [sp, #24]
 80068b4:	f04f 0801 	mov.w	r8, #1
 80068b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f47f af6f 	bne.w	800679e <_dtoa_r+0x7de>
 80068c0:	2001      	movs	r0, #1
 80068c2:	e774      	b.n	80067ae <_dtoa_r+0x7ee>
 80068c4:	f04f 0800 	mov.w	r8, #0
 80068c8:	e7f6      	b.n	80068b8 <_dtoa_r+0x8f8>
 80068ca:	4698      	mov	r8, r3
 80068cc:	e7f4      	b.n	80068b8 <_dtoa_r+0x8f8>
 80068ce:	d082      	beq.n	80067d6 <_dtoa_r+0x816>
 80068d0:	9a05      	ldr	r2, [sp, #20]
 80068d2:	331c      	adds	r3, #28
 80068d4:	441a      	add	r2, r3
 80068d6:	9205      	str	r2, [sp, #20]
 80068d8:	9a06      	ldr	r2, [sp, #24]
 80068da:	441a      	add	r2, r3
 80068dc:	441d      	add	r5, r3
 80068de:	9206      	str	r2, [sp, #24]
 80068e0:	e779      	b.n	80067d6 <_dtoa_r+0x816>
 80068e2:	4603      	mov	r3, r0
 80068e4:	e7f4      	b.n	80068d0 <_dtoa_r+0x910>
 80068e6:	9b04      	ldr	r3, [sp, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	dc37      	bgt.n	800695c <_dtoa_r+0x99c>
 80068ec:	9b07      	ldr	r3, [sp, #28]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	dd34      	ble.n	800695c <_dtoa_r+0x99c>
 80068f2:	9b04      	ldr	r3, [sp, #16]
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	9b01      	ldr	r3, [sp, #4]
 80068f8:	b963      	cbnz	r3, 8006914 <_dtoa_r+0x954>
 80068fa:	4631      	mov	r1, r6
 80068fc:	2205      	movs	r2, #5
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 fab2 	bl	8006e68 <__multadd>
 8006904:	4601      	mov	r1, r0
 8006906:	4606      	mov	r6, r0
 8006908:	4650      	mov	r0, sl
 800690a:	f000 fd11 	bl	8007330 <__mcmp>
 800690e:	2800      	cmp	r0, #0
 8006910:	f73f adbb 	bgt.w	800648a <_dtoa_r+0x4ca>
 8006914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006916:	9d00      	ldr	r5, [sp, #0]
 8006918:	ea6f 0b03 	mvn.w	fp, r3
 800691c:	f04f 0800 	mov.w	r8, #0
 8006920:	4631      	mov	r1, r6
 8006922:	4620      	mov	r0, r4
 8006924:	f000 fa7e 	bl	8006e24 <_Bfree>
 8006928:	2f00      	cmp	r7, #0
 800692a:	f43f aeab 	beq.w	8006684 <_dtoa_r+0x6c4>
 800692e:	f1b8 0f00 	cmp.w	r8, #0
 8006932:	d005      	beq.n	8006940 <_dtoa_r+0x980>
 8006934:	45b8      	cmp	r8, r7
 8006936:	d003      	beq.n	8006940 <_dtoa_r+0x980>
 8006938:	4641      	mov	r1, r8
 800693a:	4620      	mov	r0, r4
 800693c:	f000 fa72 	bl	8006e24 <_Bfree>
 8006940:	4639      	mov	r1, r7
 8006942:	4620      	mov	r0, r4
 8006944:	f000 fa6e 	bl	8006e24 <_Bfree>
 8006948:	e69c      	b.n	8006684 <_dtoa_r+0x6c4>
 800694a:	2600      	movs	r6, #0
 800694c:	4637      	mov	r7, r6
 800694e:	e7e1      	b.n	8006914 <_dtoa_r+0x954>
 8006950:	46bb      	mov	fp, r7
 8006952:	4637      	mov	r7, r6
 8006954:	e599      	b.n	800648a <_dtoa_r+0x4ca>
 8006956:	bf00      	nop
 8006958:	40240000 	.word	0x40240000
 800695c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 80c8 	beq.w	8006af4 <_dtoa_r+0xb34>
 8006964:	9b04      	ldr	r3, [sp, #16]
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	2d00      	cmp	r5, #0
 800696a:	dd05      	ble.n	8006978 <_dtoa_r+0x9b8>
 800696c:	4639      	mov	r1, r7
 800696e:	462a      	mov	r2, r5
 8006970:	4620      	mov	r0, r4
 8006972:	f000 fc71 	bl	8007258 <__lshift>
 8006976:	4607      	mov	r7, r0
 8006978:	f1b8 0f00 	cmp.w	r8, #0
 800697c:	d05b      	beq.n	8006a36 <_dtoa_r+0xa76>
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fa0f 	bl	8006da4 <_Balloc>
 8006986:	4605      	mov	r5, r0
 8006988:	b928      	cbnz	r0, 8006996 <_dtoa_r+0x9d6>
 800698a:	4b83      	ldr	r3, [pc, #524]	; (8006b98 <_dtoa_r+0xbd8>)
 800698c:	4602      	mov	r2, r0
 800698e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006992:	f7ff bb2e 	b.w	8005ff2 <_dtoa_r+0x32>
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	3202      	adds	r2, #2
 800699a:	0092      	lsls	r2, r2, #2
 800699c:	f107 010c 	add.w	r1, r7, #12
 80069a0:	300c      	adds	r0, #12
 80069a2:	f001 ff85 	bl	80088b0 <memcpy>
 80069a6:	2201      	movs	r2, #1
 80069a8:	4629      	mov	r1, r5
 80069aa:	4620      	mov	r0, r4
 80069ac:	f000 fc54 	bl	8007258 <__lshift>
 80069b0:	9b00      	ldr	r3, [sp, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	9304      	str	r3, [sp, #16]
 80069b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ba:	4413      	add	r3, r2
 80069bc:	9308      	str	r3, [sp, #32]
 80069be:	9b02      	ldr	r3, [sp, #8]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	46b8      	mov	r8, r7
 80069c6:	9306      	str	r3, [sp, #24]
 80069c8:	4607      	mov	r7, r0
 80069ca:	9b04      	ldr	r3, [sp, #16]
 80069cc:	4631      	mov	r1, r6
 80069ce:	3b01      	subs	r3, #1
 80069d0:	4650      	mov	r0, sl
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	f7ff fa6a 	bl	8005eac <quorem>
 80069d8:	4641      	mov	r1, r8
 80069da:	9002      	str	r0, [sp, #8]
 80069dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069e0:	4650      	mov	r0, sl
 80069e2:	f000 fca5 	bl	8007330 <__mcmp>
 80069e6:	463a      	mov	r2, r7
 80069e8:	9005      	str	r0, [sp, #20]
 80069ea:	4631      	mov	r1, r6
 80069ec:	4620      	mov	r0, r4
 80069ee:	f000 fcbb 	bl	8007368 <__mdiff>
 80069f2:	68c2      	ldr	r2, [r0, #12]
 80069f4:	4605      	mov	r5, r0
 80069f6:	bb02      	cbnz	r2, 8006a3a <_dtoa_r+0xa7a>
 80069f8:	4601      	mov	r1, r0
 80069fa:	4650      	mov	r0, sl
 80069fc:	f000 fc98 	bl	8007330 <__mcmp>
 8006a00:	4602      	mov	r2, r0
 8006a02:	4629      	mov	r1, r5
 8006a04:	4620      	mov	r0, r4
 8006a06:	9209      	str	r2, [sp, #36]	; 0x24
 8006a08:	f000 fa0c 	bl	8006e24 <_Bfree>
 8006a0c:	9b07      	ldr	r3, [sp, #28]
 8006a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a10:	9d04      	ldr	r5, [sp, #16]
 8006a12:	ea43 0102 	orr.w	r1, r3, r2
 8006a16:	9b06      	ldr	r3, [sp, #24]
 8006a18:	4319      	orrs	r1, r3
 8006a1a:	d110      	bne.n	8006a3e <_dtoa_r+0xa7e>
 8006a1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a20:	d029      	beq.n	8006a76 <_dtoa_r+0xab6>
 8006a22:	9b05      	ldr	r3, [sp, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	dd02      	ble.n	8006a2e <_dtoa_r+0xa6e>
 8006a28:	9b02      	ldr	r3, [sp, #8]
 8006a2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	f883 9000 	strb.w	r9, [r3]
 8006a34:	e774      	b.n	8006920 <_dtoa_r+0x960>
 8006a36:	4638      	mov	r0, r7
 8006a38:	e7ba      	b.n	80069b0 <_dtoa_r+0x9f0>
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	e7e1      	b.n	8006a02 <_dtoa_r+0xa42>
 8006a3e:	9b05      	ldr	r3, [sp, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	db04      	blt.n	8006a4e <_dtoa_r+0xa8e>
 8006a44:	9907      	ldr	r1, [sp, #28]
 8006a46:	430b      	orrs	r3, r1
 8006a48:	9906      	ldr	r1, [sp, #24]
 8006a4a:	430b      	orrs	r3, r1
 8006a4c:	d120      	bne.n	8006a90 <_dtoa_r+0xad0>
 8006a4e:	2a00      	cmp	r2, #0
 8006a50:	dded      	ble.n	8006a2e <_dtoa_r+0xa6e>
 8006a52:	4651      	mov	r1, sl
 8006a54:	2201      	movs	r2, #1
 8006a56:	4620      	mov	r0, r4
 8006a58:	f000 fbfe 	bl	8007258 <__lshift>
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4682      	mov	sl, r0
 8006a60:	f000 fc66 	bl	8007330 <__mcmp>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	dc03      	bgt.n	8006a70 <_dtoa_r+0xab0>
 8006a68:	d1e1      	bne.n	8006a2e <_dtoa_r+0xa6e>
 8006a6a:	f019 0f01 	tst.w	r9, #1
 8006a6e:	d0de      	beq.n	8006a2e <_dtoa_r+0xa6e>
 8006a70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a74:	d1d8      	bne.n	8006a28 <_dtoa_r+0xa68>
 8006a76:	9a01      	ldr	r2, [sp, #4]
 8006a78:	2339      	movs	r3, #57	; 0x39
 8006a7a:	7013      	strb	r3, [r2, #0]
 8006a7c:	462b      	mov	r3, r5
 8006a7e:	461d      	mov	r5, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a86:	2a39      	cmp	r2, #57	; 0x39
 8006a88:	d06c      	beq.n	8006b64 <_dtoa_r+0xba4>
 8006a8a:	3201      	adds	r2, #1
 8006a8c:	701a      	strb	r2, [r3, #0]
 8006a8e:	e747      	b.n	8006920 <_dtoa_r+0x960>
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	dd07      	ble.n	8006aa4 <_dtoa_r+0xae4>
 8006a94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a98:	d0ed      	beq.n	8006a76 <_dtoa_r+0xab6>
 8006a9a:	9a01      	ldr	r2, [sp, #4]
 8006a9c:	f109 0301 	add.w	r3, r9, #1
 8006aa0:	7013      	strb	r3, [r2, #0]
 8006aa2:	e73d      	b.n	8006920 <_dtoa_r+0x960>
 8006aa4:	9b04      	ldr	r3, [sp, #16]
 8006aa6:	9a08      	ldr	r2, [sp, #32]
 8006aa8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d043      	beq.n	8006b38 <_dtoa_r+0xb78>
 8006ab0:	4651      	mov	r1, sl
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	220a      	movs	r2, #10
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 f9d6 	bl	8006e68 <__multadd>
 8006abc:	45b8      	cmp	r8, r7
 8006abe:	4682      	mov	sl, r0
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	f04f 020a 	mov.w	r2, #10
 8006ac8:	4641      	mov	r1, r8
 8006aca:	4620      	mov	r0, r4
 8006acc:	d107      	bne.n	8006ade <_dtoa_r+0xb1e>
 8006ace:	f000 f9cb 	bl	8006e68 <__multadd>
 8006ad2:	4680      	mov	r8, r0
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	9b04      	ldr	r3, [sp, #16]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	e775      	b.n	80069ca <_dtoa_r+0xa0a>
 8006ade:	f000 f9c3 	bl	8006e68 <__multadd>
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	220a      	movs	r2, #10
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 f9bc 	bl	8006e68 <__multadd>
 8006af0:	4607      	mov	r7, r0
 8006af2:	e7f0      	b.n	8006ad6 <_dtoa_r+0xb16>
 8006af4:	9b04      	ldr	r3, [sp, #16]
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	9d00      	ldr	r5, [sp, #0]
 8006afa:	4631      	mov	r1, r6
 8006afc:	4650      	mov	r0, sl
 8006afe:	f7ff f9d5 	bl	8005eac <quorem>
 8006b02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b06:	9b00      	ldr	r3, [sp, #0]
 8006b08:	f805 9b01 	strb.w	r9, [r5], #1
 8006b0c:	1aea      	subs	r2, r5, r3
 8006b0e:	9b01      	ldr	r3, [sp, #4]
 8006b10:	4293      	cmp	r3, r2
 8006b12:	dd07      	ble.n	8006b24 <_dtoa_r+0xb64>
 8006b14:	4651      	mov	r1, sl
 8006b16:	2300      	movs	r3, #0
 8006b18:	220a      	movs	r2, #10
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f000 f9a4 	bl	8006e68 <__multadd>
 8006b20:	4682      	mov	sl, r0
 8006b22:	e7ea      	b.n	8006afa <_dtoa_r+0xb3a>
 8006b24:	9b01      	ldr	r3, [sp, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bfc8      	it	gt
 8006b2a:	461d      	movgt	r5, r3
 8006b2c:	9b00      	ldr	r3, [sp, #0]
 8006b2e:	bfd8      	it	le
 8006b30:	2501      	movle	r5, #1
 8006b32:	441d      	add	r5, r3
 8006b34:	f04f 0800 	mov.w	r8, #0
 8006b38:	4651      	mov	r1, sl
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 fb8b 	bl	8007258 <__lshift>
 8006b42:	4631      	mov	r1, r6
 8006b44:	4682      	mov	sl, r0
 8006b46:	f000 fbf3 	bl	8007330 <__mcmp>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	dc96      	bgt.n	8006a7c <_dtoa_r+0xabc>
 8006b4e:	d102      	bne.n	8006b56 <_dtoa_r+0xb96>
 8006b50:	f019 0f01 	tst.w	r9, #1
 8006b54:	d192      	bne.n	8006a7c <_dtoa_r+0xabc>
 8006b56:	462b      	mov	r3, r5
 8006b58:	461d      	mov	r5, r3
 8006b5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b5e:	2a30      	cmp	r2, #48	; 0x30
 8006b60:	d0fa      	beq.n	8006b58 <_dtoa_r+0xb98>
 8006b62:	e6dd      	b.n	8006920 <_dtoa_r+0x960>
 8006b64:	9a00      	ldr	r2, [sp, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d189      	bne.n	8006a7e <_dtoa_r+0xabe>
 8006b6a:	f10b 0b01 	add.w	fp, fp, #1
 8006b6e:	2331      	movs	r3, #49	; 0x31
 8006b70:	e796      	b.n	8006aa0 <_dtoa_r+0xae0>
 8006b72:	4b0a      	ldr	r3, [pc, #40]	; (8006b9c <_dtoa_r+0xbdc>)
 8006b74:	f7ff ba99 	b.w	80060aa <_dtoa_r+0xea>
 8006b78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f47f aa6d 	bne.w	800605a <_dtoa_r+0x9a>
 8006b80:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <_dtoa_r+0xbe0>)
 8006b82:	f7ff ba92 	b.w	80060aa <_dtoa_r+0xea>
 8006b86:	9b01      	ldr	r3, [sp, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dcb5      	bgt.n	8006af8 <_dtoa_r+0xb38>
 8006b8c:	9b07      	ldr	r3, [sp, #28]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	f73f aeb1 	bgt.w	80068f6 <_dtoa_r+0x936>
 8006b94:	e7b0      	b.n	8006af8 <_dtoa_r+0xb38>
 8006b96:	bf00      	nop
 8006b98:	0800970d 	.word	0x0800970d
 8006b9c:	08009668 	.word	0x08009668
 8006ba0:	08009691 	.word	0x08009691

08006ba4 <_free_r>:
 8006ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ba6:	2900      	cmp	r1, #0
 8006ba8:	d044      	beq.n	8006c34 <_free_r+0x90>
 8006baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bae:	9001      	str	r0, [sp, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8006bb6:	bfb8      	it	lt
 8006bb8:	18e4      	addlt	r4, r4, r3
 8006bba:	f000 f8e7 	bl	8006d8c <__malloc_lock>
 8006bbe:	4a1e      	ldr	r2, [pc, #120]	; (8006c38 <_free_r+0x94>)
 8006bc0:	9801      	ldr	r0, [sp, #4]
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	b933      	cbnz	r3, 8006bd4 <_free_r+0x30>
 8006bc6:	6063      	str	r3, [r4, #4]
 8006bc8:	6014      	str	r4, [r2, #0]
 8006bca:	b003      	add	sp, #12
 8006bcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bd0:	f000 b8e2 	b.w	8006d98 <__malloc_unlock>
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	d908      	bls.n	8006bea <_free_r+0x46>
 8006bd8:	6825      	ldr	r5, [r4, #0]
 8006bda:	1961      	adds	r1, r4, r5
 8006bdc:	428b      	cmp	r3, r1
 8006bde:	bf01      	itttt	eq
 8006be0:	6819      	ldreq	r1, [r3, #0]
 8006be2:	685b      	ldreq	r3, [r3, #4]
 8006be4:	1949      	addeq	r1, r1, r5
 8006be6:	6021      	streq	r1, [r4, #0]
 8006be8:	e7ed      	b.n	8006bc6 <_free_r+0x22>
 8006bea:	461a      	mov	r2, r3
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	b10b      	cbz	r3, 8006bf4 <_free_r+0x50>
 8006bf0:	42a3      	cmp	r3, r4
 8006bf2:	d9fa      	bls.n	8006bea <_free_r+0x46>
 8006bf4:	6811      	ldr	r1, [r2, #0]
 8006bf6:	1855      	adds	r5, r2, r1
 8006bf8:	42a5      	cmp	r5, r4
 8006bfa:	d10b      	bne.n	8006c14 <_free_r+0x70>
 8006bfc:	6824      	ldr	r4, [r4, #0]
 8006bfe:	4421      	add	r1, r4
 8006c00:	1854      	adds	r4, r2, r1
 8006c02:	42a3      	cmp	r3, r4
 8006c04:	6011      	str	r1, [r2, #0]
 8006c06:	d1e0      	bne.n	8006bca <_free_r+0x26>
 8006c08:	681c      	ldr	r4, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	6053      	str	r3, [r2, #4]
 8006c0e:	440c      	add	r4, r1
 8006c10:	6014      	str	r4, [r2, #0]
 8006c12:	e7da      	b.n	8006bca <_free_r+0x26>
 8006c14:	d902      	bls.n	8006c1c <_free_r+0x78>
 8006c16:	230c      	movs	r3, #12
 8006c18:	6003      	str	r3, [r0, #0]
 8006c1a:	e7d6      	b.n	8006bca <_free_r+0x26>
 8006c1c:	6825      	ldr	r5, [r4, #0]
 8006c1e:	1961      	adds	r1, r4, r5
 8006c20:	428b      	cmp	r3, r1
 8006c22:	bf04      	itt	eq
 8006c24:	6819      	ldreq	r1, [r3, #0]
 8006c26:	685b      	ldreq	r3, [r3, #4]
 8006c28:	6063      	str	r3, [r4, #4]
 8006c2a:	bf04      	itt	eq
 8006c2c:	1949      	addeq	r1, r1, r5
 8006c2e:	6021      	streq	r1, [r4, #0]
 8006c30:	6054      	str	r4, [r2, #4]
 8006c32:	e7ca      	b.n	8006bca <_free_r+0x26>
 8006c34:	b003      	add	sp, #12
 8006c36:	bd30      	pop	{r4, r5, pc}
 8006c38:	2000047c 	.word	0x2000047c

08006c3c <malloc>:
 8006c3c:	4b02      	ldr	r3, [pc, #8]	; (8006c48 <malloc+0xc>)
 8006c3e:	4601      	mov	r1, r0
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	f000 b823 	b.w	8006c8c <_malloc_r>
 8006c46:	bf00      	nop
 8006c48:	20000064 	.word	0x20000064

08006c4c <sbrk_aligned>:
 8006c4c:	b570      	push	{r4, r5, r6, lr}
 8006c4e:	4e0e      	ldr	r6, [pc, #56]	; (8006c88 <sbrk_aligned+0x3c>)
 8006c50:	460c      	mov	r4, r1
 8006c52:	6831      	ldr	r1, [r6, #0]
 8006c54:	4605      	mov	r5, r0
 8006c56:	b911      	cbnz	r1, 8006c5e <sbrk_aligned+0x12>
 8006c58:	f001 fe1a 	bl	8008890 <_sbrk_r>
 8006c5c:	6030      	str	r0, [r6, #0]
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4628      	mov	r0, r5
 8006c62:	f001 fe15 	bl	8008890 <_sbrk_r>
 8006c66:	1c43      	adds	r3, r0, #1
 8006c68:	d00a      	beq.n	8006c80 <sbrk_aligned+0x34>
 8006c6a:	1cc4      	adds	r4, r0, #3
 8006c6c:	f024 0403 	bic.w	r4, r4, #3
 8006c70:	42a0      	cmp	r0, r4
 8006c72:	d007      	beq.n	8006c84 <sbrk_aligned+0x38>
 8006c74:	1a21      	subs	r1, r4, r0
 8006c76:	4628      	mov	r0, r5
 8006c78:	f001 fe0a 	bl	8008890 <_sbrk_r>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d101      	bne.n	8006c84 <sbrk_aligned+0x38>
 8006c80:	f04f 34ff 	mov.w	r4, #4294967295
 8006c84:	4620      	mov	r0, r4
 8006c86:	bd70      	pop	{r4, r5, r6, pc}
 8006c88:	20000480 	.word	0x20000480

08006c8c <_malloc_r>:
 8006c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c90:	1ccd      	adds	r5, r1, #3
 8006c92:	f025 0503 	bic.w	r5, r5, #3
 8006c96:	3508      	adds	r5, #8
 8006c98:	2d0c      	cmp	r5, #12
 8006c9a:	bf38      	it	cc
 8006c9c:	250c      	movcc	r5, #12
 8006c9e:	2d00      	cmp	r5, #0
 8006ca0:	4607      	mov	r7, r0
 8006ca2:	db01      	blt.n	8006ca8 <_malloc_r+0x1c>
 8006ca4:	42a9      	cmp	r1, r5
 8006ca6:	d905      	bls.n	8006cb4 <_malloc_r+0x28>
 8006ca8:	230c      	movs	r3, #12
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	2600      	movs	r6, #0
 8006cae:	4630      	mov	r0, r6
 8006cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d88 <_malloc_r+0xfc>
 8006cb8:	f000 f868 	bl	8006d8c <__malloc_lock>
 8006cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc0:	461c      	mov	r4, r3
 8006cc2:	bb5c      	cbnz	r4, 8006d1c <_malloc_r+0x90>
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	f7ff ffc0 	bl	8006c4c <sbrk_aligned>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	4604      	mov	r4, r0
 8006cd0:	d155      	bne.n	8006d7e <_malloc_r+0xf2>
 8006cd2:	f8d8 4000 	ldr.w	r4, [r8]
 8006cd6:	4626      	mov	r6, r4
 8006cd8:	2e00      	cmp	r6, #0
 8006cda:	d145      	bne.n	8006d68 <_malloc_r+0xdc>
 8006cdc:	2c00      	cmp	r4, #0
 8006cde:	d048      	beq.n	8006d72 <_malloc_r+0xe6>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	eb04 0903 	add.w	r9, r4, r3
 8006cea:	f001 fdd1 	bl	8008890 <_sbrk_r>
 8006cee:	4581      	cmp	r9, r0
 8006cf0:	d13f      	bne.n	8006d72 <_malloc_r+0xe6>
 8006cf2:	6821      	ldr	r1, [r4, #0]
 8006cf4:	1a6d      	subs	r5, r5, r1
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	f7ff ffa7 	bl	8006c4c <sbrk_aligned>
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d037      	beq.n	8006d72 <_malloc_r+0xe6>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	442b      	add	r3, r5
 8006d06:	6023      	str	r3, [r4, #0]
 8006d08:	f8d8 3000 	ldr.w	r3, [r8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d038      	beq.n	8006d82 <_malloc_r+0xf6>
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	42a2      	cmp	r2, r4
 8006d14:	d12b      	bne.n	8006d6e <_malloc_r+0xe2>
 8006d16:	2200      	movs	r2, #0
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	e00f      	b.n	8006d3c <_malloc_r+0xb0>
 8006d1c:	6822      	ldr	r2, [r4, #0]
 8006d1e:	1b52      	subs	r2, r2, r5
 8006d20:	d41f      	bmi.n	8006d62 <_malloc_r+0xd6>
 8006d22:	2a0b      	cmp	r2, #11
 8006d24:	d917      	bls.n	8006d56 <_malloc_r+0xca>
 8006d26:	1961      	adds	r1, r4, r5
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	6025      	str	r5, [r4, #0]
 8006d2c:	bf18      	it	ne
 8006d2e:	6059      	strne	r1, [r3, #4]
 8006d30:	6863      	ldr	r3, [r4, #4]
 8006d32:	bf08      	it	eq
 8006d34:	f8c8 1000 	streq.w	r1, [r8]
 8006d38:	5162      	str	r2, [r4, r5]
 8006d3a:	604b      	str	r3, [r1, #4]
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	f104 060b 	add.w	r6, r4, #11
 8006d42:	f000 f829 	bl	8006d98 <__malloc_unlock>
 8006d46:	f026 0607 	bic.w	r6, r6, #7
 8006d4a:	1d23      	adds	r3, r4, #4
 8006d4c:	1af2      	subs	r2, r6, r3
 8006d4e:	d0ae      	beq.n	8006cae <_malloc_r+0x22>
 8006d50:	1b9b      	subs	r3, r3, r6
 8006d52:	50a3      	str	r3, [r4, r2]
 8006d54:	e7ab      	b.n	8006cae <_malloc_r+0x22>
 8006d56:	42a3      	cmp	r3, r4
 8006d58:	6862      	ldr	r2, [r4, #4]
 8006d5a:	d1dd      	bne.n	8006d18 <_malloc_r+0x8c>
 8006d5c:	f8c8 2000 	str.w	r2, [r8]
 8006d60:	e7ec      	b.n	8006d3c <_malloc_r+0xb0>
 8006d62:	4623      	mov	r3, r4
 8006d64:	6864      	ldr	r4, [r4, #4]
 8006d66:	e7ac      	b.n	8006cc2 <_malloc_r+0x36>
 8006d68:	4634      	mov	r4, r6
 8006d6a:	6876      	ldr	r6, [r6, #4]
 8006d6c:	e7b4      	b.n	8006cd8 <_malloc_r+0x4c>
 8006d6e:	4613      	mov	r3, r2
 8006d70:	e7cc      	b.n	8006d0c <_malloc_r+0x80>
 8006d72:	230c      	movs	r3, #12
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	4638      	mov	r0, r7
 8006d78:	f000 f80e 	bl	8006d98 <__malloc_unlock>
 8006d7c:	e797      	b.n	8006cae <_malloc_r+0x22>
 8006d7e:	6025      	str	r5, [r4, #0]
 8006d80:	e7dc      	b.n	8006d3c <_malloc_r+0xb0>
 8006d82:	605b      	str	r3, [r3, #4]
 8006d84:	deff      	udf	#255	; 0xff
 8006d86:	bf00      	nop
 8006d88:	2000047c 	.word	0x2000047c

08006d8c <__malloc_lock>:
 8006d8c:	4801      	ldr	r0, [pc, #4]	; (8006d94 <__malloc_lock+0x8>)
 8006d8e:	f7ff b884 	b.w	8005e9a <__retarget_lock_acquire_recursive>
 8006d92:	bf00      	nop
 8006d94:	20000478 	.word	0x20000478

08006d98 <__malloc_unlock>:
 8006d98:	4801      	ldr	r0, [pc, #4]	; (8006da0 <__malloc_unlock+0x8>)
 8006d9a:	f7ff b87f 	b.w	8005e9c <__retarget_lock_release_recursive>
 8006d9e:	bf00      	nop
 8006da0:	20000478 	.word	0x20000478

08006da4 <_Balloc>:
 8006da4:	b570      	push	{r4, r5, r6, lr}
 8006da6:	69c6      	ldr	r6, [r0, #28]
 8006da8:	4604      	mov	r4, r0
 8006daa:	460d      	mov	r5, r1
 8006dac:	b976      	cbnz	r6, 8006dcc <_Balloc+0x28>
 8006dae:	2010      	movs	r0, #16
 8006db0:	f7ff ff44 	bl	8006c3c <malloc>
 8006db4:	4602      	mov	r2, r0
 8006db6:	61e0      	str	r0, [r4, #28]
 8006db8:	b920      	cbnz	r0, 8006dc4 <_Balloc+0x20>
 8006dba:	4b18      	ldr	r3, [pc, #96]	; (8006e1c <_Balloc+0x78>)
 8006dbc:	4818      	ldr	r0, [pc, #96]	; (8006e20 <_Balloc+0x7c>)
 8006dbe:	216b      	movs	r1, #107	; 0x6b
 8006dc0:	f001 fd8e 	bl	80088e0 <__assert_func>
 8006dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dc8:	6006      	str	r6, [r0, #0]
 8006dca:	60c6      	str	r6, [r0, #12]
 8006dcc:	69e6      	ldr	r6, [r4, #28]
 8006dce:	68f3      	ldr	r3, [r6, #12]
 8006dd0:	b183      	cbz	r3, 8006df4 <_Balloc+0x50>
 8006dd2:	69e3      	ldr	r3, [r4, #28]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dda:	b9b8      	cbnz	r0, 8006e0c <_Balloc+0x68>
 8006ddc:	2101      	movs	r1, #1
 8006dde:	fa01 f605 	lsl.w	r6, r1, r5
 8006de2:	1d72      	adds	r2, r6, #5
 8006de4:	0092      	lsls	r2, r2, #2
 8006de6:	4620      	mov	r0, r4
 8006de8:	f001 fd98 	bl	800891c <_calloc_r>
 8006dec:	b160      	cbz	r0, 8006e08 <_Balloc+0x64>
 8006dee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006df2:	e00e      	b.n	8006e12 <_Balloc+0x6e>
 8006df4:	2221      	movs	r2, #33	; 0x21
 8006df6:	2104      	movs	r1, #4
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f001 fd8f 	bl	800891c <_calloc_r>
 8006dfe:	69e3      	ldr	r3, [r4, #28]
 8006e00:	60f0      	str	r0, [r6, #12]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e4      	bne.n	8006dd2 <_Balloc+0x2e>
 8006e08:	2000      	movs	r0, #0
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
 8006e0c:	6802      	ldr	r2, [r0, #0]
 8006e0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e12:	2300      	movs	r3, #0
 8006e14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e18:	e7f7      	b.n	8006e0a <_Balloc+0x66>
 8006e1a:	bf00      	nop
 8006e1c:	0800969e 	.word	0x0800969e
 8006e20:	0800971e 	.word	0x0800971e

08006e24 <_Bfree>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	69c6      	ldr	r6, [r0, #28]
 8006e28:	4605      	mov	r5, r0
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	b976      	cbnz	r6, 8006e4c <_Bfree+0x28>
 8006e2e:	2010      	movs	r0, #16
 8006e30:	f7ff ff04 	bl	8006c3c <malloc>
 8006e34:	4602      	mov	r2, r0
 8006e36:	61e8      	str	r0, [r5, #28]
 8006e38:	b920      	cbnz	r0, 8006e44 <_Bfree+0x20>
 8006e3a:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <_Bfree+0x3c>)
 8006e3c:	4809      	ldr	r0, [pc, #36]	; (8006e64 <_Bfree+0x40>)
 8006e3e:	218f      	movs	r1, #143	; 0x8f
 8006e40:	f001 fd4e 	bl	80088e0 <__assert_func>
 8006e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e48:	6006      	str	r6, [r0, #0]
 8006e4a:	60c6      	str	r6, [r0, #12]
 8006e4c:	b13c      	cbz	r4, 8006e5e <_Bfree+0x3a>
 8006e4e:	69eb      	ldr	r3, [r5, #28]
 8006e50:	6862      	ldr	r2, [r4, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e58:	6021      	str	r1, [r4, #0]
 8006e5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	0800969e 	.word	0x0800969e
 8006e64:	0800971e 	.word	0x0800971e

08006e68 <__multadd>:
 8006e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6c:	690d      	ldr	r5, [r1, #16]
 8006e6e:	4607      	mov	r7, r0
 8006e70:	460c      	mov	r4, r1
 8006e72:	461e      	mov	r6, r3
 8006e74:	f101 0c14 	add.w	ip, r1, #20
 8006e78:	2000      	movs	r0, #0
 8006e7a:	f8dc 3000 	ldr.w	r3, [ip]
 8006e7e:	b299      	uxth	r1, r3
 8006e80:	fb02 6101 	mla	r1, r2, r1, r6
 8006e84:	0c1e      	lsrs	r6, r3, #16
 8006e86:	0c0b      	lsrs	r3, r1, #16
 8006e88:	fb02 3306 	mla	r3, r2, r6, r3
 8006e8c:	b289      	uxth	r1, r1
 8006e8e:	3001      	adds	r0, #1
 8006e90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e94:	4285      	cmp	r5, r0
 8006e96:	f84c 1b04 	str.w	r1, [ip], #4
 8006e9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e9e:	dcec      	bgt.n	8006e7a <__multadd+0x12>
 8006ea0:	b30e      	cbz	r6, 8006ee6 <__multadd+0x7e>
 8006ea2:	68a3      	ldr	r3, [r4, #8]
 8006ea4:	42ab      	cmp	r3, r5
 8006ea6:	dc19      	bgt.n	8006edc <__multadd+0x74>
 8006ea8:	6861      	ldr	r1, [r4, #4]
 8006eaa:	4638      	mov	r0, r7
 8006eac:	3101      	adds	r1, #1
 8006eae:	f7ff ff79 	bl	8006da4 <_Balloc>
 8006eb2:	4680      	mov	r8, r0
 8006eb4:	b928      	cbnz	r0, 8006ec2 <__multadd+0x5a>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <__multadd+0x84>)
 8006eba:	480d      	ldr	r0, [pc, #52]	; (8006ef0 <__multadd+0x88>)
 8006ebc:	21ba      	movs	r1, #186	; 0xba
 8006ebe:	f001 fd0f 	bl	80088e0 <__assert_func>
 8006ec2:	6922      	ldr	r2, [r4, #16]
 8006ec4:	3202      	adds	r2, #2
 8006ec6:	f104 010c 	add.w	r1, r4, #12
 8006eca:	0092      	lsls	r2, r2, #2
 8006ecc:	300c      	adds	r0, #12
 8006ece:	f001 fcef 	bl	80088b0 <memcpy>
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f7ff ffa5 	bl	8006e24 <_Bfree>
 8006eda:	4644      	mov	r4, r8
 8006edc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ee0:	3501      	adds	r5, #1
 8006ee2:	615e      	str	r6, [r3, #20]
 8006ee4:	6125      	str	r5, [r4, #16]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eec:	0800970d 	.word	0x0800970d
 8006ef0:	0800971e 	.word	0x0800971e

08006ef4 <__s2b>:
 8006ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef8:	460c      	mov	r4, r1
 8006efa:	4615      	mov	r5, r2
 8006efc:	461f      	mov	r7, r3
 8006efe:	2209      	movs	r2, #9
 8006f00:	3308      	adds	r3, #8
 8006f02:	4606      	mov	r6, r0
 8006f04:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f08:	2100      	movs	r1, #0
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	db09      	blt.n	8006f24 <__s2b+0x30>
 8006f10:	4630      	mov	r0, r6
 8006f12:	f7ff ff47 	bl	8006da4 <_Balloc>
 8006f16:	b940      	cbnz	r0, 8006f2a <__s2b+0x36>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	4b19      	ldr	r3, [pc, #100]	; (8006f80 <__s2b+0x8c>)
 8006f1c:	4819      	ldr	r0, [pc, #100]	; (8006f84 <__s2b+0x90>)
 8006f1e:	21d3      	movs	r1, #211	; 0xd3
 8006f20:	f001 fcde 	bl	80088e0 <__assert_func>
 8006f24:	0052      	lsls	r2, r2, #1
 8006f26:	3101      	adds	r1, #1
 8006f28:	e7f0      	b.n	8006f0c <__s2b+0x18>
 8006f2a:	9b08      	ldr	r3, [sp, #32]
 8006f2c:	6143      	str	r3, [r0, #20]
 8006f2e:	2d09      	cmp	r5, #9
 8006f30:	f04f 0301 	mov.w	r3, #1
 8006f34:	6103      	str	r3, [r0, #16]
 8006f36:	dd16      	ble.n	8006f66 <__s2b+0x72>
 8006f38:	f104 0909 	add.w	r9, r4, #9
 8006f3c:	46c8      	mov	r8, r9
 8006f3e:	442c      	add	r4, r5
 8006f40:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f44:	4601      	mov	r1, r0
 8006f46:	3b30      	subs	r3, #48	; 0x30
 8006f48:	220a      	movs	r2, #10
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f7ff ff8c 	bl	8006e68 <__multadd>
 8006f50:	45a0      	cmp	r8, r4
 8006f52:	d1f5      	bne.n	8006f40 <__s2b+0x4c>
 8006f54:	f1a5 0408 	sub.w	r4, r5, #8
 8006f58:	444c      	add	r4, r9
 8006f5a:	1b2d      	subs	r5, r5, r4
 8006f5c:	1963      	adds	r3, r4, r5
 8006f5e:	42bb      	cmp	r3, r7
 8006f60:	db04      	blt.n	8006f6c <__s2b+0x78>
 8006f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f66:	340a      	adds	r4, #10
 8006f68:	2509      	movs	r5, #9
 8006f6a:	e7f6      	b.n	8006f5a <__s2b+0x66>
 8006f6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f70:	4601      	mov	r1, r0
 8006f72:	3b30      	subs	r3, #48	; 0x30
 8006f74:	220a      	movs	r2, #10
 8006f76:	4630      	mov	r0, r6
 8006f78:	f7ff ff76 	bl	8006e68 <__multadd>
 8006f7c:	e7ee      	b.n	8006f5c <__s2b+0x68>
 8006f7e:	bf00      	nop
 8006f80:	0800970d 	.word	0x0800970d
 8006f84:	0800971e 	.word	0x0800971e

08006f88 <__hi0bits>:
 8006f88:	0c03      	lsrs	r3, r0, #16
 8006f8a:	041b      	lsls	r3, r3, #16
 8006f8c:	b9d3      	cbnz	r3, 8006fc4 <__hi0bits+0x3c>
 8006f8e:	0400      	lsls	r0, r0, #16
 8006f90:	2310      	movs	r3, #16
 8006f92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f96:	bf04      	itt	eq
 8006f98:	0200      	lsleq	r0, r0, #8
 8006f9a:	3308      	addeq	r3, #8
 8006f9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006fa0:	bf04      	itt	eq
 8006fa2:	0100      	lsleq	r0, r0, #4
 8006fa4:	3304      	addeq	r3, #4
 8006fa6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006faa:	bf04      	itt	eq
 8006fac:	0080      	lsleq	r0, r0, #2
 8006fae:	3302      	addeq	r3, #2
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	db05      	blt.n	8006fc0 <__hi0bits+0x38>
 8006fb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006fb8:	f103 0301 	add.w	r3, r3, #1
 8006fbc:	bf08      	it	eq
 8006fbe:	2320      	moveq	r3, #32
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	4770      	bx	lr
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	e7e4      	b.n	8006f92 <__hi0bits+0xa>

08006fc8 <__lo0bits>:
 8006fc8:	6803      	ldr	r3, [r0, #0]
 8006fca:	f013 0207 	ands.w	r2, r3, #7
 8006fce:	d00c      	beq.n	8006fea <__lo0bits+0x22>
 8006fd0:	07d9      	lsls	r1, r3, #31
 8006fd2:	d422      	bmi.n	800701a <__lo0bits+0x52>
 8006fd4:	079a      	lsls	r2, r3, #30
 8006fd6:	bf49      	itett	mi
 8006fd8:	085b      	lsrmi	r3, r3, #1
 8006fda:	089b      	lsrpl	r3, r3, #2
 8006fdc:	6003      	strmi	r3, [r0, #0]
 8006fde:	2201      	movmi	r2, #1
 8006fe0:	bf5c      	itt	pl
 8006fe2:	6003      	strpl	r3, [r0, #0]
 8006fe4:	2202      	movpl	r2, #2
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	4770      	bx	lr
 8006fea:	b299      	uxth	r1, r3
 8006fec:	b909      	cbnz	r1, 8006ff2 <__lo0bits+0x2a>
 8006fee:	0c1b      	lsrs	r3, r3, #16
 8006ff0:	2210      	movs	r2, #16
 8006ff2:	b2d9      	uxtb	r1, r3
 8006ff4:	b909      	cbnz	r1, 8006ffa <__lo0bits+0x32>
 8006ff6:	3208      	adds	r2, #8
 8006ff8:	0a1b      	lsrs	r3, r3, #8
 8006ffa:	0719      	lsls	r1, r3, #28
 8006ffc:	bf04      	itt	eq
 8006ffe:	091b      	lsreq	r3, r3, #4
 8007000:	3204      	addeq	r2, #4
 8007002:	0799      	lsls	r1, r3, #30
 8007004:	bf04      	itt	eq
 8007006:	089b      	lsreq	r3, r3, #2
 8007008:	3202      	addeq	r2, #2
 800700a:	07d9      	lsls	r1, r3, #31
 800700c:	d403      	bmi.n	8007016 <__lo0bits+0x4e>
 800700e:	085b      	lsrs	r3, r3, #1
 8007010:	f102 0201 	add.w	r2, r2, #1
 8007014:	d003      	beq.n	800701e <__lo0bits+0x56>
 8007016:	6003      	str	r3, [r0, #0]
 8007018:	e7e5      	b.n	8006fe6 <__lo0bits+0x1e>
 800701a:	2200      	movs	r2, #0
 800701c:	e7e3      	b.n	8006fe6 <__lo0bits+0x1e>
 800701e:	2220      	movs	r2, #32
 8007020:	e7e1      	b.n	8006fe6 <__lo0bits+0x1e>
	...

08007024 <__i2b>:
 8007024:	b510      	push	{r4, lr}
 8007026:	460c      	mov	r4, r1
 8007028:	2101      	movs	r1, #1
 800702a:	f7ff febb 	bl	8006da4 <_Balloc>
 800702e:	4602      	mov	r2, r0
 8007030:	b928      	cbnz	r0, 800703e <__i2b+0x1a>
 8007032:	4b05      	ldr	r3, [pc, #20]	; (8007048 <__i2b+0x24>)
 8007034:	4805      	ldr	r0, [pc, #20]	; (800704c <__i2b+0x28>)
 8007036:	f240 1145 	movw	r1, #325	; 0x145
 800703a:	f001 fc51 	bl	80088e0 <__assert_func>
 800703e:	2301      	movs	r3, #1
 8007040:	6144      	str	r4, [r0, #20]
 8007042:	6103      	str	r3, [r0, #16]
 8007044:	bd10      	pop	{r4, pc}
 8007046:	bf00      	nop
 8007048:	0800970d 	.word	0x0800970d
 800704c:	0800971e 	.word	0x0800971e

08007050 <__multiply>:
 8007050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007054:	4691      	mov	r9, r2
 8007056:	690a      	ldr	r2, [r1, #16]
 8007058:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800705c:	429a      	cmp	r2, r3
 800705e:	bfb8      	it	lt
 8007060:	460b      	movlt	r3, r1
 8007062:	460c      	mov	r4, r1
 8007064:	bfbc      	itt	lt
 8007066:	464c      	movlt	r4, r9
 8007068:	4699      	movlt	r9, r3
 800706a:	6927      	ldr	r7, [r4, #16]
 800706c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007070:	68a3      	ldr	r3, [r4, #8]
 8007072:	6861      	ldr	r1, [r4, #4]
 8007074:	eb07 060a 	add.w	r6, r7, sl
 8007078:	42b3      	cmp	r3, r6
 800707a:	b085      	sub	sp, #20
 800707c:	bfb8      	it	lt
 800707e:	3101      	addlt	r1, #1
 8007080:	f7ff fe90 	bl	8006da4 <_Balloc>
 8007084:	b930      	cbnz	r0, 8007094 <__multiply+0x44>
 8007086:	4602      	mov	r2, r0
 8007088:	4b44      	ldr	r3, [pc, #272]	; (800719c <__multiply+0x14c>)
 800708a:	4845      	ldr	r0, [pc, #276]	; (80071a0 <__multiply+0x150>)
 800708c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007090:	f001 fc26 	bl	80088e0 <__assert_func>
 8007094:	f100 0514 	add.w	r5, r0, #20
 8007098:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800709c:	462b      	mov	r3, r5
 800709e:	2200      	movs	r2, #0
 80070a0:	4543      	cmp	r3, r8
 80070a2:	d321      	bcc.n	80070e8 <__multiply+0x98>
 80070a4:	f104 0314 	add.w	r3, r4, #20
 80070a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80070ac:	f109 0314 	add.w	r3, r9, #20
 80070b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80070b4:	9202      	str	r2, [sp, #8]
 80070b6:	1b3a      	subs	r2, r7, r4
 80070b8:	3a15      	subs	r2, #21
 80070ba:	f022 0203 	bic.w	r2, r2, #3
 80070be:	3204      	adds	r2, #4
 80070c0:	f104 0115 	add.w	r1, r4, #21
 80070c4:	428f      	cmp	r7, r1
 80070c6:	bf38      	it	cc
 80070c8:	2204      	movcc	r2, #4
 80070ca:	9201      	str	r2, [sp, #4]
 80070cc:	9a02      	ldr	r2, [sp, #8]
 80070ce:	9303      	str	r3, [sp, #12]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d80c      	bhi.n	80070ee <__multiply+0x9e>
 80070d4:	2e00      	cmp	r6, #0
 80070d6:	dd03      	ble.n	80070e0 <__multiply+0x90>
 80070d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d05b      	beq.n	8007198 <__multiply+0x148>
 80070e0:	6106      	str	r6, [r0, #16]
 80070e2:	b005      	add	sp, #20
 80070e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e8:	f843 2b04 	str.w	r2, [r3], #4
 80070ec:	e7d8      	b.n	80070a0 <__multiply+0x50>
 80070ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80070f2:	f1ba 0f00 	cmp.w	sl, #0
 80070f6:	d024      	beq.n	8007142 <__multiply+0xf2>
 80070f8:	f104 0e14 	add.w	lr, r4, #20
 80070fc:	46a9      	mov	r9, r5
 80070fe:	f04f 0c00 	mov.w	ip, #0
 8007102:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007106:	f8d9 1000 	ldr.w	r1, [r9]
 800710a:	fa1f fb82 	uxth.w	fp, r2
 800710e:	b289      	uxth	r1, r1
 8007110:	fb0a 110b 	mla	r1, sl, fp, r1
 8007114:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007118:	f8d9 2000 	ldr.w	r2, [r9]
 800711c:	4461      	add	r1, ip
 800711e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007122:	fb0a c20b 	mla	r2, sl, fp, ip
 8007126:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800712a:	b289      	uxth	r1, r1
 800712c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007130:	4577      	cmp	r7, lr
 8007132:	f849 1b04 	str.w	r1, [r9], #4
 8007136:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800713a:	d8e2      	bhi.n	8007102 <__multiply+0xb2>
 800713c:	9a01      	ldr	r2, [sp, #4]
 800713e:	f845 c002 	str.w	ip, [r5, r2]
 8007142:	9a03      	ldr	r2, [sp, #12]
 8007144:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007148:	3304      	adds	r3, #4
 800714a:	f1b9 0f00 	cmp.w	r9, #0
 800714e:	d021      	beq.n	8007194 <__multiply+0x144>
 8007150:	6829      	ldr	r1, [r5, #0]
 8007152:	f104 0c14 	add.w	ip, r4, #20
 8007156:	46ae      	mov	lr, r5
 8007158:	f04f 0a00 	mov.w	sl, #0
 800715c:	f8bc b000 	ldrh.w	fp, [ip]
 8007160:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007164:	fb09 220b 	mla	r2, r9, fp, r2
 8007168:	4452      	add	r2, sl
 800716a:	b289      	uxth	r1, r1
 800716c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007170:	f84e 1b04 	str.w	r1, [lr], #4
 8007174:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007178:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800717c:	f8be 1000 	ldrh.w	r1, [lr]
 8007180:	fb09 110a 	mla	r1, r9, sl, r1
 8007184:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007188:	4567      	cmp	r7, ip
 800718a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800718e:	d8e5      	bhi.n	800715c <__multiply+0x10c>
 8007190:	9a01      	ldr	r2, [sp, #4]
 8007192:	50a9      	str	r1, [r5, r2]
 8007194:	3504      	adds	r5, #4
 8007196:	e799      	b.n	80070cc <__multiply+0x7c>
 8007198:	3e01      	subs	r6, #1
 800719a:	e79b      	b.n	80070d4 <__multiply+0x84>
 800719c:	0800970d 	.word	0x0800970d
 80071a0:	0800971e 	.word	0x0800971e

080071a4 <__pow5mult>:
 80071a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a8:	4615      	mov	r5, r2
 80071aa:	f012 0203 	ands.w	r2, r2, #3
 80071ae:	4606      	mov	r6, r0
 80071b0:	460f      	mov	r7, r1
 80071b2:	d007      	beq.n	80071c4 <__pow5mult+0x20>
 80071b4:	4c25      	ldr	r4, [pc, #148]	; (800724c <__pow5mult+0xa8>)
 80071b6:	3a01      	subs	r2, #1
 80071b8:	2300      	movs	r3, #0
 80071ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071be:	f7ff fe53 	bl	8006e68 <__multadd>
 80071c2:	4607      	mov	r7, r0
 80071c4:	10ad      	asrs	r5, r5, #2
 80071c6:	d03d      	beq.n	8007244 <__pow5mult+0xa0>
 80071c8:	69f4      	ldr	r4, [r6, #28]
 80071ca:	b97c      	cbnz	r4, 80071ec <__pow5mult+0x48>
 80071cc:	2010      	movs	r0, #16
 80071ce:	f7ff fd35 	bl	8006c3c <malloc>
 80071d2:	4602      	mov	r2, r0
 80071d4:	61f0      	str	r0, [r6, #28]
 80071d6:	b928      	cbnz	r0, 80071e4 <__pow5mult+0x40>
 80071d8:	4b1d      	ldr	r3, [pc, #116]	; (8007250 <__pow5mult+0xac>)
 80071da:	481e      	ldr	r0, [pc, #120]	; (8007254 <__pow5mult+0xb0>)
 80071dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80071e0:	f001 fb7e 	bl	80088e0 <__assert_func>
 80071e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071e8:	6004      	str	r4, [r0, #0]
 80071ea:	60c4      	str	r4, [r0, #12]
 80071ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80071f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071f4:	b94c      	cbnz	r4, 800720a <__pow5mult+0x66>
 80071f6:	f240 2171 	movw	r1, #625	; 0x271
 80071fa:	4630      	mov	r0, r6
 80071fc:	f7ff ff12 	bl	8007024 <__i2b>
 8007200:	2300      	movs	r3, #0
 8007202:	f8c8 0008 	str.w	r0, [r8, #8]
 8007206:	4604      	mov	r4, r0
 8007208:	6003      	str	r3, [r0, #0]
 800720a:	f04f 0900 	mov.w	r9, #0
 800720e:	07eb      	lsls	r3, r5, #31
 8007210:	d50a      	bpl.n	8007228 <__pow5mult+0x84>
 8007212:	4639      	mov	r1, r7
 8007214:	4622      	mov	r2, r4
 8007216:	4630      	mov	r0, r6
 8007218:	f7ff ff1a 	bl	8007050 <__multiply>
 800721c:	4639      	mov	r1, r7
 800721e:	4680      	mov	r8, r0
 8007220:	4630      	mov	r0, r6
 8007222:	f7ff fdff 	bl	8006e24 <_Bfree>
 8007226:	4647      	mov	r7, r8
 8007228:	106d      	asrs	r5, r5, #1
 800722a:	d00b      	beq.n	8007244 <__pow5mult+0xa0>
 800722c:	6820      	ldr	r0, [r4, #0]
 800722e:	b938      	cbnz	r0, 8007240 <__pow5mult+0x9c>
 8007230:	4622      	mov	r2, r4
 8007232:	4621      	mov	r1, r4
 8007234:	4630      	mov	r0, r6
 8007236:	f7ff ff0b 	bl	8007050 <__multiply>
 800723a:	6020      	str	r0, [r4, #0]
 800723c:	f8c0 9000 	str.w	r9, [r0]
 8007240:	4604      	mov	r4, r0
 8007242:	e7e4      	b.n	800720e <__pow5mult+0x6a>
 8007244:	4638      	mov	r0, r7
 8007246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800724a:	bf00      	nop
 800724c:	08009868 	.word	0x08009868
 8007250:	0800969e 	.word	0x0800969e
 8007254:	0800971e 	.word	0x0800971e

08007258 <__lshift>:
 8007258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800725c:	460c      	mov	r4, r1
 800725e:	6849      	ldr	r1, [r1, #4]
 8007260:	6923      	ldr	r3, [r4, #16]
 8007262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007266:	68a3      	ldr	r3, [r4, #8]
 8007268:	4607      	mov	r7, r0
 800726a:	4691      	mov	r9, r2
 800726c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007270:	f108 0601 	add.w	r6, r8, #1
 8007274:	42b3      	cmp	r3, r6
 8007276:	db0b      	blt.n	8007290 <__lshift+0x38>
 8007278:	4638      	mov	r0, r7
 800727a:	f7ff fd93 	bl	8006da4 <_Balloc>
 800727e:	4605      	mov	r5, r0
 8007280:	b948      	cbnz	r0, 8007296 <__lshift+0x3e>
 8007282:	4602      	mov	r2, r0
 8007284:	4b28      	ldr	r3, [pc, #160]	; (8007328 <__lshift+0xd0>)
 8007286:	4829      	ldr	r0, [pc, #164]	; (800732c <__lshift+0xd4>)
 8007288:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800728c:	f001 fb28 	bl	80088e0 <__assert_func>
 8007290:	3101      	adds	r1, #1
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	e7ee      	b.n	8007274 <__lshift+0x1c>
 8007296:	2300      	movs	r3, #0
 8007298:	f100 0114 	add.w	r1, r0, #20
 800729c:	f100 0210 	add.w	r2, r0, #16
 80072a0:	4618      	mov	r0, r3
 80072a2:	4553      	cmp	r3, sl
 80072a4:	db33      	blt.n	800730e <__lshift+0xb6>
 80072a6:	6920      	ldr	r0, [r4, #16]
 80072a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072ac:	f104 0314 	add.w	r3, r4, #20
 80072b0:	f019 091f 	ands.w	r9, r9, #31
 80072b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072bc:	d02b      	beq.n	8007316 <__lshift+0xbe>
 80072be:	f1c9 0e20 	rsb	lr, r9, #32
 80072c2:	468a      	mov	sl, r1
 80072c4:	2200      	movs	r2, #0
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	fa00 f009 	lsl.w	r0, r0, r9
 80072cc:	4310      	orrs	r0, r2
 80072ce:	f84a 0b04 	str.w	r0, [sl], #4
 80072d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072d6:	459c      	cmp	ip, r3
 80072d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80072dc:	d8f3      	bhi.n	80072c6 <__lshift+0x6e>
 80072de:	ebac 0304 	sub.w	r3, ip, r4
 80072e2:	3b15      	subs	r3, #21
 80072e4:	f023 0303 	bic.w	r3, r3, #3
 80072e8:	3304      	adds	r3, #4
 80072ea:	f104 0015 	add.w	r0, r4, #21
 80072ee:	4584      	cmp	ip, r0
 80072f0:	bf38      	it	cc
 80072f2:	2304      	movcc	r3, #4
 80072f4:	50ca      	str	r2, [r1, r3]
 80072f6:	b10a      	cbz	r2, 80072fc <__lshift+0xa4>
 80072f8:	f108 0602 	add.w	r6, r8, #2
 80072fc:	3e01      	subs	r6, #1
 80072fe:	4638      	mov	r0, r7
 8007300:	612e      	str	r6, [r5, #16]
 8007302:	4621      	mov	r1, r4
 8007304:	f7ff fd8e 	bl	8006e24 <_Bfree>
 8007308:	4628      	mov	r0, r5
 800730a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007312:	3301      	adds	r3, #1
 8007314:	e7c5      	b.n	80072a2 <__lshift+0x4a>
 8007316:	3904      	subs	r1, #4
 8007318:	f853 2b04 	ldr.w	r2, [r3], #4
 800731c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007320:	459c      	cmp	ip, r3
 8007322:	d8f9      	bhi.n	8007318 <__lshift+0xc0>
 8007324:	e7ea      	b.n	80072fc <__lshift+0xa4>
 8007326:	bf00      	nop
 8007328:	0800970d 	.word	0x0800970d
 800732c:	0800971e 	.word	0x0800971e

08007330 <__mcmp>:
 8007330:	b530      	push	{r4, r5, lr}
 8007332:	6902      	ldr	r2, [r0, #16]
 8007334:	690c      	ldr	r4, [r1, #16]
 8007336:	1b12      	subs	r2, r2, r4
 8007338:	d10e      	bne.n	8007358 <__mcmp+0x28>
 800733a:	f100 0314 	add.w	r3, r0, #20
 800733e:	3114      	adds	r1, #20
 8007340:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007344:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007348:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800734c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007350:	42a5      	cmp	r5, r4
 8007352:	d003      	beq.n	800735c <__mcmp+0x2c>
 8007354:	d305      	bcc.n	8007362 <__mcmp+0x32>
 8007356:	2201      	movs	r2, #1
 8007358:	4610      	mov	r0, r2
 800735a:	bd30      	pop	{r4, r5, pc}
 800735c:	4283      	cmp	r3, r0
 800735e:	d3f3      	bcc.n	8007348 <__mcmp+0x18>
 8007360:	e7fa      	b.n	8007358 <__mcmp+0x28>
 8007362:	f04f 32ff 	mov.w	r2, #4294967295
 8007366:	e7f7      	b.n	8007358 <__mcmp+0x28>

08007368 <__mdiff>:
 8007368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	460c      	mov	r4, r1
 800736e:	4606      	mov	r6, r0
 8007370:	4611      	mov	r1, r2
 8007372:	4620      	mov	r0, r4
 8007374:	4690      	mov	r8, r2
 8007376:	f7ff ffdb 	bl	8007330 <__mcmp>
 800737a:	1e05      	subs	r5, r0, #0
 800737c:	d110      	bne.n	80073a0 <__mdiff+0x38>
 800737e:	4629      	mov	r1, r5
 8007380:	4630      	mov	r0, r6
 8007382:	f7ff fd0f 	bl	8006da4 <_Balloc>
 8007386:	b930      	cbnz	r0, 8007396 <__mdiff+0x2e>
 8007388:	4b3a      	ldr	r3, [pc, #232]	; (8007474 <__mdiff+0x10c>)
 800738a:	4602      	mov	r2, r0
 800738c:	f240 2137 	movw	r1, #567	; 0x237
 8007390:	4839      	ldr	r0, [pc, #228]	; (8007478 <__mdiff+0x110>)
 8007392:	f001 faa5 	bl	80088e0 <__assert_func>
 8007396:	2301      	movs	r3, #1
 8007398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800739c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a0:	bfa4      	itt	ge
 80073a2:	4643      	movge	r3, r8
 80073a4:	46a0      	movge	r8, r4
 80073a6:	4630      	mov	r0, r6
 80073a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073ac:	bfa6      	itte	ge
 80073ae:	461c      	movge	r4, r3
 80073b0:	2500      	movge	r5, #0
 80073b2:	2501      	movlt	r5, #1
 80073b4:	f7ff fcf6 	bl	8006da4 <_Balloc>
 80073b8:	b920      	cbnz	r0, 80073c4 <__mdiff+0x5c>
 80073ba:	4b2e      	ldr	r3, [pc, #184]	; (8007474 <__mdiff+0x10c>)
 80073bc:	4602      	mov	r2, r0
 80073be:	f240 2145 	movw	r1, #581	; 0x245
 80073c2:	e7e5      	b.n	8007390 <__mdiff+0x28>
 80073c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073c8:	6926      	ldr	r6, [r4, #16]
 80073ca:	60c5      	str	r5, [r0, #12]
 80073cc:	f104 0914 	add.w	r9, r4, #20
 80073d0:	f108 0514 	add.w	r5, r8, #20
 80073d4:	f100 0e14 	add.w	lr, r0, #20
 80073d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80073dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80073e0:	f108 0210 	add.w	r2, r8, #16
 80073e4:	46f2      	mov	sl, lr
 80073e6:	2100      	movs	r1, #0
 80073e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80073ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80073f0:	fa11 f88b 	uxtah	r8, r1, fp
 80073f4:	b299      	uxth	r1, r3
 80073f6:	0c1b      	lsrs	r3, r3, #16
 80073f8:	eba8 0801 	sub.w	r8, r8, r1
 80073fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007400:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007404:	fa1f f888 	uxth.w	r8, r8
 8007408:	1419      	asrs	r1, r3, #16
 800740a:	454e      	cmp	r6, r9
 800740c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007410:	f84a 3b04 	str.w	r3, [sl], #4
 8007414:	d8e8      	bhi.n	80073e8 <__mdiff+0x80>
 8007416:	1b33      	subs	r3, r6, r4
 8007418:	3b15      	subs	r3, #21
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	3304      	adds	r3, #4
 8007420:	3415      	adds	r4, #21
 8007422:	42a6      	cmp	r6, r4
 8007424:	bf38      	it	cc
 8007426:	2304      	movcc	r3, #4
 8007428:	441d      	add	r5, r3
 800742a:	4473      	add	r3, lr
 800742c:	469e      	mov	lr, r3
 800742e:	462e      	mov	r6, r5
 8007430:	4566      	cmp	r6, ip
 8007432:	d30e      	bcc.n	8007452 <__mdiff+0xea>
 8007434:	f10c 0203 	add.w	r2, ip, #3
 8007438:	1b52      	subs	r2, r2, r5
 800743a:	f022 0203 	bic.w	r2, r2, #3
 800743e:	3d03      	subs	r5, #3
 8007440:	45ac      	cmp	ip, r5
 8007442:	bf38      	it	cc
 8007444:	2200      	movcc	r2, #0
 8007446:	4413      	add	r3, r2
 8007448:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800744c:	b17a      	cbz	r2, 800746e <__mdiff+0x106>
 800744e:	6107      	str	r7, [r0, #16]
 8007450:	e7a4      	b.n	800739c <__mdiff+0x34>
 8007452:	f856 8b04 	ldr.w	r8, [r6], #4
 8007456:	fa11 f288 	uxtah	r2, r1, r8
 800745a:	1414      	asrs	r4, r2, #16
 800745c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007460:	b292      	uxth	r2, r2
 8007462:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007466:	f84e 2b04 	str.w	r2, [lr], #4
 800746a:	1421      	asrs	r1, r4, #16
 800746c:	e7e0      	b.n	8007430 <__mdiff+0xc8>
 800746e:	3f01      	subs	r7, #1
 8007470:	e7ea      	b.n	8007448 <__mdiff+0xe0>
 8007472:	bf00      	nop
 8007474:	0800970d 	.word	0x0800970d
 8007478:	0800971e 	.word	0x0800971e

0800747c <__ulp>:
 800747c:	b082      	sub	sp, #8
 800747e:	ed8d 0b00 	vstr	d0, [sp]
 8007482:	9a01      	ldr	r2, [sp, #4]
 8007484:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <__ulp+0x48>)
 8007486:	4013      	ands	r3, r2
 8007488:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800748c:	2b00      	cmp	r3, #0
 800748e:	dc08      	bgt.n	80074a2 <__ulp+0x26>
 8007490:	425b      	negs	r3, r3
 8007492:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007496:	ea4f 5223 	mov.w	r2, r3, asr #20
 800749a:	da04      	bge.n	80074a6 <__ulp+0x2a>
 800749c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80074a0:	4113      	asrs	r3, r2
 80074a2:	2200      	movs	r2, #0
 80074a4:	e008      	b.n	80074b8 <__ulp+0x3c>
 80074a6:	f1a2 0314 	sub.w	r3, r2, #20
 80074aa:	2b1e      	cmp	r3, #30
 80074ac:	bfda      	itte	le
 80074ae:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80074b2:	40da      	lsrle	r2, r3
 80074b4:	2201      	movgt	r2, #1
 80074b6:	2300      	movs	r3, #0
 80074b8:	4619      	mov	r1, r3
 80074ba:	4610      	mov	r0, r2
 80074bc:	ec41 0b10 	vmov	d0, r0, r1
 80074c0:	b002      	add	sp, #8
 80074c2:	4770      	bx	lr
 80074c4:	7ff00000 	.word	0x7ff00000

080074c8 <__b2d>:
 80074c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074cc:	6906      	ldr	r6, [r0, #16]
 80074ce:	f100 0814 	add.w	r8, r0, #20
 80074d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80074d6:	1f37      	subs	r7, r6, #4
 80074d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80074dc:	4610      	mov	r0, r2
 80074de:	f7ff fd53 	bl	8006f88 <__hi0bits>
 80074e2:	f1c0 0320 	rsb	r3, r0, #32
 80074e6:	280a      	cmp	r0, #10
 80074e8:	600b      	str	r3, [r1, #0]
 80074ea:	491b      	ldr	r1, [pc, #108]	; (8007558 <__b2d+0x90>)
 80074ec:	dc15      	bgt.n	800751a <__b2d+0x52>
 80074ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80074f2:	fa22 f30c 	lsr.w	r3, r2, ip
 80074f6:	45b8      	cmp	r8, r7
 80074f8:	ea43 0501 	orr.w	r5, r3, r1
 80074fc:	bf34      	ite	cc
 80074fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007502:	2300      	movcs	r3, #0
 8007504:	3015      	adds	r0, #21
 8007506:	fa02 f000 	lsl.w	r0, r2, r0
 800750a:	fa23 f30c 	lsr.w	r3, r3, ip
 800750e:	4303      	orrs	r3, r0
 8007510:	461c      	mov	r4, r3
 8007512:	ec45 4b10 	vmov	d0, r4, r5
 8007516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800751a:	45b8      	cmp	r8, r7
 800751c:	bf3a      	itte	cc
 800751e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007522:	f1a6 0708 	subcc.w	r7, r6, #8
 8007526:	2300      	movcs	r3, #0
 8007528:	380b      	subs	r0, #11
 800752a:	d012      	beq.n	8007552 <__b2d+0x8a>
 800752c:	f1c0 0120 	rsb	r1, r0, #32
 8007530:	fa23 f401 	lsr.w	r4, r3, r1
 8007534:	4082      	lsls	r2, r0
 8007536:	4322      	orrs	r2, r4
 8007538:	4547      	cmp	r7, r8
 800753a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800753e:	bf8c      	ite	hi
 8007540:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007544:	2200      	movls	r2, #0
 8007546:	4083      	lsls	r3, r0
 8007548:	40ca      	lsrs	r2, r1
 800754a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800754e:	4313      	orrs	r3, r2
 8007550:	e7de      	b.n	8007510 <__b2d+0x48>
 8007552:	ea42 0501 	orr.w	r5, r2, r1
 8007556:	e7db      	b.n	8007510 <__b2d+0x48>
 8007558:	3ff00000 	.word	0x3ff00000

0800755c <__d2b>:
 800755c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007560:	460f      	mov	r7, r1
 8007562:	2101      	movs	r1, #1
 8007564:	ec59 8b10 	vmov	r8, r9, d0
 8007568:	4616      	mov	r6, r2
 800756a:	f7ff fc1b 	bl	8006da4 <_Balloc>
 800756e:	4604      	mov	r4, r0
 8007570:	b930      	cbnz	r0, 8007580 <__d2b+0x24>
 8007572:	4602      	mov	r2, r0
 8007574:	4b24      	ldr	r3, [pc, #144]	; (8007608 <__d2b+0xac>)
 8007576:	4825      	ldr	r0, [pc, #148]	; (800760c <__d2b+0xb0>)
 8007578:	f240 310f 	movw	r1, #783	; 0x30f
 800757c:	f001 f9b0 	bl	80088e0 <__assert_func>
 8007580:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007584:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007588:	bb2d      	cbnz	r5, 80075d6 <__d2b+0x7a>
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	f1b8 0300 	subs.w	r3, r8, #0
 8007590:	d026      	beq.n	80075e0 <__d2b+0x84>
 8007592:	4668      	mov	r0, sp
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	f7ff fd17 	bl	8006fc8 <__lo0bits>
 800759a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800759e:	b1e8      	cbz	r0, 80075dc <__d2b+0x80>
 80075a0:	f1c0 0320 	rsb	r3, r0, #32
 80075a4:	fa02 f303 	lsl.w	r3, r2, r3
 80075a8:	430b      	orrs	r3, r1
 80075aa:	40c2      	lsrs	r2, r0
 80075ac:	6163      	str	r3, [r4, #20]
 80075ae:	9201      	str	r2, [sp, #4]
 80075b0:	9b01      	ldr	r3, [sp, #4]
 80075b2:	61a3      	str	r3, [r4, #24]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bf14      	ite	ne
 80075b8:	2202      	movne	r2, #2
 80075ba:	2201      	moveq	r2, #1
 80075bc:	6122      	str	r2, [r4, #16]
 80075be:	b1bd      	cbz	r5, 80075f0 <__d2b+0x94>
 80075c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075c4:	4405      	add	r5, r0
 80075c6:	603d      	str	r5, [r7, #0]
 80075c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075cc:	6030      	str	r0, [r6, #0]
 80075ce:	4620      	mov	r0, r4
 80075d0:	b003      	add	sp, #12
 80075d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075da:	e7d6      	b.n	800758a <__d2b+0x2e>
 80075dc:	6161      	str	r1, [r4, #20]
 80075de:	e7e7      	b.n	80075b0 <__d2b+0x54>
 80075e0:	a801      	add	r0, sp, #4
 80075e2:	f7ff fcf1 	bl	8006fc8 <__lo0bits>
 80075e6:	9b01      	ldr	r3, [sp, #4]
 80075e8:	6163      	str	r3, [r4, #20]
 80075ea:	3020      	adds	r0, #32
 80075ec:	2201      	movs	r2, #1
 80075ee:	e7e5      	b.n	80075bc <__d2b+0x60>
 80075f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075f8:	6038      	str	r0, [r7, #0]
 80075fa:	6918      	ldr	r0, [r3, #16]
 80075fc:	f7ff fcc4 	bl	8006f88 <__hi0bits>
 8007600:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007604:	e7e2      	b.n	80075cc <__d2b+0x70>
 8007606:	bf00      	nop
 8007608:	0800970d 	.word	0x0800970d
 800760c:	0800971e 	.word	0x0800971e

08007610 <__ratio>:
 8007610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	4688      	mov	r8, r1
 8007616:	4669      	mov	r1, sp
 8007618:	4681      	mov	r9, r0
 800761a:	f7ff ff55 	bl	80074c8 <__b2d>
 800761e:	a901      	add	r1, sp, #4
 8007620:	4640      	mov	r0, r8
 8007622:	ec55 4b10 	vmov	r4, r5, d0
 8007626:	f7ff ff4f 	bl	80074c8 <__b2d>
 800762a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800762e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007632:	eba3 0c02 	sub.w	ip, r3, r2
 8007636:	e9dd 3200 	ldrd	r3, r2, [sp]
 800763a:	1a9b      	subs	r3, r3, r2
 800763c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007640:	ec51 0b10 	vmov	r0, r1, d0
 8007644:	2b00      	cmp	r3, #0
 8007646:	bfd6      	itet	le
 8007648:	460a      	movle	r2, r1
 800764a:	462a      	movgt	r2, r5
 800764c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007650:	468b      	mov	fp, r1
 8007652:	462f      	mov	r7, r5
 8007654:	bfd4      	ite	le
 8007656:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800765a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800765e:	4620      	mov	r0, r4
 8007660:	ee10 2a10 	vmov	r2, s0
 8007664:	465b      	mov	r3, fp
 8007666:	4639      	mov	r1, r7
 8007668:	f7f9 f8f8 	bl	800085c <__aeabi_ddiv>
 800766c:	ec41 0b10 	vmov	d0, r0, r1
 8007670:	b003      	add	sp, #12
 8007672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007676 <__copybits>:
 8007676:	3901      	subs	r1, #1
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	1149      	asrs	r1, r1, #5
 800767c:	6914      	ldr	r4, [r2, #16]
 800767e:	3101      	adds	r1, #1
 8007680:	f102 0314 	add.w	r3, r2, #20
 8007684:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007688:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800768c:	1f05      	subs	r5, r0, #4
 800768e:	42a3      	cmp	r3, r4
 8007690:	d30c      	bcc.n	80076ac <__copybits+0x36>
 8007692:	1aa3      	subs	r3, r4, r2
 8007694:	3b11      	subs	r3, #17
 8007696:	f023 0303 	bic.w	r3, r3, #3
 800769a:	3211      	adds	r2, #17
 800769c:	42a2      	cmp	r2, r4
 800769e:	bf88      	it	hi
 80076a0:	2300      	movhi	r3, #0
 80076a2:	4418      	add	r0, r3
 80076a4:	2300      	movs	r3, #0
 80076a6:	4288      	cmp	r0, r1
 80076a8:	d305      	bcc.n	80076b6 <__copybits+0x40>
 80076aa:	bd70      	pop	{r4, r5, r6, pc}
 80076ac:	f853 6b04 	ldr.w	r6, [r3], #4
 80076b0:	f845 6f04 	str.w	r6, [r5, #4]!
 80076b4:	e7eb      	b.n	800768e <__copybits+0x18>
 80076b6:	f840 3b04 	str.w	r3, [r0], #4
 80076ba:	e7f4      	b.n	80076a6 <__copybits+0x30>

080076bc <__any_on>:
 80076bc:	f100 0214 	add.w	r2, r0, #20
 80076c0:	6900      	ldr	r0, [r0, #16]
 80076c2:	114b      	asrs	r3, r1, #5
 80076c4:	4298      	cmp	r0, r3
 80076c6:	b510      	push	{r4, lr}
 80076c8:	db11      	blt.n	80076ee <__any_on+0x32>
 80076ca:	dd0a      	ble.n	80076e2 <__any_on+0x26>
 80076cc:	f011 011f 	ands.w	r1, r1, #31
 80076d0:	d007      	beq.n	80076e2 <__any_on+0x26>
 80076d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80076d6:	fa24 f001 	lsr.w	r0, r4, r1
 80076da:	fa00 f101 	lsl.w	r1, r0, r1
 80076de:	428c      	cmp	r4, r1
 80076e0:	d10b      	bne.n	80076fa <__any_on+0x3e>
 80076e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d803      	bhi.n	80076f2 <__any_on+0x36>
 80076ea:	2000      	movs	r0, #0
 80076ec:	bd10      	pop	{r4, pc}
 80076ee:	4603      	mov	r3, r0
 80076f0:	e7f7      	b.n	80076e2 <__any_on+0x26>
 80076f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076f6:	2900      	cmp	r1, #0
 80076f8:	d0f5      	beq.n	80076e6 <__any_on+0x2a>
 80076fa:	2001      	movs	r0, #1
 80076fc:	e7f6      	b.n	80076ec <__any_on+0x30>

080076fe <sulp>:
 80076fe:	b570      	push	{r4, r5, r6, lr}
 8007700:	4604      	mov	r4, r0
 8007702:	460d      	mov	r5, r1
 8007704:	ec45 4b10 	vmov	d0, r4, r5
 8007708:	4616      	mov	r6, r2
 800770a:	f7ff feb7 	bl	800747c <__ulp>
 800770e:	ec51 0b10 	vmov	r0, r1, d0
 8007712:	b17e      	cbz	r6, 8007734 <sulp+0x36>
 8007714:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007718:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800771c:	2b00      	cmp	r3, #0
 800771e:	dd09      	ble.n	8007734 <sulp+0x36>
 8007720:	051b      	lsls	r3, r3, #20
 8007722:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007726:	2400      	movs	r4, #0
 8007728:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800772c:	4622      	mov	r2, r4
 800772e:	462b      	mov	r3, r5
 8007730:	f7f8 ff6a 	bl	8000608 <__aeabi_dmul>
 8007734:	bd70      	pop	{r4, r5, r6, pc}
	...

08007738 <_strtod_l>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	ed2d 8b02 	vpush	{d8}
 8007740:	b09b      	sub	sp, #108	; 0x6c
 8007742:	4604      	mov	r4, r0
 8007744:	9213      	str	r2, [sp, #76]	; 0x4c
 8007746:	2200      	movs	r2, #0
 8007748:	9216      	str	r2, [sp, #88]	; 0x58
 800774a:	460d      	mov	r5, r1
 800774c:	f04f 0800 	mov.w	r8, #0
 8007750:	f04f 0900 	mov.w	r9, #0
 8007754:	460a      	mov	r2, r1
 8007756:	9215      	str	r2, [sp, #84]	; 0x54
 8007758:	7811      	ldrb	r1, [r2, #0]
 800775a:	292b      	cmp	r1, #43	; 0x2b
 800775c:	d04c      	beq.n	80077f8 <_strtod_l+0xc0>
 800775e:	d83a      	bhi.n	80077d6 <_strtod_l+0x9e>
 8007760:	290d      	cmp	r1, #13
 8007762:	d834      	bhi.n	80077ce <_strtod_l+0x96>
 8007764:	2908      	cmp	r1, #8
 8007766:	d834      	bhi.n	80077d2 <_strtod_l+0x9a>
 8007768:	2900      	cmp	r1, #0
 800776a:	d03d      	beq.n	80077e8 <_strtod_l+0xb0>
 800776c:	2200      	movs	r2, #0
 800776e:	920a      	str	r2, [sp, #40]	; 0x28
 8007770:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007772:	7832      	ldrb	r2, [r6, #0]
 8007774:	2a30      	cmp	r2, #48	; 0x30
 8007776:	f040 80b4 	bne.w	80078e2 <_strtod_l+0x1aa>
 800777a:	7872      	ldrb	r2, [r6, #1]
 800777c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007780:	2a58      	cmp	r2, #88	; 0x58
 8007782:	d170      	bne.n	8007866 <_strtod_l+0x12e>
 8007784:	9302      	str	r3, [sp, #8]
 8007786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007788:	9301      	str	r3, [sp, #4]
 800778a:	ab16      	add	r3, sp, #88	; 0x58
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	4a8e      	ldr	r2, [pc, #568]	; (80079c8 <_strtod_l+0x290>)
 8007790:	ab17      	add	r3, sp, #92	; 0x5c
 8007792:	a915      	add	r1, sp, #84	; 0x54
 8007794:	4620      	mov	r0, r4
 8007796:	f001 f93f 	bl	8008a18 <__gethex>
 800779a:	f010 070f 	ands.w	r7, r0, #15
 800779e:	4605      	mov	r5, r0
 80077a0:	d005      	beq.n	80077ae <_strtod_l+0x76>
 80077a2:	2f06      	cmp	r7, #6
 80077a4:	d12a      	bne.n	80077fc <_strtod_l+0xc4>
 80077a6:	3601      	adds	r6, #1
 80077a8:	2300      	movs	r3, #0
 80077aa:	9615      	str	r6, [sp, #84]	; 0x54
 80077ac:	930a      	str	r3, [sp, #40]	; 0x28
 80077ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f040 857f 	bne.w	80082b4 <_strtod_l+0xb7c>
 80077b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b8:	b1db      	cbz	r3, 80077f2 <_strtod_l+0xba>
 80077ba:	4642      	mov	r2, r8
 80077bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80077c0:	ec43 2b10 	vmov	d0, r2, r3
 80077c4:	b01b      	add	sp, #108	; 0x6c
 80077c6:	ecbd 8b02 	vpop	{d8}
 80077ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ce:	2920      	cmp	r1, #32
 80077d0:	d1cc      	bne.n	800776c <_strtod_l+0x34>
 80077d2:	3201      	adds	r2, #1
 80077d4:	e7bf      	b.n	8007756 <_strtod_l+0x1e>
 80077d6:	292d      	cmp	r1, #45	; 0x2d
 80077d8:	d1c8      	bne.n	800776c <_strtod_l+0x34>
 80077da:	2101      	movs	r1, #1
 80077dc:	910a      	str	r1, [sp, #40]	; 0x28
 80077de:	1c51      	adds	r1, r2, #1
 80077e0:	9115      	str	r1, [sp, #84]	; 0x54
 80077e2:	7852      	ldrb	r2, [r2, #1]
 80077e4:	2a00      	cmp	r2, #0
 80077e6:	d1c3      	bne.n	8007770 <_strtod_l+0x38>
 80077e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077ea:	9515      	str	r5, [sp, #84]	; 0x54
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f040 855f 	bne.w	80082b0 <_strtod_l+0xb78>
 80077f2:	4642      	mov	r2, r8
 80077f4:	464b      	mov	r3, r9
 80077f6:	e7e3      	b.n	80077c0 <_strtod_l+0x88>
 80077f8:	2100      	movs	r1, #0
 80077fa:	e7ef      	b.n	80077dc <_strtod_l+0xa4>
 80077fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80077fe:	b13a      	cbz	r2, 8007810 <_strtod_l+0xd8>
 8007800:	2135      	movs	r1, #53	; 0x35
 8007802:	a818      	add	r0, sp, #96	; 0x60
 8007804:	f7ff ff37 	bl	8007676 <__copybits>
 8007808:	9916      	ldr	r1, [sp, #88]	; 0x58
 800780a:	4620      	mov	r0, r4
 800780c:	f7ff fb0a 	bl	8006e24 <_Bfree>
 8007810:	3f01      	subs	r7, #1
 8007812:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007814:	2f04      	cmp	r7, #4
 8007816:	d806      	bhi.n	8007826 <_strtod_l+0xee>
 8007818:	e8df f007 	tbb	[pc, r7]
 800781c:	201d0314 	.word	0x201d0314
 8007820:	14          	.byte	0x14
 8007821:	00          	.byte	0x00
 8007822:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007826:	05e9      	lsls	r1, r5, #23
 8007828:	bf48      	it	mi
 800782a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800782e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007832:	0d1b      	lsrs	r3, r3, #20
 8007834:	051b      	lsls	r3, r3, #20
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1b9      	bne.n	80077ae <_strtod_l+0x76>
 800783a:	f7fe fb03 	bl	8005e44 <__errno>
 800783e:	2322      	movs	r3, #34	; 0x22
 8007840:	6003      	str	r3, [r0, #0]
 8007842:	e7b4      	b.n	80077ae <_strtod_l+0x76>
 8007844:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007848:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800784c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007850:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007854:	e7e7      	b.n	8007826 <_strtod_l+0xee>
 8007856:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80079d0 <_strtod_l+0x298>
 800785a:	e7e4      	b.n	8007826 <_strtod_l+0xee>
 800785c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007860:	f04f 38ff 	mov.w	r8, #4294967295
 8007864:	e7df      	b.n	8007826 <_strtod_l+0xee>
 8007866:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	9215      	str	r2, [sp, #84]	; 0x54
 800786c:	785b      	ldrb	r3, [r3, #1]
 800786e:	2b30      	cmp	r3, #48	; 0x30
 8007870:	d0f9      	beq.n	8007866 <_strtod_l+0x12e>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d09b      	beq.n	80077ae <_strtod_l+0x76>
 8007876:	2301      	movs	r3, #1
 8007878:	f04f 0a00 	mov.w	sl, #0
 800787c:	9304      	str	r3, [sp, #16]
 800787e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007880:	930b      	str	r3, [sp, #44]	; 0x2c
 8007882:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007886:	46d3      	mov	fp, sl
 8007888:	220a      	movs	r2, #10
 800788a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800788c:	7806      	ldrb	r6, [r0, #0]
 800788e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007892:	b2d9      	uxtb	r1, r3
 8007894:	2909      	cmp	r1, #9
 8007896:	d926      	bls.n	80078e6 <_strtod_l+0x1ae>
 8007898:	494c      	ldr	r1, [pc, #304]	; (80079cc <_strtod_l+0x294>)
 800789a:	2201      	movs	r2, #1
 800789c:	f000 ffe6 	bl	800886c <strncmp>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d030      	beq.n	8007906 <_strtod_l+0x1ce>
 80078a4:	2000      	movs	r0, #0
 80078a6:	4632      	mov	r2, r6
 80078a8:	9005      	str	r0, [sp, #20]
 80078aa:	465e      	mov	r6, fp
 80078ac:	4603      	mov	r3, r0
 80078ae:	2a65      	cmp	r2, #101	; 0x65
 80078b0:	d001      	beq.n	80078b6 <_strtod_l+0x17e>
 80078b2:	2a45      	cmp	r2, #69	; 0x45
 80078b4:	d113      	bne.n	80078de <_strtod_l+0x1a6>
 80078b6:	b91e      	cbnz	r6, 80078c0 <_strtod_l+0x188>
 80078b8:	9a04      	ldr	r2, [sp, #16]
 80078ba:	4302      	orrs	r2, r0
 80078bc:	d094      	beq.n	80077e8 <_strtod_l+0xb0>
 80078be:	2600      	movs	r6, #0
 80078c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80078c2:	1c6a      	adds	r2, r5, #1
 80078c4:	9215      	str	r2, [sp, #84]	; 0x54
 80078c6:	786a      	ldrb	r2, [r5, #1]
 80078c8:	2a2b      	cmp	r2, #43	; 0x2b
 80078ca:	d074      	beq.n	80079b6 <_strtod_l+0x27e>
 80078cc:	2a2d      	cmp	r2, #45	; 0x2d
 80078ce:	d078      	beq.n	80079c2 <_strtod_l+0x28a>
 80078d0:	f04f 0c00 	mov.w	ip, #0
 80078d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80078d8:	2909      	cmp	r1, #9
 80078da:	d97f      	bls.n	80079dc <_strtod_l+0x2a4>
 80078dc:	9515      	str	r5, [sp, #84]	; 0x54
 80078de:	2700      	movs	r7, #0
 80078e0:	e09e      	b.n	8007a20 <_strtod_l+0x2e8>
 80078e2:	2300      	movs	r3, #0
 80078e4:	e7c8      	b.n	8007878 <_strtod_l+0x140>
 80078e6:	f1bb 0f08 	cmp.w	fp, #8
 80078ea:	bfd8      	it	le
 80078ec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80078ee:	f100 0001 	add.w	r0, r0, #1
 80078f2:	bfda      	itte	le
 80078f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80078f8:	9309      	strle	r3, [sp, #36]	; 0x24
 80078fa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80078fe:	f10b 0b01 	add.w	fp, fp, #1
 8007902:	9015      	str	r0, [sp, #84]	; 0x54
 8007904:	e7c1      	b.n	800788a <_strtod_l+0x152>
 8007906:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	9215      	str	r2, [sp, #84]	; 0x54
 800790c:	785a      	ldrb	r2, [r3, #1]
 800790e:	f1bb 0f00 	cmp.w	fp, #0
 8007912:	d037      	beq.n	8007984 <_strtod_l+0x24c>
 8007914:	9005      	str	r0, [sp, #20]
 8007916:	465e      	mov	r6, fp
 8007918:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800791c:	2b09      	cmp	r3, #9
 800791e:	d912      	bls.n	8007946 <_strtod_l+0x20e>
 8007920:	2301      	movs	r3, #1
 8007922:	e7c4      	b.n	80078ae <_strtod_l+0x176>
 8007924:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	9215      	str	r2, [sp, #84]	; 0x54
 800792a:	785a      	ldrb	r2, [r3, #1]
 800792c:	3001      	adds	r0, #1
 800792e:	2a30      	cmp	r2, #48	; 0x30
 8007930:	d0f8      	beq.n	8007924 <_strtod_l+0x1ec>
 8007932:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007936:	2b08      	cmp	r3, #8
 8007938:	f200 84c1 	bhi.w	80082be <_strtod_l+0xb86>
 800793c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800793e:	9005      	str	r0, [sp, #20]
 8007940:	2000      	movs	r0, #0
 8007942:	930b      	str	r3, [sp, #44]	; 0x2c
 8007944:	4606      	mov	r6, r0
 8007946:	3a30      	subs	r2, #48	; 0x30
 8007948:	f100 0301 	add.w	r3, r0, #1
 800794c:	d014      	beq.n	8007978 <_strtod_l+0x240>
 800794e:	9905      	ldr	r1, [sp, #20]
 8007950:	4419      	add	r1, r3
 8007952:	9105      	str	r1, [sp, #20]
 8007954:	4633      	mov	r3, r6
 8007956:	eb00 0c06 	add.w	ip, r0, r6
 800795a:	210a      	movs	r1, #10
 800795c:	4563      	cmp	r3, ip
 800795e:	d113      	bne.n	8007988 <_strtod_l+0x250>
 8007960:	1833      	adds	r3, r6, r0
 8007962:	2b08      	cmp	r3, #8
 8007964:	f106 0601 	add.w	r6, r6, #1
 8007968:	4406      	add	r6, r0
 800796a:	dc1a      	bgt.n	80079a2 <_strtod_l+0x26a>
 800796c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800796e:	230a      	movs	r3, #10
 8007970:	fb03 2301 	mla	r3, r3, r1, r2
 8007974:	9309      	str	r3, [sp, #36]	; 0x24
 8007976:	2300      	movs	r3, #0
 8007978:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800797a:	1c51      	adds	r1, r2, #1
 800797c:	9115      	str	r1, [sp, #84]	; 0x54
 800797e:	7852      	ldrb	r2, [r2, #1]
 8007980:	4618      	mov	r0, r3
 8007982:	e7c9      	b.n	8007918 <_strtod_l+0x1e0>
 8007984:	4658      	mov	r0, fp
 8007986:	e7d2      	b.n	800792e <_strtod_l+0x1f6>
 8007988:	2b08      	cmp	r3, #8
 800798a:	f103 0301 	add.w	r3, r3, #1
 800798e:	dc03      	bgt.n	8007998 <_strtod_l+0x260>
 8007990:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007992:	434f      	muls	r7, r1
 8007994:	9709      	str	r7, [sp, #36]	; 0x24
 8007996:	e7e1      	b.n	800795c <_strtod_l+0x224>
 8007998:	2b10      	cmp	r3, #16
 800799a:	bfd8      	it	le
 800799c:	fb01 fa0a 	mulle.w	sl, r1, sl
 80079a0:	e7dc      	b.n	800795c <_strtod_l+0x224>
 80079a2:	2e10      	cmp	r6, #16
 80079a4:	bfdc      	itt	le
 80079a6:	230a      	movle	r3, #10
 80079a8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80079ac:	e7e3      	b.n	8007976 <_strtod_l+0x23e>
 80079ae:	2300      	movs	r3, #0
 80079b0:	9305      	str	r3, [sp, #20]
 80079b2:	2301      	movs	r3, #1
 80079b4:	e780      	b.n	80078b8 <_strtod_l+0x180>
 80079b6:	f04f 0c00 	mov.w	ip, #0
 80079ba:	1caa      	adds	r2, r5, #2
 80079bc:	9215      	str	r2, [sp, #84]	; 0x54
 80079be:	78aa      	ldrb	r2, [r5, #2]
 80079c0:	e788      	b.n	80078d4 <_strtod_l+0x19c>
 80079c2:	f04f 0c01 	mov.w	ip, #1
 80079c6:	e7f8      	b.n	80079ba <_strtod_l+0x282>
 80079c8:	08009878 	.word	0x08009878
 80079cc:	08009874 	.word	0x08009874
 80079d0:	7ff00000 	.word	0x7ff00000
 80079d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079d6:	1c51      	adds	r1, r2, #1
 80079d8:	9115      	str	r1, [sp, #84]	; 0x54
 80079da:	7852      	ldrb	r2, [r2, #1]
 80079dc:	2a30      	cmp	r2, #48	; 0x30
 80079de:	d0f9      	beq.n	80079d4 <_strtod_l+0x29c>
 80079e0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80079e4:	2908      	cmp	r1, #8
 80079e6:	f63f af7a 	bhi.w	80078de <_strtod_l+0x1a6>
 80079ea:	3a30      	subs	r2, #48	; 0x30
 80079ec:	9208      	str	r2, [sp, #32]
 80079ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079f0:	920c      	str	r2, [sp, #48]	; 0x30
 80079f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079f4:	1c57      	adds	r7, r2, #1
 80079f6:	9715      	str	r7, [sp, #84]	; 0x54
 80079f8:	7852      	ldrb	r2, [r2, #1]
 80079fa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80079fe:	f1be 0f09 	cmp.w	lr, #9
 8007a02:	d938      	bls.n	8007a76 <_strtod_l+0x33e>
 8007a04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a06:	1a7f      	subs	r7, r7, r1
 8007a08:	2f08      	cmp	r7, #8
 8007a0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007a0e:	dc03      	bgt.n	8007a18 <_strtod_l+0x2e0>
 8007a10:	9908      	ldr	r1, [sp, #32]
 8007a12:	428f      	cmp	r7, r1
 8007a14:	bfa8      	it	ge
 8007a16:	460f      	movge	r7, r1
 8007a18:	f1bc 0f00 	cmp.w	ip, #0
 8007a1c:	d000      	beq.n	8007a20 <_strtod_l+0x2e8>
 8007a1e:	427f      	negs	r7, r7
 8007a20:	2e00      	cmp	r6, #0
 8007a22:	d14f      	bne.n	8007ac4 <_strtod_l+0x38c>
 8007a24:	9904      	ldr	r1, [sp, #16]
 8007a26:	4301      	orrs	r1, r0
 8007a28:	f47f aec1 	bne.w	80077ae <_strtod_l+0x76>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f47f aedb 	bne.w	80077e8 <_strtod_l+0xb0>
 8007a32:	2a69      	cmp	r2, #105	; 0x69
 8007a34:	d029      	beq.n	8007a8a <_strtod_l+0x352>
 8007a36:	dc26      	bgt.n	8007a86 <_strtod_l+0x34e>
 8007a38:	2a49      	cmp	r2, #73	; 0x49
 8007a3a:	d026      	beq.n	8007a8a <_strtod_l+0x352>
 8007a3c:	2a4e      	cmp	r2, #78	; 0x4e
 8007a3e:	f47f aed3 	bne.w	80077e8 <_strtod_l+0xb0>
 8007a42:	499b      	ldr	r1, [pc, #620]	; (8007cb0 <_strtod_l+0x578>)
 8007a44:	a815      	add	r0, sp, #84	; 0x54
 8007a46:	f001 fa27 	bl	8008e98 <__match>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	f43f aecc 	beq.w	80077e8 <_strtod_l+0xb0>
 8007a50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b28      	cmp	r3, #40	; 0x28
 8007a56:	d12f      	bne.n	8007ab8 <_strtod_l+0x380>
 8007a58:	4996      	ldr	r1, [pc, #600]	; (8007cb4 <_strtod_l+0x57c>)
 8007a5a:	aa18      	add	r2, sp, #96	; 0x60
 8007a5c:	a815      	add	r0, sp, #84	; 0x54
 8007a5e:	f001 fa2f 	bl	8008ec0 <__hexnan>
 8007a62:	2805      	cmp	r0, #5
 8007a64:	d128      	bne.n	8007ab8 <_strtod_l+0x380>
 8007a66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007a70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007a74:	e69b      	b.n	80077ae <_strtod_l+0x76>
 8007a76:	9f08      	ldr	r7, [sp, #32]
 8007a78:	210a      	movs	r1, #10
 8007a7a:	fb01 2107 	mla	r1, r1, r7, r2
 8007a7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007a82:	9208      	str	r2, [sp, #32]
 8007a84:	e7b5      	b.n	80079f2 <_strtod_l+0x2ba>
 8007a86:	2a6e      	cmp	r2, #110	; 0x6e
 8007a88:	e7d9      	b.n	8007a3e <_strtod_l+0x306>
 8007a8a:	498b      	ldr	r1, [pc, #556]	; (8007cb8 <_strtod_l+0x580>)
 8007a8c:	a815      	add	r0, sp, #84	; 0x54
 8007a8e:	f001 fa03 	bl	8008e98 <__match>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	f43f aea8 	beq.w	80077e8 <_strtod_l+0xb0>
 8007a98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a9a:	4988      	ldr	r1, [pc, #544]	; (8007cbc <_strtod_l+0x584>)
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	a815      	add	r0, sp, #84	; 0x54
 8007aa0:	9315      	str	r3, [sp, #84]	; 0x54
 8007aa2:	f001 f9f9 	bl	8008e98 <__match>
 8007aa6:	b910      	cbnz	r0, 8007aae <_strtod_l+0x376>
 8007aa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007aaa:	3301      	adds	r3, #1
 8007aac:	9315      	str	r3, [sp, #84]	; 0x54
 8007aae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007ccc <_strtod_l+0x594>
 8007ab2:	f04f 0800 	mov.w	r8, #0
 8007ab6:	e67a      	b.n	80077ae <_strtod_l+0x76>
 8007ab8:	4881      	ldr	r0, [pc, #516]	; (8007cc0 <_strtod_l+0x588>)
 8007aba:	f000 ff09 	bl	80088d0 <nan>
 8007abe:	ec59 8b10 	vmov	r8, r9, d0
 8007ac2:	e674      	b.n	80077ae <_strtod_l+0x76>
 8007ac4:	9b05      	ldr	r3, [sp, #20]
 8007ac6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ac8:	1afb      	subs	r3, r7, r3
 8007aca:	f1bb 0f00 	cmp.w	fp, #0
 8007ace:	bf08      	it	eq
 8007ad0:	46b3      	moveq	fp, r6
 8007ad2:	2e10      	cmp	r6, #16
 8007ad4:	9308      	str	r3, [sp, #32]
 8007ad6:	4635      	mov	r5, r6
 8007ad8:	bfa8      	it	ge
 8007ada:	2510      	movge	r5, #16
 8007adc:	f7f8 fd1a 	bl	8000514 <__aeabi_ui2d>
 8007ae0:	2e09      	cmp	r6, #9
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	4689      	mov	r9, r1
 8007ae6:	dd13      	ble.n	8007b10 <_strtod_l+0x3d8>
 8007ae8:	4b76      	ldr	r3, [pc, #472]	; (8007cc4 <_strtod_l+0x58c>)
 8007aea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007aee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007af2:	f7f8 fd89 	bl	8000608 <__aeabi_dmul>
 8007af6:	4680      	mov	r8, r0
 8007af8:	4650      	mov	r0, sl
 8007afa:	4689      	mov	r9, r1
 8007afc:	f7f8 fd0a 	bl	8000514 <__aeabi_ui2d>
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4640      	mov	r0, r8
 8007b06:	4649      	mov	r1, r9
 8007b08:	f7f8 fbc8 	bl	800029c <__adddf3>
 8007b0c:	4680      	mov	r8, r0
 8007b0e:	4689      	mov	r9, r1
 8007b10:	2e0f      	cmp	r6, #15
 8007b12:	dc38      	bgt.n	8007b86 <_strtod_l+0x44e>
 8007b14:	9b08      	ldr	r3, [sp, #32]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f43f ae49 	beq.w	80077ae <_strtod_l+0x76>
 8007b1c:	dd24      	ble.n	8007b68 <_strtod_l+0x430>
 8007b1e:	2b16      	cmp	r3, #22
 8007b20:	dc0b      	bgt.n	8007b3a <_strtod_l+0x402>
 8007b22:	4968      	ldr	r1, [pc, #416]	; (8007cc4 <_strtod_l+0x58c>)
 8007b24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b2c:	4642      	mov	r2, r8
 8007b2e:	464b      	mov	r3, r9
 8007b30:	f7f8 fd6a 	bl	8000608 <__aeabi_dmul>
 8007b34:	4680      	mov	r8, r0
 8007b36:	4689      	mov	r9, r1
 8007b38:	e639      	b.n	80077ae <_strtod_l+0x76>
 8007b3a:	9a08      	ldr	r2, [sp, #32]
 8007b3c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007b40:	4293      	cmp	r3, r2
 8007b42:	db20      	blt.n	8007b86 <_strtod_l+0x44e>
 8007b44:	4c5f      	ldr	r4, [pc, #380]	; (8007cc4 <_strtod_l+0x58c>)
 8007b46:	f1c6 060f 	rsb	r6, r6, #15
 8007b4a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007b4e:	4642      	mov	r2, r8
 8007b50:	464b      	mov	r3, r9
 8007b52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b56:	f7f8 fd57 	bl	8000608 <__aeabi_dmul>
 8007b5a:	9b08      	ldr	r3, [sp, #32]
 8007b5c:	1b9e      	subs	r6, r3, r6
 8007b5e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007b62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b66:	e7e3      	b.n	8007b30 <_strtod_l+0x3f8>
 8007b68:	9b08      	ldr	r3, [sp, #32]
 8007b6a:	3316      	adds	r3, #22
 8007b6c:	db0b      	blt.n	8007b86 <_strtod_l+0x44e>
 8007b6e:	9b05      	ldr	r3, [sp, #20]
 8007b70:	1bdf      	subs	r7, r3, r7
 8007b72:	4b54      	ldr	r3, [pc, #336]	; (8007cc4 <_strtod_l+0x58c>)
 8007b74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	4649      	mov	r1, r9
 8007b80:	f7f8 fe6c 	bl	800085c <__aeabi_ddiv>
 8007b84:	e7d6      	b.n	8007b34 <_strtod_l+0x3fc>
 8007b86:	9b08      	ldr	r3, [sp, #32]
 8007b88:	1b75      	subs	r5, r6, r5
 8007b8a:	441d      	add	r5, r3
 8007b8c:	2d00      	cmp	r5, #0
 8007b8e:	dd70      	ble.n	8007c72 <_strtod_l+0x53a>
 8007b90:	f015 030f 	ands.w	r3, r5, #15
 8007b94:	d00a      	beq.n	8007bac <_strtod_l+0x474>
 8007b96:	494b      	ldr	r1, [pc, #300]	; (8007cc4 <_strtod_l+0x58c>)
 8007b98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b9c:	4642      	mov	r2, r8
 8007b9e:	464b      	mov	r3, r9
 8007ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ba4:	f7f8 fd30 	bl	8000608 <__aeabi_dmul>
 8007ba8:	4680      	mov	r8, r0
 8007baa:	4689      	mov	r9, r1
 8007bac:	f035 050f 	bics.w	r5, r5, #15
 8007bb0:	d04d      	beq.n	8007c4e <_strtod_l+0x516>
 8007bb2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007bb6:	dd22      	ble.n	8007bfe <_strtod_l+0x4c6>
 8007bb8:	2500      	movs	r5, #0
 8007bba:	46ab      	mov	fp, r5
 8007bbc:	9509      	str	r5, [sp, #36]	; 0x24
 8007bbe:	9505      	str	r5, [sp, #20]
 8007bc0:	2322      	movs	r3, #34	; 0x22
 8007bc2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007ccc <_strtod_l+0x594>
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	f04f 0800 	mov.w	r8, #0
 8007bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f43f aded 	beq.w	80077ae <_strtod_l+0x76>
 8007bd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f7ff f924 	bl	8006e24 <_Bfree>
 8007bdc:	9905      	ldr	r1, [sp, #20]
 8007bde:	4620      	mov	r0, r4
 8007be0:	f7ff f920 	bl	8006e24 <_Bfree>
 8007be4:	4659      	mov	r1, fp
 8007be6:	4620      	mov	r0, r4
 8007be8:	f7ff f91c 	bl	8006e24 <_Bfree>
 8007bec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f7ff f918 	bl	8006e24 <_Bfree>
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f7ff f914 	bl	8006e24 <_Bfree>
 8007bfc:	e5d7      	b.n	80077ae <_strtod_l+0x76>
 8007bfe:	4b32      	ldr	r3, [pc, #200]	; (8007cc8 <_strtod_l+0x590>)
 8007c00:	9304      	str	r3, [sp, #16]
 8007c02:	2300      	movs	r3, #0
 8007c04:	112d      	asrs	r5, r5, #4
 8007c06:	4640      	mov	r0, r8
 8007c08:	4649      	mov	r1, r9
 8007c0a:	469a      	mov	sl, r3
 8007c0c:	2d01      	cmp	r5, #1
 8007c0e:	dc21      	bgt.n	8007c54 <_strtod_l+0x51c>
 8007c10:	b10b      	cbz	r3, 8007c16 <_strtod_l+0x4de>
 8007c12:	4680      	mov	r8, r0
 8007c14:	4689      	mov	r9, r1
 8007c16:	492c      	ldr	r1, [pc, #176]	; (8007cc8 <_strtod_l+0x590>)
 8007c18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007c1c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007c20:	4642      	mov	r2, r8
 8007c22:	464b      	mov	r3, r9
 8007c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c28:	f7f8 fcee 	bl	8000608 <__aeabi_dmul>
 8007c2c:	4b27      	ldr	r3, [pc, #156]	; (8007ccc <_strtod_l+0x594>)
 8007c2e:	460a      	mov	r2, r1
 8007c30:	400b      	ands	r3, r1
 8007c32:	4927      	ldr	r1, [pc, #156]	; (8007cd0 <_strtod_l+0x598>)
 8007c34:	428b      	cmp	r3, r1
 8007c36:	4680      	mov	r8, r0
 8007c38:	d8be      	bhi.n	8007bb8 <_strtod_l+0x480>
 8007c3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c3e:	428b      	cmp	r3, r1
 8007c40:	bf86      	itte	hi
 8007c42:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007cd4 <_strtod_l+0x59c>
 8007c46:	f04f 38ff 	movhi.w	r8, #4294967295
 8007c4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007c4e:	2300      	movs	r3, #0
 8007c50:	9304      	str	r3, [sp, #16]
 8007c52:	e07b      	b.n	8007d4c <_strtod_l+0x614>
 8007c54:	07ea      	lsls	r2, r5, #31
 8007c56:	d505      	bpl.n	8007c64 <_strtod_l+0x52c>
 8007c58:	9b04      	ldr	r3, [sp, #16]
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	f7f8 fcd3 	bl	8000608 <__aeabi_dmul>
 8007c62:	2301      	movs	r3, #1
 8007c64:	9a04      	ldr	r2, [sp, #16]
 8007c66:	3208      	adds	r2, #8
 8007c68:	f10a 0a01 	add.w	sl, sl, #1
 8007c6c:	106d      	asrs	r5, r5, #1
 8007c6e:	9204      	str	r2, [sp, #16]
 8007c70:	e7cc      	b.n	8007c0c <_strtod_l+0x4d4>
 8007c72:	d0ec      	beq.n	8007c4e <_strtod_l+0x516>
 8007c74:	426d      	negs	r5, r5
 8007c76:	f015 020f 	ands.w	r2, r5, #15
 8007c7a:	d00a      	beq.n	8007c92 <_strtod_l+0x55a>
 8007c7c:	4b11      	ldr	r3, [pc, #68]	; (8007cc4 <_strtod_l+0x58c>)
 8007c7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c82:	4640      	mov	r0, r8
 8007c84:	4649      	mov	r1, r9
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	f7f8 fde7 	bl	800085c <__aeabi_ddiv>
 8007c8e:	4680      	mov	r8, r0
 8007c90:	4689      	mov	r9, r1
 8007c92:	112d      	asrs	r5, r5, #4
 8007c94:	d0db      	beq.n	8007c4e <_strtod_l+0x516>
 8007c96:	2d1f      	cmp	r5, #31
 8007c98:	dd1e      	ble.n	8007cd8 <_strtod_l+0x5a0>
 8007c9a:	2500      	movs	r5, #0
 8007c9c:	46ab      	mov	fp, r5
 8007c9e:	9509      	str	r5, [sp, #36]	; 0x24
 8007ca0:	9505      	str	r5, [sp, #20]
 8007ca2:	2322      	movs	r3, #34	; 0x22
 8007ca4:	f04f 0800 	mov.w	r8, #0
 8007ca8:	f04f 0900 	mov.w	r9, #0
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	e78d      	b.n	8007bcc <_strtod_l+0x494>
 8007cb0:	08009665 	.word	0x08009665
 8007cb4:	0800988c 	.word	0x0800988c
 8007cb8:	0800965d 	.word	0x0800965d
 8007cbc:	08009694 	.word	0x08009694
 8007cc0:	08009a1d 	.word	0x08009a1d
 8007cc4:	080097a0 	.word	0x080097a0
 8007cc8:	08009778 	.word	0x08009778
 8007ccc:	7ff00000 	.word	0x7ff00000
 8007cd0:	7ca00000 	.word	0x7ca00000
 8007cd4:	7fefffff 	.word	0x7fefffff
 8007cd8:	f015 0310 	ands.w	r3, r5, #16
 8007cdc:	bf18      	it	ne
 8007cde:	236a      	movne	r3, #106	; 0x6a
 8007ce0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008084 <_strtod_l+0x94c>
 8007ce4:	9304      	str	r3, [sp, #16]
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	4649      	mov	r1, r9
 8007cea:	2300      	movs	r3, #0
 8007cec:	07ea      	lsls	r2, r5, #31
 8007cee:	d504      	bpl.n	8007cfa <_strtod_l+0x5c2>
 8007cf0:	e9da 2300 	ldrd	r2, r3, [sl]
 8007cf4:	f7f8 fc88 	bl	8000608 <__aeabi_dmul>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	106d      	asrs	r5, r5, #1
 8007cfc:	f10a 0a08 	add.w	sl, sl, #8
 8007d00:	d1f4      	bne.n	8007cec <_strtod_l+0x5b4>
 8007d02:	b10b      	cbz	r3, 8007d08 <_strtod_l+0x5d0>
 8007d04:	4680      	mov	r8, r0
 8007d06:	4689      	mov	r9, r1
 8007d08:	9b04      	ldr	r3, [sp, #16]
 8007d0a:	b1bb      	cbz	r3, 8007d3c <_strtod_l+0x604>
 8007d0c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007d10:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	4649      	mov	r1, r9
 8007d18:	dd10      	ble.n	8007d3c <_strtod_l+0x604>
 8007d1a:	2b1f      	cmp	r3, #31
 8007d1c:	f340 811e 	ble.w	8007f5c <_strtod_l+0x824>
 8007d20:	2b34      	cmp	r3, #52	; 0x34
 8007d22:	bfde      	ittt	le
 8007d24:	f04f 33ff 	movle.w	r3, #4294967295
 8007d28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007d2c:	4093      	lslle	r3, r2
 8007d2e:	f04f 0800 	mov.w	r8, #0
 8007d32:	bfcc      	ite	gt
 8007d34:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007d38:	ea03 0901 	andle.w	r9, r3, r1
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2300      	movs	r3, #0
 8007d40:	4640      	mov	r0, r8
 8007d42:	4649      	mov	r1, r9
 8007d44:	f7f8 fec8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d1a6      	bne.n	8007c9a <_strtod_l+0x562>
 8007d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d52:	4633      	mov	r3, r6
 8007d54:	465a      	mov	r2, fp
 8007d56:	4620      	mov	r0, r4
 8007d58:	f7ff f8cc 	bl	8006ef4 <__s2b>
 8007d5c:	9009      	str	r0, [sp, #36]	; 0x24
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	f43f af2a 	beq.w	8007bb8 <_strtod_l+0x480>
 8007d64:	9a08      	ldr	r2, [sp, #32]
 8007d66:	9b05      	ldr	r3, [sp, #20]
 8007d68:	2a00      	cmp	r2, #0
 8007d6a:	eba3 0307 	sub.w	r3, r3, r7
 8007d6e:	bfa8      	it	ge
 8007d70:	2300      	movge	r3, #0
 8007d72:	930c      	str	r3, [sp, #48]	; 0x30
 8007d74:	2500      	movs	r5, #0
 8007d76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007d7a:	9312      	str	r3, [sp, #72]	; 0x48
 8007d7c:	46ab      	mov	fp, r5
 8007d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d80:	4620      	mov	r0, r4
 8007d82:	6859      	ldr	r1, [r3, #4]
 8007d84:	f7ff f80e 	bl	8006da4 <_Balloc>
 8007d88:	9005      	str	r0, [sp, #20]
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	f43f af18 	beq.w	8007bc0 <_strtod_l+0x488>
 8007d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	3202      	adds	r2, #2
 8007d96:	f103 010c 	add.w	r1, r3, #12
 8007d9a:	0092      	lsls	r2, r2, #2
 8007d9c:	300c      	adds	r0, #12
 8007d9e:	f000 fd87 	bl	80088b0 <memcpy>
 8007da2:	ec49 8b10 	vmov	d0, r8, r9
 8007da6:	aa18      	add	r2, sp, #96	; 0x60
 8007da8:	a917      	add	r1, sp, #92	; 0x5c
 8007daa:	4620      	mov	r0, r4
 8007dac:	f7ff fbd6 	bl	800755c <__d2b>
 8007db0:	ec49 8b18 	vmov	d8, r8, r9
 8007db4:	9016      	str	r0, [sp, #88]	; 0x58
 8007db6:	2800      	cmp	r0, #0
 8007db8:	f43f af02 	beq.w	8007bc0 <_strtod_l+0x488>
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f7ff f930 	bl	8007024 <__i2b>
 8007dc4:	4683      	mov	fp, r0
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	f43f aefa 	beq.w	8007bc0 <_strtod_l+0x488>
 8007dcc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007dce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007dd0:	2e00      	cmp	r6, #0
 8007dd2:	bfab      	itete	ge
 8007dd4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007dd6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007dd8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007dda:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007dde:	bfac      	ite	ge
 8007de0:	eb06 0a03 	addge.w	sl, r6, r3
 8007de4:	1b9f      	sublt	r7, r3, r6
 8007de6:	9b04      	ldr	r3, [sp, #16]
 8007de8:	1af6      	subs	r6, r6, r3
 8007dea:	4416      	add	r6, r2
 8007dec:	4ba0      	ldr	r3, [pc, #640]	; (8008070 <_strtod_l+0x938>)
 8007dee:	3e01      	subs	r6, #1
 8007df0:	429e      	cmp	r6, r3
 8007df2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007df6:	f280 80c4 	bge.w	8007f82 <_strtod_l+0x84a>
 8007dfa:	1b9b      	subs	r3, r3, r6
 8007dfc:	2b1f      	cmp	r3, #31
 8007dfe:	eba2 0203 	sub.w	r2, r2, r3
 8007e02:	f04f 0101 	mov.w	r1, #1
 8007e06:	f300 80b0 	bgt.w	8007f6a <_strtod_l+0x832>
 8007e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e0e:	930e      	str	r3, [sp, #56]	; 0x38
 8007e10:	2300      	movs	r3, #0
 8007e12:	930d      	str	r3, [sp, #52]	; 0x34
 8007e14:	eb0a 0602 	add.w	r6, sl, r2
 8007e18:	9b04      	ldr	r3, [sp, #16]
 8007e1a:	45b2      	cmp	sl, r6
 8007e1c:	4417      	add	r7, r2
 8007e1e:	441f      	add	r7, r3
 8007e20:	4653      	mov	r3, sl
 8007e22:	bfa8      	it	ge
 8007e24:	4633      	movge	r3, r6
 8007e26:	42bb      	cmp	r3, r7
 8007e28:	bfa8      	it	ge
 8007e2a:	463b      	movge	r3, r7
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bfc2      	ittt	gt
 8007e30:	1af6      	subgt	r6, r6, r3
 8007e32:	1aff      	subgt	r7, r7, r3
 8007e34:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	dd17      	ble.n	8007e6e <_strtod_l+0x736>
 8007e3e:	4659      	mov	r1, fp
 8007e40:	461a      	mov	r2, r3
 8007e42:	4620      	mov	r0, r4
 8007e44:	f7ff f9ae 	bl	80071a4 <__pow5mult>
 8007e48:	4683      	mov	fp, r0
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	f43f aeb8 	beq.w	8007bc0 <_strtod_l+0x488>
 8007e50:	4601      	mov	r1, r0
 8007e52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e54:	4620      	mov	r0, r4
 8007e56:	f7ff f8fb 	bl	8007050 <__multiply>
 8007e5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	f43f aeaf 	beq.w	8007bc0 <_strtod_l+0x488>
 8007e62:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e64:	4620      	mov	r0, r4
 8007e66:	f7fe ffdd 	bl	8006e24 <_Bfree>
 8007e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e6c:	9316      	str	r3, [sp, #88]	; 0x58
 8007e6e:	2e00      	cmp	r6, #0
 8007e70:	f300 808c 	bgt.w	8007f8c <_strtod_l+0x854>
 8007e74:	9b08      	ldr	r3, [sp, #32]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	dd08      	ble.n	8007e8c <_strtod_l+0x754>
 8007e7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e7c:	9905      	ldr	r1, [sp, #20]
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f7ff f990 	bl	80071a4 <__pow5mult>
 8007e84:	9005      	str	r0, [sp, #20]
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f43f ae9a 	beq.w	8007bc0 <_strtod_l+0x488>
 8007e8c:	2f00      	cmp	r7, #0
 8007e8e:	dd08      	ble.n	8007ea2 <_strtod_l+0x76a>
 8007e90:	9905      	ldr	r1, [sp, #20]
 8007e92:	463a      	mov	r2, r7
 8007e94:	4620      	mov	r0, r4
 8007e96:	f7ff f9df 	bl	8007258 <__lshift>
 8007e9a:	9005      	str	r0, [sp, #20]
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f43f ae8f 	beq.w	8007bc0 <_strtod_l+0x488>
 8007ea2:	f1ba 0f00 	cmp.w	sl, #0
 8007ea6:	dd08      	ble.n	8007eba <_strtod_l+0x782>
 8007ea8:	4659      	mov	r1, fp
 8007eaa:	4652      	mov	r2, sl
 8007eac:	4620      	mov	r0, r4
 8007eae:	f7ff f9d3 	bl	8007258 <__lshift>
 8007eb2:	4683      	mov	fp, r0
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	f43f ae83 	beq.w	8007bc0 <_strtod_l+0x488>
 8007eba:	9a05      	ldr	r2, [sp, #20]
 8007ebc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f7ff fa52 	bl	8007368 <__mdiff>
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f43f ae7a 	beq.w	8007bc0 <_strtod_l+0x488>
 8007ecc:	68c3      	ldr	r3, [r0, #12]
 8007ece:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60c3      	str	r3, [r0, #12]
 8007ed4:	4659      	mov	r1, fp
 8007ed6:	f7ff fa2b 	bl	8007330 <__mcmp>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	da60      	bge.n	8007fa0 <_strtod_l+0x868>
 8007ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee0:	ea53 0308 	orrs.w	r3, r3, r8
 8007ee4:	f040 8084 	bne.w	8007ff0 <_strtod_l+0x8b8>
 8007ee8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d17f      	bne.n	8007ff0 <_strtod_l+0x8b8>
 8007ef0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ef4:	0d1b      	lsrs	r3, r3, #20
 8007ef6:	051b      	lsls	r3, r3, #20
 8007ef8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007efc:	d978      	bls.n	8007ff0 <_strtod_l+0x8b8>
 8007efe:	696b      	ldr	r3, [r5, #20]
 8007f00:	b913      	cbnz	r3, 8007f08 <_strtod_l+0x7d0>
 8007f02:	692b      	ldr	r3, [r5, #16]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	dd73      	ble.n	8007ff0 <_strtod_l+0x8b8>
 8007f08:	4629      	mov	r1, r5
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f7ff f9a3 	bl	8007258 <__lshift>
 8007f12:	4659      	mov	r1, fp
 8007f14:	4605      	mov	r5, r0
 8007f16:	f7ff fa0b 	bl	8007330 <__mcmp>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	dd68      	ble.n	8007ff0 <_strtod_l+0x8b8>
 8007f1e:	9904      	ldr	r1, [sp, #16]
 8007f20:	4a54      	ldr	r2, [pc, #336]	; (8008074 <_strtod_l+0x93c>)
 8007f22:	464b      	mov	r3, r9
 8007f24:	2900      	cmp	r1, #0
 8007f26:	f000 8084 	beq.w	8008032 <_strtod_l+0x8fa>
 8007f2a:	ea02 0109 	and.w	r1, r2, r9
 8007f2e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007f32:	dc7e      	bgt.n	8008032 <_strtod_l+0x8fa>
 8007f34:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007f38:	f77f aeb3 	ble.w	8007ca2 <_strtod_l+0x56a>
 8007f3c:	4b4e      	ldr	r3, [pc, #312]	; (8008078 <_strtod_l+0x940>)
 8007f3e:	4640      	mov	r0, r8
 8007f40:	4649      	mov	r1, r9
 8007f42:	2200      	movs	r2, #0
 8007f44:	f7f8 fb60 	bl	8000608 <__aeabi_dmul>
 8007f48:	4b4a      	ldr	r3, [pc, #296]	; (8008074 <_strtod_l+0x93c>)
 8007f4a:	400b      	ands	r3, r1
 8007f4c:	4680      	mov	r8, r0
 8007f4e:	4689      	mov	r9, r1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f47f ae3f 	bne.w	8007bd4 <_strtod_l+0x49c>
 8007f56:	2322      	movs	r3, #34	; 0x22
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	e63b      	b.n	8007bd4 <_strtod_l+0x49c>
 8007f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f60:	fa02 f303 	lsl.w	r3, r2, r3
 8007f64:	ea03 0808 	and.w	r8, r3, r8
 8007f68:	e6e8      	b.n	8007d3c <_strtod_l+0x604>
 8007f6a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007f6e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007f72:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007f76:	36e2      	adds	r6, #226	; 0xe2
 8007f78:	fa01 f306 	lsl.w	r3, r1, r6
 8007f7c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007f80:	e748      	b.n	8007e14 <_strtod_l+0x6dc>
 8007f82:	2100      	movs	r1, #0
 8007f84:	2301      	movs	r3, #1
 8007f86:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007f8a:	e743      	b.n	8007e14 <_strtod_l+0x6dc>
 8007f8c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f8e:	4632      	mov	r2, r6
 8007f90:	4620      	mov	r0, r4
 8007f92:	f7ff f961 	bl	8007258 <__lshift>
 8007f96:	9016      	str	r0, [sp, #88]	; 0x58
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	f47f af6b 	bne.w	8007e74 <_strtod_l+0x73c>
 8007f9e:	e60f      	b.n	8007bc0 <_strtod_l+0x488>
 8007fa0:	46ca      	mov	sl, r9
 8007fa2:	d171      	bne.n	8008088 <_strtod_l+0x950>
 8007fa4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fa6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007faa:	b352      	cbz	r2, 8008002 <_strtod_l+0x8ca>
 8007fac:	4a33      	ldr	r2, [pc, #204]	; (800807c <_strtod_l+0x944>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d12a      	bne.n	8008008 <_strtod_l+0x8d0>
 8007fb2:	9b04      	ldr	r3, [sp, #16]
 8007fb4:	4641      	mov	r1, r8
 8007fb6:	b1fb      	cbz	r3, 8007ff8 <_strtod_l+0x8c0>
 8007fb8:	4b2e      	ldr	r3, [pc, #184]	; (8008074 <_strtod_l+0x93c>)
 8007fba:	ea09 0303 	and.w	r3, r9, r3
 8007fbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc6:	d81a      	bhi.n	8007ffe <_strtod_l+0x8c6>
 8007fc8:	0d1b      	lsrs	r3, r3, #20
 8007fca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	d118      	bne.n	8008008 <_strtod_l+0x8d0>
 8007fd6:	4b2a      	ldr	r3, [pc, #168]	; (8008080 <_strtod_l+0x948>)
 8007fd8:	459a      	cmp	sl, r3
 8007fda:	d102      	bne.n	8007fe2 <_strtod_l+0x8aa>
 8007fdc:	3101      	adds	r1, #1
 8007fde:	f43f adef 	beq.w	8007bc0 <_strtod_l+0x488>
 8007fe2:	4b24      	ldr	r3, [pc, #144]	; (8008074 <_strtod_l+0x93c>)
 8007fe4:	ea0a 0303 	and.w	r3, sl, r3
 8007fe8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007fec:	f04f 0800 	mov.w	r8, #0
 8007ff0:	9b04      	ldr	r3, [sp, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1a2      	bne.n	8007f3c <_strtod_l+0x804>
 8007ff6:	e5ed      	b.n	8007bd4 <_strtod_l+0x49c>
 8007ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ffc:	e7e9      	b.n	8007fd2 <_strtod_l+0x89a>
 8007ffe:	4613      	mov	r3, r2
 8008000:	e7e7      	b.n	8007fd2 <_strtod_l+0x89a>
 8008002:	ea53 0308 	orrs.w	r3, r3, r8
 8008006:	d08a      	beq.n	8007f1e <_strtod_l+0x7e6>
 8008008:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800800a:	b1e3      	cbz	r3, 8008046 <_strtod_l+0x90e>
 800800c:	ea13 0f0a 	tst.w	r3, sl
 8008010:	d0ee      	beq.n	8007ff0 <_strtod_l+0x8b8>
 8008012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008014:	9a04      	ldr	r2, [sp, #16]
 8008016:	4640      	mov	r0, r8
 8008018:	4649      	mov	r1, r9
 800801a:	b1c3      	cbz	r3, 800804e <_strtod_l+0x916>
 800801c:	f7ff fb6f 	bl	80076fe <sulp>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	ec51 0b18 	vmov	r0, r1, d8
 8008028:	f7f8 f938 	bl	800029c <__adddf3>
 800802c:	4680      	mov	r8, r0
 800802e:	4689      	mov	r9, r1
 8008030:	e7de      	b.n	8007ff0 <_strtod_l+0x8b8>
 8008032:	4013      	ands	r3, r2
 8008034:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008038:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800803c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008040:	f04f 38ff 	mov.w	r8, #4294967295
 8008044:	e7d4      	b.n	8007ff0 <_strtod_l+0x8b8>
 8008046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008048:	ea13 0f08 	tst.w	r3, r8
 800804c:	e7e0      	b.n	8008010 <_strtod_l+0x8d8>
 800804e:	f7ff fb56 	bl	80076fe <sulp>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	ec51 0b18 	vmov	r0, r1, d8
 800805a:	f7f8 f91d 	bl	8000298 <__aeabi_dsub>
 800805e:	2200      	movs	r2, #0
 8008060:	2300      	movs	r3, #0
 8008062:	4680      	mov	r8, r0
 8008064:	4689      	mov	r9, r1
 8008066:	f7f8 fd37 	bl	8000ad8 <__aeabi_dcmpeq>
 800806a:	2800      	cmp	r0, #0
 800806c:	d0c0      	beq.n	8007ff0 <_strtod_l+0x8b8>
 800806e:	e618      	b.n	8007ca2 <_strtod_l+0x56a>
 8008070:	fffffc02 	.word	0xfffffc02
 8008074:	7ff00000 	.word	0x7ff00000
 8008078:	39500000 	.word	0x39500000
 800807c:	000fffff 	.word	0x000fffff
 8008080:	7fefffff 	.word	0x7fefffff
 8008084:	080098a0 	.word	0x080098a0
 8008088:	4659      	mov	r1, fp
 800808a:	4628      	mov	r0, r5
 800808c:	f7ff fac0 	bl	8007610 <__ratio>
 8008090:	ec57 6b10 	vmov	r6, r7, d0
 8008094:	ee10 0a10 	vmov	r0, s0
 8008098:	2200      	movs	r2, #0
 800809a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800809e:	4639      	mov	r1, r7
 80080a0:	f7f8 fd2e 	bl	8000b00 <__aeabi_dcmple>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d071      	beq.n	800818c <_strtod_l+0xa54>
 80080a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d17c      	bne.n	80081a8 <_strtod_l+0xa70>
 80080ae:	f1b8 0f00 	cmp.w	r8, #0
 80080b2:	d15a      	bne.n	800816a <_strtod_l+0xa32>
 80080b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d15d      	bne.n	8008178 <_strtod_l+0xa40>
 80080bc:	4b90      	ldr	r3, [pc, #576]	; (8008300 <_strtod_l+0xbc8>)
 80080be:	2200      	movs	r2, #0
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 fd12 	bl	8000aec <__aeabi_dcmplt>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d15c      	bne.n	8008186 <_strtod_l+0xa4e>
 80080cc:	4630      	mov	r0, r6
 80080ce:	4639      	mov	r1, r7
 80080d0:	4b8c      	ldr	r3, [pc, #560]	; (8008304 <_strtod_l+0xbcc>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	f7f8 fa98 	bl	8000608 <__aeabi_dmul>
 80080d8:	4606      	mov	r6, r0
 80080da:	460f      	mov	r7, r1
 80080dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80080e0:	9606      	str	r6, [sp, #24]
 80080e2:	9307      	str	r3, [sp, #28]
 80080e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80080ec:	4b86      	ldr	r3, [pc, #536]	; (8008308 <_strtod_l+0xbd0>)
 80080ee:	ea0a 0303 	and.w	r3, sl, r3
 80080f2:	930d      	str	r3, [sp, #52]	; 0x34
 80080f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080f6:	4b85      	ldr	r3, [pc, #532]	; (800830c <_strtod_l+0xbd4>)
 80080f8:	429a      	cmp	r2, r3
 80080fa:	f040 8090 	bne.w	800821e <_strtod_l+0xae6>
 80080fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008102:	ec49 8b10 	vmov	d0, r8, r9
 8008106:	f7ff f9b9 	bl	800747c <__ulp>
 800810a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800810e:	ec51 0b10 	vmov	r0, r1, d0
 8008112:	f7f8 fa79 	bl	8000608 <__aeabi_dmul>
 8008116:	4642      	mov	r2, r8
 8008118:	464b      	mov	r3, r9
 800811a:	f7f8 f8bf 	bl	800029c <__adddf3>
 800811e:	460b      	mov	r3, r1
 8008120:	4979      	ldr	r1, [pc, #484]	; (8008308 <_strtod_l+0xbd0>)
 8008122:	4a7b      	ldr	r2, [pc, #492]	; (8008310 <_strtod_l+0xbd8>)
 8008124:	4019      	ands	r1, r3
 8008126:	4291      	cmp	r1, r2
 8008128:	4680      	mov	r8, r0
 800812a:	d944      	bls.n	80081b6 <_strtod_l+0xa7e>
 800812c:	ee18 2a90 	vmov	r2, s17
 8008130:	4b78      	ldr	r3, [pc, #480]	; (8008314 <_strtod_l+0xbdc>)
 8008132:	429a      	cmp	r2, r3
 8008134:	d104      	bne.n	8008140 <_strtod_l+0xa08>
 8008136:	ee18 3a10 	vmov	r3, s16
 800813a:	3301      	adds	r3, #1
 800813c:	f43f ad40 	beq.w	8007bc0 <_strtod_l+0x488>
 8008140:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008314 <_strtod_l+0xbdc>
 8008144:	f04f 38ff 	mov.w	r8, #4294967295
 8008148:	9916      	ldr	r1, [sp, #88]	; 0x58
 800814a:	4620      	mov	r0, r4
 800814c:	f7fe fe6a 	bl	8006e24 <_Bfree>
 8008150:	9905      	ldr	r1, [sp, #20]
 8008152:	4620      	mov	r0, r4
 8008154:	f7fe fe66 	bl	8006e24 <_Bfree>
 8008158:	4659      	mov	r1, fp
 800815a:	4620      	mov	r0, r4
 800815c:	f7fe fe62 	bl	8006e24 <_Bfree>
 8008160:	4629      	mov	r1, r5
 8008162:	4620      	mov	r0, r4
 8008164:	f7fe fe5e 	bl	8006e24 <_Bfree>
 8008168:	e609      	b.n	8007d7e <_strtod_l+0x646>
 800816a:	f1b8 0f01 	cmp.w	r8, #1
 800816e:	d103      	bne.n	8008178 <_strtod_l+0xa40>
 8008170:	f1b9 0f00 	cmp.w	r9, #0
 8008174:	f43f ad95 	beq.w	8007ca2 <_strtod_l+0x56a>
 8008178:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80082d0 <_strtod_l+0xb98>
 800817c:	4f60      	ldr	r7, [pc, #384]	; (8008300 <_strtod_l+0xbc8>)
 800817e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008182:	2600      	movs	r6, #0
 8008184:	e7ae      	b.n	80080e4 <_strtod_l+0x9ac>
 8008186:	4f5f      	ldr	r7, [pc, #380]	; (8008304 <_strtod_l+0xbcc>)
 8008188:	2600      	movs	r6, #0
 800818a:	e7a7      	b.n	80080dc <_strtod_l+0x9a4>
 800818c:	4b5d      	ldr	r3, [pc, #372]	; (8008304 <_strtod_l+0xbcc>)
 800818e:	4630      	mov	r0, r6
 8008190:	4639      	mov	r1, r7
 8008192:	2200      	movs	r2, #0
 8008194:	f7f8 fa38 	bl	8000608 <__aeabi_dmul>
 8008198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800819a:	4606      	mov	r6, r0
 800819c:	460f      	mov	r7, r1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d09c      	beq.n	80080dc <_strtod_l+0x9a4>
 80081a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80081a6:	e79d      	b.n	80080e4 <_strtod_l+0x9ac>
 80081a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80082d8 <_strtod_l+0xba0>
 80081ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80081b0:	ec57 6b17 	vmov	r6, r7, d7
 80081b4:	e796      	b.n	80080e4 <_strtod_l+0x9ac>
 80081b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80081ba:	9b04      	ldr	r3, [sp, #16]
 80081bc:	46ca      	mov	sl, r9
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1c2      	bne.n	8008148 <_strtod_l+0xa10>
 80081c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081c8:	0d1b      	lsrs	r3, r3, #20
 80081ca:	051b      	lsls	r3, r3, #20
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d1bb      	bne.n	8008148 <_strtod_l+0xa10>
 80081d0:	4630      	mov	r0, r6
 80081d2:	4639      	mov	r1, r7
 80081d4:	f7f8 fdc8 	bl	8000d68 <__aeabi_d2lz>
 80081d8:	f7f8 f9e8 	bl	80005ac <__aeabi_l2d>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4630      	mov	r0, r6
 80081e2:	4639      	mov	r1, r7
 80081e4:	f7f8 f858 	bl	8000298 <__aeabi_dsub>
 80081e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081ee:	ea43 0308 	orr.w	r3, r3, r8
 80081f2:	4313      	orrs	r3, r2
 80081f4:	4606      	mov	r6, r0
 80081f6:	460f      	mov	r7, r1
 80081f8:	d054      	beq.n	80082a4 <_strtod_l+0xb6c>
 80081fa:	a339      	add	r3, pc, #228	; (adr r3, 80082e0 <_strtod_l+0xba8>)
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	f7f8 fc74 	bl	8000aec <__aeabi_dcmplt>
 8008204:	2800      	cmp	r0, #0
 8008206:	f47f ace5 	bne.w	8007bd4 <_strtod_l+0x49c>
 800820a:	a337      	add	r3, pc, #220	; (adr r3, 80082e8 <_strtod_l+0xbb0>)
 800820c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008210:	4630      	mov	r0, r6
 8008212:	4639      	mov	r1, r7
 8008214:	f7f8 fc88 	bl	8000b28 <__aeabi_dcmpgt>
 8008218:	2800      	cmp	r0, #0
 800821a:	d095      	beq.n	8008148 <_strtod_l+0xa10>
 800821c:	e4da      	b.n	8007bd4 <_strtod_l+0x49c>
 800821e:	9b04      	ldr	r3, [sp, #16]
 8008220:	b333      	cbz	r3, 8008270 <_strtod_l+0xb38>
 8008222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008224:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008228:	d822      	bhi.n	8008270 <_strtod_l+0xb38>
 800822a:	a331      	add	r3, pc, #196	; (adr r3, 80082f0 <_strtod_l+0xbb8>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	4630      	mov	r0, r6
 8008232:	4639      	mov	r1, r7
 8008234:	f7f8 fc64 	bl	8000b00 <__aeabi_dcmple>
 8008238:	b1a0      	cbz	r0, 8008264 <_strtod_l+0xb2c>
 800823a:	4639      	mov	r1, r7
 800823c:	4630      	mov	r0, r6
 800823e:	f7f8 fcbb 	bl	8000bb8 <__aeabi_d2uiz>
 8008242:	2801      	cmp	r0, #1
 8008244:	bf38      	it	cc
 8008246:	2001      	movcc	r0, #1
 8008248:	f7f8 f964 	bl	8000514 <__aeabi_ui2d>
 800824c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	bb23      	cbnz	r3, 800829e <_strtod_l+0xb66>
 8008254:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008258:	9010      	str	r0, [sp, #64]	; 0x40
 800825a:	9311      	str	r3, [sp, #68]	; 0x44
 800825c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008260:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008266:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008268:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800826c:	1a9b      	subs	r3, r3, r2
 800826e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008270:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008274:	eeb0 0a48 	vmov.f32	s0, s16
 8008278:	eef0 0a68 	vmov.f32	s1, s17
 800827c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008280:	f7ff f8fc 	bl	800747c <__ulp>
 8008284:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008288:	ec53 2b10 	vmov	r2, r3, d0
 800828c:	f7f8 f9bc 	bl	8000608 <__aeabi_dmul>
 8008290:	ec53 2b18 	vmov	r2, r3, d8
 8008294:	f7f8 f802 	bl	800029c <__adddf3>
 8008298:	4680      	mov	r8, r0
 800829a:	4689      	mov	r9, r1
 800829c:	e78d      	b.n	80081ba <_strtod_l+0xa82>
 800829e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80082a2:	e7db      	b.n	800825c <_strtod_l+0xb24>
 80082a4:	a314      	add	r3, pc, #80	; (adr r3, 80082f8 <_strtod_l+0xbc0>)
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	f7f8 fc1f 	bl	8000aec <__aeabi_dcmplt>
 80082ae:	e7b3      	b.n	8008218 <_strtod_l+0xae0>
 80082b0:	2300      	movs	r3, #0
 80082b2:	930a      	str	r3, [sp, #40]	; 0x28
 80082b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	f7ff ba7c 	b.w	80077b6 <_strtod_l+0x7e>
 80082be:	2a65      	cmp	r2, #101	; 0x65
 80082c0:	f43f ab75 	beq.w	80079ae <_strtod_l+0x276>
 80082c4:	2a45      	cmp	r2, #69	; 0x45
 80082c6:	f43f ab72 	beq.w	80079ae <_strtod_l+0x276>
 80082ca:	2301      	movs	r3, #1
 80082cc:	f7ff bbaa 	b.w	8007a24 <_strtod_l+0x2ec>
 80082d0:	00000000 	.word	0x00000000
 80082d4:	bff00000 	.word	0xbff00000
 80082d8:	00000000 	.word	0x00000000
 80082dc:	3ff00000 	.word	0x3ff00000
 80082e0:	94a03595 	.word	0x94a03595
 80082e4:	3fdfffff 	.word	0x3fdfffff
 80082e8:	35afe535 	.word	0x35afe535
 80082ec:	3fe00000 	.word	0x3fe00000
 80082f0:	ffc00000 	.word	0xffc00000
 80082f4:	41dfffff 	.word	0x41dfffff
 80082f8:	94a03595 	.word	0x94a03595
 80082fc:	3fcfffff 	.word	0x3fcfffff
 8008300:	3ff00000 	.word	0x3ff00000
 8008304:	3fe00000 	.word	0x3fe00000
 8008308:	7ff00000 	.word	0x7ff00000
 800830c:	7fe00000 	.word	0x7fe00000
 8008310:	7c9fffff 	.word	0x7c9fffff
 8008314:	7fefffff 	.word	0x7fefffff

08008318 <_strtod_r>:
 8008318:	4b01      	ldr	r3, [pc, #4]	; (8008320 <_strtod_r+0x8>)
 800831a:	f7ff ba0d 	b.w	8007738 <_strtod_l>
 800831e:	bf00      	nop
 8008320:	20000068 	.word	0x20000068

08008324 <_strtol_l.constprop.0>:
 8008324:	2b01      	cmp	r3, #1
 8008326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800832a:	d001      	beq.n	8008330 <_strtol_l.constprop.0+0xc>
 800832c:	2b24      	cmp	r3, #36	; 0x24
 800832e:	d906      	bls.n	800833e <_strtol_l.constprop.0+0x1a>
 8008330:	f7fd fd88 	bl	8005e44 <__errno>
 8008334:	2316      	movs	r3, #22
 8008336:	6003      	str	r3, [r0, #0]
 8008338:	2000      	movs	r0, #0
 800833a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008424 <_strtol_l.constprop.0+0x100>
 8008342:	460d      	mov	r5, r1
 8008344:	462e      	mov	r6, r5
 8008346:	f815 4b01 	ldrb.w	r4, [r5], #1
 800834a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800834e:	f017 0708 	ands.w	r7, r7, #8
 8008352:	d1f7      	bne.n	8008344 <_strtol_l.constprop.0+0x20>
 8008354:	2c2d      	cmp	r4, #45	; 0x2d
 8008356:	d132      	bne.n	80083be <_strtol_l.constprop.0+0x9a>
 8008358:	782c      	ldrb	r4, [r5, #0]
 800835a:	2701      	movs	r7, #1
 800835c:	1cb5      	adds	r5, r6, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d05b      	beq.n	800841a <_strtol_l.constprop.0+0xf6>
 8008362:	2b10      	cmp	r3, #16
 8008364:	d109      	bne.n	800837a <_strtol_l.constprop.0+0x56>
 8008366:	2c30      	cmp	r4, #48	; 0x30
 8008368:	d107      	bne.n	800837a <_strtol_l.constprop.0+0x56>
 800836a:	782c      	ldrb	r4, [r5, #0]
 800836c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008370:	2c58      	cmp	r4, #88	; 0x58
 8008372:	d14d      	bne.n	8008410 <_strtol_l.constprop.0+0xec>
 8008374:	786c      	ldrb	r4, [r5, #1]
 8008376:	2310      	movs	r3, #16
 8008378:	3502      	adds	r5, #2
 800837a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800837e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008382:	f04f 0e00 	mov.w	lr, #0
 8008386:	fbb8 f9f3 	udiv	r9, r8, r3
 800838a:	4676      	mov	r6, lr
 800838c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008390:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008394:	f1bc 0f09 	cmp.w	ip, #9
 8008398:	d816      	bhi.n	80083c8 <_strtol_l.constprop.0+0xa4>
 800839a:	4664      	mov	r4, ip
 800839c:	42a3      	cmp	r3, r4
 800839e:	dd24      	ble.n	80083ea <_strtol_l.constprop.0+0xc6>
 80083a0:	f1be 3fff 	cmp.w	lr, #4294967295
 80083a4:	d008      	beq.n	80083b8 <_strtol_l.constprop.0+0x94>
 80083a6:	45b1      	cmp	r9, r6
 80083a8:	d31c      	bcc.n	80083e4 <_strtol_l.constprop.0+0xc0>
 80083aa:	d101      	bne.n	80083b0 <_strtol_l.constprop.0+0x8c>
 80083ac:	45a2      	cmp	sl, r4
 80083ae:	db19      	blt.n	80083e4 <_strtol_l.constprop.0+0xc0>
 80083b0:	fb06 4603 	mla	r6, r6, r3, r4
 80083b4:	f04f 0e01 	mov.w	lr, #1
 80083b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083bc:	e7e8      	b.n	8008390 <_strtol_l.constprop.0+0x6c>
 80083be:	2c2b      	cmp	r4, #43	; 0x2b
 80083c0:	bf04      	itt	eq
 80083c2:	782c      	ldrbeq	r4, [r5, #0]
 80083c4:	1cb5      	addeq	r5, r6, #2
 80083c6:	e7ca      	b.n	800835e <_strtol_l.constprop.0+0x3a>
 80083c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80083cc:	f1bc 0f19 	cmp.w	ip, #25
 80083d0:	d801      	bhi.n	80083d6 <_strtol_l.constprop.0+0xb2>
 80083d2:	3c37      	subs	r4, #55	; 0x37
 80083d4:	e7e2      	b.n	800839c <_strtol_l.constprop.0+0x78>
 80083d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80083da:	f1bc 0f19 	cmp.w	ip, #25
 80083de:	d804      	bhi.n	80083ea <_strtol_l.constprop.0+0xc6>
 80083e0:	3c57      	subs	r4, #87	; 0x57
 80083e2:	e7db      	b.n	800839c <_strtol_l.constprop.0+0x78>
 80083e4:	f04f 3eff 	mov.w	lr, #4294967295
 80083e8:	e7e6      	b.n	80083b8 <_strtol_l.constprop.0+0x94>
 80083ea:	f1be 3fff 	cmp.w	lr, #4294967295
 80083ee:	d105      	bne.n	80083fc <_strtol_l.constprop.0+0xd8>
 80083f0:	2322      	movs	r3, #34	; 0x22
 80083f2:	6003      	str	r3, [r0, #0]
 80083f4:	4646      	mov	r6, r8
 80083f6:	b942      	cbnz	r2, 800840a <_strtol_l.constprop.0+0xe6>
 80083f8:	4630      	mov	r0, r6
 80083fa:	e79e      	b.n	800833a <_strtol_l.constprop.0+0x16>
 80083fc:	b107      	cbz	r7, 8008400 <_strtol_l.constprop.0+0xdc>
 80083fe:	4276      	negs	r6, r6
 8008400:	2a00      	cmp	r2, #0
 8008402:	d0f9      	beq.n	80083f8 <_strtol_l.constprop.0+0xd4>
 8008404:	f1be 0f00 	cmp.w	lr, #0
 8008408:	d000      	beq.n	800840c <_strtol_l.constprop.0+0xe8>
 800840a:	1e69      	subs	r1, r5, #1
 800840c:	6011      	str	r1, [r2, #0]
 800840e:	e7f3      	b.n	80083f8 <_strtol_l.constprop.0+0xd4>
 8008410:	2430      	movs	r4, #48	; 0x30
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1b1      	bne.n	800837a <_strtol_l.constprop.0+0x56>
 8008416:	2308      	movs	r3, #8
 8008418:	e7af      	b.n	800837a <_strtol_l.constprop.0+0x56>
 800841a:	2c30      	cmp	r4, #48	; 0x30
 800841c:	d0a5      	beq.n	800836a <_strtol_l.constprop.0+0x46>
 800841e:	230a      	movs	r3, #10
 8008420:	e7ab      	b.n	800837a <_strtol_l.constprop.0+0x56>
 8008422:	bf00      	nop
 8008424:	080098c9 	.word	0x080098c9

08008428 <_strtol_r>:
 8008428:	f7ff bf7c 	b.w	8008324 <_strtol_l.constprop.0>

0800842c <__ssputs_r>:
 800842c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008430:	688e      	ldr	r6, [r1, #8]
 8008432:	461f      	mov	r7, r3
 8008434:	42be      	cmp	r6, r7
 8008436:	680b      	ldr	r3, [r1, #0]
 8008438:	4682      	mov	sl, r0
 800843a:	460c      	mov	r4, r1
 800843c:	4690      	mov	r8, r2
 800843e:	d82c      	bhi.n	800849a <__ssputs_r+0x6e>
 8008440:	898a      	ldrh	r2, [r1, #12]
 8008442:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008446:	d026      	beq.n	8008496 <__ssputs_r+0x6a>
 8008448:	6965      	ldr	r5, [r4, #20]
 800844a:	6909      	ldr	r1, [r1, #16]
 800844c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008450:	eba3 0901 	sub.w	r9, r3, r1
 8008454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008458:	1c7b      	adds	r3, r7, #1
 800845a:	444b      	add	r3, r9
 800845c:	106d      	asrs	r5, r5, #1
 800845e:	429d      	cmp	r5, r3
 8008460:	bf38      	it	cc
 8008462:	461d      	movcc	r5, r3
 8008464:	0553      	lsls	r3, r2, #21
 8008466:	d527      	bpl.n	80084b8 <__ssputs_r+0x8c>
 8008468:	4629      	mov	r1, r5
 800846a:	f7fe fc0f 	bl	8006c8c <_malloc_r>
 800846e:	4606      	mov	r6, r0
 8008470:	b360      	cbz	r0, 80084cc <__ssputs_r+0xa0>
 8008472:	6921      	ldr	r1, [r4, #16]
 8008474:	464a      	mov	r2, r9
 8008476:	f000 fa1b 	bl	80088b0 <memcpy>
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008484:	81a3      	strh	r3, [r4, #12]
 8008486:	6126      	str	r6, [r4, #16]
 8008488:	6165      	str	r5, [r4, #20]
 800848a:	444e      	add	r6, r9
 800848c:	eba5 0509 	sub.w	r5, r5, r9
 8008490:	6026      	str	r6, [r4, #0]
 8008492:	60a5      	str	r5, [r4, #8]
 8008494:	463e      	mov	r6, r7
 8008496:	42be      	cmp	r6, r7
 8008498:	d900      	bls.n	800849c <__ssputs_r+0x70>
 800849a:	463e      	mov	r6, r7
 800849c:	6820      	ldr	r0, [r4, #0]
 800849e:	4632      	mov	r2, r6
 80084a0:	4641      	mov	r1, r8
 80084a2:	f000 f9c9 	bl	8008838 <memmove>
 80084a6:	68a3      	ldr	r3, [r4, #8]
 80084a8:	1b9b      	subs	r3, r3, r6
 80084aa:	60a3      	str	r3, [r4, #8]
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	4433      	add	r3, r6
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	2000      	movs	r0, #0
 80084b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b8:	462a      	mov	r2, r5
 80084ba:	f000 fdae 	bl	800901a <_realloc_r>
 80084be:	4606      	mov	r6, r0
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d1e0      	bne.n	8008486 <__ssputs_r+0x5a>
 80084c4:	6921      	ldr	r1, [r4, #16]
 80084c6:	4650      	mov	r0, sl
 80084c8:	f7fe fb6c 	bl	8006ba4 <_free_r>
 80084cc:	230c      	movs	r3, #12
 80084ce:	f8ca 3000 	str.w	r3, [sl]
 80084d2:	89a3      	ldrh	r3, [r4, #12]
 80084d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	f04f 30ff 	mov.w	r0, #4294967295
 80084de:	e7e9      	b.n	80084b4 <__ssputs_r+0x88>

080084e0 <_svfiprintf_r>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	4698      	mov	r8, r3
 80084e6:	898b      	ldrh	r3, [r1, #12]
 80084e8:	061b      	lsls	r3, r3, #24
 80084ea:	b09d      	sub	sp, #116	; 0x74
 80084ec:	4607      	mov	r7, r0
 80084ee:	460d      	mov	r5, r1
 80084f0:	4614      	mov	r4, r2
 80084f2:	d50e      	bpl.n	8008512 <_svfiprintf_r+0x32>
 80084f4:	690b      	ldr	r3, [r1, #16]
 80084f6:	b963      	cbnz	r3, 8008512 <_svfiprintf_r+0x32>
 80084f8:	2140      	movs	r1, #64	; 0x40
 80084fa:	f7fe fbc7 	bl	8006c8c <_malloc_r>
 80084fe:	6028      	str	r0, [r5, #0]
 8008500:	6128      	str	r0, [r5, #16]
 8008502:	b920      	cbnz	r0, 800850e <_svfiprintf_r+0x2e>
 8008504:	230c      	movs	r3, #12
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	f04f 30ff 	mov.w	r0, #4294967295
 800850c:	e0d0      	b.n	80086b0 <_svfiprintf_r+0x1d0>
 800850e:	2340      	movs	r3, #64	; 0x40
 8008510:	616b      	str	r3, [r5, #20]
 8008512:	2300      	movs	r3, #0
 8008514:	9309      	str	r3, [sp, #36]	; 0x24
 8008516:	2320      	movs	r3, #32
 8008518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800851c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008520:	2330      	movs	r3, #48	; 0x30
 8008522:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086c8 <_svfiprintf_r+0x1e8>
 8008526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800852a:	f04f 0901 	mov.w	r9, #1
 800852e:	4623      	mov	r3, r4
 8008530:	469a      	mov	sl, r3
 8008532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008536:	b10a      	cbz	r2, 800853c <_svfiprintf_r+0x5c>
 8008538:	2a25      	cmp	r2, #37	; 0x25
 800853a:	d1f9      	bne.n	8008530 <_svfiprintf_r+0x50>
 800853c:	ebba 0b04 	subs.w	fp, sl, r4
 8008540:	d00b      	beq.n	800855a <_svfiprintf_r+0x7a>
 8008542:	465b      	mov	r3, fp
 8008544:	4622      	mov	r2, r4
 8008546:	4629      	mov	r1, r5
 8008548:	4638      	mov	r0, r7
 800854a:	f7ff ff6f 	bl	800842c <__ssputs_r>
 800854e:	3001      	adds	r0, #1
 8008550:	f000 80a9 	beq.w	80086a6 <_svfiprintf_r+0x1c6>
 8008554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008556:	445a      	add	r2, fp
 8008558:	9209      	str	r2, [sp, #36]	; 0x24
 800855a:	f89a 3000 	ldrb.w	r3, [sl]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 80a1 	beq.w	80086a6 <_svfiprintf_r+0x1c6>
 8008564:	2300      	movs	r3, #0
 8008566:	f04f 32ff 	mov.w	r2, #4294967295
 800856a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800856e:	f10a 0a01 	add.w	sl, sl, #1
 8008572:	9304      	str	r3, [sp, #16]
 8008574:	9307      	str	r3, [sp, #28]
 8008576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800857a:	931a      	str	r3, [sp, #104]	; 0x68
 800857c:	4654      	mov	r4, sl
 800857e:	2205      	movs	r2, #5
 8008580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008584:	4850      	ldr	r0, [pc, #320]	; (80086c8 <_svfiprintf_r+0x1e8>)
 8008586:	f7f7 fe2b 	bl	80001e0 <memchr>
 800858a:	9a04      	ldr	r2, [sp, #16]
 800858c:	b9d8      	cbnz	r0, 80085c6 <_svfiprintf_r+0xe6>
 800858e:	06d0      	lsls	r0, r2, #27
 8008590:	bf44      	itt	mi
 8008592:	2320      	movmi	r3, #32
 8008594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008598:	0711      	lsls	r1, r2, #28
 800859a:	bf44      	itt	mi
 800859c:	232b      	movmi	r3, #43	; 0x2b
 800859e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a2:	f89a 3000 	ldrb.w	r3, [sl]
 80085a6:	2b2a      	cmp	r3, #42	; 0x2a
 80085a8:	d015      	beq.n	80085d6 <_svfiprintf_r+0xf6>
 80085aa:	9a07      	ldr	r2, [sp, #28]
 80085ac:	4654      	mov	r4, sl
 80085ae:	2000      	movs	r0, #0
 80085b0:	f04f 0c0a 	mov.w	ip, #10
 80085b4:	4621      	mov	r1, r4
 80085b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ba:	3b30      	subs	r3, #48	; 0x30
 80085bc:	2b09      	cmp	r3, #9
 80085be:	d94d      	bls.n	800865c <_svfiprintf_r+0x17c>
 80085c0:	b1b0      	cbz	r0, 80085f0 <_svfiprintf_r+0x110>
 80085c2:	9207      	str	r2, [sp, #28]
 80085c4:	e014      	b.n	80085f0 <_svfiprintf_r+0x110>
 80085c6:	eba0 0308 	sub.w	r3, r0, r8
 80085ca:	fa09 f303 	lsl.w	r3, r9, r3
 80085ce:	4313      	orrs	r3, r2
 80085d0:	9304      	str	r3, [sp, #16]
 80085d2:	46a2      	mov	sl, r4
 80085d4:	e7d2      	b.n	800857c <_svfiprintf_r+0x9c>
 80085d6:	9b03      	ldr	r3, [sp, #12]
 80085d8:	1d19      	adds	r1, r3, #4
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	9103      	str	r1, [sp, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bfbb      	ittet	lt
 80085e2:	425b      	neglt	r3, r3
 80085e4:	f042 0202 	orrlt.w	r2, r2, #2
 80085e8:	9307      	strge	r3, [sp, #28]
 80085ea:	9307      	strlt	r3, [sp, #28]
 80085ec:	bfb8      	it	lt
 80085ee:	9204      	strlt	r2, [sp, #16]
 80085f0:	7823      	ldrb	r3, [r4, #0]
 80085f2:	2b2e      	cmp	r3, #46	; 0x2e
 80085f4:	d10c      	bne.n	8008610 <_svfiprintf_r+0x130>
 80085f6:	7863      	ldrb	r3, [r4, #1]
 80085f8:	2b2a      	cmp	r3, #42	; 0x2a
 80085fa:	d134      	bne.n	8008666 <_svfiprintf_r+0x186>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	1d1a      	adds	r2, r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	9203      	str	r2, [sp, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfb8      	it	lt
 8008608:	f04f 33ff 	movlt.w	r3, #4294967295
 800860c:	3402      	adds	r4, #2
 800860e:	9305      	str	r3, [sp, #20]
 8008610:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80086d8 <_svfiprintf_r+0x1f8>
 8008614:	7821      	ldrb	r1, [r4, #0]
 8008616:	2203      	movs	r2, #3
 8008618:	4650      	mov	r0, sl
 800861a:	f7f7 fde1 	bl	80001e0 <memchr>
 800861e:	b138      	cbz	r0, 8008630 <_svfiprintf_r+0x150>
 8008620:	9b04      	ldr	r3, [sp, #16]
 8008622:	eba0 000a 	sub.w	r0, r0, sl
 8008626:	2240      	movs	r2, #64	; 0x40
 8008628:	4082      	lsls	r2, r0
 800862a:	4313      	orrs	r3, r2
 800862c:	3401      	adds	r4, #1
 800862e:	9304      	str	r3, [sp, #16]
 8008630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008634:	4825      	ldr	r0, [pc, #148]	; (80086cc <_svfiprintf_r+0x1ec>)
 8008636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800863a:	2206      	movs	r2, #6
 800863c:	f7f7 fdd0 	bl	80001e0 <memchr>
 8008640:	2800      	cmp	r0, #0
 8008642:	d038      	beq.n	80086b6 <_svfiprintf_r+0x1d6>
 8008644:	4b22      	ldr	r3, [pc, #136]	; (80086d0 <_svfiprintf_r+0x1f0>)
 8008646:	bb1b      	cbnz	r3, 8008690 <_svfiprintf_r+0x1b0>
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	3307      	adds	r3, #7
 800864c:	f023 0307 	bic.w	r3, r3, #7
 8008650:	3308      	adds	r3, #8
 8008652:	9303      	str	r3, [sp, #12]
 8008654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008656:	4433      	add	r3, r6
 8008658:	9309      	str	r3, [sp, #36]	; 0x24
 800865a:	e768      	b.n	800852e <_svfiprintf_r+0x4e>
 800865c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008660:	460c      	mov	r4, r1
 8008662:	2001      	movs	r0, #1
 8008664:	e7a6      	b.n	80085b4 <_svfiprintf_r+0xd4>
 8008666:	2300      	movs	r3, #0
 8008668:	3401      	adds	r4, #1
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	4619      	mov	r1, r3
 800866e:	f04f 0c0a 	mov.w	ip, #10
 8008672:	4620      	mov	r0, r4
 8008674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008678:	3a30      	subs	r2, #48	; 0x30
 800867a:	2a09      	cmp	r2, #9
 800867c:	d903      	bls.n	8008686 <_svfiprintf_r+0x1a6>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0c6      	beq.n	8008610 <_svfiprintf_r+0x130>
 8008682:	9105      	str	r1, [sp, #20]
 8008684:	e7c4      	b.n	8008610 <_svfiprintf_r+0x130>
 8008686:	fb0c 2101 	mla	r1, ip, r1, r2
 800868a:	4604      	mov	r4, r0
 800868c:	2301      	movs	r3, #1
 800868e:	e7f0      	b.n	8008672 <_svfiprintf_r+0x192>
 8008690:	ab03      	add	r3, sp, #12
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	462a      	mov	r2, r5
 8008696:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <_svfiprintf_r+0x1f4>)
 8008698:	a904      	add	r1, sp, #16
 800869a:	4638      	mov	r0, r7
 800869c:	f7fc fc84 	bl	8004fa8 <_printf_float>
 80086a0:	1c42      	adds	r2, r0, #1
 80086a2:	4606      	mov	r6, r0
 80086a4:	d1d6      	bne.n	8008654 <_svfiprintf_r+0x174>
 80086a6:	89ab      	ldrh	r3, [r5, #12]
 80086a8:	065b      	lsls	r3, r3, #25
 80086aa:	f53f af2d 	bmi.w	8008508 <_svfiprintf_r+0x28>
 80086ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086b0:	b01d      	add	sp, #116	; 0x74
 80086b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b6:	ab03      	add	r3, sp, #12
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	462a      	mov	r2, r5
 80086bc:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <_svfiprintf_r+0x1f4>)
 80086be:	a904      	add	r1, sp, #16
 80086c0:	4638      	mov	r0, r7
 80086c2:	f7fc ff15 	bl	80054f0 <_printf_i>
 80086c6:	e7eb      	b.n	80086a0 <_svfiprintf_r+0x1c0>
 80086c8:	080099c9 	.word	0x080099c9
 80086cc:	080099d3 	.word	0x080099d3
 80086d0:	08004fa9 	.word	0x08004fa9
 80086d4:	0800842d 	.word	0x0800842d
 80086d8:	080099cf 	.word	0x080099cf

080086dc <__sflush_r>:
 80086dc:	898a      	ldrh	r2, [r1, #12]
 80086de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e2:	4605      	mov	r5, r0
 80086e4:	0710      	lsls	r0, r2, #28
 80086e6:	460c      	mov	r4, r1
 80086e8:	d458      	bmi.n	800879c <__sflush_r+0xc0>
 80086ea:	684b      	ldr	r3, [r1, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dc05      	bgt.n	80086fc <__sflush_r+0x20>
 80086f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dc02      	bgt.n	80086fc <__sflush_r+0x20>
 80086f6:	2000      	movs	r0, #0
 80086f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086fe:	2e00      	cmp	r6, #0
 8008700:	d0f9      	beq.n	80086f6 <__sflush_r+0x1a>
 8008702:	2300      	movs	r3, #0
 8008704:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008708:	682f      	ldr	r7, [r5, #0]
 800870a:	6a21      	ldr	r1, [r4, #32]
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	d032      	beq.n	8008776 <__sflush_r+0x9a>
 8008710:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	075a      	lsls	r2, r3, #29
 8008716:	d505      	bpl.n	8008724 <__sflush_r+0x48>
 8008718:	6863      	ldr	r3, [r4, #4]
 800871a:	1ac0      	subs	r0, r0, r3
 800871c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800871e:	b10b      	cbz	r3, 8008724 <__sflush_r+0x48>
 8008720:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008722:	1ac0      	subs	r0, r0, r3
 8008724:	2300      	movs	r3, #0
 8008726:	4602      	mov	r2, r0
 8008728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800872a:	6a21      	ldr	r1, [r4, #32]
 800872c:	4628      	mov	r0, r5
 800872e:	47b0      	blx	r6
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	89a3      	ldrh	r3, [r4, #12]
 8008734:	d106      	bne.n	8008744 <__sflush_r+0x68>
 8008736:	6829      	ldr	r1, [r5, #0]
 8008738:	291d      	cmp	r1, #29
 800873a:	d82b      	bhi.n	8008794 <__sflush_r+0xb8>
 800873c:	4a29      	ldr	r2, [pc, #164]	; (80087e4 <__sflush_r+0x108>)
 800873e:	410a      	asrs	r2, r1
 8008740:	07d6      	lsls	r6, r2, #31
 8008742:	d427      	bmi.n	8008794 <__sflush_r+0xb8>
 8008744:	2200      	movs	r2, #0
 8008746:	6062      	str	r2, [r4, #4]
 8008748:	04d9      	lsls	r1, r3, #19
 800874a:	6922      	ldr	r2, [r4, #16]
 800874c:	6022      	str	r2, [r4, #0]
 800874e:	d504      	bpl.n	800875a <__sflush_r+0x7e>
 8008750:	1c42      	adds	r2, r0, #1
 8008752:	d101      	bne.n	8008758 <__sflush_r+0x7c>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b903      	cbnz	r3, 800875a <__sflush_r+0x7e>
 8008758:	6560      	str	r0, [r4, #84]	; 0x54
 800875a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800875c:	602f      	str	r7, [r5, #0]
 800875e:	2900      	cmp	r1, #0
 8008760:	d0c9      	beq.n	80086f6 <__sflush_r+0x1a>
 8008762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008766:	4299      	cmp	r1, r3
 8008768:	d002      	beq.n	8008770 <__sflush_r+0x94>
 800876a:	4628      	mov	r0, r5
 800876c:	f7fe fa1a 	bl	8006ba4 <_free_r>
 8008770:	2000      	movs	r0, #0
 8008772:	6360      	str	r0, [r4, #52]	; 0x34
 8008774:	e7c0      	b.n	80086f8 <__sflush_r+0x1c>
 8008776:	2301      	movs	r3, #1
 8008778:	4628      	mov	r0, r5
 800877a:	47b0      	blx	r6
 800877c:	1c41      	adds	r1, r0, #1
 800877e:	d1c8      	bne.n	8008712 <__sflush_r+0x36>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0c5      	beq.n	8008712 <__sflush_r+0x36>
 8008786:	2b1d      	cmp	r3, #29
 8008788:	d001      	beq.n	800878e <__sflush_r+0xb2>
 800878a:	2b16      	cmp	r3, #22
 800878c:	d101      	bne.n	8008792 <__sflush_r+0xb6>
 800878e:	602f      	str	r7, [r5, #0]
 8008790:	e7b1      	b.n	80086f6 <__sflush_r+0x1a>
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008798:	81a3      	strh	r3, [r4, #12]
 800879a:	e7ad      	b.n	80086f8 <__sflush_r+0x1c>
 800879c:	690f      	ldr	r7, [r1, #16]
 800879e:	2f00      	cmp	r7, #0
 80087a0:	d0a9      	beq.n	80086f6 <__sflush_r+0x1a>
 80087a2:	0793      	lsls	r3, r2, #30
 80087a4:	680e      	ldr	r6, [r1, #0]
 80087a6:	bf08      	it	eq
 80087a8:	694b      	ldreq	r3, [r1, #20]
 80087aa:	600f      	str	r7, [r1, #0]
 80087ac:	bf18      	it	ne
 80087ae:	2300      	movne	r3, #0
 80087b0:	eba6 0807 	sub.w	r8, r6, r7
 80087b4:	608b      	str	r3, [r1, #8]
 80087b6:	f1b8 0f00 	cmp.w	r8, #0
 80087ba:	dd9c      	ble.n	80086f6 <__sflush_r+0x1a>
 80087bc:	6a21      	ldr	r1, [r4, #32]
 80087be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087c0:	4643      	mov	r3, r8
 80087c2:	463a      	mov	r2, r7
 80087c4:	4628      	mov	r0, r5
 80087c6:	47b0      	blx	r6
 80087c8:	2800      	cmp	r0, #0
 80087ca:	dc06      	bgt.n	80087da <__sflush_r+0xfe>
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087d2:	81a3      	strh	r3, [r4, #12]
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295
 80087d8:	e78e      	b.n	80086f8 <__sflush_r+0x1c>
 80087da:	4407      	add	r7, r0
 80087dc:	eba8 0800 	sub.w	r8, r8, r0
 80087e0:	e7e9      	b.n	80087b6 <__sflush_r+0xda>
 80087e2:	bf00      	nop
 80087e4:	dfbffffe 	.word	0xdfbffffe

080087e8 <_fflush_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	690b      	ldr	r3, [r1, #16]
 80087ec:	4605      	mov	r5, r0
 80087ee:	460c      	mov	r4, r1
 80087f0:	b913      	cbnz	r3, 80087f8 <_fflush_r+0x10>
 80087f2:	2500      	movs	r5, #0
 80087f4:	4628      	mov	r0, r5
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	b118      	cbz	r0, 8008802 <_fflush_r+0x1a>
 80087fa:	6a03      	ldr	r3, [r0, #32]
 80087fc:	b90b      	cbnz	r3, 8008802 <_fflush_r+0x1a>
 80087fe:	f7fd fa35 	bl	8005c6c <__sinit>
 8008802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0f3      	beq.n	80087f2 <_fflush_r+0xa>
 800880a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800880c:	07d0      	lsls	r0, r2, #31
 800880e:	d404      	bmi.n	800881a <_fflush_r+0x32>
 8008810:	0599      	lsls	r1, r3, #22
 8008812:	d402      	bmi.n	800881a <_fflush_r+0x32>
 8008814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008816:	f7fd fb40 	bl	8005e9a <__retarget_lock_acquire_recursive>
 800881a:	4628      	mov	r0, r5
 800881c:	4621      	mov	r1, r4
 800881e:	f7ff ff5d 	bl	80086dc <__sflush_r>
 8008822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008824:	07da      	lsls	r2, r3, #31
 8008826:	4605      	mov	r5, r0
 8008828:	d4e4      	bmi.n	80087f4 <_fflush_r+0xc>
 800882a:	89a3      	ldrh	r3, [r4, #12]
 800882c:	059b      	lsls	r3, r3, #22
 800882e:	d4e1      	bmi.n	80087f4 <_fflush_r+0xc>
 8008830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008832:	f7fd fb33 	bl	8005e9c <__retarget_lock_release_recursive>
 8008836:	e7dd      	b.n	80087f4 <_fflush_r+0xc>

08008838 <memmove>:
 8008838:	4288      	cmp	r0, r1
 800883a:	b510      	push	{r4, lr}
 800883c:	eb01 0402 	add.w	r4, r1, r2
 8008840:	d902      	bls.n	8008848 <memmove+0x10>
 8008842:	4284      	cmp	r4, r0
 8008844:	4623      	mov	r3, r4
 8008846:	d807      	bhi.n	8008858 <memmove+0x20>
 8008848:	1e43      	subs	r3, r0, #1
 800884a:	42a1      	cmp	r1, r4
 800884c:	d008      	beq.n	8008860 <memmove+0x28>
 800884e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008856:	e7f8      	b.n	800884a <memmove+0x12>
 8008858:	4402      	add	r2, r0
 800885a:	4601      	mov	r1, r0
 800885c:	428a      	cmp	r2, r1
 800885e:	d100      	bne.n	8008862 <memmove+0x2a>
 8008860:	bd10      	pop	{r4, pc}
 8008862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800886a:	e7f7      	b.n	800885c <memmove+0x24>

0800886c <strncmp>:
 800886c:	b510      	push	{r4, lr}
 800886e:	b16a      	cbz	r2, 800888c <strncmp+0x20>
 8008870:	3901      	subs	r1, #1
 8008872:	1884      	adds	r4, r0, r2
 8008874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008878:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800887c:	429a      	cmp	r2, r3
 800887e:	d103      	bne.n	8008888 <strncmp+0x1c>
 8008880:	42a0      	cmp	r0, r4
 8008882:	d001      	beq.n	8008888 <strncmp+0x1c>
 8008884:	2a00      	cmp	r2, #0
 8008886:	d1f5      	bne.n	8008874 <strncmp+0x8>
 8008888:	1ad0      	subs	r0, r2, r3
 800888a:	bd10      	pop	{r4, pc}
 800888c:	4610      	mov	r0, r2
 800888e:	e7fc      	b.n	800888a <strncmp+0x1e>

08008890 <_sbrk_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4d06      	ldr	r5, [pc, #24]	; (80088ac <_sbrk_r+0x1c>)
 8008894:	2300      	movs	r3, #0
 8008896:	4604      	mov	r4, r0
 8008898:	4608      	mov	r0, r1
 800889a:	602b      	str	r3, [r5, #0]
 800889c:	f7f9 fefa 	bl	8002694 <_sbrk>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d102      	bne.n	80088aa <_sbrk_r+0x1a>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b103      	cbz	r3, 80088aa <_sbrk_r+0x1a>
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	20000474 	.word	0x20000474

080088b0 <memcpy>:
 80088b0:	440a      	add	r2, r1
 80088b2:	4291      	cmp	r1, r2
 80088b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80088b8:	d100      	bne.n	80088bc <memcpy+0xc>
 80088ba:	4770      	bx	lr
 80088bc:	b510      	push	{r4, lr}
 80088be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088c6:	4291      	cmp	r1, r2
 80088c8:	d1f9      	bne.n	80088be <memcpy+0xe>
 80088ca:	bd10      	pop	{r4, pc}
 80088cc:	0000      	movs	r0, r0
	...

080088d0 <nan>:
 80088d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80088d8 <nan+0x8>
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	00000000 	.word	0x00000000
 80088dc:	7ff80000 	.word	0x7ff80000

080088e0 <__assert_func>:
 80088e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088e2:	4614      	mov	r4, r2
 80088e4:	461a      	mov	r2, r3
 80088e6:	4b09      	ldr	r3, [pc, #36]	; (800890c <__assert_func+0x2c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4605      	mov	r5, r0
 80088ec:	68d8      	ldr	r0, [r3, #12]
 80088ee:	b14c      	cbz	r4, 8008904 <__assert_func+0x24>
 80088f0:	4b07      	ldr	r3, [pc, #28]	; (8008910 <__assert_func+0x30>)
 80088f2:	9100      	str	r1, [sp, #0]
 80088f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088f8:	4906      	ldr	r1, [pc, #24]	; (8008914 <__assert_func+0x34>)
 80088fa:	462b      	mov	r3, r5
 80088fc:	f000 fbca 	bl	8009094 <fiprintf>
 8008900:	f000 fbda 	bl	80090b8 <abort>
 8008904:	4b04      	ldr	r3, [pc, #16]	; (8008918 <__assert_func+0x38>)
 8008906:	461c      	mov	r4, r3
 8008908:	e7f3      	b.n	80088f2 <__assert_func+0x12>
 800890a:	bf00      	nop
 800890c:	20000064 	.word	0x20000064
 8008910:	080099e2 	.word	0x080099e2
 8008914:	080099ef 	.word	0x080099ef
 8008918:	08009a1d 	.word	0x08009a1d

0800891c <_calloc_r>:
 800891c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800891e:	fba1 2402 	umull	r2, r4, r1, r2
 8008922:	b94c      	cbnz	r4, 8008938 <_calloc_r+0x1c>
 8008924:	4611      	mov	r1, r2
 8008926:	9201      	str	r2, [sp, #4]
 8008928:	f7fe f9b0 	bl	8006c8c <_malloc_r>
 800892c:	9a01      	ldr	r2, [sp, #4]
 800892e:	4605      	mov	r5, r0
 8008930:	b930      	cbnz	r0, 8008940 <_calloc_r+0x24>
 8008932:	4628      	mov	r0, r5
 8008934:	b003      	add	sp, #12
 8008936:	bd30      	pop	{r4, r5, pc}
 8008938:	220c      	movs	r2, #12
 800893a:	6002      	str	r2, [r0, #0]
 800893c:	2500      	movs	r5, #0
 800893e:	e7f8      	b.n	8008932 <_calloc_r+0x16>
 8008940:	4621      	mov	r1, r4
 8008942:	f7fd fa2c 	bl	8005d9e <memset>
 8008946:	e7f4      	b.n	8008932 <_calloc_r+0x16>

08008948 <rshift>:
 8008948:	6903      	ldr	r3, [r0, #16]
 800894a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800894e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008952:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008956:	f100 0414 	add.w	r4, r0, #20
 800895a:	dd45      	ble.n	80089e8 <rshift+0xa0>
 800895c:	f011 011f 	ands.w	r1, r1, #31
 8008960:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008964:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008968:	d10c      	bne.n	8008984 <rshift+0x3c>
 800896a:	f100 0710 	add.w	r7, r0, #16
 800896e:	4629      	mov	r1, r5
 8008970:	42b1      	cmp	r1, r6
 8008972:	d334      	bcc.n	80089de <rshift+0x96>
 8008974:	1a9b      	subs	r3, r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	1eea      	subs	r2, r5, #3
 800897a:	4296      	cmp	r6, r2
 800897c:	bf38      	it	cc
 800897e:	2300      	movcc	r3, #0
 8008980:	4423      	add	r3, r4
 8008982:	e015      	b.n	80089b0 <rshift+0x68>
 8008984:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008988:	f1c1 0820 	rsb	r8, r1, #32
 800898c:	40cf      	lsrs	r7, r1
 800898e:	f105 0e04 	add.w	lr, r5, #4
 8008992:	46a1      	mov	r9, r4
 8008994:	4576      	cmp	r6, lr
 8008996:	46f4      	mov	ip, lr
 8008998:	d815      	bhi.n	80089c6 <rshift+0x7e>
 800899a:	1a9a      	subs	r2, r3, r2
 800899c:	0092      	lsls	r2, r2, #2
 800899e:	3a04      	subs	r2, #4
 80089a0:	3501      	adds	r5, #1
 80089a2:	42ae      	cmp	r6, r5
 80089a4:	bf38      	it	cc
 80089a6:	2200      	movcc	r2, #0
 80089a8:	18a3      	adds	r3, r4, r2
 80089aa:	50a7      	str	r7, [r4, r2]
 80089ac:	b107      	cbz	r7, 80089b0 <rshift+0x68>
 80089ae:	3304      	adds	r3, #4
 80089b0:	1b1a      	subs	r2, r3, r4
 80089b2:	42a3      	cmp	r3, r4
 80089b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80089b8:	bf08      	it	eq
 80089ba:	2300      	moveq	r3, #0
 80089bc:	6102      	str	r2, [r0, #16]
 80089be:	bf08      	it	eq
 80089c0:	6143      	streq	r3, [r0, #20]
 80089c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089c6:	f8dc c000 	ldr.w	ip, [ip]
 80089ca:	fa0c fc08 	lsl.w	ip, ip, r8
 80089ce:	ea4c 0707 	orr.w	r7, ip, r7
 80089d2:	f849 7b04 	str.w	r7, [r9], #4
 80089d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089da:	40cf      	lsrs	r7, r1
 80089dc:	e7da      	b.n	8008994 <rshift+0x4c>
 80089de:	f851 cb04 	ldr.w	ip, [r1], #4
 80089e2:	f847 cf04 	str.w	ip, [r7, #4]!
 80089e6:	e7c3      	b.n	8008970 <rshift+0x28>
 80089e8:	4623      	mov	r3, r4
 80089ea:	e7e1      	b.n	80089b0 <rshift+0x68>

080089ec <__hexdig_fun>:
 80089ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089f0:	2b09      	cmp	r3, #9
 80089f2:	d802      	bhi.n	80089fa <__hexdig_fun+0xe>
 80089f4:	3820      	subs	r0, #32
 80089f6:	b2c0      	uxtb	r0, r0
 80089f8:	4770      	bx	lr
 80089fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80089fe:	2b05      	cmp	r3, #5
 8008a00:	d801      	bhi.n	8008a06 <__hexdig_fun+0x1a>
 8008a02:	3847      	subs	r0, #71	; 0x47
 8008a04:	e7f7      	b.n	80089f6 <__hexdig_fun+0xa>
 8008a06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008a0a:	2b05      	cmp	r3, #5
 8008a0c:	d801      	bhi.n	8008a12 <__hexdig_fun+0x26>
 8008a0e:	3827      	subs	r0, #39	; 0x27
 8008a10:	e7f1      	b.n	80089f6 <__hexdig_fun+0xa>
 8008a12:	2000      	movs	r0, #0
 8008a14:	4770      	bx	lr
	...

08008a18 <__gethex>:
 8008a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	4617      	mov	r7, r2
 8008a1e:	680a      	ldr	r2, [r1, #0]
 8008a20:	b085      	sub	sp, #20
 8008a22:	f102 0b02 	add.w	fp, r2, #2
 8008a26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008a2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008a2e:	4681      	mov	r9, r0
 8008a30:	468a      	mov	sl, r1
 8008a32:	9302      	str	r3, [sp, #8]
 8008a34:	32fe      	adds	r2, #254	; 0xfe
 8008a36:	eb02 030b 	add.w	r3, r2, fp
 8008a3a:	46d8      	mov	r8, fp
 8008a3c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008a40:	9301      	str	r3, [sp, #4]
 8008a42:	2830      	cmp	r0, #48	; 0x30
 8008a44:	d0f7      	beq.n	8008a36 <__gethex+0x1e>
 8008a46:	f7ff ffd1 	bl	80089ec <__hexdig_fun>
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d138      	bne.n	8008ac2 <__gethex+0xaa>
 8008a50:	49a7      	ldr	r1, [pc, #668]	; (8008cf0 <__gethex+0x2d8>)
 8008a52:	2201      	movs	r2, #1
 8008a54:	4640      	mov	r0, r8
 8008a56:	f7ff ff09 	bl	800886c <strncmp>
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d169      	bne.n	8008b34 <__gethex+0x11c>
 8008a60:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008a64:	465d      	mov	r5, fp
 8008a66:	f7ff ffc1 	bl	80089ec <__hexdig_fun>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d064      	beq.n	8008b38 <__gethex+0x120>
 8008a6e:	465a      	mov	r2, fp
 8008a70:	7810      	ldrb	r0, [r2, #0]
 8008a72:	2830      	cmp	r0, #48	; 0x30
 8008a74:	4690      	mov	r8, r2
 8008a76:	f102 0201 	add.w	r2, r2, #1
 8008a7a:	d0f9      	beq.n	8008a70 <__gethex+0x58>
 8008a7c:	f7ff ffb6 	bl	80089ec <__hexdig_fun>
 8008a80:	2301      	movs	r3, #1
 8008a82:	fab0 f480 	clz	r4, r0
 8008a86:	0964      	lsrs	r4, r4, #5
 8008a88:	465e      	mov	r6, fp
 8008a8a:	9301      	str	r3, [sp, #4]
 8008a8c:	4642      	mov	r2, r8
 8008a8e:	4615      	mov	r5, r2
 8008a90:	3201      	adds	r2, #1
 8008a92:	7828      	ldrb	r0, [r5, #0]
 8008a94:	f7ff ffaa 	bl	80089ec <__hexdig_fun>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d1f8      	bne.n	8008a8e <__gethex+0x76>
 8008a9c:	4994      	ldr	r1, [pc, #592]	; (8008cf0 <__gethex+0x2d8>)
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	f7ff fee3 	bl	800886c <strncmp>
 8008aa6:	b978      	cbnz	r0, 8008ac8 <__gethex+0xb0>
 8008aa8:	b946      	cbnz	r6, 8008abc <__gethex+0xa4>
 8008aaa:	1c6e      	adds	r6, r5, #1
 8008aac:	4632      	mov	r2, r6
 8008aae:	4615      	mov	r5, r2
 8008ab0:	3201      	adds	r2, #1
 8008ab2:	7828      	ldrb	r0, [r5, #0]
 8008ab4:	f7ff ff9a 	bl	80089ec <__hexdig_fun>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d1f8      	bne.n	8008aae <__gethex+0x96>
 8008abc:	1b73      	subs	r3, r6, r5
 8008abe:	009e      	lsls	r6, r3, #2
 8008ac0:	e004      	b.n	8008acc <__gethex+0xb4>
 8008ac2:	2400      	movs	r4, #0
 8008ac4:	4626      	mov	r6, r4
 8008ac6:	e7e1      	b.n	8008a8c <__gethex+0x74>
 8008ac8:	2e00      	cmp	r6, #0
 8008aca:	d1f7      	bne.n	8008abc <__gethex+0xa4>
 8008acc:	782b      	ldrb	r3, [r5, #0]
 8008ace:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ad2:	2b50      	cmp	r3, #80	; 0x50
 8008ad4:	d13d      	bne.n	8008b52 <__gethex+0x13a>
 8008ad6:	786b      	ldrb	r3, [r5, #1]
 8008ad8:	2b2b      	cmp	r3, #43	; 0x2b
 8008ada:	d02f      	beq.n	8008b3c <__gethex+0x124>
 8008adc:	2b2d      	cmp	r3, #45	; 0x2d
 8008ade:	d031      	beq.n	8008b44 <__gethex+0x12c>
 8008ae0:	1c69      	adds	r1, r5, #1
 8008ae2:	f04f 0b00 	mov.w	fp, #0
 8008ae6:	7808      	ldrb	r0, [r1, #0]
 8008ae8:	f7ff ff80 	bl	80089ec <__hexdig_fun>
 8008aec:	1e42      	subs	r2, r0, #1
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	2a18      	cmp	r2, #24
 8008af2:	d82e      	bhi.n	8008b52 <__gethex+0x13a>
 8008af4:	f1a0 0210 	sub.w	r2, r0, #16
 8008af8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008afc:	f7ff ff76 	bl	80089ec <__hexdig_fun>
 8008b00:	f100 3cff 	add.w	ip, r0, #4294967295
 8008b04:	fa5f fc8c 	uxtb.w	ip, ip
 8008b08:	f1bc 0f18 	cmp.w	ip, #24
 8008b0c:	d91d      	bls.n	8008b4a <__gethex+0x132>
 8008b0e:	f1bb 0f00 	cmp.w	fp, #0
 8008b12:	d000      	beq.n	8008b16 <__gethex+0xfe>
 8008b14:	4252      	negs	r2, r2
 8008b16:	4416      	add	r6, r2
 8008b18:	f8ca 1000 	str.w	r1, [sl]
 8008b1c:	b1dc      	cbz	r4, 8008b56 <__gethex+0x13e>
 8008b1e:	9b01      	ldr	r3, [sp, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	bf14      	ite	ne
 8008b24:	f04f 0800 	movne.w	r8, #0
 8008b28:	f04f 0806 	moveq.w	r8, #6
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	b005      	add	sp, #20
 8008b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b34:	4645      	mov	r5, r8
 8008b36:	4626      	mov	r6, r4
 8008b38:	2401      	movs	r4, #1
 8008b3a:	e7c7      	b.n	8008acc <__gethex+0xb4>
 8008b3c:	f04f 0b00 	mov.w	fp, #0
 8008b40:	1ca9      	adds	r1, r5, #2
 8008b42:	e7d0      	b.n	8008ae6 <__gethex+0xce>
 8008b44:	f04f 0b01 	mov.w	fp, #1
 8008b48:	e7fa      	b.n	8008b40 <__gethex+0x128>
 8008b4a:	230a      	movs	r3, #10
 8008b4c:	fb03 0002 	mla	r0, r3, r2, r0
 8008b50:	e7d0      	b.n	8008af4 <__gethex+0xdc>
 8008b52:	4629      	mov	r1, r5
 8008b54:	e7e0      	b.n	8008b18 <__gethex+0x100>
 8008b56:	eba5 0308 	sub.w	r3, r5, r8
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	2b07      	cmp	r3, #7
 8008b60:	dc0a      	bgt.n	8008b78 <__gethex+0x160>
 8008b62:	4648      	mov	r0, r9
 8008b64:	f7fe f91e 	bl	8006da4 <_Balloc>
 8008b68:	4604      	mov	r4, r0
 8008b6a:	b940      	cbnz	r0, 8008b7e <__gethex+0x166>
 8008b6c:	4b61      	ldr	r3, [pc, #388]	; (8008cf4 <__gethex+0x2dc>)
 8008b6e:	4602      	mov	r2, r0
 8008b70:	21e4      	movs	r1, #228	; 0xe4
 8008b72:	4861      	ldr	r0, [pc, #388]	; (8008cf8 <__gethex+0x2e0>)
 8008b74:	f7ff feb4 	bl	80088e0 <__assert_func>
 8008b78:	3101      	adds	r1, #1
 8008b7a:	105b      	asrs	r3, r3, #1
 8008b7c:	e7ef      	b.n	8008b5e <__gethex+0x146>
 8008b7e:	f100 0a14 	add.w	sl, r0, #20
 8008b82:	2300      	movs	r3, #0
 8008b84:	495a      	ldr	r1, [pc, #360]	; (8008cf0 <__gethex+0x2d8>)
 8008b86:	f8cd a004 	str.w	sl, [sp, #4]
 8008b8a:	469b      	mov	fp, r3
 8008b8c:	45a8      	cmp	r8, r5
 8008b8e:	d342      	bcc.n	8008c16 <__gethex+0x1fe>
 8008b90:	9801      	ldr	r0, [sp, #4]
 8008b92:	f840 bb04 	str.w	fp, [r0], #4
 8008b96:	eba0 000a 	sub.w	r0, r0, sl
 8008b9a:	1080      	asrs	r0, r0, #2
 8008b9c:	6120      	str	r0, [r4, #16]
 8008b9e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008ba2:	4658      	mov	r0, fp
 8008ba4:	f7fe f9f0 	bl	8006f88 <__hi0bits>
 8008ba8:	683d      	ldr	r5, [r7, #0]
 8008baa:	eba8 0000 	sub.w	r0, r8, r0
 8008bae:	42a8      	cmp	r0, r5
 8008bb0:	dd59      	ble.n	8008c66 <__gethex+0x24e>
 8008bb2:	eba0 0805 	sub.w	r8, r0, r5
 8008bb6:	4641      	mov	r1, r8
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7fe fd7f 	bl	80076bc <__any_on>
 8008bbe:	4683      	mov	fp, r0
 8008bc0:	b1b8      	cbz	r0, 8008bf2 <__gethex+0x1da>
 8008bc2:	f108 33ff 	add.w	r3, r8, #4294967295
 8008bc6:	1159      	asrs	r1, r3, #5
 8008bc8:	f003 021f 	and.w	r2, r3, #31
 8008bcc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008bd0:	f04f 0b01 	mov.w	fp, #1
 8008bd4:	fa0b f202 	lsl.w	r2, fp, r2
 8008bd8:	420a      	tst	r2, r1
 8008bda:	d00a      	beq.n	8008bf2 <__gethex+0x1da>
 8008bdc:	455b      	cmp	r3, fp
 8008bde:	dd06      	ble.n	8008bee <__gethex+0x1d6>
 8008be0:	f1a8 0102 	sub.w	r1, r8, #2
 8008be4:	4620      	mov	r0, r4
 8008be6:	f7fe fd69 	bl	80076bc <__any_on>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d138      	bne.n	8008c60 <__gethex+0x248>
 8008bee:	f04f 0b02 	mov.w	fp, #2
 8008bf2:	4641      	mov	r1, r8
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f7ff fea7 	bl	8008948 <rshift>
 8008bfa:	4446      	add	r6, r8
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	42b3      	cmp	r3, r6
 8008c00:	da41      	bge.n	8008c86 <__gethex+0x26e>
 8008c02:	4621      	mov	r1, r4
 8008c04:	4648      	mov	r0, r9
 8008c06:	f7fe f90d 	bl	8006e24 <_Bfree>
 8008c0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008c14:	e78a      	b.n	8008b2c <__gethex+0x114>
 8008c16:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008c1a:	2a2e      	cmp	r2, #46	; 0x2e
 8008c1c:	d014      	beq.n	8008c48 <__gethex+0x230>
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	d106      	bne.n	8008c30 <__gethex+0x218>
 8008c22:	9b01      	ldr	r3, [sp, #4]
 8008c24:	f843 bb04 	str.w	fp, [r3], #4
 8008c28:	f04f 0b00 	mov.w	fp, #0
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	465b      	mov	r3, fp
 8008c30:	7828      	ldrb	r0, [r5, #0]
 8008c32:	9303      	str	r3, [sp, #12]
 8008c34:	f7ff feda 	bl	80089ec <__hexdig_fun>
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	f000 000f 	and.w	r0, r0, #15
 8008c3e:	4098      	lsls	r0, r3
 8008c40:	ea4b 0b00 	orr.w	fp, fp, r0
 8008c44:	3304      	adds	r3, #4
 8008c46:	e7a1      	b.n	8008b8c <__gethex+0x174>
 8008c48:	45a8      	cmp	r8, r5
 8008c4a:	d8e8      	bhi.n	8008c1e <__gethex+0x206>
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	4628      	mov	r0, r5
 8008c50:	9303      	str	r3, [sp, #12]
 8008c52:	f7ff fe0b 	bl	800886c <strncmp>
 8008c56:	4926      	ldr	r1, [pc, #152]	; (8008cf0 <__gethex+0x2d8>)
 8008c58:	9b03      	ldr	r3, [sp, #12]
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d1df      	bne.n	8008c1e <__gethex+0x206>
 8008c5e:	e795      	b.n	8008b8c <__gethex+0x174>
 8008c60:	f04f 0b03 	mov.w	fp, #3
 8008c64:	e7c5      	b.n	8008bf2 <__gethex+0x1da>
 8008c66:	da0b      	bge.n	8008c80 <__gethex+0x268>
 8008c68:	eba5 0800 	sub.w	r8, r5, r0
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	4642      	mov	r2, r8
 8008c70:	4648      	mov	r0, r9
 8008c72:	f7fe faf1 	bl	8007258 <__lshift>
 8008c76:	eba6 0608 	sub.w	r6, r6, r8
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	f100 0a14 	add.w	sl, r0, #20
 8008c80:	f04f 0b00 	mov.w	fp, #0
 8008c84:	e7ba      	b.n	8008bfc <__gethex+0x1e4>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	42b3      	cmp	r3, r6
 8008c8a:	dd73      	ble.n	8008d74 <__gethex+0x35c>
 8008c8c:	1b9e      	subs	r6, r3, r6
 8008c8e:	42b5      	cmp	r5, r6
 8008c90:	dc34      	bgt.n	8008cfc <__gethex+0x2e4>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d023      	beq.n	8008ce0 <__gethex+0x2c8>
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d025      	beq.n	8008ce8 <__gethex+0x2d0>
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d115      	bne.n	8008ccc <__gethex+0x2b4>
 8008ca0:	42b5      	cmp	r5, r6
 8008ca2:	d113      	bne.n	8008ccc <__gethex+0x2b4>
 8008ca4:	2d01      	cmp	r5, #1
 8008ca6:	d10b      	bne.n	8008cc0 <__gethex+0x2a8>
 8008ca8:	9a02      	ldr	r2, [sp, #8]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	2301      	movs	r3, #1
 8008cb0:	6123      	str	r3, [r4, #16]
 8008cb2:	f8ca 3000 	str.w	r3, [sl]
 8008cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cb8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008cbc:	601c      	str	r4, [r3, #0]
 8008cbe:	e735      	b.n	8008b2c <__gethex+0x114>
 8008cc0:	1e69      	subs	r1, r5, #1
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f7fe fcfa 	bl	80076bc <__any_on>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d1ed      	bne.n	8008ca8 <__gethex+0x290>
 8008ccc:	4621      	mov	r1, r4
 8008cce:	4648      	mov	r0, r9
 8008cd0:	f7fe f8a8 	bl	8006e24 <_Bfree>
 8008cd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008cde:	e725      	b.n	8008b2c <__gethex+0x114>
 8008ce0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1f2      	bne.n	8008ccc <__gethex+0x2b4>
 8008ce6:	e7df      	b.n	8008ca8 <__gethex+0x290>
 8008ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1dc      	bne.n	8008ca8 <__gethex+0x290>
 8008cee:	e7ed      	b.n	8008ccc <__gethex+0x2b4>
 8008cf0:	08009874 	.word	0x08009874
 8008cf4:	0800970d 	.word	0x0800970d
 8008cf8:	08009a1e 	.word	0x08009a1e
 8008cfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8008d00:	f1bb 0f00 	cmp.w	fp, #0
 8008d04:	d133      	bne.n	8008d6e <__gethex+0x356>
 8008d06:	f1b8 0f00 	cmp.w	r8, #0
 8008d0a:	d004      	beq.n	8008d16 <__gethex+0x2fe>
 8008d0c:	4641      	mov	r1, r8
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7fe fcd4 	bl	80076bc <__any_on>
 8008d14:	4683      	mov	fp, r0
 8008d16:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008d20:	f008 081f 	and.w	r8, r8, #31
 8008d24:	fa03 f308 	lsl.w	r3, r3, r8
 8008d28:	4213      	tst	r3, r2
 8008d2a:	4631      	mov	r1, r6
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	bf18      	it	ne
 8008d30:	f04b 0b02 	orrne.w	fp, fp, #2
 8008d34:	1bad      	subs	r5, r5, r6
 8008d36:	f7ff fe07 	bl	8008948 <rshift>
 8008d3a:	687e      	ldr	r6, [r7, #4]
 8008d3c:	f04f 0802 	mov.w	r8, #2
 8008d40:	f1bb 0f00 	cmp.w	fp, #0
 8008d44:	d04a      	beq.n	8008ddc <__gethex+0x3c4>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d016      	beq.n	8008d7a <__gethex+0x362>
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d018      	beq.n	8008d82 <__gethex+0x36a>
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d109      	bne.n	8008d68 <__gethex+0x350>
 8008d54:	f01b 0f02 	tst.w	fp, #2
 8008d58:	d006      	beq.n	8008d68 <__gethex+0x350>
 8008d5a:	f8da 3000 	ldr.w	r3, [sl]
 8008d5e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008d62:	f01b 0f01 	tst.w	fp, #1
 8008d66:	d10f      	bne.n	8008d88 <__gethex+0x370>
 8008d68:	f048 0810 	orr.w	r8, r8, #16
 8008d6c:	e036      	b.n	8008ddc <__gethex+0x3c4>
 8008d6e:	f04f 0b01 	mov.w	fp, #1
 8008d72:	e7d0      	b.n	8008d16 <__gethex+0x2fe>
 8008d74:	f04f 0801 	mov.w	r8, #1
 8008d78:	e7e2      	b.n	8008d40 <__gethex+0x328>
 8008d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d7c:	f1c3 0301 	rsb	r3, r3, #1
 8008d80:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d0ef      	beq.n	8008d68 <__gethex+0x350>
 8008d88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d8c:	f104 0214 	add.w	r2, r4, #20
 8008d90:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	4694      	mov	ip, r2
 8008d9e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008da2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008da6:	d01e      	beq.n	8008de6 <__gethex+0x3ce>
 8008da8:	3101      	adds	r1, #1
 8008daa:	f8cc 1000 	str.w	r1, [ip]
 8008dae:	f1b8 0f02 	cmp.w	r8, #2
 8008db2:	f104 0214 	add.w	r2, r4, #20
 8008db6:	d13d      	bne.n	8008e34 <__gethex+0x41c>
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	42ab      	cmp	r3, r5
 8008dbe:	d10b      	bne.n	8008dd8 <__gethex+0x3c0>
 8008dc0:	1169      	asrs	r1, r5, #5
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	f005 051f 	and.w	r5, r5, #31
 8008dc8:	fa03 f505 	lsl.w	r5, r3, r5
 8008dcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008dd0:	421d      	tst	r5, r3
 8008dd2:	bf18      	it	ne
 8008dd4:	f04f 0801 	movne.w	r8, #1
 8008dd8:	f048 0820 	orr.w	r8, r8, #32
 8008ddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dde:	601c      	str	r4, [r3, #0]
 8008de0:	9b02      	ldr	r3, [sp, #8]
 8008de2:	601e      	str	r6, [r3, #0]
 8008de4:	e6a2      	b.n	8008b2c <__gethex+0x114>
 8008de6:	4290      	cmp	r0, r2
 8008de8:	f842 3c04 	str.w	r3, [r2, #-4]
 8008dec:	d8d6      	bhi.n	8008d9c <__gethex+0x384>
 8008dee:	68a2      	ldr	r2, [r4, #8]
 8008df0:	4593      	cmp	fp, r2
 8008df2:	db17      	blt.n	8008e24 <__gethex+0x40c>
 8008df4:	6861      	ldr	r1, [r4, #4]
 8008df6:	4648      	mov	r0, r9
 8008df8:	3101      	adds	r1, #1
 8008dfa:	f7fd ffd3 	bl	8006da4 <_Balloc>
 8008dfe:	4682      	mov	sl, r0
 8008e00:	b918      	cbnz	r0, 8008e0a <__gethex+0x3f2>
 8008e02:	4b1b      	ldr	r3, [pc, #108]	; (8008e70 <__gethex+0x458>)
 8008e04:	4602      	mov	r2, r0
 8008e06:	2184      	movs	r1, #132	; 0x84
 8008e08:	e6b3      	b.n	8008b72 <__gethex+0x15a>
 8008e0a:	6922      	ldr	r2, [r4, #16]
 8008e0c:	3202      	adds	r2, #2
 8008e0e:	f104 010c 	add.w	r1, r4, #12
 8008e12:	0092      	lsls	r2, r2, #2
 8008e14:	300c      	adds	r0, #12
 8008e16:	f7ff fd4b 	bl	80088b0 <memcpy>
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	4648      	mov	r0, r9
 8008e1e:	f7fe f801 	bl	8006e24 <_Bfree>
 8008e22:	4654      	mov	r4, sl
 8008e24:	6922      	ldr	r2, [r4, #16]
 8008e26:	1c51      	adds	r1, r2, #1
 8008e28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008e2c:	6121      	str	r1, [r4, #16]
 8008e2e:	2101      	movs	r1, #1
 8008e30:	6151      	str	r1, [r2, #20]
 8008e32:	e7bc      	b.n	8008dae <__gethex+0x396>
 8008e34:	6921      	ldr	r1, [r4, #16]
 8008e36:	4559      	cmp	r1, fp
 8008e38:	dd0b      	ble.n	8008e52 <__gethex+0x43a>
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f7ff fd83 	bl	8008948 <rshift>
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	3601      	adds	r6, #1
 8008e46:	42b3      	cmp	r3, r6
 8008e48:	f6ff aedb 	blt.w	8008c02 <__gethex+0x1ea>
 8008e4c:	f04f 0801 	mov.w	r8, #1
 8008e50:	e7c2      	b.n	8008dd8 <__gethex+0x3c0>
 8008e52:	f015 051f 	ands.w	r5, r5, #31
 8008e56:	d0f9      	beq.n	8008e4c <__gethex+0x434>
 8008e58:	9b01      	ldr	r3, [sp, #4]
 8008e5a:	441a      	add	r2, r3
 8008e5c:	f1c5 0520 	rsb	r5, r5, #32
 8008e60:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008e64:	f7fe f890 	bl	8006f88 <__hi0bits>
 8008e68:	42a8      	cmp	r0, r5
 8008e6a:	dbe6      	blt.n	8008e3a <__gethex+0x422>
 8008e6c:	e7ee      	b.n	8008e4c <__gethex+0x434>
 8008e6e:	bf00      	nop
 8008e70:	0800970d 	.word	0x0800970d

08008e74 <L_shift>:
 8008e74:	f1c2 0208 	rsb	r2, r2, #8
 8008e78:	0092      	lsls	r2, r2, #2
 8008e7a:	b570      	push	{r4, r5, r6, lr}
 8008e7c:	f1c2 0620 	rsb	r6, r2, #32
 8008e80:	6843      	ldr	r3, [r0, #4]
 8008e82:	6804      	ldr	r4, [r0, #0]
 8008e84:	fa03 f506 	lsl.w	r5, r3, r6
 8008e88:	432c      	orrs	r4, r5
 8008e8a:	40d3      	lsrs	r3, r2
 8008e8c:	6004      	str	r4, [r0, #0]
 8008e8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e92:	4288      	cmp	r0, r1
 8008e94:	d3f4      	bcc.n	8008e80 <L_shift+0xc>
 8008e96:	bd70      	pop	{r4, r5, r6, pc}

08008e98 <__match>:
 8008e98:	b530      	push	{r4, r5, lr}
 8008e9a:	6803      	ldr	r3, [r0, #0]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ea2:	b914      	cbnz	r4, 8008eaa <__match+0x12>
 8008ea4:	6003      	str	r3, [r0, #0]
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	bd30      	pop	{r4, r5, pc}
 8008eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008eb2:	2d19      	cmp	r5, #25
 8008eb4:	bf98      	it	ls
 8008eb6:	3220      	addls	r2, #32
 8008eb8:	42a2      	cmp	r2, r4
 8008eba:	d0f0      	beq.n	8008e9e <__match+0x6>
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	e7f3      	b.n	8008ea8 <__match+0x10>

08008ec0 <__hexnan>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	680b      	ldr	r3, [r1, #0]
 8008ec6:	6801      	ldr	r1, [r0, #0]
 8008ec8:	115e      	asrs	r6, r3, #5
 8008eca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ece:	f013 031f 	ands.w	r3, r3, #31
 8008ed2:	b087      	sub	sp, #28
 8008ed4:	bf18      	it	ne
 8008ed6:	3604      	addne	r6, #4
 8008ed8:	2500      	movs	r5, #0
 8008eda:	1f37      	subs	r7, r6, #4
 8008edc:	4682      	mov	sl, r0
 8008ede:	4690      	mov	r8, r2
 8008ee0:	9301      	str	r3, [sp, #4]
 8008ee2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ee6:	46b9      	mov	r9, r7
 8008ee8:	463c      	mov	r4, r7
 8008eea:	9502      	str	r5, [sp, #8]
 8008eec:	46ab      	mov	fp, r5
 8008eee:	784a      	ldrb	r2, [r1, #1]
 8008ef0:	1c4b      	adds	r3, r1, #1
 8008ef2:	9303      	str	r3, [sp, #12]
 8008ef4:	b342      	cbz	r2, 8008f48 <__hexnan+0x88>
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	9105      	str	r1, [sp, #20]
 8008efa:	9204      	str	r2, [sp, #16]
 8008efc:	f7ff fd76 	bl	80089ec <__hexdig_fun>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d14f      	bne.n	8008fa4 <__hexnan+0xe4>
 8008f04:	9a04      	ldr	r2, [sp, #16]
 8008f06:	9905      	ldr	r1, [sp, #20]
 8008f08:	2a20      	cmp	r2, #32
 8008f0a:	d818      	bhi.n	8008f3e <__hexnan+0x7e>
 8008f0c:	9b02      	ldr	r3, [sp, #8]
 8008f0e:	459b      	cmp	fp, r3
 8008f10:	dd13      	ble.n	8008f3a <__hexnan+0x7a>
 8008f12:	454c      	cmp	r4, r9
 8008f14:	d206      	bcs.n	8008f24 <__hexnan+0x64>
 8008f16:	2d07      	cmp	r5, #7
 8008f18:	dc04      	bgt.n	8008f24 <__hexnan+0x64>
 8008f1a:	462a      	mov	r2, r5
 8008f1c:	4649      	mov	r1, r9
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f7ff ffa8 	bl	8008e74 <L_shift>
 8008f24:	4544      	cmp	r4, r8
 8008f26:	d950      	bls.n	8008fca <__hexnan+0x10a>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f1a4 0904 	sub.w	r9, r4, #4
 8008f2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f32:	f8cd b008 	str.w	fp, [sp, #8]
 8008f36:	464c      	mov	r4, r9
 8008f38:	461d      	mov	r5, r3
 8008f3a:	9903      	ldr	r1, [sp, #12]
 8008f3c:	e7d7      	b.n	8008eee <__hexnan+0x2e>
 8008f3e:	2a29      	cmp	r2, #41	; 0x29
 8008f40:	d155      	bne.n	8008fee <__hexnan+0x12e>
 8008f42:	3102      	adds	r1, #2
 8008f44:	f8ca 1000 	str.w	r1, [sl]
 8008f48:	f1bb 0f00 	cmp.w	fp, #0
 8008f4c:	d04f      	beq.n	8008fee <__hexnan+0x12e>
 8008f4e:	454c      	cmp	r4, r9
 8008f50:	d206      	bcs.n	8008f60 <__hexnan+0xa0>
 8008f52:	2d07      	cmp	r5, #7
 8008f54:	dc04      	bgt.n	8008f60 <__hexnan+0xa0>
 8008f56:	462a      	mov	r2, r5
 8008f58:	4649      	mov	r1, r9
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f7ff ff8a 	bl	8008e74 <L_shift>
 8008f60:	4544      	cmp	r4, r8
 8008f62:	d934      	bls.n	8008fce <__hexnan+0x10e>
 8008f64:	f1a8 0204 	sub.w	r2, r8, #4
 8008f68:	4623      	mov	r3, r4
 8008f6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f6e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f72:	429f      	cmp	r7, r3
 8008f74:	d2f9      	bcs.n	8008f6a <__hexnan+0xaa>
 8008f76:	1b3b      	subs	r3, r7, r4
 8008f78:	f023 0303 	bic.w	r3, r3, #3
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	3e03      	subs	r6, #3
 8008f80:	3401      	adds	r4, #1
 8008f82:	42a6      	cmp	r6, r4
 8008f84:	bf38      	it	cc
 8008f86:	2304      	movcc	r3, #4
 8008f88:	4443      	add	r3, r8
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f843 2b04 	str.w	r2, [r3], #4
 8008f90:	429f      	cmp	r7, r3
 8008f92:	d2fb      	bcs.n	8008f8c <__hexnan+0xcc>
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	b91b      	cbnz	r3, 8008fa0 <__hexnan+0xe0>
 8008f98:	4547      	cmp	r7, r8
 8008f9a:	d126      	bne.n	8008fea <__hexnan+0x12a>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	603b      	str	r3, [r7, #0]
 8008fa0:	2005      	movs	r0, #5
 8008fa2:	e025      	b.n	8008ff0 <__hexnan+0x130>
 8008fa4:	3501      	adds	r5, #1
 8008fa6:	2d08      	cmp	r5, #8
 8008fa8:	f10b 0b01 	add.w	fp, fp, #1
 8008fac:	dd06      	ble.n	8008fbc <__hexnan+0xfc>
 8008fae:	4544      	cmp	r4, r8
 8008fb0:	d9c3      	bls.n	8008f3a <__hexnan+0x7a>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fb8:	2501      	movs	r5, #1
 8008fba:	3c04      	subs	r4, #4
 8008fbc:	6822      	ldr	r2, [r4, #0]
 8008fbe:	f000 000f 	and.w	r0, r0, #15
 8008fc2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008fc6:	6020      	str	r0, [r4, #0]
 8008fc8:	e7b7      	b.n	8008f3a <__hexnan+0x7a>
 8008fca:	2508      	movs	r5, #8
 8008fcc:	e7b5      	b.n	8008f3a <__hexnan+0x7a>
 8008fce:	9b01      	ldr	r3, [sp, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0df      	beq.n	8008f94 <__hexnan+0xd4>
 8008fd4:	f1c3 0320 	rsb	r3, r3, #32
 8008fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fdc:	40da      	lsrs	r2, r3
 8008fde:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	f846 3c04 	str.w	r3, [r6, #-4]
 8008fe8:	e7d4      	b.n	8008f94 <__hexnan+0xd4>
 8008fea:	3f04      	subs	r7, #4
 8008fec:	e7d2      	b.n	8008f94 <__hexnan+0xd4>
 8008fee:	2004      	movs	r0, #4
 8008ff0:	b007      	add	sp, #28
 8008ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ff6 <__ascii_mbtowc>:
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	b901      	cbnz	r1, 8008ffc <__ascii_mbtowc+0x6>
 8008ffa:	a901      	add	r1, sp, #4
 8008ffc:	b142      	cbz	r2, 8009010 <__ascii_mbtowc+0x1a>
 8008ffe:	b14b      	cbz	r3, 8009014 <__ascii_mbtowc+0x1e>
 8009000:	7813      	ldrb	r3, [r2, #0]
 8009002:	600b      	str	r3, [r1, #0]
 8009004:	7812      	ldrb	r2, [r2, #0]
 8009006:	1e10      	subs	r0, r2, #0
 8009008:	bf18      	it	ne
 800900a:	2001      	movne	r0, #1
 800900c:	b002      	add	sp, #8
 800900e:	4770      	bx	lr
 8009010:	4610      	mov	r0, r2
 8009012:	e7fb      	b.n	800900c <__ascii_mbtowc+0x16>
 8009014:	f06f 0001 	mvn.w	r0, #1
 8009018:	e7f8      	b.n	800900c <__ascii_mbtowc+0x16>

0800901a <_realloc_r>:
 800901a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800901e:	4680      	mov	r8, r0
 8009020:	4614      	mov	r4, r2
 8009022:	460e      	mov	r6, r1
 8009024:	b921      	cbnz	r1, 8009030 <_realloc_r+0x16>
 8009026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800902a:	4611      	mov	r1, r2
 800902c:	f7fd be2e 	b.w	8006c8c <_malloc_r>
 8009030:	b92a      	cbnz	r2, 800903e <_realloc_r+0x24>
 8009032:	f7fd fdb7 	bl	8006ba4 <_free_r>
 8009036:	4625      	mov	r5, r4
 8009038:	4628      	mov	r0, r5
 800903a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800903e:	f000 f842 	bl	80090c6 <_malloc_usable_size_r>
 8009042:	4284      	cmp	r4, r0
 8009044:	4607      	mov	r7, r0
 8009046:	d802      	bhi.n	800904e <_realloc_r+0x34>
 8009048:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800904c:	d812      	bhi.n	8009074 <_realloc_r+0x5a>
 800904e:	4621      	mov	r1, r4
 8009050:	4640      	mov	r0, r8
 8009052:	f7fd fe1b 	bl	8006c8c <_malloc_r>
 8009056:	4605      	mov	r5, r0
 8009058:	2800      	cmp	r0, #0
 800905a:	d0ed      	beq.n	8009038 <_realloc_r+0x1e>
 800905c:	42bc      	cmp	r4, r7
 800905e:	4622      	mov	r2, r4
 8009060:	4631      	mov	r1, r6
 8009062:	bf28      	it	cs
 8009064:	463a      	movcs	r2, r7
 8009066:	f7ff fc23 	bl	80088b0 <memcpy>
 800906a:	4631      	mov	r1, r6
 800906c:	4640      	mov	r0, r8
 800906e:	f7fd fd99 	bl	8006ba4 <_free_r>
 8009072:	e7e1      	b.n	8009038 <_realloc_r+0x1e>
 8009074:	4635      	mov	r5, r6
 8009076:	e7df      	b.n	8009038 <_realloc_r+0x1e>

08009078 <__ascii_wctomb>:
 8009078:	b149      	cbz	r1, 800908e <__ascii_wctomb+0x16>
 800907a:	2aff      	cmp	r2, #255	; 0xff
 800907c:	bf85      	ittet	hi
 800907e:	238a      	movhi	r3, #138	; 0x8a
 8009080:	6003      	strhi	r3, [r0, #0]
 8009082:	700a      	strbls	r2, [r1, #0]
 8009084:	f04f 30ff 	movhi.w	r0, #4294967295
 8009088:	bf98      	it	ls
 800908a:	2001      	movls	r0, #1
 800908c:	4770      	bx	lr
 800908e:	4608      	mov	r0, r1
 8009090:	4770      	bx	lr
	...

08009094 <fiprintf>:
 8009094:	b40e      	push	{r1, r2, r3}
 8009096:	b503      	push	{r0, r1, lr}
 8009098:	4601      	mov	r1, r0
 800909a:	ab03      	add	r3, sp, #12
 800909c:	4805      	ldr	r0, [pc, #20]	; (80090b4 <fiprintf+0x20>)
 800909e:	f853 2b04 	ldr.w	r2, [r3], #4
 80090a2:	6800      	ldr	r0, [r0, #0]
 80090a4:	9301      	str	r3, [sp, #4]
 80090a6:	f000 f83f 	bl	8009128 <_vfiprintf_r>
 80090aa:	b002      	add	sp, #8
 80090ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80090b0:	b003      	add	sp, #12
 80090b2:	4770      	bx	lr
 80090b4:	20000064 	.word	0x20000064

080090b8 <abort>:
 80090b8:	b508      	push	{r3, lr}
 80090ba:	2006      	movs	r0, #6
 80090bc:	f000 fa0c 	bl	80094d8 <raise>
 80090c0:	2001      	movs	r0, #1
 80090c2:	f7f9 fa6f 	bl	80025a4 <_exit>

080090c6 <_malloc_usable_size_r>:
 80090c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ca:	1f18      	subs	r0, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	bfbc      	itt	lt
 80090d0:	580b      	ldrlt	r3, [r1, r0]
 80090d2:	18c0      	addlt	r0, r0, r3
 80090d4:	4770      	bx	lr

080090d6 <__sfputc_r>:
 80090d6:	6893      	ldr	r3, [r2, #8]
 80090d8:	3b01      	subs	r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	b410      	push	{r4}
 80090de:	6093      	str	r3, [r2, #8]
 80090e0:	da08      	bge.n	80090f4 <__sfputc_r+0x1e>
 80090e2:	6994      	ldr	r4, [r2, #24]
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	db01      	blt.n	80090ec <__sfputc_r+0x16>
 80090e8:	290a      	cmp	r1, #10
 80090ea:	d103      	bne.n	80090f4 <__sfputc_r+0x1e>
 80090ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090f0:	f000 b934 	b.w	800935c <__swbuf_r>
 80090f4:	6813      	ldr	r3, [r2, #0]
 80090f6:	1c58      	adds	r0, r3, #1
 80090f8:	6010      	str	r0, [r2, #0]
 80090fa:	7019      	strb	r1, [r3, #0]
 80090fc:	4608      	mov	r0, r1
 80090fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009102:	4770      	bx	lr

08009104 <__sfputs_r>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	4606      	mov	r6, r0
 8009108:	460f      	mov	r7, r1
 800910a:	4614      	mov	r4, r2
 800910c:	18d5      	adds	r5, r2, r3
 800910e:	42ac      	cmp	r4, r5
 8009110:	d101      	bne.n	8009116 <__sfputs_r+0x12>
 8009112:	2000      	movs	r0, #0
 8009114:	e007      	b.n	8009126 <__sfputs_r+0x22>
 8009116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911a:	463a      	mov	r2, r7
 800911c:	4630      	mov	r0, r6
 800911e:	f7ff ffda 	bl	80090d6 <__sfputc_r>
 8009122:	1c43      	adds	r3, r0, #1
 8009124:	d1f3      	bne.n	800910e <__sfputs_r+0xa>
 8009126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009128 <_vfiprintf_r>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	460d      	mov	r5, r1
 800912e:	b09d      	sub	sp, #116	; 0x74
 8009130:	4614      	mov	r4, r2
 8009132:	4698      	mov	r8, r3
 8009134:	4606      	mov	r6, r0
 8009136:	b118      	cbz	r0, 8009140 <_vfiprintf_r+0x18>
 8009138:	6a03      	ldr	r3, [r0, #32]
 800913a:	b90b      	cbnz	r3, 8009140 <_vfiprintf_r+0x18>
 800913c:	f7fc fd96 	bl	8005c6c <__sinit>
 8009140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009142:	07d9      	lsls	r1, r3, #31
 8009144:	d405      	bmi.n	8009152 <_vfiprintf_r+0x2a>
 8009146:	89ab      	ldrh	r3, [r5, #12]
 8009148:	059a      	lsls	r2, r3, #22
 800914a:	d402      	bmi.n	8009152 <_vfiprintf_r+0x2a>
 800914c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800914e:	f7fc fea4 	bl	8005e9a <__retarget_lock_acquire_recursive>
 8009152:	89ab      	ldrh	r3, [r5, #12]
 8009154:	071b      	lsls	r3, r3, #28
 8009156:	d501      	bpl.n	800915c <_vfiprintf_r+0x34>
 8009158:	692b      	ldr	r3, [r5, #16]
 800915a:	b99b      	cbnz	r3, 8009184 <_vfiprintf_r+0x5c>
 800915c:	4629      	mov	r1, r5
 800915e:	4630      	mov	r0, r6
 8009160:	f000 f93a 	bl	80093d8 <__swsetup_r>
 8009164:	b170      	cbz	r0, 8009184 <_vfiprintf_r+0x5c>
 8009166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009168:	07dc      	lsls	r4, r3, #31
 800916a:	d504      	bpl.n	8009176 <_vfiprintf_r+0x4e>
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	b01d      	add	sp, #116	; 0x74
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009176:	89ab      	ldrh	r3, [r5, #12]
 8009178:	0598      	lsls	r0, r3, #22
 800917a:	d4f7      	bmi.n	800916c <_vfiprintf_r+0x44>
 800917c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800917e:	f7fc fe8d 	bl	8005e9c <__retarget_lock_release_recursive>
 8009182:	e7f3      	b.n	800916c <_vfiprintf_r+0x44>
 8009184:	2300      	movs	r3, #0
 8009186:	9309      	str	r3, [sp, #36]	; 0x24
 8009188:	2320      	movs	r3, #32
 800918a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800918e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009192:	2330      	movs	r3, #48	; 0x30
 8009194:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009348 <_vfiprintf_r+0x220>
 8009198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800919c:	f04f 0901 	mov.w	r9, #1
 80091a0:	4623      	mov	r3, r4
 80091a2:	469a      	mov	sl, r3
 80091a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091a8:	b10a      	cbz	r2, 80091ae <_vfiprintf_r+0x86>
 80091aa:	2a25      	cmp	r2, #37	; 0x25
 80091ac:	d1f9      	bne.n	80091a2 <_vfiprintf_r+0x7a>
 80091ae:	ebba 0b04 	subs.w	fp, sl, r4
 80091b2:	d00b      	beq.n	80091cc <_vfiprintf_r+0xa4>
 80091b4:	465b      	mov	r3, fp
 80091b6:	4622      	mov	r2, r4
 80091b8:	4629      	mov	r1, r5
 80091ba:	4630      	mov	r0, r6
 80091bc:	f7ff ffa2 	bl	8009104 <__sfputs_r>
 80091c0:	3001      	adds	r0, #1
 80091c2:	f000 80a9 	beq.w	8009318 <_vfiprintf_r+0x1f0>
 80091c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091c8:	445a      	add	r2, fp
 80091ca:	9209      	str	r2, [sp, #36]	; 0x24
 80091cc:	f89a 3000 	ldrb.w	r3, [sl]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 80a1 	beq.w	8009318 <_vfiprintf_r+0x1f0>
 80091d6:	2300      	movs	r3, #0
 80091d8:	f04f 32ff 	mov.w	r2, #4294967295
 80091dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091e0:	f10a 0a01 	add.w	sl, sl, #1
 80091e4:	9304      	str	r3, [sp, #16]
 80091e6:	9307      	str	r3, [sp, #28]
 80091e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091ec:	931a      	str	r3, [sp, #104]	; 0x68
 80091ee:	4654      	mov	r4, sl
 80091f0:	2205      	movs	r2, #5
 80091f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091f6:	4854      	ldr	r0, [pc, #336]	; (8009348 <_vfiprintf_r+0x220>)
 80091f8:	f7f6 fff2 	bl	80001e0 <memchr>
 80091fc:	9a04      	ldr	r2, [sp, #16]
 80091fe:	b9d8      	cbnz	r0, 8009238 <_vfiprintf_r+0x110>
 8009200:	06d1      	lsls	r1, r2, #27
 8009202:	bf44      	itt	mi
 8009204:	2320      	movmi	r3, #32
 8009206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800920a:	0713      	lsls	r3, r2, #28
 800920c:	bf44      	itt	mi
 800920e:	232b      	movmi	r3, #43	; 0x2b
 8009210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009214:	f89a 3000 	ldrb.w	r3, [sl]
 8009218:	2b2a      	cmp	r3, #42	; 0x2a
 800921a:	d015      	beq.n	8009248 <_vfiprintf_r+0x120>
 800921c:	9a07      	ldr	r2, [sp, #28]
 800921e:	4654      	mov	r4, sl
 8009220:	2000      	movs	r0, #0
 8009222:	f04f 0c0a 	mov.w	ip, #10
 8009226:	4621      	mov	r1, r4
 8009228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800922c:	3b30      	subs	r3, #48	; 0x30
 800922e:	2b09      	cmp	r3, #9
 8009230:	d94d      	bls.n	80092ce <_vfiprintf_r+0x1a6>
 8009232:	b1b0      	cbz	r0, 8009262 <_vfiprintf_r+0x13a>
 8009234:	9207      	str	r2, [sp, #28]
 8009236:	e014      	b.n	8009262 <_vfiprintf_r+0x13a>
 8009238:	eba0 0308 	sub.w	r3, r0, r8
 800923c:	fa09 f303 	lsl.w	r3, r9, r3
 8009240:	4313      	orrs	r3, r2
 8009242:	9304      	str	r3, [sp, #16]
 8009244:	46a2      	mov	sl, r4
 8009246:	e7d2      	b.n	80091ee <_vfiprintf_r+0xc6>
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	1d19      	adds	r1, r3, #4
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	9103      	str	r1, [sp, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	bfbb      	ittet	lt
 8009254:	425b      	neglt	r3, r3
 8009256:	f042 0202 	orrlt.w	r2, r2, #2
 800925a:	9307      	strge	r3, [sp, #28]
 800925c:	9307      	strlt	r3, [sp, #28]
 800925e:	bfb8      	it	lt
 8009260:	9204      	strlt	r2, [sp, #16]
 8009262:	7823      	ldrb	r3, [r4, #0]
 8009264:	2b2e      	cmp	r3, #46	; 0x2e
 8009266:	d10c      	bne.n	8009282 <_vfiprintf_r+0x15a>
 8009268:	7863      	ldrb	r3, [r4, #1]
 800926a:	2b2a      	cmp	r3, #42	; 0x2a
 800926c:	d134      	bne.n	80092d8 <_vfiprintf_r+0x1b0>
 800926e:	9b03      	ldr	r3, [sp, #12]
 8009270:	1d1a      	adds	r2, r3, #4
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	9203      	str	r2, [sp, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	bfb8      	it	lt
 800927a:	f04f 33ff 	movlt.w	r3, #4294967295
 800927e:	3402      	adds	r4, #2
 8009280:	9305      	str	r3, [sp, #20]
 8009282:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009358 <_vfiprintf_r+0x230>
 8009286:	7821      	ldrb	r1, [r4, #0]
 8009288:	2203      	movs	r2, #3
 800928a:	4650      	mov	r0, sl
 800928c:	f7f6 ffa8 	bl	80001e0 <memchr>
 8009290:	b138      	cbz	r0, 80092a2 <_vfiprintf_r+0x17a>
 8009292:	9b04      	ldr	r3, [sp, #16]
 8009294:	eba0 000a 	sub.w	r0, r0, sl
 8009298:	2240      	movs	r2, #64	; 0x40
 800929a:	4082      	lsls	r2, r0
 800929c:	4313      	orrs	r3, r2
 800929e:	3401      	adds	r4, #1
 80092a0:	9304      	str	r3, [sp, #16]
 80092a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a6:	4829      	ldr	r0, [pc, #164]	; (800934c <_vfiprintf_r+0x224>)
 80092a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092ac:	2206      	movs	r2, #6
 80092ae:	f7f6 ff97 	bl	80001e0 <memchr>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d03f      	beq.n	8009336 <_vfiprintf_r+0x20e>
 80092b6:	4b26      	ldr	r3, [pc, #152]	; (8009350 <_vfiprintf_r+0x228>)
 80092b8:	bb1b      	cbnz	r3, 8009302 <_vfiprintf_r+0x1da>
 80092ba:	9b03      	ldr	r3, [sp, #12]
 80092bc:	3307      	adds	r3, #7
 80092be:	f023 0307 	bic.w	r3, r3, #7
 80092c2:	3308      	adds	r3, #8
 80092c4:	9303      	str	r3, [sp, #12]
 80092c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c8:	443b      	add	r3, r7
 80092ca:	9309      	str	r3, [sp, #36]	; 0x24
 80092cc:	e768      	b.n	80091a0 <_vfiprintf_r+0x78>
 80092ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80092d2:	460c      	mov	r4, r1
 80092d4:	2001      	movs	r0, #1
 80092d6:	e7a6      	b.n	8009226 <_vfiprintf_r+0xfe>
 80092d8:	2300      	movs	r3, #0
 80092da:	3401      	adds	r4, #1
 80092dc:	9305      	str	r3, [sp, #20]
 80092de:	4619      	mov	r1, r3
 80092e0:	f04f 0c0a 	mov.w	ip, #10
 80092e4:	4620      	mov	r0, r4
 80092e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092ea:	3a30      	subs	r2, #48	; 0x30
 80092ec:	2a09      	cmp	r2, #9
 80092ee:	d903      	bls.n	80092f8 <_vfiprintf_r+0x1d0>
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d0c6      	beq.n	8009282 <_vfiprintf_r+0x15a>
 80092f4:	9105      	str	r1, [sp, #20]
 80092f6:	e7c4      	b.n	8009282 <_vfiprintf_r+0x15a>
 80092f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80092fc:	4604      	mov	r4, r0
 80092fe:	2301      	movs	r3, #1
 8009300:	e7f0      	b.n	80092e4 <_vfiprintf_r+0x1bc>
 8009302:	ab03      	add	r3, sp, #12
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	462a      	mov	r2, r5
 8009308:	4b12      	ldr	r3, [pc, #72]	; (8009354 <_vfiprintf_r+0x22c>)
 800930a:	a904      	add	r1, sp, #16
 800930c:	4630      	mov	r0, r6
 800930e:	f7fb fe4b 	bl	8004fa8 <_printf_float>
 8009312:	4607      	mov	r7, r0
 8009314:	1c78      	adds	r0, r7, #1
 8009316:	d1d6      	bne.n	80092c6 <_vfiprintf_r+0x19e>
 8009318:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800931a:	07d9      	lsls	r1, r3, #31
 800931c:	d405      	bmi.n	800932a <_vfiprintf_r+0x202>
 800931e:	89ab      	ldrh	r3, [r5, #12]
 8009320:	059a      	lsls	r2, r3, #22
 8009322:	d402      	bmi.n	800932a <_vfiprintf_r+0x202>
 8009324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009326:	f7fc fdb9 	bl	8005e9c <__retarget_lock_release_recursive>
 800932a:	89ab      	ldrh	r3, [r5, #12]
 800932c:	065b      	lsls	r3, r3, #25
 800932e:	f53f af1d 	bmi.w	800916c <_vfiprintf_r+0x44>
 8009332:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009334:	e71c      	b.n	8009170 <_vfiprintf_r+0x48>
 8009336:	ab03      	add	r3, sp, #12
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	462a      	mov	r2, r5
 800933c:	4b05      	ldr	r3, [pc, #20]	; (8009354 <_vfiprintf_r+0x22c>)
 800933e:	a904      	add	r1, sp, #16
 8009340:	4630      	mov	r0, r6
 8009342:	f7fc f8d5 	bl	80054f0 <_printf_i>
 8009346:	e7e4      	b.n	8009312 <_vfiprintf_r+0x1ea>
 8009348:	080099c9 	.word	0x080099c9
 800934c:	080099d3 	.word	0x080099d3
 8009350:	08004fa9 	.word	0x08004fa9
 8009354:	08009105 	.word	0x08009105
 8009358:	080099cf 	.word	0x080099cf

0800935c <__swbuf_r>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	460e      	mov	r6, r1
 8009360:	4614      	mov	r4, r2
 8009362:	4605      	mov	r5, r0
 8009364:	b118      	cbz	r0, 800936e <__swbuf_r+0x12>
 8009366:	6a03      	ldr	r3, [r0, #32]
 8009368:	b90b      	cbnz	r3, 800936e <__swbuf_r+0x12>
 800936a:	f7fc fc7f 	bl	8005c6c <__sinit>
 800936e:	69a3      	ldr	r3, [r4, #24]
 8009370:	60a3      	str	r3, [r4, #8]
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	071a      	lsls	r2, r3, #28
 8009376:	d525      	bpl.n	80093c4 <__swbuf_r+0x68>
 8009378:	6923      	ldr	r3, [r4, #16]
 800937a:	b31b      	cbz	r3, 80093c4 <__swbuf_r+0x68>
 800937c:	6823      	ldr	r3, [r4, #0]
 800937e:	6922      	ldr	r2, [r4, #16]
 8009380:	1a98      	subs	r0, r3, r2
 8009382:	6963      	ldr	r3, [r4, #20]
 8009384:	b2f6      	uxtb	r6, r6
 8009386:	4283      	cmp	r3, r0
 8009388:	4637      	mov	r7, r6
 800938a:	dc04      	bgt.n	8009396 <__swbuf_r+0x3a>
 800938c:	4621      	mov	r1, r4
 800938e:	4628      	mov	r0, r5
 8009390:	f7ff fa2a 	bl	80087e8 <_fflush_r>
 8009394:	b9e0      	cbnz	r0, 80093d0 <__swbuf_r+0x74>
 8009396:	68a3      	ldr	r3, [r4, #8]
 8009398:	3b01      	subs	r3, #1
 800939a:	60a3      	str	r3, [r4, #8]
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	1c5a      	adds	r2, r3, #1
 80093a0:	6022      	str	r2, [r4, #0]
 80093a2:	701e      	strb	r6, [r3, #0]
 80093a4:	6962      	ldr	r2, [r4, #20]
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d004      	beq.n	80093b6 <__swbuf_r+0x5a>
 80093ac:	89a3      	ldrh	r3, [r4, #12]
 80093ae:	07db      	lsls	r3, r3, #31
 80093b0:	d506      	bpl.n	80093c0 <__swbuf_r+0x64>
 80093b2:	2e0a      	cmp	r6, #10
 80093b4:	d104      	bne.n	80093c0 <__swbuf_r+0x64>
 80093b6:	4621      	mov	r1, r4
 80093b8:	4628      	mov	r0, r5
 80093ba:	f7ff fa15 	bl	80087e8 <_fflush_r>
 80093be:	b938      	cbnz	r0, 80093d0 <__swbuf_r+0x74>
 80093c0:	4638      	mov	r0, r7
 80093c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c4:	4621      	mov	r1, r4
 80093c6:	4628      	mov	r0, r5
 80093c8:	f000 f806 	bl	80093d8 <__swsetup_r>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d0d5      	beq.n	800937c <__swbuf_r+0x20>
 80093d0:	f04f 37ff 	mov.w	r7, #4294967295
 80093d4:	e7f4      	b.n	80093c0 <__swbuf_r+0x64>
	...

080093d8 <__swsetup_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4b2a      	ldr	r3, [pc, #168]	; (8009484 <__swsetup_r+0xac>)
 80093dc:	4605      	mov	r5, r0
 80093de:	6818      	ldr	r0, [r3, #0]
 80093e0:	460c      	mov	r4, r1
 80093e2:	b118      	cbz	r0, 80093ec <__swsetup_r+0x14>
 80093e4:	6a03      	ldr	r3, [r0, #32]
 80093e6:	b90b      	cbnz	r3, 80093ec <__swsetup_r+0x14>
 80093e8:	f7fc fc40 	bl	8005c6c <__sinit>
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093f2:	0718      	lsls	r0, r3, #28
 80093f4:	d422      	bmi.n	800943c <__swsetup_r+0x64>
 80093f6:	06d9      	lsls	r1, r3, #27
 80093f8:	d407      	bmi.n	800940a <__swsetup_r+0x32>
 80093fa:	2309      	movs	r3, #9
 80093fc:	602b      	str	r3, [r5, #0]
 80093fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009402:	81a3      	strh	r3, [r4, #12]
 8009404:	f04f 30ff 	mov.w	r0, #4294967295
 8009408:	e034      	b.n	8009474 <__swsetup_r+0x9c>
 800940a:	0758      	lsls	r0, r3, #29
 800940c:	d512      	bpl.n	8009434 <__swsetup_r+0x5c>
 800940e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009410:	b141      	cbz	r1, 8009424 <__swsetup_r+0x4c>
 8009412:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009416:	4299      	cmp	r1, r3
 8009418:	d002      	beq.n	8009420 <__swsetup_r+0x48>
 800941a:	4628      	mov	r0, r5
 800941c:	f7fd fbc2 	bl	8006ba4 <_free_r>
 8009420:	2300      	movs	r3, #0
 8009422:	6363      	str	r3, [r4, #52]	; 0x34
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800942a:	81a3      	strh	r3, [r4, #12]
 800942c:	2300      	movs	r3, #0
 800942e:	6063      	str	r3, [r4, #4]
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	6023      	str	r3, [r4, #0]
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	f043 0308 	orr.w	r3, r3, #8
 800943a:	81a3      	strh	r3, [r4, #12]
 800943c:	6923      	ldr	r3, [r4, #16]
 800943e:	b94b      	cbnz	r3, 8009454 <__swsetup_r+0x7c>
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800944a:	d003      	beq.n	8009454 <__swsetup_r+0x7c>
 800944c:	4621      	mov	r1, r4
 800944e:	4628      	mov	r0, r5
 8009450:	f000 f884 	bl	800955c <__smakebuf_r>
 8009454:	89a0      	ldrh	r0, [r4, #12]
 8009456:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800945a:	f010 0301 	ands.w	r3, r0, #1
 800945e:	d00a      	beq.n	8009476 <__swsetup_r+0x9e>
 8009460:	2300      	movs	r3, #0
 8009462:	60a3      	str	r3, [r4, #8]
 8009464:	6963      	ldr	r3, [r4, #20]
 8009466:	425b      	negs	r3, r3
 8009468:	61a3      	str	r3, [r4, #24]
 800946a:	6923      	ldr	r3, [r4, #16]
 800946c:	b943      	cbnz	r3, 8009480 <__swsetup_r+0xa8>
 800946e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009472:	d1c4      	bne.n	80093fe <__swsetup_r+0x26>
 8009474:	bd38      	pop	{r3, r4, r5, pc}
 8009476:	0781      	lsls	r1, r0, #30
 8009478:	bf58      	it	pl
 800947a:	6963      	ldrpl	r3, [r4, #20]
 800947c:	60a3      	str	r3, [r4, #8]
 800947e:	e7f4      	b.n	800946a <__swsetup_r+0x92>
 8009480:	2000      	movs	r0, #0
 8009482:	e7f7      	b.n	8009474 <__swsetup_r+0x9c>
 8009484:	20000064 	.word	0x20000064

08009488 <_raise_r>:
 8009488:	291f      	cmp	r1, #31
 800948a:	b538      	push	{r3, r4, r5, lr}
 800948c:	4604      	mov	r4, r0
 800948e:	460d      	mov	r5, r1
 8009490:	d904      	bls.n	800949c <_raise_r+0x14>
 8009492:	2316      	movs	r3, #22
 8009494:	6003      	str	r3, [r0, #0]
 8009496:	f04f 30ff 	mov.w	r0, #4294967295
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800949e:	b112      	cbz	r2, 80094a6 <_raise_r+0x1e>
 80094a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094a4:	b94b      	cbnz	r3, 80094ba <_raise_r+0x32>
 80094a6:	4620      	mov	r0, r4
 80094a8:	f000 f830 	bl	800950c <_getpid_r>
 80094ac:	462a      	mov	r2, r5
 80094ae:	4601      	mov	r1, r0
 80094b0:	4620      	mov	r0, r4
 80094b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094b6:	f000 b817 	b.w	80094e8 <_kill_r>
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d00a      	beq.n	80094d4 <_raise_r+0x4c>
 80094be:	1c59      	adds	r1, r3, #1
 80094c0:	d103      	bne.n	80094ca <_raise_r+0x42>
 80094c2:	2316      	movs	r3, #22
 80094c4:	6003      	str	r3, [r0, #0]
 80094c6:	2001      	movs	r0, #1
 80094c8:	e7e7      	b.n	800949a <_raise_r+0x12>
 80094ca:	2400      	movs	r4, #0
 80094cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094d0:	4628      	mov	r0, r5
 80094d2:	4798      	blx	r3
 80094d4:	2000      	movs	r0, #0
 80094d6:	e7e0      	b.n	800949a <_raise_r+0x12>

080094d8 <raise>:
 80094d8:	4b02      	ldr	r3, [pc, #8]	; (80094e4 <raise+0xc>)
 80094da:	4601      	mov	r1, r0
 80094dc:	6818      	ldr	r0, [r3, #0]
 80094de:	f7ff bfd3 	b.w	8009488 <_raise_r>
 80094e2:	bf00      	nop
 80094e4:	20000064 	.word	0x20000064

080094e8 <_kill_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4d07      	ldr	r5, [pc, #28]	; (8009508 <_kill_r+0x20>)
 80094ec:	2300      	movs	r3, #0
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	f7f9 f845 	bl	8002584 <_kill>
 80094fa:	1c43      	adds	r3, r0, #1
 80094fc:	d102      	bne.n	8009504 <_kill_r+0x1c>
 80094fe:	682b      	ldr	r3, [r5, #0]
 8009500:	b103      	cbz	r3, 8009504 <_kill_r+0x1c>
 8009502:	6023      	str	r3, [r4, #0]
 8009504:	bd38      	pop	{r3, r4, r5, pc}
 8009506:	bf00      	nop
 8009508:	20000474 	.word	0x20000474

0800950c <_getpid_r>:
 800950c:	f7f9 b832 	b.w	8002574 <_getpid>

08009510 <__swhatbuf_r>:
 8009510:	b570      	push	{r4, r5, r6, lr}
 8009512:	460c      	mov	r4, r1
 8009514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009518:	2900      	cmp	r1, #0
 800951a:	b096      	sub	sp, #88	; 0x58
 800951c:	4615      	mov	r5, r2
 800951e:	461e      	mov	r6, r3
 8009520:	da0d      	bge.n	800953e <__swhatbuf_r+0x2e>
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009528:	f04f 0100 	mov.w	r1, #0
 800952c:	bf0c      	ite	eq
 800952e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009532:	2340      	movne	r3, #64	; 0x40
 8009534:	2000      	movs	r0, #0
 8009536:	6031      	str	r1, [r6, #0]
 8009538:	602b      	str	r3, [r5, #0]
 800953a:	b016      	add	sp, #88	; 0x58
 800953c:	bd70      	pop	{r4, r5, r6, pc}
 800953e:	466a      	mov	r2, sp
 8009540:	f000 f848 	bl	80095d4 <_fstat_r>
 8009544:	2800      	cmp	r0, #0
 8009546:	dbec      	blt.n	8009522 <__swhatbuf_r+0x12>
 8009548:	9901      	ldr	r1, [sp, #4]
 800954a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800954e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009552:	4259      	negs	r1, r3
 8009554:	4159      	adcs	r1, r3
 8009556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800955a:	e7eb      	b.n	8009534 <__swhatbuf_r+0x24>

0800955c <__smakebuf_r>:
 800955c:	898b      	ldrh	r3, [r1, #12]
 800955e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009560:	079d      	lsls	r5, r3, #30
 8009562:	4606      	mov	r6, r0
 8009564:	460c      	mov	r4, r1
 8009566:	d507      	bpl.n	8009578 <__smakebuf_r+0x1c>
 8009568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	6123      	str	r3, [r4, #16]
 8009570:	2301      	movs	r3, #1
 8009572:	6163      	str	r3, [r4, #20]
 8009574:	b002      	add	sp, #8
 8009576:	bd70      	pop	{r4, r5, r6, pc}
 8009578:	ab01      	add	r3, sp, #4
 800957a:	466a      	mov	r2, sp
 800957c:	f7ff ffc8 	bl	8009510 <__swhatbuf_r>
 8009580:	9900      	ldr	r1, [sp, #0]
 8009582:	4605      	mov	r5, r0
 8009584:	4630      	mov	r0, r6
 8009586:	f7fd fb81 	bl	8006c8c <_malloc_r>
 800958a:	b948      	cbnz	r0, 80095a0 <__smakebuf_r+0x44>
 800958c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009590:	059a      	lsls	r2, r3, #22
 8009592:	d4ef      	bmi.n	8009574 <__smakebuf_r+0x18>
 8009594:	f023 0303 	bic.w	r3, r3, #3
 8009598:	f043 0302 	orr.w	r3, r3, #2
 800959c:	81a3      	strh	r3, [r4, #12]
 800959e:	e7e3      	b.n	8009568 <__smakebuf_r+0xc>
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	6020      	str	r0, [r4, #0]
 80095a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a8:	81a3      	strh	r3, [r4, #12]
 80095aa:	9b00      	ldr	r3, [sp, #0]
 80095ac:	6163      	str	r3, [r4, #20]
 80095ae:	9b01      	ldr	r3, [sp, #4]
 80095b0:	6120      	str	r0, [r4, #16]
 80095b2:	b15b      	cbz	r3, 80095cc <__smakebuf_r+0x70>
 80095b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095b8:	4630      	mov	r0, r6
 80095ba:	f000 f81d 	bl	80095f8 <_isatty_r>
 80095be:	b128      	cbz	r0, 80095cc <__smakebuf_r+0x70>
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	f023 0303 	bic.w	r3, r3, #3
 80095c6:	f043 0301 	orr.w	r3, r3, #1
 80095ca:	81a3      	strh	r3, [r4, #12]
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	431d      	orrs	r5, r3
 80095d0:	81a5      	strh	r5, [r4, #12]
 80095d2:	e7cf      	b.n	8009574 <__smakebuf_r+0x18>

080095d4 <_fstat_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	4d07      	ldr	r5, [pc, #28]	; (80095f4 <_fstat_r+0x20>)
 80095d8:	2300      	movs	r3, #0
 80095da:	4604      	mov	r4, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	4611      	mov	r1, r2
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	f7f9 f82e 	bl	8002642 <_fstat>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	d102      	bne.n	80095f0 <_fstat_r+0x1c>
 80095ea:	682b      	ldr	r3, [r5, #0]
 80095ec:	b103      	cbz	r3, 80095f0 <_fstat_r+0x1c>
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	bd38      	pop	{r3, r4, r5, pc}
 80095f2:	bf00      	nop
 80095f4:	20000474 	.word	0x20000474

080095f8 <_isatty_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	4d06      	ldr	r5, [pc, #24]	; (8009614 <_isatty_r+0x1c>)
 80095fc:	2300      	movs	r3, #0
 80095fe:	4604      	mov	r4, r0
 8009600:	4608      	mov	r0, r1
 8009602:	602b      	str	r3, [r5, #0]
 8009604:	f7f9 f82d 	bl	8002662 <_isatty>
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	d102      	bne.n	8009612 <_isatty_r+0x1a>
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	b103      	cbz	r3, 8009612 <_isatty_r+0x1a>
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	bd38      	pop	{r3, r4, r5, pc}
 8009614:	20000474 	.word	0x20000474

08009618 <_init>:
 8009618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961a:	bf00      	nop
 800961c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800961e:	bc08      	pop	{r3}
 8009620:	469e      	mov	lr, r3
 8009622:	4770      	bx	lr

08009624 <_fini>:
 8009624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009626:	bf00      	nop
 8009628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962a:	bc08      	pop	{r3}
 800962c:	469e      	mov	lr, r3
 800962e:	4770      	bx	lr
