
receiverComeback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003514  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080036ac  080036ac  000136ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037a4  080037a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080037a4  080037a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037ac  080037ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  080037c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080037c0  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f81  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b1f  00000000  00000000  00028000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00029b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000057d  00000000  00000000  0002a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015071  00000000  00000000  0002a805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d16  00000000  00000000  0003f876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008187d  00000000  00000000  0004958c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c54  00000000  00000000  000cae0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000cca60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003694 	.word	0x08003694

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003694 	.word	0x08003694

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004d4:	b4b0      	push	{r4, r5, r7}
 80004d6:	b08f      	sub	sp, #60	; 0x3c
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80004dc:	f240 13b1 	movw	r3, #433	; 0x1b1
 80004e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80004e2:	2307      	movs	r3, #7
 80004e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004e8:	2307      	movs	r3, #7
 80004ea:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80004ee:	2301      	movs	r3, #1
 80004f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80004f4:	23ff      	movs	r3, #255	; 0xff
 80004f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80004fa:	2364      	movs	r3, #100	; 0x64
 80004fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000500:	2308      	movs	r3, #8
 8000502:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	461d      	mov	r5, r3
 8000508:	f107 040c 	add.w	r4, r7, #12
 800050c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800050e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000514:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000518:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	373c      	adds	r7, #60	; 0x3c
 8000520:	46bd      	mov	sp, r7
 8000522:	bcb0      	pop	{r4, r5, r7}
 8000524:	4770      	bx	lr

08000526 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000526:	b580      	push	{r7, lr}
 8000528:	b084      	sub	sp, #16
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000530:	2101      	movs	r1, #1
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f000 f99f 	bl	8000876 <LoRa_read>
 8000538:	4603      	mov	r3, r0
 800053a:	73bb      	strb	r3, [r7, #14]
	data = read;
 800053c:	7bbb      	ldrb	r3, [r7, #14]
 800053e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d107      	bne.n	8000556 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000546:	7bbb      	ldrb	r3, [r7, #14]
 8000548:	f023 0307 	bic.w	r3, r3, #7
 800054c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	61da      	str	r2, [r3, #28]
 8000554:	e03e      	b.n	80005d4 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d10c      	bne.n	8000576 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800055c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000560:	f023 0307 	bic.w	r3, r3, #7
 8000564:	b25b      	sxtb	r3, r3
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	b25b      	sxtb	r3, r3
 800056c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2201      	movs	r2, #1
 8000572:	61da      	str	r2, [r3, #28]
 8000574:	e02e      	b.n	80005d4 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	2b03      	cmp	r3, #3
 800057a:	d10c      	bne.n	8000596 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800057c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000580:	f023 0307 	bic.w	r3, r3, #7
 8000584:	b25b      	sxtb	r3, r3
 8000586:	f043 0303 	orr.w	r3, r3, #3
 800058a:	b25b      	sxtb	r3, r3
 800058c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2203      	movs	r2, #3
 8000592:	61da      	str	r2, [r3, #28]
 8000594:	e01e      	b.n	80005d4 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	2b05      	cmp	r3, #5
 800059a:	d10c      	bne.n	80005b6 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 800059c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005a0:	f023 0307 	bic.w	r3, r3, #7
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	f043 0305 	orr.w	r3, r3, #5
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2205      	movs	r2, #5
 80005b2:	61da      	str	r2, [r3, #28]
 80005b4:	e00e      	b.n	80005d4 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	2b06      	cmp	r3, #6
 80005ba:	d10b      	bne.n	80005d4 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80005bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005c0:	f023 0307 	bic.w	r3, r3, #7
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	f043 0306 	orr.w	r3, r3, #6
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2206      	movs	r2, #6
 80005d2:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	461a      	mov	r2, r3
 80005d8:	2101      	movs	r1, #1
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f000 f965 	bl	80008aa <LoRa_write>
	//HAL_Delay(10);
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	889b      	ldrh	r3, [r3, #4]
 8000600:	2200      	movs	r2, #0
 8000602:	4619      	mov	r1, r3
 8000604:	f001 f9e8 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	6998      	ldr	r0, [r3, #24]
 800060c:	88fa      	ldrh	r2, [r7, #6]
 800060e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	f002 f9b6 	bl	8002984 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000618:	bf00      	nop
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4618      	mov	r0, r3
 8000620:	f002 feba 	bl	8003398 <HAL_SPI_GetState>
 8000624:	4603      	mov	r3, r0
 8000626:	2b01      	cmp	r3, #1
 8000628:	d1f7      	bne.n	800061a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6998      	ldr	r0, [r3, #24]
 800062e:	8b3a      	ldrh	r2, [r7, #24]
 8000630:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000634:	6839      	ldr	r1, [r7, #0]
 8000636:	f002 faf1 	bl	8002c1c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800063a:	bf00      	nop
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fea9 	bl	8003398 <HAL_SPI_GetState>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	d1f7      	bne.n	800063c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	889b      	ldrh	r3, [r3, #4]
 8000654:	2201      	movs	r2, #1
 8000656:	4619      	mov	r1, r3
 8000658:	f001 f9be 	bl	80019d8 <HAL_GPIO_WritePin>
}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4613      	mov	r3, r2
 8000672:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	889b      	ldrh	r3, [r3, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	4619      	mov	r1, r3
 8000680:	f001 f9aa 	bl	80019d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6998      	ldr	r0, [r3, #24]
 8000688:	88fa      	ldrh	r2, [r7, #6]
 800068a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800068e:	68b9      	ldr	r1, [r7, #8]
 8000690:	f002 f978 	bl	8002984 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000694:	bf00      	nop
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fe7c 	bl	8003398 <HAL_SPI_GetState>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d1f7      	bne.n	8000696 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6998      	ldr	r0, [r3, #24]
 80006aa:	8b3a      	ldrh	r2, [r7, #24]
 80006ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006b0:	6839      	ldr	r1, [r7, #0]
 80006b2:	f002 f967 	bl	8002984 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006b6:	bf00      	nop
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fe6b 	bl	8003398 <HAL_SPI_GetState>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d1f7      	bne.n	80006b8 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	889b      	ldrh	r3, [r3, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	4619      	mov	r1, r3
 80006d4:	f001 f980 	bl	80019d8 <HAL_GPIO_WritePin>
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	04db      	lsls	r3, r3, #19
 80006ee:	115b      	asrs	r3, r3, #5
 80006f0:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	0c1b      	lsrs	r3, r3, #16
 80006f6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80006f8:	7afb      	ldrb	r3, [r7, #11]
 80006fa:	461a      	mov	r2, r3
 80006fc:	2106      	movs	r1, #6
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f8d3 	bl	80008aa <LoRa_write>
	HAL_Delay(5);
 8000704:	2005      	movs	r0, #5
 8000706:	f000 fd47 	bl	8001198 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000710:	7afb      	ldrb	r3, [r7, #11]
 8000712:	461a      	mov	r2, r3
 8000714:	2107      	movs	r1, #7
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 f8c7 	bl	80008aa <LoRa_write>
	HAL_Delay(5);
 800071c:	2005      	movs	r0, #5
 800071e:	f000 fd3b 	bl	8001198 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000726:	7afb      	ldrb	r3, [r7, #11]
 8000728:	461a      	mov	r2, r3
 800072a:	2108      	movs	r1, #8
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 f8bc 	bl	80008aa <LoRa_write>
	HAL_Delay(5);
 8000732:	2005      	movs	r0, #5
 8000734:	f000 fd30 	bl	8001198 <HAL_Delay>
}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	2b0c      	cmp	r3, #12
 800074e:	dd01      	ble.n	8000754 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000750:	230c      	movs	r3, #12
 8000752:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2b06      	cmp	r3, #6
 8000758:	dc01      	bgt.n	800075e <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800075a:	2307      	movs	r3, #7
 800075c:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800075e:	211e      	movs	r1, #30
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f888 	bl	8000876 <LoRa_read>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800076a:	200a      	movs	r0, #10
 800076c:	f000 fd14 	bl	8001198 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	b2da      	uxtb	r2, r3
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4413      	add	r3, r2
 8000782:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000784:	7bbb      	ldrb	r3, [r7, #14]
 8000786:	461a      	mov	r2, r3
 8000788:	211e      	movs	r1, #30
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 f88d 	bl	80008aa <LoRa_write>
	HAL_Delay(10);
 8000790:	200a      	movs	r0, #10
 8000792:	f000 fd01 	bl	8001198 <HAL_Delay>
}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	460b      	mov	r3, r1
 80007a8:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007aa:	78fb      	ldrb	r3, [r7, #3]
 80007ac:	461a      	mov	r2, r3
 80007ae:	2109      	movs	r1, #9
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 f87a 	bl	80008aa <LoRa_write>
	HAL_Delay(10);
 80007b6:	200a      	movs	r0, #10
 80007b8:	f000 fcee 	bl	8001198 <HAL_Delay>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	2b2c      	cmp	r3, #44	; 0x2c
 80007d8:	d801      	bhi.n	80007de <LoRa_setOCP+0x1a>
		current = 45;
 80007da:	232d      	movs	r3, #45	; 0x2d
 80007dc:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	2bf0      	cmp	r3, #240	; 0xf0
 80007e2:	d901      	bls.n	80007e8 <LoRa_setOCP+0x24>
		current = 240;
 80007e4:	23f0      	movs	r3, #240	; 0xf0
 80007e6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b78      	cmp	r3, #120	; 0x78
 80007ec:	d809      	bhi.n	8000802 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	3b2d      	subs	r3, #45	; 0x2d
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <LoRa_setOCP+0x78>)
 80007f4:	fb82 1203 	smull	r1, r2, r2, r3
 80007f8:	1052      	asrs	r2, r2, #1
 80007fa:	17db      	asrs	r3, r3, #31
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	73fb      	strb	r3, [r7, #15]
 8000800:	e00b      	b.n	800081a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	2bf0      	cmp	r3, #240	; 0xf0
 8000806:	d808      	bhi.n	800081a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	331e      	adds	r3, #30
 800080c:	4a0b      	ldr	r2, [pc, #44]	; (800083c <LoRa_setOCP+0x78>)
 800080e:	fb82 1203 	smull	r1, r2, r2, r3
 8000812:	1092      	asrs	r2, r2, #2
 8000814:	17db      	asrs	r3, r3, #31
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	3320      	adds	r3, #32
 800081e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	461a      	mov	r2, r3
 8000824:	210b      	movs	r1, #11
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f000 f83f 	bl	80008aa <LoRa_write>
	HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f000 fcb3 	bl	8001198 <HAL_Delay>
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	66666667 	.word	0x66666667

08000840 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000848:	211e      	movs	r1, #30
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f000 f813 	bl	8000876 <LoRa_read>
 8000850:	4603      	mov	r3, r0
 8000852:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	f043 0307 	orr.w	r3, r3, #7
 800085a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	461a      	mov	r2, r3
 8000860:	211e      	movs	r1, #30
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f821 	bl	80008aa <LoRa_write>
	HAL_Delay(10);
 8000868:	200a      	movs	r0, #10
 800086a:	f000 fc95 	bl	8001198 <HAL_Delay>
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af02      	add	r7, sp, #8
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	460b      	mov	r3, r1
 8000880:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000882:	78fb      	ldrb	r3, [r7, #3]
 8000884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000888:	b2db      	uxtb	r3, r3
 800088a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800088c:	f107 030f 	add.w	r3, r7, #15
 8000890:	f107 010e 	add.w	r1, r7, #14
 8000894:	2201      	movs	r2, #1
 8000896:	9200      	str	r2, [sp, #0]
 8000898:	2201      	movs	r2, #1
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff fea4 	bl	80005e8 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af02      	add	r7, sp, #8
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	70fb      	strb	r3, [r7, #3]
 80008b6:	4613      	mov	r3, r2
 80008b8:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	73bb      	strb	r3, [r7, #14]
	data = value;
 80008c4:	78bb      	ldrb	r3, [r7, #2]
 80008c6:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80008c8:	f107 030f 	add.w	r3, r7, #15
 80008cc:	f107 010e 	add.w	r1, r7, #14
 80008d0:	2201      	movs	r2, #1
 80008d2:	9200      	str	r2, [sp, #0]
 80008d4:	2201      	movs	r2, #1
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff fec4 	bl	8000664 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

	return 1;
 80008ec:	2301      	movs	r3, #1
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000902:	2105      	movs	r1, #5
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff fe0e 	bl	8000526 <LoRa_gotoMode>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	4613      	mov	r3, r2
 8000920:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
 800092a:	e007      	b.n	800093c <LoRa_receive+0x28>
		data[i]=0;
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	4413      	add	r3, r2
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	3301      	adds	r3, #1
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	429a      	cmp	r2, r3
 8000942:	dbf3      	blt.n	800092c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000944:	2101      	movs	r1, #1
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f7ff fded 	bl	8000526 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 800094c:	2112      	movs	r1, #18
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f7ff ff91 	bl	8000876 <LoRa_read>
 8000954:	4603      	mov	r3, r0
 8000956:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000958:	7cfb      	ldrb	r3, [r7, #19]
 800095a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095e:	2b00      	cmp	r3, #0
 8000960:	d034      	beq.n	80009cc <LoRa_receive+0xb8>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000962:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000966:	481e      	ldr	r0, [pc, #120]	; (80009e0 <LoRa_receive+0xcc>)
 8000968:	f001 f868 	bl	8001a3c <HAL_GPIO_TogglePin>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800096c:	22ff      	movs	r2, #255	; 0xff
 800096e:	2112      	movs	r1, #18
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f7ff ff9a 	bl	80008aa <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000976:	2113      	movs	r1, #19
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f7ff ff7c 	bl	8000876 <LoRa_read>
 800097e:	4603      	mov	r3, r0
 8000980:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000982:	2110      	movs	r1, #16
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff ff76 	bl	8000876 <LoRa_read>
 800098a:	4603      	mov	r3, r0
 800098c:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800098e:	7cfb      	ldrb	r3, [r7, #19]
 8000990:	461a      	mov	r2, r3
 8000992:	210d      	movs	r1, #13
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	f7ff ff88 	bl	80008aa <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800099a:	7cba      	ldrb	r2, [r7, #18]
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4293      	cmp	r3, r2
 80009a0:	bf28      	it	cs
 80009a2:	4613      	movcs	r3, r2
 80009a4:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	e00b      	b.n	80009c4 <LoRa_receive+0xb0>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	18d4      	adds	r4, r2, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff ff5e 	bl	8000876 <LoRa_read>
 80009ba:	4603      	mov	r3, r0
 80009bc:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	7ffb      	ldrb	r3, [r7, #31]
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbef      	blt.n	80009ac <LoRa_receive+0x98>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80009cc:	2105      	movs	r1, #5
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f7ff fda9 	bl	8000526 <LoRa_gotoMode>
    return min;
 80009d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3724      	adds	r7, #36	; 0x24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	bf00      	nop
 80009e0:	40020c00 	.word	0x40020c00

080009e4 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff79 	bl	80008e4 <LoRa_isvalid>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f000 8093 	beq.w	8000b20 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80009fa:	2100      	movs	r1, #0
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff fd92 	bl	8000526 <LoRa_gotoMode>
			HAL_Delay(10);
 8000a02:	200a      	movs	r0, #10
 8000a04:	f000 fbc8 	bl	8001198 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000a08:	2101      	movs	r1, #1
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ff33 	bl	8000876 <LoRa_read>
 8000a10:	4603      	mov	r3, r0
 8000a12:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000a14:	200a      	movs	r0, #10
 8000a16:	f000 fbbf 	bl	8001198 <HAL_Delay>
			data = read | 0x80;
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a20:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000a22:	7bbb      	ldrb	r3, [r7, #14]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2101      	movs	r1, #1
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff3e 	bl	80008aa <LoRa_write>
			HAL_Delay(100);
 8000a2e:	2064      	movs	r0, #100	; 0x64
 8000a30:	f000 fbb2 	bl	8001198 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6a1b      	ldr	r3, [r3, #32]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fe50 	bl	80006e0 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000a46:	4619      	mov	r1, r3
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff fea8 	bl	800079e <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000a54:	4619      	mov	r1, r3
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff feb4 	bl	80007c4 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000a5c:	2223      	movs	r2, #35	; 0x23
 8000a5e:	210c      	movs	r1, #12
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff22 	bl	80008aa <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff feea 	bl	8000840 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff fe63 	bl	8000740 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000a7a:	22ff      	movs	r2, #255	; 0xff
 8000a7c:	211f      	movs	r1, #31
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ff13 	bl	80008aa <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a8e:	011b      	lsls	r3, r3, #4
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4413      	add	r3, r2
 8000a9e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	211d      	movs	r1, #29
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff feff 	bl	80008aa <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2120      	movs	r1, #32
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fef5 	bl	80008aa <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	2121      	movs	r1, #33	; 0x21
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff feed 	bl	80008aa <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000ad0:	2140      	movs	r1, #64	; 0x40
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff fecf 	bl	8000876 <LoRa_read>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000ae2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000ae4:	7bbb      	ldrb	r3, [r7, #14]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	2140      	movs	r1, #64	; 0x40
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff fedd 	bl	80008aa <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000af0:	2101      	movs	r1, #1
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff fd17 	bl	8000526 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2201      	movs	r2, #1
 8000afc:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000afe:	200a      	movs	r0, #10
 8000b00:	f000 fb4a 	bl	8001198 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000b04:	2142      	movs	r1, #66	; 0x42
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff feb5 	bl	8000876 <LoRa_read>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b12      	cmp	r3, #18
 8000b14:	d101      	bne.n	8000b1a <LoRa_init+0x136>
				return LORA_OK;
 8000b16:	23c8      	movs	r3, #200	; 0xc8
 8000b18:	e004      	b.n	8000b24 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000b1a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000b1e:	e001      	b.n	8000b24 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000b20:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b38      	ldr	r3, [pc, #224]	; (8000c28 <MX_GPIO_Init+0xfc>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a37      	ldr	r2, [pc, #220]	; (8000c28 <MX_GPIO_Init+0xfc>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b35      	ldr	r3, [pc, #212]	; (8000c28 <MX_GPIO_Init+0xfc>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b31      	ldr	r3, [pc, #196]	; (8000c28 <MX_GPIO_Init+0xfc>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a30      	ldr	r2, [pc, #192]	; (8000c28 <MX_GPIO_Init+0xfc>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <MX_GPIO_Init+0xfc>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <MX_GPIO_Init+0xfc>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a29      	ldr	r2, [pc, #164]	; (8000c28 <MX_GPIO_Init+0xfc>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <MX_GPIO_Init+0xfc>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <MX_GPIO_Init+0xfc>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <MX_GPIO_Init+0xfc>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <MX_GPIO_Init+0xfc>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000bb8:	481c      	ldr	r0, [pc, #112]	; (8000c2c <MX_GPIO_Init+0x100>)
 8000bba:	f000 ff0d 	bl	80019d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NSS_Pin|RESET_Pin;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4817      	ldr	r0, [pc, #92]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000bd2:	f000 fc67 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4811      	ldr	r0, [pc, #68]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000bec:	f000 fc5a 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bf0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4808      	ldr	r0, [pc, #32]	; (8000c2c <MX_GPIO_Init+0x100>)
 8000c0a:	f000 fc4b 	bl	80014a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2008      	movs	r0, #8
 8000c14:	f000 fbd4 	bl	80013c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c18:	2008      	movs	r0, #8
 8000c1a:	f000 fbfd 	bl	8001418 <HAL_NVIC_EnableIRQ>

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020c00 	.word	0x40020c00
 8000c30:	40020400 	.word	0x40020400

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b5b0      	push	{r4, r5, r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3a:	f000 fa3b 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3e:	f000 f89b 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c42:	f7ff ff73 	bl	8000b2c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c46:	f000 f90f 	bl	8000e68 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  myLoRa = newLoRa();
 8000c4a:	4c41      	ldr	r4, [pc, #260]	; (8000d50 <main+0x11c>)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fc40 	bl	80004d4 <newLoRa>
 8000c54:	4625      	mov	r5, r4
 8000c56:	463c      	mov	r4, r7
 8000c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c60:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000c64:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myLoRa.CS_port         = NSS_GPIO_Port;
 8000c68:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <main+0x11c>)
 8000c6a:	4a3a      	ldr	r2, [pc, #232]	; (8000d54 <main+0x120>)
 8000c6c:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8000c6e:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <main+0x11c>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RESET_GPIO_Port;
 8000c74:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <main+0x11c>)
 8000c76:	4a37      	ldr	r2, [pc, #220]	; (8000d54 <main+0x120>)
 8000c78:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RESET_Pin;
 8000c7a:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <main+0x11c>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8000c80:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <main+0x11c>)
 8000c82:	4a34      	ldr	r2, [pc, #208]	; (8000d54 <main+0x120>)
 8000c84:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 8000c86:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <main+0x11c>)
 8000c88:	2204      	movs	r2, #4
 8000c8a:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8000c8c:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <main+0x11c>)
 8000c8e:	4a32      	ldr	r2, [pc, #200]	; (8000d58 <main+0x124>)
 8000c90:	619a      	str	r2, [r3, #24]
  HAL_Delay(10);
 8000c92:	200a      	movs	r0, #10
 8000c94:	f000 fa80 	bl	8001198 <HAL_Delay>
  while (status != 1) {
 8000c98:	e014      	b.n	8000cc4 <main+0x90>
	  if (LoRa_init(&myLoRa) != LORA_OK) {
 8000c9a:	482d      	ldr	r0, [pc, #180]	; (8000d50 <main+0x11c>)
 8000c9c:	f7ff fea2 	bl	80009e4 <LoRa_init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2bc8      	cmp	r3, #200	; 0xc8
 8000ca4:	d005      	beq.n	8000cb2 <main+0x7e>
	  	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000ca6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000caa:	482c      	ldr	r0, [pc, #176]	; (8000d5c <main+0x128>)
 8000cac:	f000 fec6 	bl	8001a3c <HAL_GPIO_TogglePin>
 8000cb0:	e005      	b.n	8000cbe <main+0x8a>
	  } else {
	  	  status = 1;
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <main+0x12c>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]
	  	  LoRa_startReceiving(&myLoRa);
 8000cb8:	4825      	ldr	r0, [pc, #148]	; (8000d50 <main+0x11c>)
 8000cba:	f7ff fe1e 	bl	80008fa <LoRa_startReceiving>
	  }
	  HAL_Delay(15);
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f000 fa6a 	bl	8001198 <HAL_Delay>
  while (status != 1) {
 8000cc4:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <main+0x12c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d1e6      	bne.n	8000c9a <main+0x66>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (status) {
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <main+0x12c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0fb      	beq.n	8000ccc <main+0x98>
		  LoRa_receive(&myLoRa, &data, 1);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4923      	ldr	r1, [pc, #140]	; (8000d64 <main+0x130>)
 8000cd8:	481d      	ldr	r0, [pc, #116]	; (8000d50 <main+0x11c>)
 8000cda:	f7ff fe1b 	bl	8000914 <LoRa_receive>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000cde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce2:	481e      	ldr	r0, [pc, #120]	; (8000d5c <main+0x128>)
 8000ce4:	f000 feaa 	bl	8001a3c <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 8000ce8:	20fa      	movs	r0, #250	; 0xfa
 8000cea:	f000 fa55 	bl	8001198 <HAL_Delay>
		  if (data<=30) {
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <main+0x130>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b1e      	cmp	r3, #30
 8000cf4:	d815      	bhi.n	8000d22 <main+0xee>
			  tempHistory[tempCounter] = data;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <main+0x134>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <main+0x130>)
 8000cfc:	7811      	ldrb	r1, [r2, #0]
 8000cfe:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <main+0x138>)
 8000d00:	54d1      	strb	r1, [r2, r3]
			  tempCounter++;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <main+0x134>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <main+0x134>)
 8000d0a:	6013      	str	r3, [r2, #0]
			  tempCounter = tempCounter > 49 ? 0 : tempCounter;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <main+0x134>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b31      	cmp	r3, #49	; 0x31
 8000d12:	dc02      	bgt.n	8000d1a <main+0xe6>
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <main+0x134>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	e000      	b.n	8000d1c <main+0xe8>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <main+0x134>)
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e7d4      	b.n	8000ccc <main+0x98>
		  } else {
			  pressureHistory[pressureCounter] = data;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <main+0x13c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <main+0x130>)
 8000d28:	7811      	ldrb	r1, [r2, #0]
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <main+0x140>)
 8000d2c:	54d1      	strb	r1, [r2, r3]
			  pressureCounter++;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <main+0x13c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <main+0x13c>)
 8000d36:	6013      	str	r3, [r2, #0]
			  pressureCounter = pressureCounter > 49 ? 0 : pressureCounter;
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <main+0x13c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b31      	cmp	r3, #49	; 0x31
 8000d3e:	dc02      	bgt.n	8000d46 <main+0x112>
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <main+0x13c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	e000      	b.n	8000d48 <main+0x114>
 8000d46:	2300      	movs	r3, #0
 8000d48:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <main+0x13c>)
 8000d4a:	6013      	str	r3, [r2, #0]
	  if (status) {
 8000d4c:	e7be      	b.n	8000ccc <main+0x98>
 8000d4e:	bf00      	nop
 8000d50:	20000028 	.word	0x20000028
 8000d54:	40020400 	.word	0x40020400
 8000d58:	200000cc 	.word	0x200000cc
 8000d5c:	40020c00 	.word	0x40020c00
 8000d60:	20000054 	.word	0x20000054
 8000d64:	20000058 	.word	0x20000058
 8000d68:	200000c4 	.word	0x200000c4
 8000d6c:	2000005c 	.word	0x2000005c
 8000d70:	200000c8 	.word	0x200000c8
 8000d74:	20000090 	.word	0x20000090

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b094      	sub	sp, #80	; 0x50
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	2230      	movs	r2, #48	; 0x30
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 fc58 	bl	800363c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <SystemClock_Config+0xc8>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <SystemClock_Config+0xc8>)
 8000da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <SystemClock_Config+0xc8>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <SystemClock_Config+0xcc>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a20      	ldr	r2, [pc, #128]	; (8000e44 <SystemClock_Config+0xcc>)
 8000dc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <SystemClock_Config+0xcc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de8:	2304      	movs	r3, #4
 8000dea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000dec:	2348      	movs	r3, #72	; 0x48
 8000dee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000df4:	2308      	movs	r3, #8
 8000df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 0320 	add.w	r3, r7, #32
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 fe69 	bl	8001ad4 <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e08:	f000 f81e 	bl	8000e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e10:	2302      	movs	r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	2102      	movs	r1, #2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 f97b 	bl	8002124 <HAL_RCC_ClockConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e34:	f000 f808 	bl	8000e48 <Error_Handler>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	3750      	adds	r7, #80	; 0x50
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <Error_Handler+0x8>

08000e52 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <MX_SPI1_Init+0x64>)
 8000e6e:	4a18      	ldr	r2, [pc, #96]	; (8000ed0 <MX_SPI1_Init+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_SPI1_Init+0x64>)
 8000e74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_SPI1_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <MX_SPI1_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_SPI1_Init+0x64>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_SPI1_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_SPI1_Init+0x64>)
 8000e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_SPI1_Init+0x64>)
 8000e9c:	2218      	movs	r2, #24
 8000e9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <MX_SPI1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_SPI1_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <MX_SPI1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_SPI1_Init+0x64>)
 8000eb4:	220a      	movs	r2, #10
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <MX_SPI1_Init+0x64>)
 8000eba:	f001 fbc7 	bl	800264c <HAL_SPI_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ec4:	f7ff ffc0 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200000cc 	.word	0x200000cc
 8000ed0:	40013000 	.word	0x40013000

08000ed4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a1d      	ldr	r2, [pc, #116]	; (8000f68 <HAL_SPI_MspInit+0x94>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d133      	bne.n	8000f5e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_SPI_MspInit+0x98>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <HAL_SPI_MspInit+0x98>)
 8000f00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_SPI_MspInit+0x98>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_SPI_MspInit+0x98>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <HAL_SPI_MspInit+0x98>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_SPI_MspInit+0x98>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f2e:	23e0      	movs	r3, #224	; 0xe0
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <HAL_SPI_MspInit+0x9c>)
 8000f4a:	f000 faab 	bl	80014a4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2023      	movs	r0, #35	; 0x23
 8000f54:	f000 fa34 	bl	80013c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f58:	2023      	movs	r0, #35	; 0x23
 8000f5a:	f000 fa5d 	bl	8001418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40013000 	.word	0x40013000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fb2:	2007      	movs	r0, #7
 8000fb4:	f000 f9e4 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8a2 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800101c:	2004      	movs	r0, #4
 800101e:	f000 fd35 	bl	8001a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <SPI1_IRQHandler+0x10>)
 800102e:	f002 f8b5 	bl	800319c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200000cc 	.word	0x200000cc

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001098 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001066:	490e      	ldr	r1, [pc, #56]	; (80010a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800107c:	4c0b      	ldr	r4, [pc, #44]	; (80010ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800108a:	f7ff ffd7 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800108e:	f002 fadd 	bl	800364c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fdcf 	bl	8000c34 <main>
  bx  lr    
 8001096:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001098:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010a4:	080037b4 	.word	0x080037b4
  ldr r2, =_sbss
 80010a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010ac:	20000128 	.word	0x20000128

080010b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <HAL_Init+0x40>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_Init+0x40>)
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_Init+0x40>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f94f 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f808 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff ff44 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x54>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x58>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f996 	bl	8001448 <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00e      	b.n	8001144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d80a      	bhi.n	8001142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f000 f944 	bl	80013c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <HAL_InitTick+0x5c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000000 	.word	0x20000000
 8001150:	20000008 	.word	0x20000008
 8001154:	20000004 	.word	0x20000004

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008
 800117c:	20000124 	.word	0x20000124

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000124 	.word	0x20000124

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	; (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b07      	cmp	r3, #7
 800138c:	d00f      	beq.n	80013ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b06      	cmp	r3, #6
 8001392:	d00c      	beq.n	80013ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b05      	cmp	r3, #5
 8001398:	d009      	beq.n	80013ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b04      	cmp	r3, #4
 800139e:	d006      	beq.n	80013ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d003      	beq.n	80013ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 80013a6:	2190      	movs	r1, #144	; 0x90
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80013aa:	f7ff fd52 	bl	8000e52 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ff16 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	080036ac 	.word	0x080036ac

080013c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	d903      	bls.n	80013e0 <HAL_NVIC_SetPriority+0x20>
 80013d8:	21a8      	movs	r1, #168	; 0xa8
 80013da:	480e      	ldr	r0, [pc, #56]	; (8001414 <HAL_NVIC_SetPriority+0x54>)
 80013dc:	f7ff fd39 	bl	8000e52 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b0f      	cmp	r3, #15
 80013e4:	d903      	bls.n	80013ee <HAL_NVIC_SetPriority+0x2e>
 80013e6:	21a9      	movs	r1, #169	; 0xa9
 80013e8:	480a      	ldr	r0, [pc, #40]	; (8001414 <HAL_NVIC_SetPriority+0x54>)
 80013ea:	f7ff fd32 	bl	8000e52 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ee:	f7ff ff1b 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	68b9      	ldr	r1, [r7, #8]
 80013f8:	6978      	ldr	r0, [r7, #20]
 80013fa:	f7ff ff6b 	bl	80012d4 <NVIC_EncodePriority>
 80013fe:	4602      	mov	r2, r0
 8001400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff3a 	bl	8001280 <__NVIC_SetPriority>
}
 800140c:	bf00      	nop
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	080036ac 	.word	0x080036ac

08001418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	da03      	bge.n	8001432 <HAL_NVIC_EnableIRQ+0x1a>
 800142a:	21bc      	movs	r1, #188	; 0xbc
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_NVIC_EnableIRQ+0x2c>)
 800142e:	f7ff fd10 	bl	8000e52 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff04 	bl	8001244 <__NVIC_EnableIRQ>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	080036ac 	.word	0x080036ac

08001448 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff73 	bl	800133c <SysTick_Config>
 8001456:	4603      	mov	r3, r0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d004      	beq.n	800147e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2280      	movs	r2, #128	; 0x80
 8001478:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00c      	b.n	8001498 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2205      	movs	r2, #5
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a33      	ldr	r2, [pc, #204]	; (800158c <HAL_GPIO_Init+0xe8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d017      	beq.n	80014f2 <HAL_GPIO_Init+0x4e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a32      	ldr	r2, [pc, #200]	; (8001590 <HAL_GPIO_Init+0xec>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0x4e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a31      	ldr	r2, [pc, #196]	; (8001594 <HAL_GPIO_Init+0xf0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00f      	beq.n	80014f2 <HAL_GPIO_Init+0x4e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a30      	ldr	r2, [pc, #192]	; (8001598 <HAL_GPIO_Init+0xf4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d00b      	beq.n	80014f2 <HAL_GPIO_Init+0x4e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a2f      	ldr	r2, [pc, #188]	; (800159c <HAL_GPIO_Init+0xf8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d007      	beq.n	80014f2 <HAL_GPIO_Init+0x4e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a2e      	ldr	r2, [pc, #184]	; (80015a0 <HAL_GPIO_Init+0xfc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x4e>
 80014ea:	21ac      	movs	r1, #172	; 0xac
 80014ec:	482d      	ldr	r0, [pc, #180]	; (80015a4 <HAL_GPIO_Init+0x100>)
 80014ee:	f7ff fcb0 	bl	8000e52 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_GPIO_Init+0x64>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0c1b      	lsrs	r3, r3, #16
 8001502:	041b      	lsls	r3, r3, #16
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x6c>
 8001508:	21ad      	movs	r1, #173	; 0xad
 800150a:	4826      	ldr	r0, [pc, #152]	; (80015a4 <HAL_GPIO_Init+0x100>)
 800150c:	f7ff fca1 	bl	8000e52 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d035      	beq.n	8001584 <HAL_GPIO_Init+0xe0>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d031      	beq.n	8001584 <HAL_GPIO_Init+0xe0>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b11      	cmp	r3, #17
 8001526:	d02d      	beq.n	8001584 <HAL_GPIO_Init+0xe0>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d029      	beq.n	8001584 <HAL_GPIO_Init+0xe0>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b12      	cmp	r3, #18
 8001536:	d025      	beq.n	8001584 <HAL_GPIO_Init+0xe0>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001540:	d020      	beq.n	8001584 <HAL_GPIO_Init+0xe0>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800154a:	d01b      	beq.n	8001584 <HAL_GPIO_Init+0xe0>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001554:	d016      	beq.n	8001584 <HAL_GPIO_Init+0xe0>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800155e:	d011      	beq.n	8001584 <HAL_GPIO_Init+0xe0>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001568:	d00c      	beq.n	8001584 <HAL_GPIO_Init+0xe0>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001572:	d007      	beq.n	8001584 <HAL_GPIO_Init+0xe0>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0xe0>
 800157c:	21ae      	movs	r1, #174	; 0xae
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <HAL_GPIO_Init+0x100>)
 8001580:	f7ff fc67 	bl	8000e52 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	e20c      	b.n	80019a4 <HAL_GPIO_Init+0x500>
 800158a:	bf00      	nop
 800158c:	40020000 	.word	0x40020000
 8001590:	40020400 	.word	0x40020400
 8001594:	40020800 	.word	0x40020800
 8001598:	40020c00 	.word	0x40020c00
 800159c:	40021000 	.word	0x40021000
 80015a0:	40021c00 	.word	0x40021c00
 80015a4:	080036e8 	.word	0x080036e8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 81ec 	bne.w	800199e <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d005      	beq.n	80015de <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d144      	bne.n	8001668 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00f      	beq.n	8001606 <HAL_GPIO_Init+0x162>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d00b      	beq.n	8001606 <HAL_GPIO_Init+0x162>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x162>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x162>
 80015fe:	21c0      	movs	r1, #192	; 0xc0
 8001600:	4884      	ldr	r0, [pc, #528]	; (8001814 <HAL_GPIO_Init+0x370>)
 8001602:	f7ff fc26 	bl	8000e52 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800163c:	2201      	movs	r2, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	f003 0201 	and.w	r2, r3, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b03      	cmp	r3, #3
 8001672:	d027      	beq.n	80016c4 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00b      	beq.n	8001694 <HAL_GPIO_Init+0x1f0>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d007      	beq.n	8001694 <HAL_GPIO_Init+0x1f0>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x1f0>
 800168c:	21d1      	movs	r1, #209	; 0xd1
 800168e:	4861      	ldr	r0, [pc, #388]	; (8001814 <HAL_GPIO_Init+0x370>)
 8001690:	f7ff fbdf 	bl	8000e52 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	f040 80a3 	bne.w	8001818 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d077      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b09      	cmp	r3, #9
 80016e0:	d073      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d06f      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d06b      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d067      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d063      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d05f      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d05b      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d057      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d053      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d04f      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b04      	cmp	r3, #4
 8001730:	d04b      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	2b04      	cmp	r3, #4
 8001738:	d047      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	2b04      	cmp	r3, #4
 8001740:	d043      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	2b05      	cmp	r3, #5
 8001748:	d03f      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	2b05      	cmp	r3, #5
 8001750:	d03b      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	2b05      	cmp	r3, #5
 8001758:	d037      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	2b06      	cmp	r3, #6
 8001760:	d033      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2b06      	cmp	r3, #6
 8001768:	d02f      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d02b      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	2b06      	cmp	r3, #6
 8001778:	d027      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	2b07      	cmp	r3, #7
 8001780:	d023      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	2b07      	cmp	r3, #7
 8001788:	d01f      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	2b07      	cmp	r3, #7
 8001790:	d01b      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	2b08      	cmp	r3, #8
 8001798:	d017      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	2b0a      	cmp	r3, #10
 80017a0:	d013      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	2b09      	cmp	r3, #9
 80017a8:	d00f      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	2b09      	cmp	r3, #9
 80017b0:	d00b      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2b0f      	cmp	r3, #15
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x326>
 80017c2:	21de      	movs	r1, #222	; 0xde
 80017c4:	4813      	ldr	r0, [pc, #76]	; (8001814 <HAL_GPIO_Init+0x370>)
 80017c6:	f7ff fb44 	bl	8000e52 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	69b9      	ldr	r1, [r7, #24]
 800180e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001812:	e001      	b.n	8001818 <HAL_GPIO_Init+0x374>
 8001814:	080036e8 	.word	0x080036e8
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0203 	and.w	r2, r3, #3
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80a2 	beq.w	800199e <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <HAL_GPIO_Init+0x514>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a55      	ldr	r2, [pc, #340]	; (80019b8 <HAL_GPIO_Init+0x514>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <HAL_GPIO_Init+0x514>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001876:	4a51      	ldr	r2, [pc, #324]	; (80019bc <HAL_GPIO_Init+0x518>)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a48      	ldr	r2, [pc, #288]	; (80019c0 <HAL_GPIO_Init+0x51c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d019      	beq.n	80018d6 <HAL_GPIO_Init+0x432>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a47      	ldr	r2, [pc, #284]	; (80019c4 <HAL_GPIO_Init+0x520>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x42e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a46      	ldr	r2, [pc, #280]	; (80019c8 <HAL_GPIO_Init+0x524>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x42a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a45      	ldr	r2, [pc, #276]	; (80019cc <HAL_GPIO_Init+0x528>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x426>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a44      	ldr	r2, [pc, #272]	; (80019d0 <HAL_GPIO_Init+0x52c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x422>
 80018c2:	2304      	movs	r3, #4
 80018c4:	e008      	b.n	80018d8 <HAL_GPIO_Init+0x434>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x434>
 80018ca:	2303      	movs	r3, #3
 80018cc:	e004      	b.n	80018d8 <HAL_GPIO_Init+0x434>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_Init+0x434>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x434>
 80018d6:	2300      	movs	r3, #0
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	f002 0203 	and.w	r2, r2, #3
 80018de:	0092      	lsls	r2, r2, #2
 80018e0:	4093      	lsls	r3, r2
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e8:	4934      	ldr	r1, [pc, #208]	; (80019bc <HAL_GPIO_Init+0x518>)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f6:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <HAL_GPIO_Init+0x530>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800191a:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <HAL_GPIO_Init+0x530>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001920:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <HAL_GPIO_Init+0x530>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001944:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <HAL_GPIO_Init+0x530>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <HAL_GPIO_Init+0x530>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800196e:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <HAL_GPIO_Init+0x530>)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001974:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <HAL_GPIO_Init+0x530>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001998:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <HAL_GPIO_Init+0x530>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3301      	adds	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	f67f adfe 	bls.w	80015a8 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40013800 	.word	0x40013800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40020800 	.word	0x40020800
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40013c00 	.word	0x40013c00

080019d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	807b      	strh	r3, [r7, #2]
 80019e4:	4613      	mov	r3, r2
 80019e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80019e8:	887b      	ldrh	r3, [r7, #2]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <HAL_GPIO_WritePin+0x20>
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	0c1b      	lsrs	r3, r3, #16
 80019f2:	041b      	lsls	r3, r3, #16
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <HAL_GPIO_WritePin+0x2a>
 80019f8:	f240 119d 	movw	r1, #413	; 0x19d
 80019fc:	480e      	ldr	r0, [pc, #56]	; (8001a38 <HAL_GPIO_WritePin+0x60>)
 80019fe:	f7ff fa28 	bl	8000e52 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001a02:	787b      	ldrb	r3, [r7, #1]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_WritePin+0x40>
 8001a08:	787b      	ldrb	r3, [r7, #1]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d004      	beq.n	8001a18 <HAL_GPIO_WritePin+0x40>
 8001a0e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <HAL_GPIO_WritePin+0x60>)
 8001a14:	f7ff fa1d 	bl	8000e52 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001a18:	787b      	ldrb	r3, [r7, #1]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1e:	887a      	ldrh	r2, [r7, #2]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a24:	e003      	b.n	8001a2e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	041a      	lsls	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	619a      	str	r2, [r3, #24]
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	080036e8 	.word	0x080036e8

08001a3c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001a48:	887b      	ldrh	r3, [r7, #2]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d004      	beq.n	8001a58 <HAL_GPIO_TogglePin+0x1c>
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <HAL_GPIO_TogglePin+0x26>
 8001a58:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001a5c:	480a      	ldr	r0, [pc, #40]	; (8001a88 <HAL_GPIO_TogglePin+0x4c>)
 8001a5e:	f7ff f9f8 	bl	8000e52 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a68:	887a      	ldrh	r2, [r7, #2]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	041a      	lsls	r2, r3, #16
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	400b      	ands	r3, r1
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	619a      	str	r2, [r3, #24]
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	080036e8 	.word	0x080036e8

08001a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d006      	beq.n	8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f806 	bl	8001abc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40013c00 	.word	0x40013c00

08001abc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e314      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b0f      	cmp	r3, #15
 8001aec:	d903      	bls.n	8001af6 <HAL_RCC_OscConfig+0x22>
 8001aee:	21e6      	movs	r1, #230	; 0xe6
 8001af0:	4897      	ldr	r0, [pc, #604]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001af2:	f7ff f9ae 	bl	8000e52 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8088 	beq.w	8001c14 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00d      	beq.n	8001b28 <HAL_RCC_OscConfig+0x54>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b14:	d008      	beq.n	8001b28 <HAL_RCC_OscConfig+0x54>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b1e:	d003      	beq.n	8001b28 <HAL_RCC_OscConfig+0x54>
 8001b20:	21eb      	movs	r1, #235	; 0xeb
 8001b22:	488b      	ldr	r0, [pc, #556]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001b24:	f7ff f995 	bl	8000e52 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b28:	4b8a      	ldr	r3, [pc, #552]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d00c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b34:	4b87      	ldr	r3, [pc, #540]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d112      	bne.n	8001b66 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b40:	4b84      	ldr	r3, [pc, #528]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b4c:	d10b      	bne.n	8001b66 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4e:	4b81      	ldr	r3, [pc, #516]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d05b      	beq.n	8001c12 <HAL_RCC_OscConfig+0x13e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d157      	bne.n	8001c12 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e2d4      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0xaa>
 8001b70:	4b78      	ldr	r3, [pc, #480]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a77      	ldr	r2, [pc, #476]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e01d      	b.n	8001bba <HAL_RCC_OscConfig+0xe6>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0xce>
 8001b88:	4b72      	ldr	r3, [pc, #456]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a71      	ldr	r2, [pc, #452]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6e      	ldr	r2, [pc, #440]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e00b      	b.n	8001bba <HAL_RCC_OscConfig+0xe6>
 8001ba2:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6b      	ldr	r2, [pc, #428]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b69      	ldr	r3, [pc, #420]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a68      	ldr	r2, [pc, #416]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d013      	beq.n	8001bea <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff fadd 	bl	8001180 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bca:	f7ff fad9 	bl	8001180 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b64      	cmp	r3, #100	; 0x64
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e299      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bdc:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0xf6>
 8001be8:	e014      	b.n	8001c14 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7ff fac9 	bl	8001180 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf2:	f7ff fac5 	bl	8001180 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	; 0x64
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e285      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x11e>
 8001c10:	e000      	b.n	8001c14 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d079      	beq.n	8001d14 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <HAL_RCC_OscConfig+0x166>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d004      	beq.n	8001c3a <HAL_RCC_OscConfig+0x166>
 8001c30:	f240 111d 	movw	r1, #285	; 0x11d
 8001c34:	4846      	ldr	r0, [pc, #280]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001c36:	f7ff f90c 	bl	8000e52 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b1f      	cmp	r3, #31
 8001c40:	d904      	bls.n	8001c4c <HAL_RCC_OscConfig+0x178>
 8001c42:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8001c46:	4842      	ldr	r0, [pc, #264]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001c48:	f7ff f903 	bl	8000e52 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c4c:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00b      	beq.n	8001c70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d11c      	bne.n	8001c9e <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c64:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d116      	bne.n	8001c9e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c70:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_OscConfig+0x1b4>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e243      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b32      	ldr	r3, [pc, #200]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	492f      	ldr	r1, [pc, #188]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9c:	e03a      	b.n	8001d14 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d020      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca6:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <HAL_RCC_OscConfig+0x284>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7ff fa68 	bl	8001180 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fa64 	bl	8001180 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e224      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	491c      	ldr	r1, [pc, #112]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
 8001ce6:	e015      	b.n	8001d14 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_RCC_OscConfig+0x284>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7ff fa47 	bl	8001180 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf6:	f7ff fa43 	bl	8001180 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e203      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d045      	beq.n	8001dac <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_RCC_OscConfig+0x266>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d004      	beq.n	8001d3a <HAL_RCC_OscConfig+0x266>
 8001d30:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001d34:	4806      	ldr	r0, [pc, #24]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001d36:	f7ff f88c 	bl	8000e52 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d01e      	beq.n	8001d80 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_RCC_OscConfig+0x288>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff fa1a 	bl	8001180 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	e010      	b.n	8001d72 <HAL_RCC_OscConfig+0x29e>
 8001d50:	08003724 	.word	0x08003724
 8001d54:	40023800 	.word	0x40023800
 8001d58:	42470000 	.word	0x42470000
 8001d5c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff fa0e 	bl	8001180 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e1ce      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x28c>
 8001d7e:	e015      	b.n	8001dac <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d80:	4b5b      	ldr	r3, [pc, #364]	; (8001ef0 <HAL_RCC_OscConfig+0x41c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7ff f9fb 	bl	8001180 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8e:	f7ff f9f7 	bl	8001180 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e1b7      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da0:	4b52      	ldr	r3, [pc, #328]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80b0 	beq.w	8001f1a <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x30c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d008      	beq.n	8001de0 <HAL_RCC_OscConfig+0x30c>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d004      	beq.n	8001de0 <HAL_RCC_OscConfig+0x30c>
 8001dd6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8001dda:	4846      	ldr	r0, [pc, #280]	; (8001ef4 <HAL_RCC_OscConfig+0x420>)
 8001ddc:	f7ff f839 	bl	8000e52 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de0:	4b42      	ldr	r3, [pc, #264]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10f      	bne.n	8001e0c <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	4a3d      	ldr	r2, [pc, #244]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfc:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ef8 <HAL_RCC_OscConfig+0x424>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d118      	bne.n	8001e4a <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e18:	4b37      	ldr	r3, [pc, #220]	; (8001ef8 <HAL_RCC_OscConfig+0x424>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a36      	ldr	r2, [pc, #216]	; (8001ef8 <HAL_RCC_OscConfig+0x424>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e24:	f7ff f9ac 	bl	8001180 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2c:	f7ff f9a8 	bl	8001180 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e168      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <HAL_RCC_OscConfig+0x424>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d106      	bne.n	8001e60 <HAL_RCC_OscConfig+0x38c>
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e56:	4a25      	ldr	r2, [pc, #148]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5e:	e01c      	b.n	8001e9a <HAL_RCC_OscConfig+0x3c6>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d10c      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3ae>
 8001e68:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	6713      	str	r3, [r2, #112]	; 0x70
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e80:	e00b      	b.n	8001e9a <HAL_RCC_OscConfig+0x3c6>
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	4a19      	ldr	r2, [pc, #100]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	4a16      	ldr	r2, [pc, #88]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d015      	beq.n	8001ece <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f96d 	bl	8001180 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7ff f969 	bl	8001180 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e127      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_OscConfig+0x418>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ee      	beq.n	8001eaa <HAL_RCC_OscConfig+0x3d6>
 8001ecc:	e01c      	b.n	8001f08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7ff f957 	bl	8001180 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed4:	e012      	b.n	8001efc <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7ff f953 	bl	8001180 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d909      	bls.n	8001efc <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e111      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	42470e80 	.word	0x42470e80
 8001ef4:	08003724 	.word	0x08003724
 8001ef8:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efc:	4b86      	ldr	r3, [pc, #536]	; (8002118 <HAL_RCC_OscConfig+0x644>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e6      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0e:	4b82      	ldr	r3, [pc, #520]	; (8002118 <HAL_RCC_OscConfig+0x644>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a81      	ldr	r2, [pc, #516]	; (8002118 <HAL_RCC_OscConfig+0x644>)
 8001f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x468>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d008      	beq.n	8001f3c <HAL_RCC_OscConfig+0x468>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d004      	beq.n	8001f3c <HAL_RCC_OscConfig+0x468>
 8001f32:	f240 11cd 	movw	r1, #461	; 0x1cd
 8001f36:	4879      	ldr	r0, [pc, #484]	; (800211c <HAL_RCC_OscConfig+0x648>)
 8001f38:	f7fe ff8b 	bl	8000e52 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80e4 	beq.w	800210e <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f46:	4b74      	ldr	r3, [pc, #464]	; (8002118 <HAL_RCC_OscConfig+0x644>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	f000 80a5 	beq.w	800209e <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	f040 8089 	bne.w	8002070 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_RCC_OscConfig+0x4a6>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f6e:	d004      	beq.n	8001f7a <HAL_RCC_OscConfig+0x4a6>
 8001f70:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8001f74:	4869      	ldr	r0, [pc, #420]	; (800211c <HAL_RCC_OscConfig+0x648>)
 8001f76:	f7fe ff6c 	bl	8000e52 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	2b3f      	cmp	r3, #63	; 0x3f
 8001f80:	d904      	bls.n	8001f8c <HAL_RCC_OscConfig+0x4b8>
 8001f82:	f240 11d7 	movw	r1, #471	; 0x1d7
 8001f86:	4865      	ldr	r0, [pc, #404]	; (800211c <HAL_RCC_OscConfig+0x648>)
 8001f88:	f7fe ff63 	bl	8000e52 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	2b31      	cmp	r3, #49	; 0x31
 8001f92:	d904      	bls.n	8001f9e <HAL_RCC_OscConfig+0x4ca>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8001f9c:	d904      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x4d4>
 8001f9e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001fa2:	485e      	ldr	r0, [pc, #376]	; (800211c <HAL_RCC_OscConfig+0x648>)
 8001fa4:	f7fe ff55 	bl	8000e52 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d010      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x4fe>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d00c      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x4fe>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	2b06      	cmp	r3, #6
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x4fe>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d004      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x4fe>
 8001fc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001fcc:	4853      	ldr	r0, [pc, #332]	; (800211c <HAL_RCC_OscConfig+0x648>)
 8001fce:	f7fe ff40 	bl	8000e52 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d903      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x50e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	d904      	bls.n	8001fec <HAL_RCC_OscConfig+0x518>
 8001fe2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8001fe6:	484d      	ldr	r0, [pc, #308]	; (800211c <HAL_RCC_OscConfig+0x648>)
 8001fe8:	f7fe ff33 	bl	8000e52 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fec:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <HAL_RCC_OscConfig+0x64c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7ff f8c5 	bl	8001180 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffa:	f7ff f8c1 	bl	8001180 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e081      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200c:	4b42      	ldr	r3, [pc, #264]	; (8002118 <HAL_RCC_OscConfig+0x644>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f0      	bne.n	8001ffa <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69da      	ldr	r2, [r3, #28]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	019b      	lsls	r3, r3, #6
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	085b      	lsrs	r3, r3, #1
 8002030:	3b01      	subs	r3, #1
 8002032:	041b      	lsls	r3, r3, #16
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	061b      	lsls	r3, r3, #24
 800203c:	4936      	ldr	r1, [pc, #216]	; (8002118 <HAL_RCC_OscConfig+0x644>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002042:	4b37      	ldr	r3, [pc, #220]	; (8002120 <HAL_RCC_OscConfig+0x64c>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff f89a 	bl	8001180 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002050:	f7ff f896 	bl	8001180 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e056      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_RCC_OscConfig+0x644>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x57c>
 800206e:	e04e      	b.n	800210e <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_RCC_OscConfig+0x64c>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff f883 	bl	8001180 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207e:	f7ff f87f 	bl	8001180 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e03f      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <HAL_RCC_OscConfig+0x644>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x5aa>
 800209c:	e037      	b.n	800210e <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e032      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_RCC_OscConfig+0x644>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d028      	beq.n	800210a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d121      	bne.n	800210a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d11a      	bne.n	800210a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020da:	4013      	ands	r3, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d111      	bne.n	800210a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	3b01      	subs	r3, #1
 80020f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d107      	bne.n	800210a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	08003724 	.word	0x08003724
 8002120:	42470060 	.word	0x42470060

08002124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e174      	b.n	8002422 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_RCC_ClockConfig+0x24>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d904      	bls.n	8002152 <HAL_RCC_ClockConfig+0x2e>
 8002148:	f240 215a 	movw	r1, #602	; 0x25a
 800214c:	487b      	ldr	r0, [pc, #492]	; (800233c <HAL_RCC_ClockConfig+0x218>)
 800214e:	f7fe fe80 	bl	8000e52 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d019      	beq.n	800218c <HAL_RCC_ClockConfig+0x68>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d016      	beq.n	800218c <HAL_RCC_ClockConfig+0x68>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d013      	beq.n	800218c <HAL_RCC_ClockConfig+0x68>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d010      	beq.n	800218c <HAL_RCC_ClockConfig+0x68>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b04      	cmp	r3, #4
 800216e:	d00d      	beq.n	800218c <HAL_RCC_ClockConfig+0x68>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b05      	cmp	r3, #5
 8002174:	d00a      	beq.n	800218c <HAL_RCC_ClockConfig+0x68>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b06      	cmp	r3, #6
 800217a:	d007      	beq.n	800218c <HAL_RCC_ClockConfig+0x68>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2b07      	cmp	r3, #7
 8002180:	d004      	beq.n	800218c <HAL_RCC_ClockConfig+0x68>
 8002182:	f240 215b 	movw	r1, #603	; 0x25b
 8002186:	486d      	ldr	r0, [pc, #436]	; (800233c <HAL_RCC_ClockConfig+0x218>)
 8002188:	f7fe fe63 	bl	8000e52 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b6c      	ldr	r3, [pc, #432]	; (8002340 <HAL_RCC_ClockConfig+0x21c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d90c      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b69      	ldr	r3, [pc, #420]	; (8002340 <HAL_RCC_ClockConfig+0x21c>)
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b67      	ldr	r3, [pc, #412]	; (8002340 <HAL_RCC_ClockConfig+0x21c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e136      	b.n	8002422 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d049      	beq.n	8002254 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4b5d      	ldr	r3, [pc, #372]	; (8002344 <HAL_RCC_ClockConfig+0x220>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a5c      	ldr	r2, [pc, #368]	; (8002344 <HAL_RCC_ClockConfig+0x220>)
 80021d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e4:	4b57      	ldr	r3, [pc, #348]	; (8002344 <HAL_RCC_ClockConfig+0x220>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a56      	ldr	r2, [pc, #344]	; (8002344 <HAL_RCC_ClockConfig+0x220>)
 80021ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d024      	beq.n	8002242 <HAL_RCC_ClockConfig+0x11e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b80      	cmp	r3, #128	; 0x80
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_ClockConfig+0x11e>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b90      	cmp	r3, #144	; 0x90
 8002206:	d01c      	beq.n	8002242 <HAL_RCC_ClockConfig+0x11e>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2ba0      	cmp	r3, #160	; 0xa0
 800220e:	d018      	beq.n	8002242 <HAL_RCC_ClockConfig+0x11e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2bb0      	cmp	r3, #176	; 0xb0
 8002216:	d014      	beq.n	8002242 <HAL_RCC_ClockConfig+0x11e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2bc0      	cmp	r3, #192	; 0xc0
 800221e:	d010      	beq.n	8002242 <HAL_RCC_ClockConfig+0x11e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2bd0      	cmp	r3, #208	; 0xd0
 8002226:	d00c      	beq.n	8002242 <HAL_RCC_ClockConfig+0x11e>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2be0      	cmp	r3, #224	; 0xe0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_ClockConfig+0x11e>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2bf0      	cmp	r3, #240	; 0xf0
 8002236:	d004      	beq.n	8002242 <HAL_RCC_ClockConfig+0x11e>
 8002238:	f240 217e 	movw	r1, #638	; 0x27e
 800223c:	483f      	ldr	r0, [pc, #252]	; (800233c <HAL_RCC_ClockConfig+0x218>)
 800223e:	f7fe fe08 	bl	8000e52 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002242:	4b40      	ldr	r3, [pc, #256]	; (8002344 <HAL_RCC_ClockConfig+0x220>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	493d      	ldr	r1, [pc, #244]	; (8002344 <HAL_RCC_ClockConfig+0x220>)
 8002250:	4313      	orrs	r3, r2
 8002252:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d059      	beq.n	8002314 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d010      	beq.n	800228a <HAL_RCC_ClockConfig+0x166>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d00c      	beq.n	800228a <HAL_RCC_ClockConfig+0x166>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d008      	beq.n	800228a <HAL_RCC_ClockConfig+0x166>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b03      	cmp	r3, #3
 800227e:	d004      	beq.n	800228a <HAL_RCC_ClockConfig+0x166>
 8002280:	f240 2185 	movw	r1, #645	; 0x285
 8002284:	482d      	ldr	r0, [pc, #180]	; (800233c <HAL_RCC_ClockConfig+0x218>)
 8002286:	f7fe fde4 	bl	8000e52 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <HAL_RCC_ClockConfig+0x220>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d119      	bne.n	80022d2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0bf      	b.n	8002422 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCC_ClockConfig+0x220>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0af      	b.n	8002422 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_RCC_ClockConfig+0x220>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0a7      	b.n	8002422 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_RCC_ClockConfig+0x220>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 0203 	bic.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4919      	ldr	r1, [pc, #100]	; (8002344 <HAL_RCC_ClockConfig+0x220>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e4:	f7fe ff4c 	bl	8001180 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7fe ff48 	bl	8001180 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e08f      	b.n	8002422 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_RCC_ClockConfig+0x220>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 020c 	and.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	429a      	cmp	r2, r3
 8002312:	d1eb      	bne.n	80022ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_RCC_ClockConfig+0x21c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d212      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <HAL_RCC_ClockConfig+0x21c>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_ClockConfig+0x21c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d007      	beq.n	8002348 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e072      	b.n	8002422 <HAL_RCC_ClockConfig+0x2fe>
 800233c:	08003724 	.word	0x08003724
 8002340:	40023c00 	.word	0x40023c00
 8002344:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d025      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d018      	beq.n	800238e <HAL_RCC_ClockConfig+0x26a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002364:	d013      	beq.n	800238e <HAL_RCC_ClockConfig+0x26a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800236e:	d00e      	beq.n	800238e <HAL_RCC_ClockConfig+0x26a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x26a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002382:	d004      	beq.n	800238e <HAL_RCC_ClockConfig+0x26a>
 8002384:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002388:	4828      	ldr	r0, [pc, #160]	; (800242c <HAL_RCC_ClockConfig+0x308>)
 800238a:	f7fe fd62 	bl	8000e52 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238e:	4b28      	ldr	r3, [pc, #160]	; (8002430 <HAL_RCC_ClockConfig+0x30c>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	4925      	ldr	r1, [pc, #148]	; (8002430 <HAL_RCC_ClockConfig+0x30c>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d026      	beq.n	80023fa <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d018      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x2c2>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023bc:	d013      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x2c2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80023c6:	d00e      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x2c2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80023d0:	d009      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x2c2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80023da:	d004      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x2c2>
 80023dc:	f240 21ca 	movw	r1, #714	; 0x2ca
 80023e0:	4812      	ldr	r0, [pc, #72]	; (800242c <HAL_RCC_ClockConfig+0x308>)
 80023e2:	f7fe fd36 	bl	8000e52 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_RCC_ClockConfig+0x30c>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	490e      	ldr	r1, [pc, #56]	; (8002430 <HAL_RCC_ClockConfig+0x30c>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023fa:	f000 f821 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_ClockConfig+0x30c>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	490a      	ldr	r1, [pc, #40]	; (8002434 <HAL_RCC_ClockConfig+0x310>)
 800240c:	5ccb      	ldrb	r3, [r1, r3]
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x314>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x318>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fe6c 	bl	80010f8 <HAL_InitTick>

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	08003724 	.word	0x08003724
 8002430:	40023800 	.word	0x40023800
 8002434:	08003794 	.word	0x08003794
 8002438:	20000000 	.word	0x20000000
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002444:	b094      	sub	sp, #80	; 0x50
 8002446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	647b      	str	r3, [r7, #68]	; 0x44
 800244c:	2300      	movs	r3, #0
 800244e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002450:	2300      	movs	r3, #0
 8002452:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002458:	4b79      	ldr	r3, [pc, #484]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b08      	cmp	r3, #8
 8002462:	d00d      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x40>
 8002464:	2b08      	cmp	r3, #8
 8002466:	f200 80e1 	bhi.w	800262c <HAL_RCC_GetSysClockFreq+0x1ec>
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x34>
 800246e:	2b04      	cmp	r3, #4
 8002470:	d003      	beq.n	800247a <HAL_RCC_GetSysClockFreq+0x3a>
 8002472:	e0db      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b73      	ldr	r3, [pc, #460]	; (8002644 <HAL_RCC_GetSysClockFreq+0x204>)
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002478:	e0db      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800247a:	4b73      	ldr	r3, [pc, #460]	; (8002648 <HAL_RCC_GetSysClockFreq+0x208>)
 800247c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800247e:	e0d8      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002480:	4b6f      	ldr	r3, [pc, #444]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002488:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d063      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002496:	4b6a      	ldr	r3, [pc, #424]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	099b      	lsrs	r3, r3, #6
 800249c:	2200      	movs	r2, #0
 800249e:	63bb      	str	r3, [r7, #56]	; 0x38
 80024a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
 80024aa:	2300      	movs	r3, #0
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
 80024ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024b2:	4622      	mov	r2, r4
 80024b4:	462b      	mov	r3, r5
 80024b6:	f04f 0000 	mov.w	r0, #0
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	0159      	lsls	r1, r3, #5
 80024c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c4:	0150      	lsls	r0, r2, #5
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4621      	mov	r1, r4
 80024cc:	1a51      	subs	r1, r2, r1
 80024ce:	6139      	str	r1, [r7, #16]
 80024d0:	4629      	mov	r1, r5
 80024d2:	eb63 0301 	sbc.w	r3, r3, r1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024e4:	4659      	mov	r1, fp
 80024e6:	018b      	lsls	r3, r1, #6
 80024e8:	4651      	mov	r1, sl
 80024ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ee:	4651      	mov	r1, sl
 80024f0:	018a      	lsls	r2, r1, #6
 80024f2:	4651      	mov	r1, sl
 80024f4:	ebb2 0801 	subs.w	r8, r2, r1
 80024f8:	4659      	mov	r1, fp
 80024fa:	eb63 0901 	sbc.w	r9, r3, r1
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800250a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800250e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002512:	4690      	mov	r8, r2
 8002514:	4699      	mov	r9, r3
 8002516:	4623      	mov	r3, r4
 8002518:	eb18 0303 	adds.w	r3, r8, r3
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	462b      	mov	r3, r5
 8002520:	eb49 0303 	adc.w	r3, r9, r3
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002532:	4629      	mov	r1, r5
 8002534:	024b      	lsls	r3, r1, #9
 8002536:	4621      	mov	r1, r4
 8002538:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800253c:	4621      	mov	r1, r4
 800253e:	024a      	lsls	r2, r1, #9
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002546:	2200      	movs	r2, #0
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
 800254a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800254c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002550:	f7fd fe42 	bl	80001d8 <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4613      	mov	r3, r2
 800255a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800255c:	e058      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255e:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	2200      	movs	r2, #0
 8002566:	4618      	mov	r0, r3
 8002568:	4611      	mov	r1, r2
 800256a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
 8002574:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002578:	4642      	mov	r2, r8
 800257a:	464b      	mov	r3, r9
 800257c:	f04f 0000 	mov.w	r0, #0
 8002580:	f04f 0100 	mov.w	r1, #0
 8002584:	0159      	lsls	r1, r3, #5
 8002586:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800258a:	0150      	lsls	r0, r2, #5
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4641      	mov	r1, r8
 8002592:	ebb2 0a01 	subs.w	sl, r2, r1
 8002596:	4649      	mov	r1, r9
 8002598:	eb63 0b01 	sbc.w	fp, r3, r1
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025b0:	ebb2 040a 	subs.w	r4, r2, sl
 80025b4:	eb63 050b 	sbc.w	r5, r3, fp
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	00eb      	lsls	r3, r5, #3
 80025c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025c6:	00e2      	lsls	r2, r4, #3
 80025c8:	4614      	mov	r4, r2
 80025ca:	461d      	mov	r5, r3
 80025cc:	4643      	mov	r3, r8
 80025ce:	18e3      	adds	r3, r4, r3
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	464b      	mov	r3, r9
 80025d4:	eb45 0303 	adc.w	r3, r5, r3
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025e6:	4629      	mov	r1, r5
 80025e8:	028b      	lsls	r3, r1, #10
 80025ea:	4621      	mov	r1, r4
 80025ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025f0:	4621      	mov	r1, r4
 80025f2:	028a      	lsls	r2, r1, #10
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025fa:	2200      	movs	r2, #0
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	61fa      	str	r2, [r7, #28]
 8002600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002604:	f7fd fde8 	bl	80001d8 <__aeabi_uldivmod>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4613      	mov	r3, r2
 800260e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	0c1b      	lsrs	r3, r3, #16
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	3301      	adds	r3, #1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002620:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800262a:	e002      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetSysClockFreq+0x204>)
 800262e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002634:	4618      	mov	r0, r3
 8002636:	3750      	adds	r7, #80	; 0x50
 8002638:	46bd      	mov	sp, r7
 800263a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	00f42400 	.word	0x00f42400
 8002648:	007a1200 	.word	0x007a1200

0800264c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e18c      	b.n	8002978 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a75      	ldr	r2, [pc, #468]	; (8002838 <HAL_SPI_Init+0x1ec>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d018      	beq.n	800269a <HAL_SPI_Init+0x4e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a73      	ldr	r2, [pc, #460]	; (800283c <HAL_SPI_Init+0x1f0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_SPI_Init+0x4e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a72      	ldr	r2, [pc, #456]	; (8002840 <HAL_SPI_Init+0x1f4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00e      	beq.n	800269a <HAL_SPI_Init+0x4e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a70      	ldr	r2, [pc, #448]	; (8002844 <HAL_SPI_Init+0x1f8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d009      	beq.n	800269a <HAL_SPI_Init+0x4e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6f      	ldr	r2, [pc, #444]	; (8002848 <HAL_SPI_Init+0x1fc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d004      	beq.n	800269a <HAL_SPI_Init+0x4e>
 8002690:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002694:	486d      	ldr	r0, [pc, #436]	; (800284c <HAL_SPI_Init+0x200>)
 8002696:	f7fe fbdc 	bl	8000e52 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_SPI_Init+0x6a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026aa:	d004      	beq.n	80026b6 <HAL_SPI_Init+0x6a>
 80026ac:	f240 1141 	movw	r1, #321	; 0x141
 80026b0:	4866      	ldr	r0, [pc, #408]	; (800284c <HAL_SPI_Init+0x200>)
 80026b2:	f7fe fbce 	bl	8000e52 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00e      	beq.n	80026dc <HAL_SPI_Init+0x90>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c6:	d009      	beq.n	80026dc <HAL_SPI_Init+0x90>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026d0:	d004      	beq.n	80026dc <HAL_SPI_Init+0x90>
 80026d2:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80026d6:	485d      	ldr	r0, [pc, #372]	; (800284c <HAL_SPI_Init+0x200>)
 80026d8:	f7fe fbbb 	bl	8000e52 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e4:	d008      	beq.n	80026f8 <HAL_SPI_Init+0xac>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <HAL_SPI_Init+0xac>
 80026ee:	f240 1143 	movw	r1, #323	; 0x143
 80026f2:	4856      	ldr	r0, [pc, #344]	; (800284c <HAL_SPI_Init+0x200>)
 80026f4:	f7fe fbad 	bl	8000e52 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002700:	d00d      	beq.n	800271e <HAL_SPI_Init+0xd2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HAL_SPI_Init+0xd2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002712:	d004      	beq.n	800271e <HAL_SPI_Init+0xd2>
 8002714:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002718:	484c      	ldr	r0, [pc, #304]	; (800284c <HAL_SPI_Init+0x200>)
 800271a:	f7fe fb9a 	bl	8000e52 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d020      	beq.n	8002768 <HAL_SPI_Init+0x11c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	2b08      	cmp	r3, #8
 800272c:	d01c      	beq.n	8002768 <HAL_SPI_Init+0x11c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	2b10      	cmp	r3, #16
 8002734:	d018      	beq.n	8002768 <HAL_SPI_Init+0x11c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	2b18      	cmp	r3, #24
 800273c:	d014      	beq.n	8002768 <HAL_SPI_Init+0x11c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	2b20      	cmp	r3, #32
 8002744:	d010      	beq.n	8002768 <HAL_SPI_Init+0x11c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	2b28      	cmp	r3, #40	; 0x28
 800274c:	d00c      	beq.n	8002768 <HAL_SPI_Init+0x11c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	2b30      	cmp	r3, #48	; 0x30
 8002754:	d008      	beq.n	8002768 <HAL_SPI_Init+0x11c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	2b38      	cmp	r3, #56	; 0x38
 800275c:	d004      	beq.n	8002768 <HAL_SPI_Init+0x11c>
 800275e:	f240 1145 	movw	r1, #325	; 0x145
 8002762:	483a      	ldr	r0, [pc, #232]	; (800284c <HAL_SPI_Init+0x200>)
 8002764:	f7fe fb75 	bl	8000e52 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_SPI_Init+0x136>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	2b80      	cmp	r3, #128	; 0x80
 8002776:	d004      	beq.n	8002782 <HAL_SPI_Init+0x136>
 8002778:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800277c:	4833      	ldr	r0, [pc, #204]	; (800284c <HAL_SPI_Init+0x200>)
 800277e:	f7fe fb68 	bl	8000e52 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_SPI_Init+0x150>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	2b10      	cmp	r3, #16
 8002790:	d004      	beq.n	800279c <HAL_SPI_Init+0x150>
 8002792:	f240 1147 	movw	r1, #327	; 0x147
 8002796:	482d      	ldr	r0, [pc, #180]	; (800284c <HAL_SPI_Init+0x200>)
 8002798:	f7fe fb5b 	bl	8000e52 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d155      	bne.n	8002850 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_SPI_Init+0x172>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d004      	beq.n	80027be <HAL_SPI_Init+0x172>
 80027b4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80027b8:	4824      	ldr	r0, [pc, #144]	; (800284c <HAL_SPI_Init+0x200>)
 80027ba:	f7fe fb4a 	bl	8000e52 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_SPI_Init+0x18c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d004      	beq.n	80027d8 <HAL_SPI_Init+0x18c>
 80027ce:	f240 114b 	movw	r1, #331	; 0x14b
 80027d2:	481e      	ldr	r0, [pc, #120]	; (800284c <HAL_SPI_Init+0x200>)
 80027d4:	f7fe fb3d 	bl	8000e52 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027e0:	d125      	bne.n	800282e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d05d      	beq.n	80028a6 <HAL_SPI_Init+0x25a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d059      	beq.n	80028a6 <HAL_SPI_Init+0x25a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d055      	beq.n	80028a6 <HAL_SPI_Init+0x25a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	2b18      	cmp	r3, #24
 8002800:	d051      	beq.n	80028a6 <HAL_SPI_Init+0x25a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	2b20      	cmp	r3, #32
 8002808:	d04d      	beq.n	80028a6 <HAL_SPI_Init+0x25a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	2b28      	cmp	r3, #40	; 0x28
 8002810:	d049      	beq.n	80028a6 <HAL_SPI_Init+0x25a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	2b30      	cmp	r3, #48	; 0x30
 8002818:	d045      	beq.n	80028a6 <HAL_SPI_Init+0x25a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	2b38      	cmp	r3, #56	; 0x38
 8002820:	d041      	beq.n	80028a6 <HAL_SPI_Init+0x25a>
 8002822:	f240 114f 	movw	r1, #335	; 0x14f
 8002826:	4809      	ldr	r0, [pc, #36]	; (800284c <HAL_SPI_Init+0x200>)
 8002828:	f7fe fb13 	bl	8000e52 <assert_failed>
 800282c:	e03b      	b.n	80028a6 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	61da      	str	r2, [r3, #28]
 8002834:	e037      	b.n	80028a6 <HAL_SPI_Init+0x25a>
 8002836:	bf00      	nop
 8002838:	40013000 	.word	0x40013000
 800283c:	40003800 	.word	0x40003800
 8002840:	40003c00 	.word	0x40003c00
 8002844:	40013400 	.word	0x40013400
 8002848:	40015000 	.word	0x40015000
 800284c:	0800375c 	.word	0x0800375c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <HAL_SPI_Init+0x24e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d01c      	beq.n	800289a <HAL_SPI_Init+0x24e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2b10      	cmp	r3, #16
 8002866:	d018      	beq.n	800289a <HAL_SPI_Init+0x24e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b18      	cmp	r3, #24
 800286e:	d014      	beq.n	800289a <HAL_SPI_Init+0x24e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b20      	cmp	r3, #32
 8002876:	d010      	beq.n	800289a <HAL_SPI_Init+0x24e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2b28      	cmp	r3, #40	; 0x28
 800287e:	d00c      	beq.n	800289a <HAL_SPI_Init+0x24e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2b30      	cmp	r3, #48	; 0x30
 8002886:	d008      	beq.n	800289a <HAL_SPI_Init+0x24e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	2b38      	cmp	r3, #56	; 0x38
 800288e:	d004      	beq.n	800289a <HAL_SPI_Init+0x24e>
 8002890:	f240 1159 	movw	r1, #345	; 0x159
 8002894:	483a      	ldr	r0, [pc, #232]	; (8002980 <HAL_SPI_Init+0x334>)
 8002896:	f7fe fadc 	bl	8000e52 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7fe fb07 	bl	8000ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	ea42 0103 	orr.w	r1, r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	0c1b      	lsrs	r3, r3, #16
 8002944:	f003 0104 	and.w	r1, r3, #4
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f003 0210 	and.w	r2, r3, #16
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69da      	ldr	r2, [r3, #28]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002966:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	0800375c 	.word	0x0800375c

08002984 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <HAL_SPI_Transmit+0x30>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a8:	d004      	beq.n	80029b4 <HAL_SPI_Transmit+0x30>
 80029aa:	f44f 7142 	mov.w	r1, #776	; 0x308
 80029ae:	4880      	ldr	r0, [pc, #512]	; (8002bb0 <HAL_SPI_Transmit+0x22c>)
 80029b0:	f7fe fa4f 	bl	8000e52 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_SPI_Transmit+0x3e>
 80029be:	2302      	movs	r3, #2
 80029c0:	e128      	b.n	8002c14 <HAL_SPI_Transmit+0x290>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029ca:	f7fe fbd9 	bl	8001180 <HAL_GetTick>
 80029ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d002      	beq.n	80029e6 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
 80029e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029e4:	e10d      	b.n	8002c02 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_SPI_Transmit+0x6e>
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d102      	bne.n	80029f8 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029f6:	e104      	b.n	8002c02 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2203      	movs	r2, #3
 80029fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	88fa      	ldrh	r2, [r7, #6]
 8002a10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3e:	d10f      	bne.n	8002a60 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	2b40      	cmp	r3, #64	; 0x40
 8002a6c:	d007      	beq.n	8002a7e <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a86:	d14b      	bne.n	8002b20 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_SPI_Transmit+0x112>
 8002a90:	8afb      	ldrh	r3, [r7, #22]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d13e      	bne.n	8002b14 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	881a      	ldrh	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	1c9a      	adds	r2, r3, #2
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002aba:	e02b      	b.n	8002b14 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d112      	bne.n	8002af0 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	881a      	ldrh	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	1c9a      	adds	r2, r3, #2
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002aee:	e011      	b.n	8002b14 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002af0:	f7fe fb46 	bl	8001180 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d803      	bhi.n	8002b08 <HAL_SPI_Transmit+0x184>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b06:	d102      	bne.n	8002b0e <HAL_SPI_Transmit+0x18a>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d102      	bne.n	8002b14 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b12:	e076      	b.n	8002c02 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ce      	bne.n	8002abc <HAL_SPI_Transmit+0x138>
 8002b1e:	e04e      	b.n	8002bbe <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_SPI_Transmit+0x1aa>
 8002b28:	8afb      	ldrh	r3, [r7, #22]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d142      	bne.n	8002bb4 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	330c      	adds	r3, #12
 8002b38:	7812      	ldrb	r2, [r2, #0]
 8002b3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b54:	e02e      	b.n	8002bb4 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d113      	bne.n	8002b8c <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	330c      	adds	r3, #12
 8002b6e:	7812      	ldrb	r2, [r2, #0]
 8002b70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b8a:	e013      	b.n	8002bb4 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b8c:	f7fe faf8 	bl	8001180 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d803      	bhi.n	8002ba4 <HAL_SPI_Transmit+0x220>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba2:	d102      	bne.n	8002baa <HAL_SPI_Transmit+0x226>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bae:	e028      	b.n	8002c02 <HAL_SPI_Transmit+0x27e>
 8002bb0:	0800375c 	.word	0x0800375c
    while (hspi->TxXferCount > 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1cb      	bne.n	8002b56 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	6839      	ldr	r1, [r7, #0]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 fcf8 	bl	80035b8 <SPI_EndRxTxTransaction>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e000      	b.n	8002c02 <HAL_SPI_Transmit+0x27e>
  }

error:
 8002c00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c12:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c38:	d112      	bne.n	8002c60 <HAL_SPI_Receive+0x44>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10e      	bne.n	8002c60 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2204      	movs	r2, #4
 8002c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f8f2 	bl	8002e40 <HAL_SPI_TransmitReceive>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	e0ea      	b.n	8002e36 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_SPI_Receive+0x52>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e0e3      	b.n	8002e36 <HAL_SPI_Receive+0x21a>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c76:	f7fe fa83 	bl	8001180 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d002      	beq.n	8002c8e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c8c:	e0ca      	b.n	8002e24 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_SPI_Receive+0x7e>
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c9e:	e0c1      	b.n	8002e24 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	88fa      	ldrh	r2, [r7, #6]
 8002cb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce6:	d10f      	bne.n	8002d08 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d007      	beq.n	8002d26 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d162      	bne.n	8002df4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d2e:	e02e      	b.n	8002d8e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d115      	bne.n	8002d6a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f103 020c 	add.w	r2, r3, #12
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	7812      	ldrb	r2, [r2, #0]
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d68:	e011      	b.n	8002d8e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d6a:	f7fe fa09 	bl	8001180 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d803      	bhi.n	8002d82 <HAL_SPI_Receive+0x166>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d102      	bne.n	8002d88 <HAL_SPI_Receive+0x16c>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d8c:	e04a      	b.n	8002e24 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1cb      	bne.n	8002d30 <HAL_SPI_Receive+0x114>
 8002d98:	e031      	b.n	8002dfe <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d113      	bne.n	8002dd0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	b292      	uxth	r2, r2
 8002db4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dba:	1c9a      	adds	r2, r3, #2
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dce:	e011      	b.n	8002df4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dd0:	f7fe f9d6 	bl	8001180 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d803      	bhi.n	8002de8 <HAL_SPI_Receive+0x1cc>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de6:	d102      	bne.n	8002dee <HAL_SPI_Receive+0x1d2>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d102      	bne.n	8002df4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002df2:	e017      	b.n	8002e24 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1cd      	bne.n	8002d9a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	6839      	ldr	r1, [r7, #0]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fb72 	bl	80034ec <SPI_EndRxTransaction>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	75fb      	strb	r3, [r7, #23]
 8002e20:	e000      	b.n	8002e24 <HAL_SPI_Receive+0x208>
  }

error :
 8002e22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08c      	sub	sp, #48	; 0x30
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <HAL_SPI_TransmitReceive+0x2a>
 8002e60:	f240 417c 	movw	r1, #1148	; 0x47c
 8002e64:	4884      	ldr	r0, [pc, #528]	; (8003078 <HAL_SPI_TransmitReceive+0x238>)
 8002e66:	f7fd fff4 	bl	8000e52 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_SPI_TransmitReceive+0x38>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e18d      	b.n	8003194 <HAL_SPI_TransmitReceive+0x354>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e80:	f7fe f97e 	bl	8001180 <HAL_GetTick>
 8002e84:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d00f      	beq.n	8002ec2 <HAL_SPI_TransmitReceive+0x82>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ea8:	d107      	bne.n	8002eba <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <HAL_SPI_TransmitReceive+0x7a>
 8002eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d003      	beq.n	8002ec2 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ec0:	e15e      	b.n	8003180 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x94>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x94>
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d103      	bne.n	8002edc <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002eda:	e151      	b.n	8003180 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d003      	beq.n	8002ef0 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2205      	movs	r2, #5
 8002eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	887a      	ldrh	r2, [r7, #2]
 8002f06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	887a      	ldrh	r2, [r7, #2]
 8002f12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	d007      	beq.n	8002f44 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f4c:	d178      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_SPI_TransmitReceive+0x11c>
 8002f56:	8b7b      	ldrh	r3, [r7, #26]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d166      	bne.n	800302a <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	881a      	ldrh	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f80:	e053      	b.n	800302a <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x188>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0x188>
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d113      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	881a      	ldrh	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	1c9a      	adds	r2, r3, #2
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d119      	bne.n	800300a <HAL_SPI_TransmitReceive+0x1ca>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d014      	beq.n	800300a <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	b292      	uxth	r2, r2
 8002fec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	1c9a      	adds	r2, r3, #2
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003006:	2301      	movs	r3, #1
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800300a:	f7fe f8b9 	bl	8001180 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003016:	429a      	cmp	r2, r3
 8003018:	d807      	bhi.n	800302a <HAL_SPI_TransmitReceive+0x1ea>
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d003      	beq.n	800302a <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003028:	e0aa      	b.n	8003180 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1a6      	bne.n	8002f82 <HAL_SPI_TransmitReceive+0x142>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1a1      	bne.n	8002f82 <HAL_SPI_TransmitReceive+0x142>
 800303e:	e07f      	b.n	8003140 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_SPI_TransmitReceive+0x20e>
 8003048:	8b7b      	ldrh	r3, [r7, #26]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d16e      	bne.n	800312c <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003074:	e05a      	b.n	800312c <HAL_SPI_TransmitReceive+0x2ec>
 8003076:	bf00      	nop
 8003078:	0800375c 	.word	0x0800375c
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b02      	cmp	r3, #2
 8003088:	d11c      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x284>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d017      	beq.n	80030c4 <HAL_SPI_TransmitReceive+0x284>
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	2b01      	cmp	r3, #1
 8003098:	d114      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	330c      	adds	r3, #12
 80030a4:	7812      	ldrb	r2, [r2, #0]
 80030a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d119      	bne.n	8003106 <HAL_SPI_TransmitReceive+0x2c6>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d014      	beq.n	8003106 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003102:	2301      	movs	r3, #1
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003106:	f7fe f83b 	bl	8001180 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003112:	429a      	cmp	r2, r3
 8003114:	d803      	bhi.n	800311e <HAL_SPI_TransmitReceive+0x2de>
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d102      	bne.n	8003124 <HAL_SPI_TransmitReceive+0x2e4>
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	2b00      	cmp	r3, #0
 8003122:	d103      	bne.n	800312c <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800312a:	e029      	b.n	8003180 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1a2      	bne.n	800307c <HAL_SPI_TransmitReceive+0x23c>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d19d      	bne.n	800307c <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003142:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fa37 	bl	80035b8 <SPI_EndRxTxTransaction>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d006      	beq.n	800315e <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800315c:	e010      	b.n	8003180 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10b      	bne.n	800317e <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	e000      	b.n	8003180 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 800317e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003190:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003194:	4618      	mov	r0, r3
 8003196:	3730      	adds	r7, #48	; 0x30
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10e      	bne.n	80031dc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d009      	beq.n	80031dc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d004      	beq.n	80031dc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	4798      	blx	r3
    return;
 80031da:	e0ce      	b.n	800337a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_SPI_IRQHandler+0x5e>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
    return;
 80031f8:	e0bf      	b.n	800337a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10a      	bne.n	800321a <HAL_SPI_IRQHandler+0x7e>
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80b0 	beq.w	800337a <HAL_SPI_IRQHandler+0x1de>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80aa 	beq.w	800337a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	d023      	beq.n	8003278 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b03      	cmp	r3, #3
 800323a:	d011      	beq.n	8003260 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f043 0204 	orr.w	r2, r3, #4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	e00b      	b.n	8003278 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	693b      	ldr	r3, [r7, #16]
        return;
 8003276:	e080      	b.n	800337a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d014      	beq.n	80032ac <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	f043 0201 	orr.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00c      	beq.n	80032d0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	f043 0208 	orr.w	r2, r3, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d04f      	beq.n	8003378 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032e6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <HAL_SPI_IRQHandler+0x168>
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d034      	beq.n	800336e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0203 	bic.w	r2, r2, #3
 8003312:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d011      	beq.n	8003340 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003320:	4a17      	ldr	r2, [pc, #92]	; (8003380 <HAL_SPI_IRQHandler+0x1e4>)
 8003322:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe f899 	bl	8001460 <HAL_DMA_Abort_IT>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003344:	2b00      	cmp	r3, #0
 8003346:	d016      	beq.n	8003376 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334c:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <HAL_SPI_IRQHandler+0x1e4>)
 800334e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe f883 	bl	8001460 <HAL_DMA_Abort_IT>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003364:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800336c:	e003      	b.n	8003376 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f808 	bl	8003384 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003374:	e000      	b.n	8003378 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003376:	bf00      	nop
    return;
 8003378:	bf00      	nop
  }
}
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	080033b5 	.word	0x080033b5

08003384 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033a6:	b2db      	uxtb	r3, r3
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f7ff ffd8 	bl	8003384 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033ec:	f7fd fec8 	bl	8001180 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	4413      	add	r3, r2
 80033fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033fc:	f7fd fec0 	bl	8001180 <HAL_GetTick>
 8003400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003402:	4b39      	ldr	r3, [pc, #228]	; (80034e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	0d1b      	lsrs	r3, r3, #20
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	fb02 f303 	mul.w	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003412:	e054      	b.n	80034be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d050      	beq.n	80034be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800341c:	f7fd feb0 	bl	8001180 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	429a      	cmp	r2, r3
 800342a:	d902      	bls.n	8003432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d13d      	bne.n	80034ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344a:	d111      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003454:	d004      	beq.n	8003460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345e:	d107      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800346e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003478:	d10f      	bne.n	800349a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e017      	b.n	80034de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4013      	ands	r3, r2
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d19b      	bne.n	8003414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000000 	.word	0x20000000

080034ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003500:	d111      	bne.n	8003526 <SPI_EndRxTransaction+0x3a>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800350a:	d004      	beq.n	8003516 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003514:	d107      	bne.n	8003526 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003524:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352e:	d12a      	bne.n	8003586 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003538:	d012      	beq.n	8003560 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2200      	movs	r2, #0
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff ff49 	bl	80033dc <SPI_WaitFlagStateUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d02d      	beq.n	80035ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e026      	b.n	80035ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2200      	movs	r2, #0
 8003568:	2101      	movs	r1, #1
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7ff ff36 	bl	80033dc <SPI_WaitFlagStateUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01a      	beq.n	80035ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e013      	b.n	80035ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2200      	movs	r2, #0
 800358e:	2101      	movs	r1, #1
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f7ff ff23 	bl	80033dc <SPI_WaitFlagStateUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e000      	b.n	80035ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <SPI_EndRxTxTransaction+0x7c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <SPI_EndRxTxTransaction+0x80>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	0d5b      	lsrs	r3, r3, #21
 80035d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035e2:	d112      	bne.n	800360a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2200      	movs	r2, #0
 80035ec:	2180      	movs	r1, #128	; 0x80
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff fef4 	bl	80033dc <SPI_WaitFlagStateUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e00f      	b.n	800362a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3b01      	subs	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b80      	cmp	r3, #128	; 0x80
 8003622:	d0f2      	beq.n	800360a <SPI_EndRxTxTransaction+0x52>
 8003624:	e000      	b.n	8003628 <SPI_EndRxTxTransaction+0x70>
        break;
 8003626:	bf00      	nop
  }

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000000 	.word	0x20000000
 8003638:	165e9f81 	.word	0x165e9f81

0800363c <memset>:
 800363c:	4402      	add	r2, r0
 800363e:	4603      	mov	r3, r0
 8003640:	4293      	cmp	r3, r2
 8003642:	d100      	bne.n	8003646 <memset+0xa>
 8003644:	4770      	bx	lr
 8003646:	f803 1b01 	strb.w	r1, [r3], #1
 800364a:	e7f9      	b.n	8003640 <memset+0x4>

0800364c <__libc_init_array>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	4d0d      	ldr	r5, [pc, #52]	; (8003684 <__libc_init_array+0x38>)
 8003650:	4c0d      	ldr	r4, [pc, #52]	; (8003688 <__libc_init_array+0x3c>)
 8003652:	1b64      	subs	r4, r4, r5
 8003654:	10a4      	asrs	r4, r4, #2
 8003656:	2600      	movs	r6, #0
 8003658:	42a6      	cmp	r6, r4
 800365a:	d109      	bne.n	8003670 <__libc_init_array+0x24>
 800365c:	4d0b      	ldr	r5, [pc, #44]	; (800368c <__libc_init_array+0x40>)
 800365e:	4c0c      	ldr	r4, [pc, #48]	; (8003690 <__libc_init_array+0x44>)
 8003660:	f000 f818 	bl	8003694 <_init>
 8003664:	1b64      	subs	r4, r4, r5
 8003666:	10a4      	asrs	r4, r4, #2
 8003668:	2600      	movs	r6, #0
 800366a:	42a6      	cmp	r6, r4
 800366c:	d105      	bne.n	800367a <__libc_init_array+0x2e>
 800366e:	bd70      	pop	{r4, r5, r6, pc}
 8003670:	f855 3b04 	ldr.w	r3, [r5], #4
 8003674:	4798      	blx	r3
 8003676:	3601      	adds	r6, #1
 8003678:	e7ee      	b.n	8003658 <__libc_init_array+0xc>
 800367a:	f855 3b04 	ldr.w	r3, [r5], #4
 800367e:	4798      	blx	r3
 8003680:	3601      	adds	r6, #1
 8003682:	e7f2      	b.n	800366a <__libc_init_array+0x1e>
 8003684:	080037ac 	.word	0x080037ac
 8003688:	080037ac 	.word	0x080037ac
 800368c:	080037ac 	.word	0x080037ac
 8003690:	080037b0 	.word	0x080037b0

08003694 <_init>:
 8003694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003696:	bf00      	nop
 8003698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369a:	bc08      	pop	{r3}
 800369c:	469e      	mov	lr, r3
 800369e:	4770      	bx	lr

080036a0 <_fini>:
 80036a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a2:	bf00      	nop
 80036a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a6:	bc08      	pop	{r3}
 80036a8:	469e      	mov	lr, r3
 80036aa:	4770      	bx	lr
